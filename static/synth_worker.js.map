{
  "version": 3,
  "sources": ["../node_modules/spessasynth_core/src/utils/loggin.js", "../node_modules/spessasynth_core/src/utils/other.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/stopping_notes/voice_killing.js", "../node_modules/spessasynth_core/src/synthetizer/synth_constants.js", "../node_modules/spessasynth_core/src/externals/stbvorbis_sync/stbvorbis_sync.min.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/unit_converter.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/generator_types.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/volume_envelope.js", "../node_modules/spessasynth_core/src/utils/indexed_array.js", "../node_modules/spessasynth_core/src/midi/midi_message.js", "../node_modules/spessasynth_core/src/utils/xg_hacks.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/controller_control/master_parameters.js", "../node_modules/spessasynth_core/src/utils/byte_functions/string.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/enums.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/modulator.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/controller_tables.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/system_exclusive.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/controller_control/reset_controllers.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/soundfont_manager.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/key_modifier_manager.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/lowpass_filter.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/modulator_curves.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/modulation_envelope.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/generator.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/voice.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/stereo_panner.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/stopping_notes/stop_all_channels.js", "../node_modules/spessasynth_core/src/utils/byte_functions/little_endian.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/riff_chunk.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/igen.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/sdta.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/basic_sample.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/samples.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/shdr.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/imod.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/ibag.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/inst.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/pgen.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/pmod.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/pbag.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/phdr.js", "../node_modules/spessasynth_core/src/utils/fill_with_defaults.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_sf2/write.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/basic_zone.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/basic_global_zone.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/basic_instrument_zone.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/basic_instrument.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/combine_zones.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/wsmp.js", "../node_modules/spessasynth_core/src/soundfont/dls/dls_sources.js", "../node_modules/spessasynth_core/src/soundfont/dls/dls_destinations.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/articulator.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/modulator_converter.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/art2.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/rgn2.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/ins.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/lins.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/wave.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/wvpl.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/write_dls/write_dls.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/basic_preset_zone.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/basic_preset.js", "../node_modules/spessasynth_core/src/soundfont/basic_soundfont/basic_soundbank.js", "../node_modules/spessasynth_core/src/soundfont/dls/read_instrument_list.js", "../node_modules/spessasynth_core/src/soundfont/dls/dls_zone.js", "../node_modules/spessasynth_core/src/soundfont/dls/dls_instrument.js", "../node_modules/spessasynth_core/src/soundfont/dls/dls_preset.js", "../node_modules/spessasynth_core/src/soundfont/dls/read_region.js", "../node_modules/spessasynth_core/src/soundfont/dls/read_instrument.js", "../node_modules/spessasynth_core/src/soundfont/dls/articulator_converter.js", "../node_modules/spessasynth_core/src/soundfont/dls/read_articulation.js", "../node_modules/spessasynth_core/src/soundfont/dls/read_lart.js", "../node_modules/spessasynth_core/src/soundfont/dls/dls_sample.js", "../node_modules/spessasynth_core/src/soundfont/dls/read_samples.js", "../node_modules/spessasynth_core/src/soundfont/dls/dls_soundfont.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/generators.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/preset_zones.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/presets.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/instrument_zones.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/instruments.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/modulators.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/zones.js", "../node_modules/spessasynth_core/src/soundfont/read_sf2/soundfont.js", "../node_modules/spessasynth_core/src/soundfont/load_soundfont.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/soundfont_management/embedded_sound_bank.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/soundfont_management/update_preset_list.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/transpose_all_channels.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/set_master_tuning.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/snapshot/channel_snapshot.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/snapshot/synthesizer_snapshot.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/snapshot/apply_synthesizer_snapshot.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/lfo.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/wavetable_oscillator.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/render_voice.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/stopping_notes/kill_note.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/set_tuning.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/set_modulation_depth.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/data_entry/data_entry_coarse.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/data_entry/awe32.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/data_entry/data_entry_fine.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/controller_control/controller_change.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/stopping_notes/stop_all_notes.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/mute_channel.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/transpose_channel.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/portamento_time.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/note_on.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/stopping_notes/note_off.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/poly_pressure.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/channel_pressure.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/pitch_wheel.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/tuning_control/set_octave_tuning.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/program_change.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/dynamic_modulator_system.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/compute_modulator.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_components/midi_audio_channel.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/engine_methods/create_midi_channel.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/synth_processor_options.js", "../node_modules/spessasynth_core/src/synthetizer/audio_engine/main_processor.js", "../node_modules/spessasynth_core/src/utils/byte_functions/big_endian.js", "../node_modules/spessasynth_core/src/sequencer/process_event.js", "../node_modules/spessasynth_core/src/sequencer/process_tick.js", "../node_modules/spessasynth_core/src/midi/midi_sequence.js", "../node_modules/spessasynth_core/src/utils/byte_functions/variable_length_quantity.js", "../node_modules/spessasynth_core/src/midi/midi_tools/midi_writer.js", "../node_modules/spessasynth_core/src/utils/sysex_detector.js", "../node_modules/spessasynth_core/src/midi/midi_tools/midi_editor.js", "../node_modules/spessasynth_core/src/midi/midi_tools/rmidi_writer.js", "../node_modules/spessasynth_core/src/midi/midi_tools/used_keys_loaded.js", "../node_modules/spessasynth_core/src/midi/midi_tools/get_note_times.js", "../node_modules/spessasynth_core/src/midi/basic_midi.js", "../node_modules/spessasynth_core/src/sequencer/song_control.js", "../node_modules/spessasynth_core/src/sequencer/play.js", "../node_modules/spessasynth_core/src/sequencer/events.js", "../node_modules/spessasynth_core/src/sequencer/sequencer_engine.js", "../node_modules/spessasynth_core/src/externals/fflate/fflate.min.js", "../node_modules/spessasynth_core/src/midi/xmf_loader.js", "../node_modules/spessasynth_core/src/midi/midi_loader.js", "../node_modules/spessasynth_core/index.js", "../src/website/js/manager/custom_synth/worker_thread/worker_message.js", "../src/website/js/manager/custom_synth/worker_thread/midi_data.js", "../src/website/js/manager/extra_bank_id.js", "../src/website/js/manager/custom_synth/worker_thread/render_audio.js", "../src/website/js/manager/custom_synth/worker_thread/export_sf.js", "../src/website/js/manager/custom_synth/worker_thread/export_midi.js", "../src/website/js/manager/custom_synth/worker_thread/export_rmidi.js", "../src/website/js/manager/custom_synth/worker_thread/synth_worker.js"],
  "sourcesContent": ["let ENABLE_INFO = false;\nlet ENABLE_WARN = true;\nlet ENABLE_GROUP = false;\nlet ENABLE_TABLE = true;\n\n/**\n * Enables or disables looging\n * @param enableInfo {boolean} - enables info\n * @param enableWarn {boolean} - enables warning\n * @param enableGroup {boolean} - enables groups\n * @param enableTable {boolean} - enables tables\n */\nexport function SpessaSynthLogging(enableInfo, enableWarn, enableGroup, enableTable)\n{\n    ENABLE_INFO = enableInfo;\n    ENABLE_WARN = enableWarn;\n    ENABLE_GROUP = enableGroup;\n    ENABLE_TABLE = enableTable;\n}\n\n/**\n * @param message {...any}\n */\nexport function SpessaSynthInfo(...message)\n{\n    if (ENABLE_INFO)\n    {\n        console.info(...message);\n    }\n}\n\n/**\n * @param message {...any}\n */\nexport function SpessaSynthWarn(...message)\n{\n    if (ENABLE_WARN)\n    {\n        console.warn(...message);\n    }\n}\n\n/**\n * @param message {...any} the message\n */\nexport function SpessaSynthGroup(...message)\n{\n    if (ENABLE_GROUP)\n    {\n        console.group(...message);\n    }\n}\n\n/**\n * @param message {...any} the message\n */\nexport function SpessaSynthGroupCollapsed(...message)\n{\n    if (ENABLE_GROUP)\n    {\n        console.groupCollapsed(...message);\n    }\n}\n\nexport function SpessaSynthGroupEnd()\n{\n    if (ENABLE_GROUP)\n    {\n        console.groupEnd();\n    }\n}", "/**\n * other.js\n * purpose: contains some useful functions that don't belong in any specific category\n */\n\n/**\n * Formats the given seconds to nice readable time\n * @param totalSeconds {number} time in seconds\n * @return {{seconds: number, minutes: number, time: string}}\n */\nexport function formatTime(totalSeconds)\n{\n    totalSeconds = Math.floor(totalSeconds);\n    let minutes = Math.floor(totalSeconds / 60);\n    let seconds = Math.round(totalSeconds - (minutes * 60));\n    return {\n        \"minutes\": minutes,\n        \"seconds\": seconds,\n        \"time\": `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`\n    };\n}\n\n/**\n * @param fileName {string}\n * @returns {string}\n */\nexport function formatTitle(fileName)\n{\n    return fileName\n        .trim()\n        .replaceAll(\".mid\", \"\")\n        .replaceAll(\".kar\", \"\")\n        .replaceAll(\".rmi\", \"\")\n        .replaceAll(\".xmf\", \"\")\n        .replaceAll(\".mxmf\", \"\")\n        .replaceAll(\"_\", \" \")\n        .trim();\n}\n\n/**\n * Does what it says\n * @param arr {number[]|Uint8Array}\n * @returns {string}\n */\nexport function arrayToHexString(arr)\n{\n    let hexString = \"\";\n    \n    for (let i = 0; i < arr.length; i++)\n    {\n        const hex = arr[i].toString(16).padStart(2, \"0\").toUpperCase();\n        hexString += hex;\n        hexString += \" \";\n    }\n    \n    return hexString;\n}\n\n/**\n * @param eventData {Uint8Array}\n * @returns {Uint8Array}\n */\nexport function sanitizeKarLyrics(eventData)\n{\n    // for KAR files:\n    // https://www.mixagesoftware.com/en/midikit/help/HTML/karaoke_formats.html\n    // \"/\" is the newline character\n    // \"\\\" is also the newline character\n    // \"\\\" ASCII code is 92\n    // \"/\" ASCII code is 47\n    // newline ASCII code is 10\n    const sanitized = [];\n    for (let byte of eventData)\n    {\n        if (byte === 47 || byte === 92)\n        {\n            byte = 10;\n        }\n        sanitized.push(byte);\n    }\n    return new Uint8Array(sanitized);\n}\n\nexport const consoleColors = {\n    warn: \"color: orange;\",\n    unrecognized: \"color: red;\",\n    info: \"color: aqua;\",\n    recognized: \"color: lime\",\n    value: \"color: yellow; background-color: black;\"\n};\n\n\n", "/**\n * @param channel {MidiAudioChannel}\n * @param voice {Voice}\n * @return {number}\n */\nfunction getPriority(channel, voice)\n{\n    let priority = 0;\n    if (channel.drumChannel)\n    {\n        // important\n        priority += 5;\n    }\n    if (voice.isInRelease)\n    {\n        // not important\n        priority -= 5;\n    }\n    // less velocity = less important\n    priority += voice.velocity / 25; // map to 0-5\n    // the newer, more important\n    priority -= voice.volumeEnvelope.state;\n    if (voice.isInRelease)\n    {\n        priority -= 5;\n    }\n    priority -= voice.volumeEnvelope.currentAttenuationDb / 50;\n    return priority;\n}\n\n/**\n * @this {SpessaSynthProcessor}\n * @param amount {number}\n */\nexport function voiceKilling(amount)\n{\n    let allVoices = [];\n    for (const channel of this.midiAudioChannels)\n    {\n        for (const voice of channel.voices)\n        {\n            if (!voice.finished)\n            {\n                const priority = getPriority(channel, voice);\n                allVoices.push({ channel, voice, priority });\n            }\n        }\n    }\n    \n    // Step 2: Sort voices by priority (ascending order)\n    allVoices.sort((a, b) => a.priority - b.priority);\n    const voicesToRemove = allVoices.slice(0, amount);\n    \n    for (const { channel, voice } of voicesToRemove)\n    {\n        const index = channel.voices.indexOf(voice);\n        if (index > -1)\n        {\n            channel.voices.splice(index, 1);\n        }\n    }\n}\n\n", "/**\n * Synthesizer's default voice cap\n * @type {number}\n */\nexport const VOICE_CAP = 350;\n/**\n * Default MIDI drum channel\n * @type {number}\n */\nexport const DEFAULT_PERCUSSION = 9;\n/**\n * MIDI channel count\n * @type {number}\n */\nexport const MIDI_CHANNEL_COUNT = 16;\n/**\n * Default bank select and SysEx mode\n * @type {string}\n */\nexport const DEFAULT_SYNTH_MODE = \"gs\";\n\nexport const ALL_CHANNELS_OR_DIFFERENT_ACTION = -1;\n\nexport const EMBEDDED_SOUND_BANK_ID = `SPESSASYNTH_EMBEDDED_BANK_${Math.random()}`;\n\nexport const GENERATOR_OVERRIDE_NO_CHANGE_VALUE = 32767;", "export var stbvorbis=void 0!==stbvorbis?stbvorbis:{};let isReady=!1,readySolver;stbvorbis.isInitialized=new Promise(A=>readySolver=A);var atob=function(A){var I,g,B,E,Q,C,i,h=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",o=\"\",G=0;A=A.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do E=h.indexOf(A.charAt(G++)),Q=h.indexOf(A.charAt(G++)),C=h.indexOf(A.charAt(G++)),i=h.indexOf(A.charAt(G++)),I=E<<2|Q>>4,g=(15&Q)<<4|C>>2,B=(3&C)<<6|i,o+=String.fromCharCode(I),64!==C&&(o+=String.fromCharCode(g)),64!==i&&(o+=String.fromCharCode(B));while(G<A.length);return o};!function(){var A,I,g,B,E,Q,C,i,h,o,G,D,a,S,F,R,s,w,y,c,n,U,$=void 0!==$?$:{};$.wasmBinary=Uint8Array.from(atob(\"\"),function(A){return A.charCodeAt(0)});var $=void 0!==$?$:{},e={};for(A in $)$.hasOwnProperty(A)&&(e[A]=$[A]);$.arguments=[],$.thisProgram=\"./this.program\",$.quit=function(A,I){throw I},$.preRun=[],$.postRun=[];var t=!1,k=!1,N=!1,r=!1;t=\"object\"==typeof window,k=\"function\"==typeof importScripts,N=\"object\"==typeof process&&\"function\"==typeof require&&!t&&!k,r=!t&&!N&&!k;var Y=\"\";function J(A){return $.locateFile?$.locateFile(A,Y):Y+A}N?(Y=__dirname+\"/\",$.read=function A(B,E){var Q;return I||(I=undefined),g||(g=undefined),B=g.normalize(B),Q=I.readFileSync(B),E?Q:Q.toString()},$.readBinary=function A(I){var g=$.read(I,!0);return g.buffer||(g=new Uint8Array(g)),_(g.buffer),g},process.argv.length>1&&($.thisProgram=process.argv[1].replace(/\\\\/g,\"/\")),$.arguments=process.argv.slice(2),\"undefined\"!=typeof module&&(/undefined!=$/),process.on(\"uncaughtException\",function(A){if(!(A instanceof II))throw A}),process.on(\"unhandledRejection\",function(A,I){process.exit(1)}),$.quit=function(A){process.exit(A)},$.inspect=function(){return\"[Emscripten Module object]\"}):r?(\"undefined\"!=typeof read&&($.read=function A(I){return read(I)}),$.readBinary=function A(I){var g;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(I)):(_(\"object\"==typeof(g=read(I,\"binary\"))),g)},\"undefined\"!=typeof scriptArgs?$.arguments=scriptArgs:\"undefined\"!=typeof arguments&&($.arguments=arguments),\"function\"==typeof quit&&($.quit=function(A){quit(A)})):(t||k)&&(t?document.currentScript&&(Y=document.currentScript.src):Y=self.location.href,Y=0!==Y.indexOf(\"blob:\")?Y.split(\"/\").slice(0,-1).join(\"/\")+\"/\":\"\",$.read=function A(I){var g=new XMLHttpRequest;return g.open(\"GET\",I,!1),g.send(null),g.responseText},k&&($.readBinary=function A(I){var g=new XMLHttpRequest;return g.open(\"GET\",I,!1),g.responseType=\"arraybuffer\",g.send(null),new Uint8Array(g.response)}),$.readAsync=function A(I,g,B){var E=new XMLHttpRequest;E.open(\"GET\",I,!0),E.responseType=\"arraybuffer\",E.onload=function A(){if(200==E.status||0==E.status&&E.response){g(E.response);return}B()},E.onerror=B,E.send(null)},$.setWindowTitle=function(A){document.title=A});var f=$.print||(\"undefined\"!=typeof console?console.log.bind(console):\"undefined\"!=typeof print?print:null),H=$.printErr||(\"undefined\"!=typeof printErr?printErr:\"undefined\"!=typeof console&&console.warn.bind(console)||f);for(A in e)e.hasOwnProperty(A)&&($[A]=e[A]);function L(A){var I=S;return S=S+A+15&-16,I}function M(A){var I=h[c>>2],g=I+A+15&-16;return(h[c>>2]=g,g>=AN&&!Ae())?(h[c>>2]=I,0):I}function d(A,I){return I||(I=16),A=Math.ceil(A/I)*I}function q(A){switch(A){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":case\"float\":return 4;case\"i64\":case\"double\":return 8;default:if(\"*\"===A[A.length-1])return 4;if(\"i\"!==A[0])return 0;var I=parseInt(A.substr(1));return _(I%8==0),I/8}}function K(A){K.shown||(K.shown={}),K.shown[A]||(K.shown[A]=1,H(A))}e=void 0;var l={\"f64-rem\":function(A,I){return A%I},debugger:function(){}},u=[];function b(A,I){for(var g=0,B=g;B<g+0;B++)if(!u[B])return u[B]=A,1+B;throw\"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\"}function X(A){u[A-1]=null}var m={};function Z(A,I){if(A){_(I),m[I]||(m[I]={});var g=m[I];return g[A]||(1===I.length?g[A]=function g(){return V(I,A)}:2===I.length?g[A]=function g(B){return V(I,A,[B])}:g[A]=function g(){return V(I,A,Array.prototype.slice.call(arguments))}),g[A]}}function x(A,I,g){return g?+(A>>>0)+4294967296*+(I>>>0):+(A>>>0)+4294967296*+(0|I)}function V(A,I,g){return g&&g.length?$[\"dynCall_\"+A].apply(null,[I].concat(g)):$[\"dynCall_\"+A].call(null,I)}var p=0,W=0;function _(A,I){A||IE(\"Assertion failed: \"+I)}function T(A){var I=$[\"_\"+A];return _(I,\"Cannot call unknown function \"+A+\", make sure it is exported\"),I}var v={stackSave:function(){IA()},stackRestore:function(){A9()},arrayToC:function(A){var I,g,B=A5(A.length);return I=A,g=B,E.set(I,g),B},stringToC:function(A){var I=0;if(null!=A&&0!==A){var g=(A.length<<2)+1;I=A5(g),Ai(A,I,g)}return I}},O={string:v.stringToC,array:v.arrayToC};function j(A,I,g,B,E){var Q=T(A),C=[],i=0;if(B)for(var h=0;h<B.length;h++){var o=O[g[h]];o?(0===i&&(i=IA()),C[h]=o(B[h])):C[h]=B[h]}var G,D=Q.apply(null,C);return D=(G=D,\"string\"===I?Ag(G):\"boolean\"===I?Boolean(G):G),0!==i&&A9(i),D}function P(A,I,g,B){switch(\"*\"===(g=g||\"i8\").charAt(g.length-1)&&(g=\"i32\"),g){case\"i1\":case\"i8\":E[A>>0]=I;break;case\"i16\":C[A>>1]=I;break;case\"i32\":h[A>>2]=I;break;case\"i64\":tempI64=[I>>>0,+Ax(tempDouble=I)>=1?tempDouble>0?(0|Ap(+A6(tempDouble/4294967296),4294967295))>>>0:~~+AV((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0,],h[A>>2]=tempI64[0],h[A+4>>2]=tempI64[1];break;case\"float\":G[A>>2]=I;break;case\"double\":D[A>>3]=I;break;default:IE(\"invalid type for setValue: \"+g)}}function z(A,I,g){switch(\"*\"===(I=I||\"i8\").charAt(I.length-1)&&(I=\"i32\"),I){case\"i1\":case\"i8\":return E[A>>0];case\"i16\":return C[A>>1];case\"i32\":case\"i64\":return h[A>>2];case\"float\":return G[A>>2];case\"double\":return D[A>>3];default:IE(\"invalid type for getValue: \"+I)}return null}function AA(A,I,g,B){\"number\"==typeof A?(i=!0,o=A):(i=!1,o=A.length);var C=\"string\"==typeof I?I:null;if(G=4==g?B:[\"function\"==typeof A8?A8:L,A5,L,M,][void 0===g?2:g](Math.max(o,C?1:I.length)),i){for(B=G,_((3&G)==0),D=G+(-4&o);B<D;B+=4)h[B>>2]=0;for(D=G+o;B<D;)E[B++>>0]=0;return G}if(\"i8\"===C)return A.subarray||A.slice?Q.set(A,G):Q.set(new Uint8Array(A),G),G;for(var i,o,G,D,a,S,F,R=0;R<o;){var s=A[R];if(0===(a=C||I[R])){R++;continue}\"i64\"==a&&(a=\"i32\"),P(G+R,s,a),F!==a&&(S=q(a),F=a),R+=S}return G}function AI(A){return F?A0?A8(A):M(A):L(A)}function Ag(A,I){if(0===I||!A)return\"\";for(var g,B,E,C=0,i=0;C|=B=Q[A+i>>0],(0!=B||I)&&(i++,!I||i!=I););I||(I=i);var h=\"\";if(C<128){for(;I>0;)E=String.fromCharCode.apply(String,Q.subarray(A,A+Math.min(I,1024))),h=h?h+E:E,A+=1024,I-=1024;return h}return g=A,function A(I,g){for(var B=g;I[B];)++B;if(B-g>16&&I.subarray&&AQ)return AQ.decode(I.subarray(g,B));for(var E,Q,C,i,h,o,G=\"\";;){if(!(E=I[g++]))return G;if(!(128&E)){G+=String.fromCharCode(E);continue}if(Q=63&I[g++],(224&E)==192){G+=String.fromCharCode((31&E)<<6|Q);continue}if(C=63&I[g++],(240&E)==224?E=(15&E)<<12|Q<<6|C:(i=63&I[g++],(248&E)==240?E=(7&E)<<18|Q<<12|C<<6|i:(h=63&I[g++],E=(252&E)==248?(3&E)<<24|Q<<18|C<<12|i<<6|h:(1&E)<<30|Q<<24|C<<18|i<<12|h<<6|(o=63&I[g++]))),E<65536)G+=String.fromCharCode(E);else{var D=E-65536;G+=String.fromCharCode(55296|D>>10,56320|1023&D)}}}(Q,g)}function AB(A){for(var I=\"\";;){var g=E[A++>>0];if(!g)return I;I+=String.fromCharCode(g)}}function AE(A,I){return function A(I,g,B){for(var Q=0;Q<I.length;++Q)E[g++>>0]=I.charCodeAt(Q);B||(E[g>>0]=0)}(A,I,!1)}var AQ=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function AC(A,I,g,B){if(!(B>0))return 0;for(var E=g,Q=g+B-1,C=0;C<A.length;++C){var i=A.charCodeAt(C);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&A.charCodeAt(++C)),i<=127){if(g>=Q)break;I[g++]=i}else if(i<=2047){if(g+1>=Q)break;I[g++]=192|i>>6,I[g++]=128|63&i}else if(i<=65535){if(g+2>=Q)break;I[g++]=224|i>>12,I[g++]=128|i>>6&63,I[g++]=128|63&i}else if(i<=2097151){if(g+3>=Q)break;I[g++]=240|i>>18,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}else if(i<=67108863){if(g+4>=Q)break;I[g++]=248|i>>24,I[g++]=128|i>>18&63,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}else{if(g+5>=Q)break;I[g++]=252|i>>30,I[g++]=128|i>>24&63,I[g++]=128|i>>18&63,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}}return I[g]=0,g-E}function Ai(A,I,g){return AC(A,Q,I,g)}function Ah(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&(B=65536+((1023&B)<<10)|1023&A.charCodeAt(++g)),B<=127?++I:B<=2047?I+=2:B<=65535?I+=3:B<=2097151?I+=4:B<=67108863?I+=5:I+=6}return I}var Ao=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function AG(A){for(var I=A,g=I>>1;C[g];)++g;if((I=g<<1)-A>32&&Ao)return Ao.decode(Q.subarray(A,I));for(var B=0,E=\"\";;){var i=C[A+2*B>>1];if(0==i)return E;++B,E+=String.fromCharCode(i)}}function AD(A,I,g){if(void 0===g&&(g=2147483647),g<2)return 0;for(var B=I,E=(g-=2)<2*A.length?g/2:A.length,Q=0;Q<E;++Q){var i=A.charCodeAt(Q);C[I>>1]=i,I+=2}return C[I>>1]=0,I-B}function Aa(A){return 2*A.length}function AS(A){for(var I=0,g=\"\";;){var B=h[A+4*I>>2];if(0==B)return g;if(++I,B>=65536){var E=B-65536;g+=String.fromCharCode(55296|E>>10,56320|1023&E)}else g+=String.fromCharCode(B)}}function AF(A,I,g){if(void 0===g&&(g=2147483647),g<4)return 0;for(var B=I,E=B+g-4,Q=0;Q<A.length;++Q){var C=A.charCodeAt(Q);if(C>=55296&&C<=57343&&(C=65536+((1023&C)<<10)|1023&A.charCodeAt(++Q)),h[I>>2]=C,(I+=4)+4>E)break}return h[I>>2]=0,I-B}function AR(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&++g,I+=4}return I}function As(A){var I=Ah(A)+1,g=A8(I);return g&&AC(A,E,g,I),g}function Aw(A){var I=Ah(A)+1,g=A5(I);return AC(A,E,g,I),g}function Ay(A){return A}function Ac(){var A,I=function A(){var I=Error();if(!I.stack){try{throw Error(0)}catch(g){I=g}if(!I.stack)return\"(no stack trace available)\"}return I.stack.toString()}();return $.extraStackTrace&&(I+=\"\\n\"+$.extraStackTrace()),(A=I).replace(/__Z[\\w\\d_]+/g,function(A){var I,g=I=A;return A===g?A:A+\" [\"+g+\"]\"})}function An(A,I){return A%I>0&&(A+=I-A%I),A}function AU(A){$.buffer=B=A}function A$(){$.HEAP8=E=new Int8Array(B),$.HEAP16=C=new Int16Array(B),$.HEAP32=h=new Int32Array(B),$.HEAPU8=Q=new Uint8Array(B),$.HEAPU16=i=new Uint16Array(B),$.HEAPU32=o=new Uint32Array(B),$.HEAPF32=G=new Float32Array(B),$.HEAPF64=D=new Float64Array(B)}function Ae(){var A=$.usingWasm?65536:16777216,I=2147483648-A;if(h[c>>2]>I)return!1;var g=AN;for(AN=Math.max(AN,16777216);AN<h[c>>2];)AN=AN<=536870912?An(2*AN,A):Math.min(An((3*AN+2147483648)/4,A),I);var B=$.reallocBuffer(AN);return B&&B.byteLength==AN?(AU(B),A$(),!0):(AN=g,!1)}a=S=R=s=w=y=c=0,F=!1,$.reallocBuffer||($.reallocBuffer=function(A){try{if(ArrayBuffer.transfer)I=ArrayBuffer.transfer(B,A);else{var I,g=E;I=new ArrayBuffer(A),new Int8Array(I).set(g)}}catch(Q){return!1}return!!Az(I)&&I});try{(n=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\"byteLength\").get))(new ArrayBuffer(4))}catch(At){n=function(A){return A.byteLength}}var Ak=$.TOTAL_STACK||5242880,AN=$.TOTAL_MEMORY||16777216;function Ar(){return AN}function AY(A){for(;A.length>0;){var I=A.shift();if(\"function\"==typeof I){I();continue}var g=I.func;\"number\"==typeof g?void 0===I.arg?$.dynCall_v(g):$.dynCall_vi(g,I.arg):g(void 0===I.arg?null:I.arg)}}AN<Ak&&H(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+AN+\"! (TOTAL_STACK=\"+Ak+\")\"),$.buffer?B=$.buffer:(\"object\"==typeof WebAssembly&&\"function\"==typeof WebAssembly.Memory?($.wasmMemory=new WebAssembly.Memory({initial:AN/65536}),B=$.wasmMemory.buffer):B=new ArrayBuffer(AN),$.buffer=B),A$();var AJ=[],Af=[],AH=[],AL=[],AM=[],A0=!1,Ad=!1;function Aq(A){AJ.unshift(A)}function AK(A){Af.unshift(A)}function Al(A){AH.unshift(A)}function Au(A){AL.unshift(A)}function Ab(A){AM.unshift(A)}function AX(A,I,g){var B,Q;K(\"writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!\"),g&&(B=E[Q=I+Ah(A)]),Ai(A,I,1/0),g&&(E[Q]=B)}function Am(A,I,g){return A>=0?A:I<=32?2*Math.abs(1<<I-1)+A:Math.pow(2,I)+A}function AZ(A,I,g){if(A<=0)return A;var B=I<=32?Math.abs(1<<I-1):Math.pow(2,I-1);return A>=B&&(I<=32||A>B)&&(A=-2*B+A),A}var Ax=Math.abs,AV=Math.ceil,A6=Math.floor,Ap=Math.min,A7=0,A1=null,AW=null;function A_(A){return A}$.preloadedImages={},$.preloadedAudios={};var AT=\"data:application/octet-stream;base64,\";function A2(A){return String.prototype.startsWith?A.startsWith(AT):0===A.indexOf(AT)}!function A(){var I=\"main.wast\",g=\"main.wasm\",B=\"main.temp.asm.js\";A2(I)||(I=J(I)),A2(g)||(g=J(g)),A2(B)||(B=J(B));var E={global:null,env:null,asm2wasm:l,parent:$},Q=null;function C(A){return A}function i(){try{if($.wasmBinary)return new Uint8Array($.wasmBinary);if($.readBinary)return $.readBinary(g);throw\"both async and sync fetching of the wasm failed\"}catch(A){IE(A)}}$.asmPreload=$.asm;var h=$.reallocBuffer,o=function(A){A=An(A,$.usingWasm?65536:16777216);var I=$.buffer.byteLength;if($.usingWasm)try{var g=$.wasmMemory.grow((A-I)/65536);if(-1!==g)return $.buffer=$.wasmMemory.buffer;return null}catch(B){return null}};$.reallocBuffer=function(A){return\"asmjs\"===G?h(A):o(A)};var G=\"\";$.asm=function(A,I,B){var C;if(!(I=C=I).table){var h,o=$.wasmTableSize;void 0===o&&(o=1024);var G=$.wasmMaxTableSize;\"object\"==typeof WebAssembly&&\"function\"==typeof WebAssembly.Table?void 0!==G?I.table=new WebAssembly.Table({initial:o,maximum:G,element:\"anyfunc\"}):I.table=new WebAssembly.Table({initial:o,element:\"anyfunc\"}):I.table=Array(o),$.wasmTable=I.table}return I.memoryBase||(I.memoryBase=$.STATIC_BASE),I.tableBase||(I.tableBase=0),h=function A(I,B,C){if(\"object\"!=typeof WebAssembly)return H(\"no native wasm support detected\"),!1;if(!($.wasmMemory instanceof WebAssembly.Memory))return H(\"no native wasm Memory in use\"),!1;function h(A,I){if((Q=A.exports).memory){var g,B,E;g=Q.memory,B=$.buffer,g.byteLength<B.byteLength&&H(\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\"),E=new Int8Array(B),new Int8Array(g).set(E),AU(g),A$()}$.asm=Q,$.usingWasm=!0,function A(I){if(A7--,$.monitorRunDependencies&&$.monitorRunDependencies(A7),0==A7&&(null!==A1&&(clearInterval(A1),A1=null),AW)){var g=AW;AW=null,g()}}(\"wasm-instantiate\")}B.memory=$.wasmMemory,E.global={NaN:NaN,Infinity:1/0},E[\"global.Math\"]=Math,E.env=B;if((A7++,$.monitorRunDependencies&&$.monitorRunDependencies(A7)),$.instantiateWasm)try{return $.instantiateWasm(E,h)}catch(o){return H(\"Module.instantiateWasm callback failed with error: \"+o),!1}function G(A){h(A.instance,A.module)}function D(A){(!$.wasmBinary&&(t||k)&&\"function\"==typeof fetch?fetch(g,{credentials:\"same-origin\"}).then(function(A){if(!A.ok)throw\"failed to load wasm binary file at '\"+g+\"'\";return A.arrayBuffer()}).catch(function(){return i()}):new Promise(function(A,I){A(i())})).then(function(A){return WebAssembly.instantiate(A,E)}).then(A).catch(function(A){H(\"failed to asynchronously prepare wasm: \"+A),IE(A)})}return $.wasmBinary||\"function\"!=typeof WebAssembly.instantiateStreaming||A2(g)||\"function\"!=typeof fetch?D(G):WebAssembly.instantiateStreaming(fetch(g,{credentials:\"same-origin\"}),E).then(G).catch(function(A){H(\"wasm streaming compile failed: \"+A),H(\"falling back to ArrayBuffer instantiation\"),D(G)}),{}}(A,I,B),_(h,\"no binaryen method succeeded.\"),h},$.asm}(),S=(a=1024)+4816,Af.push(),$.STATIC_BASE=a,$.STATIC_BUMP=4816;var Av=S;function AO(A){E[Av]=E[A],E[Av+1]=E[A+1],E[Av+2]=E[A+2],E[Av+3]=E[A+3]}function Aj(A){E[Av]=E[A],E[Av+1]=E[A+1],E[Av+2]=E[A+2],E[Av+3]=E[A+3],E[Av+4]=E[A+4],E[Av+5]=E[A+5],E[Av+6]=E[A+6],E[Av+7]=E[A+7]}function AP(A,I,g){var B=g>0?g:Ah(A)+1,E=Array(B),Q=AC(A,E,0,E.length);return I&&(E.length=Q),E}function A4(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(B&=255),I.push(String.fromCharCode(B))}return I.join(\"\")}S+=16,c=L(4),w=(R=s=d(S))+Ak,y=d(w),h[c>>2]=y,F=!0,$.wasmTableSize=4,$.wasmMaxTableSize=4,$.asmGlobalArg={},$.asmLibraryArg={abort:IE,assert:_,enlargeMemory:Ae,getTotalMemory:Ar,abortOnCannotGrowMemory:function A(){IE(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \"+AN+\", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \")},invoke_iii:function A(I,g,B){var E=IA();try{return $.dynCall_iii(I,g,B)}catch(Q){if(A9(E),\"number\"!=typeof Q&&\"longjmp\"!==Q)throw Q;$.setThrew(1,0)}},___assert_fail:function A(I,g,B,E){IE(\"Assertion failed: \"+Ag(I)+\", at: \"+[g?Ag(g):\"unknown filename\",B,E?Ag(E):\"unknown function\",])},___setErrNo:function A(I){return $.___errno_location&&(h[$.___errno_location()>>2]=I),I},_abort:function A(){$.abort()},_emscripten_memcpy_big:function A(I,g,B){return Q.set(Q.subarray(g,g+B),I),I},_llvm_floor_f64:A6,DYNAMICTOP_PTR:c,tempDoublePtr:Av,ABORT:p,STACKTOP:s,STACK_MAX:w};var A3=$.asm($.asmGlobalArg,$.asmLibraryArg,B);$.asm=A3,$.___errno_location=function(){return $.asm.___errno_location.apply(null,arguments)};var Az=$._emscripten_replace_memory=function(){return $.asm._emscripten_replace_memory.apply(null,arguments)};$._free=function(){return $.asm._free.apply(null,arguments)};var A8=$._malloc=function(){return $.asm._malloc.apply(null,arguments)};$._memcpy=function(){return $.asm._memcpy.apply(null,arguments)},$._memset=function(){return $.asm._memset.apply(null,arguments)},$._sbrk=function(){return $.asm._sbrk.apply(null,arguments)},$._stb_vorbis_js_channels=function(){return $.asm._stb_vorbis_js_channels.apply(null,arguments)},$._stb_vorbis_js_close=function(){return $.asm._stb_vorbis_js_close.apply(null,arguments)},$._stb_vorbis_js_decode=function(){return $.asm._stb_vorbis_js_decode.apply(null,arguments)},$._stb_vorbis_js_open=function(){return $.asm._stb_vorbis_js_open.apply(null,arguments)},$._stb_vorbis_js_sample_rate=function(){return $.asm._stb_vorbis_js_sample_rate.apply(null,arguments)},$.establishStackSpace=function(){return $.asm.establishStackSpace.apply(null,arguments)},$.getTempRet0=function(){return $.asm.getTempRet0.apply(null,arguments)},$.runPostSets=function(){return $.asm.runPostSets.apply(null,arguments)},$.setTempRet0=function(){return $.asm.setTempRet0.apply(null,arguments)},$.setThrew=function(){return $.asm.setThrew.apply(null,arguments)};var A5=$.stackAlloc=function(){return $.asm.stackAlloc.apply(null,arguments)},A9=$.stackRestore=function(){return $.asm.stackRestore.apply(null,arguments)},IA=$.stackSave=function(){return $.asm.stackSave.apply(null,arguments)};function II(A){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+A+\")\",this.status=A}function Ig(A){if(A=A||$.arguments,!(A7>0))!function A(){if($.preRun)for(\"function\"==typeof $.preRun&&($.preRun=[$.preRun]);$.preRun.length;)Aq($.preRun.shift());AY(AJ)}(),!(A7>0)&&($.calledRun||($.setStatus?($.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){$.setStatus(\"\")},1),I()},1)):I()));function I(){!$.calledRun&&($.calledRun=!0,p||(A0||(A0=!0,AY(Af)),AY(AH),$.onRuntimeInitialized&&$.onRuntimeInitialized(),function A(){if($.postRun)for(\"function\"==typeof $.postRun&&($.postRun=[$.postRun]);$.postRun.length;)Ab($.postRun.shift());AY(AM)}()))}}function IB(A,I){(!I||!$.noExitRuntime||0!==A)&&($.noExitRuntime||(p=!0,W=A,s=U,AY(AL),Ad=!0,$.onExit&&$.onExit(A)),$.quit(A,new II(A)))}function IE(A){throw $.onAbort&&$.onAbort(A),void 0!==A?(f(A),H(A),A=JSON.stringify(A)):A=\"\",p=!0,W=1,\"abort(\"+A+\"). Build with -s ASSERTIONS=1 for more info.\"}if($.dynCall_iii=function(){return $.asm.dynCall_iii.apply(null,arguments)},$.asm=A3,$.ccall=j,$.cwrap=function A(I,g,B,E){var Q=(B=B||[]).every(function(A){return\"number\"===A});return\"string\"!==g&&Q&&!E?T(I):function(){return j(I,g,B,arguments,E)}},II.prototype=Error(),II.prototype.constructor=II,AW=function A(){$.calledRun||Ig(),$.calledRun||(AW=A)},$.run=Ig,$.abort=IE,$.preInit)for(\"function\"==typeof $.preInit&&($.preInit=[$.preInit]);$.preInit.length>0;)$.preInit.pop()();$.noExitRuntime=!0,Ig(),$.onRuntimeInitialized=()=>{isReady=!0,readySolver()},stbvorbis.decode=function(A){return function A(I){if(!isReady)throw Error(\"SF3 decoder has not been initialized yet. Did you await synth.isReady?\");var g={};function B(A){return new Int32Array($.HEAPU8.buffer,A,1)[0]}function E(A,I){var g=new ArrayBuffer(I*Float32Array.BYTES_PER_ELEMENT),B=new Float32Array(g);return B.set(new Float32Array($.HEAPU8.buffer,A,I)),B}g.open=$.cwrap(\"stb_vorbis_js_open\",\"number\",[]),g.close=$.cwrap(\"stb_vorbis_js_close\",\"void\",[\"number\"]),g.channels=$.cwrap(\"stb_vorbis_js_channels\",\"number\",[\"number\"]),g.sampleRate=$.cwrap(\"stb_vorbis_js_sample_rate\",\"number\",[\"number\"]),g.decode=$.cwrap(\"stb_vorbis_js_decode\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]);var Q,C,i,h,o=g.open(),G=(Q=I,C=I.byteLength,i=$._malloc(C),(h=new Uint8Array($.HEAPU8.buffer,i,C)).set(new Uint8Array(Q,0,C)),h),D=$._malloc(4),a=$._malloc(4),S=g.decode(o,G.byteOffset,G.byteLength,D,a);if($._free(G.byteOffset),S<0)throw g.close(o),$._free(D),Error(\"stbvorbis decode failed: \"+S);for(var F=g.channels(o),R=Array(F),s=new Int32Array($.HEAPU32.buffer,B(D),F),w=0;w<F;w++)R[w]=E(s[w],S),$._free(s[w]);var y=g.sampleRate(o);return g.close(o),$._free(B(D)),$._free(D),{data:R,sampleRate:y,eof:!0,error:null}}(A)}}();", "/**\n * unit_converter.js\n * purpose: converts soundfont units into more useable values with the use of lookup tables to improve performance\n */\n\n\n// timecent lookup table\nconst MIN_TIMECENT = -15000;\nconst MAX_TIMECENT = 15000;\nconst timecentLookupTable = new Float32Array(MAX_TIMECENT - MIN_TIMECENT + 1);\nfor (let i = 0; i < timecentLookupTable.length; i++)\n{\n    const timecents = MIN_TIMECENT + i;\n    timecentLookupTable[i] = Math.pow(2, timecents / 1200);\n}\n\n/**\n * Converts timecents to seconds\n * @param timecents {number} timecents\n * @returns {number} seconds\n */\nexport function timecentsToSeconds(timecents)\n{\n    if (timecents <= -32767)\n    {\n        return 0;\n    }\n    return timecentLookupTable[timecents - MIN_TIMECENT];\n}\n\n// abs cent lookup table\nconst MIN_ABS_CENT = -20000; // freqVibLfo\nconst MAX_ABS_CENT = 16500; // filterFc\nconst absoluteCentLookupTable = new Float32Array(MAX_ABS_CENT - MIN_ABS_CENT + 1);\nfor (let i = 0; i < absoluteCentLookupTable.length; i++)\n{\n    const absoluteCents = MIN_ABS_CENT + i;\n    absoluteCentLookupTable[i] = 440 * Math.pow(2, (absoluteCents - 6900) / 1200);\n}\n\n/**\n * Converts absolute cents to hertz\n * @param cents {number} absolute cents\n * @returns {number} hertz\n */\nexport function absCentsToHz(cents)\n{\n    if (cents < MIN_ABS_CENT || cents > MAX_ABS_CENT)\n    {\n        return 440 * Math.pow(2, (cents - 6900) / 1200);\n    }\n    return absoluteCentLookupTable[~~(cents) - MIN_ABS_CENT];\n}\n\n// decibel lookup table (2 points of precision)\nconst MIN_DECIBELS = -1660;\nconst MAX_DECIBELS = 1600;\nconst decibelLookUpTable = new Float32Array((MAX_DECIBELS - MIN_DECIBELS) * 100 + 1);\nfor (let i = 0; i < decibelLookUpTable.length; i++)\n{\n    const decibels = (MIN_DECIBELS * 100 + i) / 100;\n    decibelLookUpTable[i] = Math.pow(10, -decibels / 20);\n}\n\n/**\n * convers decibel attenuation to gain\n * @param decibels {number} the decibel attenuation\n * @returns {number} gain\n */\nexport function decibelAttenuationToGain(decibels)\n{\n    return decibelLookUpTable[Math.floor((decibels - MIN_DECIBELS) * 100)];\n}", "/**\n * @enum {number}\n */\nexport const generatorTypes = {\n    INVALID: -1,                        // invalid generator\n    startAddrsOffset: 0,                // sample control - moves sample start point\n    endAddrOffset: 1,                   // sample control - moves sample end point\n    startloopAddrsOffset: 2,            // loop control - moves loop start point\n    endloopAddrsOffset: 3,              // loop control - moves loop end point\n    startAddrsCoarseOffset: 4,          // sample control - moves sample start point in 32,768 increments\n    modLfoToPitch: 5,                   // pitch modulation - modulation lfo pitch modulation in cents\n    vibLfoToPitch: 6,                   // pitch modulation - vibrato lfo pitch modulation in cents\n    modEnvToPitch: 7,                   // pitch modulation - modulation envelope pitch modulation in cents\n    initialFilterFc: 8,                 // filter - lowpass filter cutoff in cents\n    initialFilterQ: 9,                  // filter - lowpass filter resonance\n    modLfoToFilterFc: 10,               // filter modulation - modulation lfo lowpass filter cutoff in cents\n    modEnvToFilterFc: 11,               // filter modulation - modulation envelope lowpass filter cutoff in cents\n    endAddrsCoarseOffset: 12,           // ample control - move sample end point in 32,768 increments\n    modLfoToVolume: 13,                 // modulation lfo - volume (tremolo), where 100 = 10dB\n    unused1: 14,                        // unused\n    chorusEffectsSend: 15,              // effect send - how much is sent to chorus 0 - 1000\n    reverbEffectsSend: 16,              // effect send - how much is sent to reverb 0 - 1000\n    pan: 17,                            // panning - where -500 = left, 0 = center, 500 = right\n    unused2: 18,                        // unused\n    unused3: 19,                        // unused\n    unused4: 20,                        // unused\n    delayModLFO: 21,                    // mod lfo - delay for mod lfo to start from zero\n    freqModLFO: 22,                     // mod lfo - frequency of mod lfo, 0 = 8.176 Hz, units: f => 1200log2(f/8.176)\n    delayVibLFO: 23,                    // vib lfo - delay for vibrato lfo to start from zero\n    freqVibLFO: 24,                     // vib lfo - frequency of vibrato lfo, 0 = 8.176Hz, unit: f => 1200log2(f/8.176)\n    delayModEnv: 25,                    // mod env - 0 = 1 s decay till mod env starts\n    attackModEnv: 26,                   // mod env - attack of mod env\n    holdModEnv: 27,                     // mod env - hold of mod env\n    decayModEnv: 28,                    // mod env - decay of mod env\n    sustainModEnv: 29,                  // mod env - sustain of mod env\n    releaseModEnv: 30,                  // mod env - release of mod env\n    keyNumToModEnvHold: 31,             // mod env - also modulating mod envelope hold with key number\n    keyNumToModEnvDecay: 32,            // mod env - also modulating mod envelope decay with key number\n    delayVolEnv: 33,                    // vol env - delay of envelope from zero (weird scale)\n    attackVolEnv: 34,                   // vol env - attack of envelope\n    holdVolEnv: 35,                     // vol env - hold of envelope\n    decayVolEnv: 36,                    // vol env - decay of envelope\n    sustainVolEnv: 37,                  // vol env - sustain of envelope\n    releaseVolEnv: 38,                  // vol env - release of envelope\n    keyNumToVolEnvHold: 39,             // vol env - key number to volume envelope hold\n    keyNumToVolEnvDecay: 40,            // vol env - key number to volume envelope decay\n    instrument: 41,                     // zone - instrument index to use for preset zone\n    reserved1: 42,                      // reserved\n    keyRange: 43,                       // zone - key range for which preset / instrument zone is active\n    velRange: 44,                       // zone - velocity range for which preset / instrument zone is active\n    startloopAddrsCoarseOffset: 45,     // sample control - moves sample loop start point in 32,768 increments\n    keyNum: 46,                         // zone - instrument only: always use this midi number (ignore what's pressed)\n    velocity: 47,                       // zone - instrument only: always use this velocity (ignore what's pressed)\n    initialAttenuation: 48,             // zone - allows turning down the volume, 10 = -1dB\n    reserved2: 49,                      // reserved\n    endloopAddrsCoarseOffset: 50,       // sample control - moves sample loop end point in 32,768 increments\n    coarseTune: 51,                     // tune - pitch offset in semitones\n    fineTune: 52,                       // tune - pitch offset in cents\n    sampleID: 53,                       // sample - instrument zone only: which sample to use\n    sampleModes: 54,                    // sample - 0 = no loop, 1 = loop, 2 = reserved, 3 = loop and play till the end in release phase\n    reserved3: 55,                      // reserved\n    scaleTuning: 56,                    // sample - the degree to which MIDI key number influences pitch, 100 = default\n    exclusiveClass: 57,                 // sample - = cut = choke group\n    overridingRootKey: 58,              // sample - can override the sample's original pitch\n    unused5: 59,                        // unused\n    endOper: 60,                        // end marker\n    \n    // additional generators that are used in system exclusives and will not be saved\n    vibLfoToVolume: 61,\n    vibLfoToFilterFc: 62\n};\nexport const GENERATORS_AMOUNT = Object.keys(generatorTypes).length;\nexport const MAX_GENERATOR = Math.max(...Object.values(generatorTypes));\n/**\n * @type {{min: number, max: number, def: number, nrpn: number}[]}\n * min: minimum value, max: maximum value, def: default value, nrpn: nprn scale...\n */\nconst generatorLimits = [];\n// offsets\ngeneratorLimits[generatorTypes.startAddrsOffset] = { min: 0, max: 32768, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.endAddrOffset] = { min: -32768, max: 32768, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.startloopAddrsOffset] = { min: -32768, max: 32768, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.endloopAddrsOffset] = { min: -32768, max: 32768, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.startAddrsCoarseOffset] = { min: 0, max: 32768, def: 0, nrpn: 1 };\n\n// pitch influence\ngeneratorLimits[generatorTypes.modLfoToPitch] = { min: -12000, max: 12000, def: 0, nrpn: 2 };\ngeneratorLimits[generatorTypes.vibLfoToPitch] = { min: -12000, max: 12000, def: 0, nrpn: 2 };\ngeneratorLimits[generatorTypes.modEnvToPitch] = { min: -12000, max: 12000, def: 0, nrpn: 2 };\n\n// lowpass\ngeneratorLimits[generatorTypes.initialFilterFc] = { min: 1500, max: 13500, def: 13500, nrpn: 2 };\ngeneratorLimits[generatorTypes.initialFilterQ] = { min: 0, max: 960, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.modLfoToFilterFc] = { min: -12000, max: 12000, def: 0, nrpn: 2 };\ngeneratorLimits[generatorTypes.vibLfoToFilterFc] = { min: -12000, max: 12000, def: 0, nrpn: 2 }; // NON-STANDARD\ngeneratorLimits[generatorTypes.modEnvToFilterFc] = { min: -12000, max: 12000, def: 0, nrpn: 2 };\n\ngeneratorLimits[generatorTypes.endAddrsCoarseOffset] = { min: -32768, max: 32768, def: 0, nrpn: 1 };\n\ngeneratorLimits[generatorTypes.modLfoToVolume] = { min: -960, max: 960, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.vibLfoToVolume] = { min: -960, max: 960, def: 0, nrpn: 1 }; // NON-STANDARD\n\n// effects, pan\ngeneratorLimits[generatorTypes.chorusEffectsSend] = { min: 0, max: 1000, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.reverbEffectsSend] = { min: 0, max: 1000, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.pan] = { min: -500, max: 500, def: 0, nrpn: 1 };\n\n// lfo\ngeneratorLimits[generatorTypes.delayModLFO] = { min: -12000, max: 5000, def: -12000, nrpn: 2 };\ngeneratorLimits[generatorTypes.freqModLFO] = { min: -16000, max: 4500, def: 0, nrpn: 4 };\ngeneratorLimits[generatorTypes.delayVibLFO] = { min: -12000, max: 5000, def: -12000, nrpn: 2 };\ngeneratorLimits[generatorTypes.freqVibLFO] = { min: -16000, max: 4500, def: 0, nrpn: 4 };\n\n// mod env\ngeneratorLimits[generatorTypes.delayModEnv] = { min: -32768, max: 5000, def: -32768, nrpn: 2 }; // -32,768 indicates instant phase,\n// this is done to prevent click at the start of filter modenv\ngeneratorLimits[generatorTypes.attackModEnv] = { min: -32768, max: 8000, def: -32768, nrpn: 2 };\ngeneratorLimits[generatorTypes.holdModEnv] = { min: -12000, max: 5000, def: -12000, nrpn: 2 };\ngeneratorLimits[generatorTypes.decayModEnv] = { min: -12000, max: 8000, def: -12000, nrpn: 2 };\ngeneratorLimits[generatorTypes.sustainModEnv] = { min: 0, max: 1000, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.releaseModEnv] = { min: -7200, max: 8000, def: -12000, nrpn: 2 }; // min is set to -7200 to prevent lowpass clicks\n// key num to mod env\ngeneratorLimits[generatorTypes.keyNumToModEnvHold] = { min: -1200, max: 1200, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.keyNumToModEnvDecay] = { min: -1200, max: 1200, def: 0, nrpn: 1 };\n\n// vol env\ngeneratorLimits[generatorTypes.delayVolEnv] = { min: -12000, max: 5000, def: -12000, nrpn: 2 };\ngeneratorLimits[generatorTypes.attackVolEnv] = { min: -12000, max: 8000, def: -12000, nrpn: 2 };\ngeneratorLimits[generatorTypes.holdVolEnv] = { min: -12000, max: 5000, def: -12000, nrpn: 2 };\ngeneratorLimits[generatorTypes.decayVolEnv] = { min: -12000, max: 8000, def: -12000, nrpn: 2 };\ngeneratorLimits[generatorTypes.sustainVolEnv] = { min: 0, max: 1440, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.releaseVolEnv] = { min: -7200, max: 8000, def: -12000, nrpn: 2 }; // min is set to -7200 prevent clicks\n// key num to vol env\ngeneratorLimits[generatorTypes.keyNumToVolEnvHold] = { min: -1200, max: 1200, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.keyNumToVolEnvDecay] = { min: -1200, max: 1200, def: 0, nrpn: 1 };\n\ngeneratorLimits[generatorTypes.startloopAddrsCoarseOffset] = { min: -32768, max: 32768, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.keyNum] = { min: -1, max: 127, def: -1, nrpn: 1 };\ngeneratorLimits[generatorTypes.velocity] = { min: -1, max: 127, def: -1, nrpn: 1 };\n\ngeneratorLimits[generatorTypes.initialAttenuation] = { min: 0, max: 1440, def: 0, nrpn: 1 };\n\ngeneratorLimits[generatorTypes.endloopAddrsCoarseOffset] = { min: -32768, max: 32768, def: 0, nrpn: 1 };\n\ngeneratorLimits[generatorTypes.coarseTune] = { min: -120, max: 120, def: 0, nrpn: 1 };\ngeneratorLimits[generatorTypes.fineTune] = { min: -12700, max: 12700, def: 0, nrpn: 1 }; // this generator is used as initial pitch, hence this range\ngeneratorLimits[generatorTypes.scaleTuning] = { min: 0, max: 1200, def: 100, nrpn: 1 };\ngeneratorLimits[generatorTypes.exclusiveClass] = { min: 0, max: 99999, def: 0, nrpn: 0 };\ngeneratorLimits[generatorTypes.overridingRootKey] = { min: 0 - 1, max: 127, def: -1, nrpn: 0 };\ngeneratorLimits[generatorTypes.sampleModes] = { min: 0, max: 3, def: 0, nrpn: 0 };\nexport { generatorLimits };", "import { decibelAttenuationToGain, timecentsToSeconds } from \"./unit_converter.js\";\n\n\nimport { generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * volume_envelope.js\n * purpose: applies a volume envelope for a given voice\n */\n\nexport const VOLUME_ENVELOPE_SMOOTHING_FACTOR = 0.01;\n\nconst DB_SILENCE = 100;\nconst PERCEIVED_DB_SILENCE = 90;\n// around 96 dB of attenuation\nconst PERCEIVED_GAIN_SILENCE = 0.000015; // can't go lower than that (see #50)\n\n/**\n * VOL ENV STATES:\n * 0 - delay\n * 1 - attack\n * 2 - hold/peak\n * 3 - decay\n * 4 - sustain\n * release indicates by isInRelease property\n */\n\nexport class VolumeEnvelope\n{\n    /**\n     * The envelope's current time in samples\n     * @type {number}\n     */\n    currentSampleTime = 0;\n    /**\n     * The sample rate in Hz\n     * @type {number}\n     */\n    sampleRate;\n    /**\n     * The current attenuation of the envelope in dB\n     * @type {number}\n     */\n    currentAttenuationDb = DB_SILENCE;\n    /**\n     * The current stage of the volume envelope\n     * @type {0|1|2|3|4}\n     */\n    state = 0;\n    /**\n     * The dB attenuation of the envelope when it entered the release stage\n     * @type {number}\n     */\n    releaseStartDb = DB_SILENCE;\n    /**\n     * The time in samples relative to the start of the envelope\n     * @type {number}\n     */\n    releaseStartTimeSamples = 0;\n    /**\n     * The current gain applied to the voice in the release stage\n     * @type {number}\n     */\n    currentReleaseGain = 1;\n    /**\n     * The attack duration in samples\n     * @type {number}\n     */\n    attackDuration = 0;\n    /**\n     * The decay duration in samples\n     * @type {number}\n     */\n    decayDuration = 0;\n    /**\n     * The release duration in samples\n     * @type {number}\n     */\n    releaseDuration = 0;\n    /**\n     * The voice's absolute attenuation as linear gain\n     * @type {number}\n     */\n    attenuation = 0;\n    /**\n     * The attenuation target, which the \"attenuation\" property is linearly interpolated towards (gain)\n     * @type {number}\n     */\n    attenuationTargetGain = 0;\n    /**\n     * The attenuation target, which the \"attenuation\" property is linearly interpolated towards (dB)\n     * @type {number}\n     */\n    attenuationTarget = 0;\n    /**\n     * The voice's sustain amount in dB, relative to attenuation\n     * @type {number}\n     */\n    sustainDbRelative = 0;\n    /**\n     * The time in samples to the end of delay stage, relative to the start of the envelope\n     * @type {number}\n     */\n    delayEnd = 0;\n    /**\n     * The time in samples to the end of attack stage, relative to the start of the envelope\n     * @type {number}\n     */\n    attackEnd = 0;\n    /**\n     * The time in samples to the end of hold stage, relative to the start of the envelope\n     * @type {number}\n     */\n    holdEnd = 0;\n    /**\n     * The time in samples to the end of decay stage, relative to the start of the envelope\n     * @type {number}\n     */\n    decayEnd = 0;\n    \n    /**\n     * @param sampleRate {number} Hz\n     * @param initialDecay {number} cb\n     */\n    constructor(sampleRate, initialDecay)\n    {\n        this.sampleRate = sampleRate;\n        /**\n         * if sustain stge is silent,\n         * then we can turn off the voice when it is silent.\n         * We can't do that with modulated as it can silence the volume and then raise it again, and the voice must keep playing\n         * @type {boolean}\n         */\n        this.canEndOnSilentSustain = initialDecay / 10 >= PERCEIVED_DB_SILENCE;\n    }\n    \n    /**\n     * Starts the release phase in the envelope\n     * @param voice {Voice} the voice this envelope belongs to\n     */\n    static startRelease(voice)\n    {\n        voice.volumeEnvelope.releaseStartTimeSamples = voice.volumeEnvelope.currentSampleTime;\n        voice.volumeEnvelope.currentReleaseGain = decibelAttenuationToGain(voice.volumeEnvelope.currentAttenuationDb);\n        VolumeEnvelope.recalculate(voice);\n    }\n    \n    /**\n     * Recalculates the envelope\n     * @param voice {Voice} the voice this envelope belongs to\n     */\n    static recalculate(voice)\n    {\n        const env = voice.volumeEnvelope;\n        const timecentsToSamples = tc =>\n        {\n            return Math.max(0, Math.floor(timecentsToSeconds(tc) * env.sampleRate));\n        };\n        // calculate absolute times (they can change so we have to recalculate every time\n        env.attenuationTarget = Math.max(\n            0,\n            Math.min(voice.modulatedGenerators[generatorTypes.initialAttenuation], 1440)\n        ) / 10; // divide by ten to get decibels\n        env.attenuationTargetGain = decibelAttenuationToGain(env.attenuationTarget);\n        env.sustainDbRelative = Math.min(DB_SILENCE, voice.modulatedGenerators[generatorTypes.sustainVolEnv] / 10);\n        const sustainDb = Math.min(DB_SILENCE, env.sustainDbRelative);\n        \n        // calculate durations\n        env.attackDuration = timecentsToSamples(voice.modulatedGenerators[generatorTypes.attackVolEnv]);\n        \n        // decay: sfspec page 35: the time is for change from attenuation to -100dB,\n        // therefore, we need to calculate the real time\n        // (changing from attenuation to sustain instead of -100dB)\n        const fullChange = voice.modulatedGenerators[generatorTypes.decayVolEnv];\n        const keyNumAddition = (60 - voice.targetKey) * voice.modulatedGenerators[generatorTypes.keyNumToVolEnvDecay];\n        const fraction = sustainDb / DB_SILENCE;\n        env.decayDuration = timecentsToSamples(fullChange + keyNumAddition) * fraction;\n        \n        env.releaseDuration = timecentsToSamples(voice.modulatedGenerators[generatorTypes.releaseVolEnv]);\n        \n        // calculate absolute end times for the values\n        env.delayEnd = timecentsToSamples(voice.modulatedGenerators[generatorTypes.delayVolEnv]);\n        env.attackEnd = env.attackDuration + env.delayEnd;\n        \n        // make sure to take keyNumToVolEnvHold into account!\n        const holdExcursion = (60 - voice.targetKey) * voice.modulatedGenerators[generatorTypes.keyNumToVolEnvHold];\n        env.holdEnd = timecentsToSamples(voice.modulatedGenerators[generatorTypes.holdVolEnv]\n                + holdExcursion)\n            + env.attackEnd;\n        \n        env.decayEnd = env.decayDuration + env.holdEnd;\n        \n        // if this is the first recalculation and the voice has no attack or delay time, set current db to peak\n        if (env.state === 0 && env.attackEnd === 0)\n        {\n            // env.currentAttenuationDb = env.attenuationTarget;\n            env.state = 2;\n        }\n        \n        // check if voice is in release\n        if (voice.isInRelease)\n        {\n            // no interpolation this time: force update to actual attenuation and calculate release start from there\n            //env.attenuation = Math.min(DB_SILENCE, env.attenuationTarget);\n            const sustainDb = Math.max(0, Math.min(DB_SILENCE, env.sustainDbRelative));\n            const fraction = sustainDb / DB_SILENCE;\n            env.decayDuration = timecentsToSamples(fullChange + keyNumAddition) * fraction;\n            \n            switch (env.state)\n            {\n                case 0:\n                    env.releaseStartDb = DB_SILENCE;\n                    break;\n                \n                case 1:\n                    // attack phase: get linear gain of the attack phase when release started\n                    // and turn it into db as we're ramping the db up linearly\n                    // (to make volume go down exponentially)\n                    // attack is linear (in gain) so we need to do get db from that\n                    let elapsed = 1 - ((env.attackEnd - env.releaseStartTimeSamples) / env.attackDuration);\n                    // calculate the gain that the attack would have, so\n                    // turn that into db\n                    env.releaseStartDb = 20 * Math.log10(elapsed) * -1;\n                    break;\n                \n                case 2:\n                    env.releaseStartDb = 0;\n                    break;\n                \n                case 3:\n                    env.releaseStartDb = (1 - (env.decayEnd - env.releaseStartTimeSamples) / env.decayDuration) * sustainDb;\n                    break;\n                \n                case 4:\n                    env.releaseStartDb = sustainDb;\n                    break;\n            }\n            env.releaseStartDb = Math.max(0, Math.min(env.releaseStartDb, DB_SILENCE));\n            if (env.releaseStartDb >= PERCEIVED_DB_SILENCE)\n            {\n                voice.finished = true;\n            }\n            env.currentReleaseGain = decibelAttenuationToGain(env.releaseStartDb);\n            \n            // release: sfspec page 35: the time is for change from attenuation to -100dB,\n            // therefore, we need to calculate the real time\n            // (changing from release start to -100dB instead of from peak to -100dB)\n            const releaseFraction = (DB_SILENCE - env.releaseStartDb) / DB_SILENCE;\n            env.releaseDuration *= releaseFraction;\n            \n        }\n    }\n    \n    /**\n     * Applies volume envelope gain to the given output buffer\n     * @param voice {Voice} the voice we're working on\n     * @param audioBuffer {Float32Array} the audio buffer to modify\n     * @param centibelOffset {number} the centibel offset of volume, for modLFOtoVolume\n     * @param smoothingFactor {number} the adjusted smoothing factor for the envelope\n     * @description essentially we use approach of 100dB is silence, 0dB is peak, and always add attenuation to that (which is interpolated)\n     */\n    static apply(voice, audioBuffer, centibelOffset, smoothingFactor)\n    {\n        const env = voice.volumeEnvelope;\n        let decibelOffset = centibelOffset / 10;\n        \n        const attenuationSmoothing = smoothingFactor;\n        \n        // RELEASE PHASE\n        if (voice.isInRelease)\n        {\n            let elapsedRelease = env.currentSampleTime - env.releaseStartTimeSamples;\n            if (elapsedRelease >= env.releaseDuration)\n            {\n                for (let i = 0; i < audioBuffer.length; i++)\n                {\n                    audioBuffer[i] = 0;\n                }\n                voice.finished = true;\n                return;\n            }\n            let dbDifference = DB_SILENCE - env.releaseStartDb;\n            for (let i = 0; i < audioBuffer.length; i++)\n            {\n                // attenuation interpolation\n                env.attenuation += (env.attenuationTargetGain - env.attenuation) * attenuationSmoothing;\n                let db = (elapsedRelease / env.releaseDuration) * dbDifference + env.releaseStartDb;\n                env.currentReleaseGain = env.attenuation * decibelAttenuationToGain(db + decibelOffset);\n                audioBuffer[i] *= env.currentReleaseGain;\n                env.currentSampleTime++;\n                elapsedRelease++;\n            }\n            \n            if (env.currentReleaseGain <= PERCEIVED_GAIN_SILENCE)\n            {\n                voice.finished = true;\n            }\n            return;\n        }\n        \n        let filledBuffer = 0;\n        switch (env.state)\n        {\n            case 0:\n                // delay phase, no sound is produced\n                while (env.currentSampleTime < env.delayEnd)\n                {\n                    env.currentAttenuationDb = DB_SILENCE;\n                    audioBuffer[filledBuffer] = 0;\n                    \n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length)\n                    {\n                        return;\n                    }\n                }\n                env.state++;\n            // fallthrough\n            \n            case 1:\n                // attack phase: ramp from 0 to attenuation\n                while (env.currentSampleTime < env.attackEnd)\n                {\n                    // attenuation interpolation\n                    env.attenuation += (env.attenuationTargetGain - env.attenuation) * attenuationSmoothing;\n                    \n                    // Special case: linear gain ramp instead of linear db ramp\n                    let linearAttenuation = 1 - (env.attackEnd - env.currentSampleTime) / env.attackDuration; // 0 to 1\n                    audioBuffer[filledBuffer] *= linearAttenuation * env.attenuation * decibelAttenuationToGain(\n                        decibelOffset);\n                    // set current attenuation to peak as its invalid during this phase\n                    env.currentAttenuationDb = 0;\n                    \n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length)\n                    {\n                        return;\n                    }\n                }\n                env.state++;\n            // fallthrough\n            \n            case 2:\n                // hold/peak phase: stay at attenuation\n                while (env.currentSampleTime < env.holdEnd)\n                {\n                    // attenuation interpolation\n                    env.attenuation += (env.attenuationTargetGain - env.attenuation) * attenuationSmoothing;\n                    \n                    audioBuffer[filledBuffer] *= env.attenuation * decibelAttenuationToGain(decibelOffset);\n                    env.currentAttenuationDb = 0;\n                    \n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length)\n                    {\n                        return;\n                    }\n                }\n                env.state++;\n            // fallthrough\n            \n            case 3:\n                // decay phase: linear ramp from attenuation to sustain\n                while (env.currentSampleTime < env.decayEnd)\n                {\n                    // attenuation interpolation\n                    env.attenuation += (env.attenuationTargetGain - env.attenuation) * attenuationSmoothing;\n                    \n                    env.currentAttenuationDb = (1 - (env.decayEnd - env.currentSampleTime) / env.decayDuration) * env.sustainDbRelative;\n                    audioBuffer[filledBuffer] *= env.attenuation * decibelAttenuationToGain(env.currentAttenuationDb + decibelOffset);\n                    \n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length)\n                    {\n                        return;\n                    }\n                }\n                env.state++;\n            // fallthrough\n            \n            case 4:\n                if (env.canEndOnSilentSustain && env.sustainDbRelative >= PERCEIVED_DB_SILENCE)\n                {\n                    voice.finished = true;\n                }\n                // sustain phase: stay at sustain\n                while (true)\n                {\n                    // attenuation interpolation\n                    env.attenuation += (env.attenuationTargetGain - env.attenuation) * attenuationSmoothing;\n                    \n                    audioBuffer[filledBuffer] *= env.attenuation * decibelAttenuationToGain(env.sustainDbRelative + decibelOffset);\n                    env.currentAttenuationDb = env.sustainDbRelative;\n                    env.currentSampleTime++;\n                    if (++filledBuffer >= audioBuffer.length)\n                    {\n                        return;\n                    }\n                }\n        }\n    }\n}", "/**\n * indexed_array.js\n * purpose: exteds Uint8Array with a currentIndex property\n */\n\nexport class IndexedByteArray extends Uint8Array\n{\n    /**\n     * The current index of the array\n     * @type {number}\n     */\n    currentIndex = 0;\n    \n    /**\n     * Creates a new instance of an Uint8Array with a currentIndex property\n     * @param args {any} same as for Uint8Array\n     */\n    constructor(args)\n    {\n        super(args);\n    }\n    \n    /**\n     * @param start {number?}\n     * @param end {number?}\n     * @returns {IndexedByteArray}\n     */\n    slice(start, end)\n    {\n        const a = /** @type {IndexedByteArray} */ super.slice(start, end);\n        a.currentIndex = 0;\n        return a;\n    }\n}", "import { IndexedByteArray } from \"../utils/indexed_array.js\";\n\n/**\n * midi_message.js\n * purpose: contains enums for midi events and controllers and functions to parse them\n */\n\nexport class MIDIMessage\n{\n    /**\n     * Absolute number of MIDI ticks from the start of the track.\n     * @type {number}\n     */\n    ticks;\n    \n    /**\n     * The MIDI message status byte. Note that for meta events, it is the second byte. (not 0xFF)\n     * @type {number}\n     */\n    messageStatusByte;\n    \n    /**\n     * Message's binary data\n     * @type {IndexedByteArray}\n     */\n    messageData;\n    \n    /**\n     * @param ticks {number}\n     * @param byte {number} the message status byte\n     * @param data {IndexedByteArray}\n     */\n    constructor(ticks, byte, data)\n    {\n        this.ticks = ticks;\n        this.messageStatusByte = byte;\n        this.messageData = data;\n    }\n}\n\n/**\n * Gets the status byte's channel\n * @param statusByte\n * @returns {number} channel is -1 for system messages -2 for meta and -3 for sysex\n */\nexport function getChannel(statusByte)\n{\n    const eventType = statusByte & 0xF0;\n    const channel = statusByte & 0x0F;\n    \n    let resultChannel = channel;\n    \n    switch (eventType)\n    {\n        // midi (and meta and sysex headers)\n        case 0x80:\n        case 0x90:\n        case 0xA0:\n        case 0xB0:\n        case 0xC0:\n        case 0xD0:\n        case 0xE0:\n            break;\n        \n        case 0xF0:\n            switch (channel)\n            {\n                case 0x0:\n                    resultChannel = -3;\n                    break;\n                \n                case 0x1:\n                case 0x2:\n                case 0x3:\n                case 0x4:\n                case 0x5:\n                case 0x6:\n                case 0x7:\n                case 0x8:\n                case 0x9:\n                case 0xA:\n                case 0xB:\n                case 0xC:\n                case 0xD:\n                case 0xE:\n                    resultChannel = -1;\n                    break;\n                \n                case 0xF:\n                    resultChannel = -2;\n                    break;\n            }\n            break;\n        \n        default:\n            resultChannel = -1;\n    }\n    \n    return resultChannel;\n}\n\n// all the midi statuses dictionary\nexport const messageTypes = {\n    noteOff: 0x80,\n    noteOn: 0x90,\n    polyPressure: 0xA0,\n    controllerChange: 0xB0,\n    programChange: 0xC0,\n    channelPressure: 0xD0,\n    pitchBend: 0xE0,\n    systemExclusive: 0xF0,\n    timecode: 0xF1,\n    songPosition: 0xF2,\n    songSelect: 0xF3,\n    tuneRequest: 0xF6,\n    clock: 0xF8,\n    start: 0xFA,\n    continue: 0xFB,\n    stop: 0xFC,\n    activeSensing: 0xFE,\n    reset: 0xFF,\n    sequenceNumber: 0x00,\n    text: 0x01,\n    copyright: 0x02,\n    trackName: 0x03,\n    instrumentName: 0x04,\n    lyric: 0x05,\n    marker: 0x06,\n    cuePoint: 0x07,\n    programName: 0x08,\n    midiChannelPrefix: 0x20,\n    midiPort: 0x21,\n    endOfTrack: 0x2F,\n    setTempo: 0x51,\n    smpteOffset: 0x54,\n    timeSignature: 0x58,\n    keySignature: 0x59,\n    sequenceSpecific: 0x7F\n};\n\n\n/**\n * Gets the event's status and channel from the status byte\n * @param statusByte {number} the status byte\n * @returns {{channel: number, status: number}} channel will be -1 for sysex and meta\n */\nexport function getEvent(statusByte)\n{\n    const status = statusByte & 0xF0;\n    const channel = statusByte & 0x0F;\n    \n    let eventChannel = -1;\n    let eventStatus = statusByte;\n    \n    if (status >= 0x80 && status <= 0xE0)\n    {\n        eventChannel = channel;\n        eventStatus = status;\n    }\n    \n    return {\n        status: eventStatus,\n        channel: eventChannel\n    };\n}\n\n\n/**\n * @enum {number}\n */\nexport const midiControllers = {\n    bankSelect: 0,\n    modulationWheel: 1,\n    breathController: 2,\n    footController: 4,\n    portamentoTime: 5,\n    dataEntryMsb: 6,\n    mainVolume: 7,\n    balance: 8,\n    pan: 10,\n    expressionController: 11,\n    effectControl1: 12,\n    effectControl2: 13,\n    generalPurposeController1: 16,\n    generalPurposeController2: 17,\n    generalPurposeController3: 18,\n    generalPurposeController4: 19,\n    lsbForControl0BankSelect: 32,\n    lsbForControl1ModulationWheel: 33,\n    lsbForControl2BreathController: 34,\n    lsbForControl4FootController: 36,\n    lsbForControl5PortamentoTime: 37,\n    lsbForControl6DataEntry: 38,\n    lsbForControl7MainVolume: 39,\n    lsbForControl8Balance: 40,\n    lsbForControl10Pan: 42,\n    lsbForControl11ExpressionController: 43,\n    lsbForControl12EffectControl1: 44,\n    lsbForControl13EffectControl2: 45,\n    sustainPedal: 64,\n    portamentoOnOff: 65,\n    sostenutoPedal: 66,\n    softPedal: 67,\n    legatoFootswitch: 68,\n    hold2Pedal: 69,\n    soundVariation: 70,\n    filterResonance: 71,\n    releaseTime: 72,\n    attackTime: 73,\n    brightness: 74,\n    decayTime: 75,\n    vibratoRate: 76,\n    vibratoDepth: 77,\n    vibratoDelay: 78,\n    soundController10: 79,\n    generalPurposeController5: 80,\n    generalPurposeController6: 81,\n    generalPurposeController7: 82,\n    generalPurposeController8: 83,\n    portamentoControl: 84,\n    reverbDepth: 91,\n    tremoloDepth: 92,\n    chorusDepth: 93,\n    detuneDepth: 94,\n    phaserDepth: 95,\n    dataIncrement: 96,\n    dataDecrement: 97,\n    NRPNLsb: 98,\n    NRPNMsb: 99,\n    RPNLsb: 100,\n    RPNMsb: 101,\n    allSoundOff: 120,\n    resetAllControllers: 121,\n    localControlOnOff: 122,\n    allNotesOff: 123,\n    omniModeOff: 124,\n    omniModeOn: 125,\n    monoModeOn: 126,\n    polyModeOn: 127\n};\n\n\n/**\n * @type {{\"11\": number, \"12\": number, \"13\": number, \"14\": number, \"8\": number, \"9\": number, \"10\": number}}\n */\nexport const dataBytesAmount = {\n    0x8: 2, // note off\n    0x9: 2, // note on\n    0xA: 2, // note at\n    0xB: 2, // cc change\n    0xC: 1, // pg change\n    0xD: 1, // channel after touch\n    0xE: 2  // pitch wheel\n};", "import { SpessaSynthInfo } from \"./loggin.js\";\nimport { consoleColors } from \"./other.js\";\nimport { DEFAULT_PERCUSSION } from \"../synthetizer/synth_constants.js\";\n\nexport const XG_SFX_VOICE = 64;\n\nconst GM2_DEFAULT_BANK = 121;\n\n/**\n * @param sys {SynthSystem}\n * @returns {number}\n */\nexport function getDefaultBank(sys)\n{\n    return sys === \"gm2\" ? GM2_DEFAULT_BANK : 0;\n}\n\n/**\n * @param bankNr {number}\n * @returns {boolean}\n */\nexport function isXGDrums(bankNr)\n{\n    return bankNr === 120 || bankNr === 126 || bankNr === 127;\n}\n\n/**\n * @param bank {number}\n * @returns {boolean}\n */\nexport function isValidXGMSB(bank)\n{\n    return isXGDrums(bank) || bank === XG_SFX_VOICE || bank === GM2_DEFAULT_BANK;\n}\n\n/**\n * Bank select hacks abstracted here\n * @param bankBefore {number} the current bank number\n * @param bank {number} the cc change bank number\n * @param system {SynthSystem} MIDI system\n * @param isLSB {boolean} is bank LSB?\n * @param isDrums {boolean} is drum channel?\n * @param channelNumber {number} channel number\n * @returns {{\n *     newBank: number,\n *     drumsStatus: 0|1|2\n * }} 0 - unchanged, 1 - OFF, 2 - ON\n */\nexport function parseBankSelect(bankBefore, bank, system, isLSB, isDrums, channelNumber)\n{\n    // 64 means SFX in MSB, so it is allowed\n    let out = bankBefore;\n    let drumsStatus = 0;\n    if (isLSB)\n    {\n        if (isSystemXG(system))\n        {\n            if (!isValidXGMSB(bank))\n            {\n                out = bank;\n            }\n        }\n        else if (system === \"gm2\")\n        {\n            out = bank;\n        }\n    }\n    else\n    {\n        let canSetBankSelect = true;\n        switch (system)\n        {\n            case \"gm\":\n                // gm ignores bank select\n                SpessaSynthInfo(\n                    `%cIgnoring the Bank Select (${bank}), as the synth is in GM mode.`,\n                    consoleColors.info\n                );\n                canSetBankSelect = false;\n                break;\n            \n            case \"xg\":\n                canSetBankSelect = isValidXGMSB(bank);\n                // for xg, if msb is 120, 126 or 127, then it's drums\n                if (isXGDrums(bank))\n                {\n                    drumsStatus = 2;\n                }\n                else\n                {\n                    // drums shall not be disabled on channel 9\n                    if (channelNumber % 16 !== DEFAULT_PERCUSSION)\n                    {\n                        drumsStatus = 1;\n                    }\n                }\n                break;\n            \n            case \"gm2\":\n                if (bank === 120)\n                {\n                    drumsStatus = 2;\n                }\n                else\n                {\n                    if (channelNumber % 16 !== DEFAULT_PERCUSSION)\n                    {\n                        drumsStatus = 1;\n                    }\n                }\n        }\n        \n        if (isDrums)\n        {\n            // 128 for percussion channel\n            bank = 128;\n        }\n        if (bank === 128 && !isDrums)\n        {\n            // if a channel is not for percussion, default to bank current\n            bank = bankBefore;\n        }\n        if (canSetBankSelect)\n        {\n            out = bank;\n        }\n    }\n    return {\n        newBank: out,\n        drumsStatus: drumsStatus\n    };\n}\n\n\n/**\n * Chooses a bank number according to spessasynth logic\n * That is:\n * for GS, bank MSB if not drum, otherwise 128\n * for XG: bank MSB if drum and MSB is valid, 128 othewise, bank MSB if it is SFX voice, LSB otherwise\n * @param msb {number}\n * @param lsb {number}\n * @param isDrums {boolean}\n * @param isXG {boolean}\n * @returns {number}\n */\nexport function chooseBank(msb, lsb, isDrums, isXG)\n{\n    if (isXG)\n    {\n        if (isDrums)\n        {\n            if (isXGDrums(msb))\n            {\n                return msb;\n            }\n            else\n            {\n                return 128;\n            }\n        }\n        else\n        {\n            // check for SFX\n            if (isValidXGMSB(msb))\n            {\n                return msb;\n            }\n            // if lsb is 0 and msb is not, use that\n            if (lsb === 0 && msb !== 0)\n            {\n                return msb;\n            }\n            if (!isValidXGMSB(lsb))\n            {\n                return lsb;\n            }\n            return 0;\n        }\n    }\n    else\n    {\n        return isDrums ? 128 : msb;\n    }\n}\n\n/**\n * @param system {SynthSystem}\n * @returns boolean\n */\nexport function isSystemXG(system)\n{\n    return system === \"gm2\" || system === \"xg\";\n}", "import { SYNTHESIZER_GAIN } from \"../../main_processor.js\";\n\n/**\n * @enum {number}\n */\nexport const masterParameterType = {\n    mainVolume: 0,\n    masterPan: 1,\n    voicesCap: 2,\n    interpolationType: 3,\n    midiSystem: 4\n};\n\n/**\n * @this {SpessaSynthProcessor}\n * @param type {masterParameterType}\n * @param value {number|string|interpolationTypes}\n */\nexport function setMasterParameter(type, value)\n{\n    switch (type)\n    {\n        case masterParameterType.masterPan:\n            let pan = value;\n            this.pan = pan;\n            // clamp to 0-1 (0 is left)\n            pan = (pan / 2) + 0.5;\n            this.panLeft = (1 - pan);\n            this.panRight = (pan);\n            break;\n        \n        case masterParameterType.mainVolume:\n            this.masterGain = value * SYNTHESIZER_GAIN;\n            this.setMasterParameter(masterParameterType.masterPan, this.pan);\n            break;\n        \n        case masterParameterType.voicesCap:\n            this.voiceCap = value;\n            break;\n        \n        case masterParameterType.interpolationType:\n            this.interpolationType = value;\n            break;\n        \n        case masterParameterType.midiSystem:\n            this.setSystem(value);\n    }\n}", "import { IndexedByteArray } from \"../indexed_array.js\";\n\n/**\n * @param dataArray {IndexedByteArray}\n * @param bytes {number}\n * @param trimEnd {boolean} if we should trim once we reach an invalid byte\n * @returns {string}\n */\nexport function readBytesAsString(dataArray, bytes, trimEnd = true)\n{\n    let finished = false;\n    let string = \"\";\n    for (let i = 0; i < bytes; i++)\n    {\n        let byte = dataArray[dataArray.currentIndex++];\n        if (finished)\n        {\n            continue;\n        }\n        if ((byte < 32 || byte > 127) && byte !== 10) // 10 is \"\\n\"\n        {\n            if (trimEnd)\n            {\n                finished = true;\n                continue;\n            }\n            else\n            {\n                if (byte === 0)\n                {\n                    finished = true;\n                    continue;\n                }\n            }\n        }\n        string += String.fromCharCode(byte);\n    }\n    return string;\n}\n\n/**\n * @param string {string}\n * @param addZero {boolean} adds a zero terminator at the end\n * @param ensureEven {boolean} ensures even byte count\n * @returns {IndexedByteArray}\n */\nexport function getStringBytes(string, addZero = false, ensureEven = false)\n{\n    let len = string.length;\n    if (addZero)\n    {\n        len++;\n    }\n    if (ensureEven && len % 2 !== 0)\n    {\n        len++;\n    }\n    const arr = new IndexedByteArray(len);\n    writeStringAsBytes(arr, string);\n    return arr;\n}\n\n/**\n * @param string {string}\n * @param outArray {IndexedByteArray}\n * @param padLength {number}\n * @returns {IndexedByteArray} modified IN PLACE\n */\nexport function writeStringAsBytes(outArray, string, padLength = 0)\n{\n    if (padLength > 0)\n    {\n        if (string.length > padLength)\n        {\n            string = string.slice(0, padLength);\n        }\n    }\n    for (let i = 0; i < string.length; i++)\n    {\n        outArray[outArray.currentIndex++] = string.charCodeAt(i);\n    }\n    \n    // pad with zeros if needed\n    if (padLength > string.length)\n    {\n        for (let i = 0; i < padLength - string.length; i++)\n        {\n            outArray[outArray.currentIndex++] = 0;\n        }\n    }\n    return outArray;\n}", "/**\n *\n * @enum {number}\n */\nexport const interpolationTypes = {\n    linear: 0,\n    nearestNeighbor: 1,\n    fourthOrder: 2\n};\n/**\n * The text types for the synth display\n * @enum {number}\n */\nexport const synthDisplayTypes = {\n    SoundCanvasText: 0,\n    XGText: 1,\n    SoundCanvasDotDisplay: 2\n};", "import { midiControllers } from \"../../midi/midi_message.js\";\nimport { generatorTypes, MAX_GENERATOR } from \"./generator_types.js\";\n\n/**\n * modulators.js\n * purpose: parses soundfont modulators and the source enums, also includes the default modulators list\n **/\n\nexport const MOD_BYTE_SIZE = 10;\n\n/**\n * @enum {number}\n */\nexport const modulatorSources = {\n    noController: 0,\n    noteOnVelocity: 2,\n    noteOnKeyNum: 3,\n    polyPressure: 10,\n    channelPressure: 13,\n    pitchWheel: 14,\n    pitchWheelRange: 16,\n    link: 127\n    \n};\n\n/**\n *\n * @enum {number}\n */\nexport const modulatorCurveTypes = {\n    linear: 0,\n    concave: 1,\n    convex: 2,\n    switch: 3\n};\n\n\nexport function getModSourceEnum(curveType, polarity, direction, isCC, index)\n{\n    return (curveType << 10) | (polarity << 9) | (direction << 8) | (isCC << 7) | index;\n}\n\nconst defaultResonantModSource = getModSourceEnum(\n    modulatorCurveTypes.linear,\n    1,\n    0,\n    1,\n    midiControllers.filterResonance\n); // linear forwards bipolar cc 74\n\nexport class Modulator\n{\n    /**\n     * The current computed value of this modulator. Only used in the synthesis engine for local voices\n     * @type {number}\n     */\n    currentValue = 0;\n    \n    /**\n     * The generator destination of this modulator\n     * @type {generatorTypes}\n     */\n    modulatorDestination;\n    \n    /**\n     * The transform amount for this modulator\n     * @type {number}\n     */\n    transformAmount;\n    \n    /**\n     * The transform type for this modulator\n     * @type {0|2}\n     */\n    transformType;\n    \n    /**\n     * Indicates if the given modulator is chorus or reverb effects modulator.\n     * This is done to simulate BASSMIDI effects behavior:\n     * - defaults to 1000 transform amount rather than 200\n     * - values can be changed, but anything above 200 is 1000\n     * (except for values above 1000, they are copied directly)\n     * - all values below are multiplied by 5 (200 * 5 = 1000)\n     * - still can be disabled if the soundfont has its own modulator curve\n     * - this fixes the very low amount of reverb by default and doesn't break soundfonts\n     * @type {boolean}\n     * @readonly\n     */\n    isEffectModulator = false;\n    \n    /**\n     * The default resonant modulator does not affect the filter gain.\n     * Neither XG nor GS responded to cc #74 in that way.\n     * @type {boolean}\n     * @readonly\n     */\n    isDefaultResonantModulator = false;\n    \n    /**\n     * 1 if the source is bipolar (min is -1, max is 1)\n     * otherwise min is 0 and max is 1\n     * @type {0|1}\n     */\n    sourcePolarity;\n    \n    /**\n     * 1 if the source is negative (from 1 to 0)\n     * @type {0|1}\n     */\n    sourceDirection;\n    \n    /**\n     * 1 if the source uses a MIDI CC\n     * @type {0|1}\n     */\n    sourceUsesCC;\n    \n    /**\n     * source index/CC number\n     * @type {modulatorSources|midiControllers}\n     */\n    sourceIndex;\n    \n    /**\n     * source curve type\n     * @type {modulatorCurveTypes}\n     */\n    sourceCurveType;\n    \n    /**\n     * 1 if the source is bipolar (min is -1, max is 1)\n     * otherwise min is 0 and max is 1\n     * @type {0|1}\n     */\n    secSrcPolarity;\n    \n    /**\n     * 1 if the source is negative (from 1 to 0)\n     * @type {0|1}\n     */\n    secSrcDirection;\n    \n    /**\n     * 1 if the source uses a MIDI CC\n     * @type {0|1}\n     */\n    secSrcUsesCC;\n    \n    /**\n     * source index/CC number\n     * @type {modulatorSources|midiControllers}\n     */\n    secSrcIndex;\n    \n    /**\n     * source curve type\n     * @type {modulatorCurveTypes}\n     */\n    secSrcCurveType;\n    \n    /**\n     * Creates a new SF2 Modulator\n     * @param sourceIndex {modulatorSources|midiControllers}\n     * @param sourceCurveType {modulatorCurveTypes}\n     * @param sourceUsesCC {0|1}\n     * @param sourcePolarity {0|1}\n     * @param sourceDirection {0|1}\n     * @param secSrcIndex {modulatorSources|midiControllers}\n     * @param secSrcCurveType {modulatorCurveTypes}\n     * @param secSrcUsesCC {0|1}\n     * @param secSrcPolarity {0|1}\n     * @param secSrcDirection {0|1}\n     * @param destination {generatorTypes}\n     * @param amount {number}\n     * @param transformType {0|2}\n     * @param isEffectModulator {boolean}\n     * @param isDefaultResonantModulator {boolean}\n     */\n    constructor(sourceIndex,\n                sourceCurveType,\n                sourceUsesCC,\n                sourcePolarity,\n                sourceDirection,\n                secSrcIndex,\n                secSrcCurveType,\n                secSrcUsesCC,\n                secSrcPolarity,\n                secSrcDirection,\n                destination,\n                amount,\n                transformType,\n                isEffectModulator = false,\n                isDefaultResonantModulator = false)\n    {\n        this.sourcePolarity = sourcePolarity;\n        this.sourceDirection = sourceDirection;\n        this.sourceUsesCC = sourceUsesCC;\n        this.sourceIndex = sourceIndex;\n        this.sourceCurveType = sourceCurveType;\n        \n        this.secSrcPolarity = secSrcPolarity;\n        this.secSrcDirection = secSrcDirection;\n        this.secSrcUsesCC = secSrcUsesCC;\n        this.secSrcIndex = secSrcIndex;\n        this.secSrcCurveType = secSrcCurveType;\n        \n        this.modulatorDestination = destination;\n        this.transformAmount = amount;\n        this.transformType = transformType;\n        this.isEffectModulator = isEffectModulator;\n        this.isDefaultResonantModulator = isDefaultResonantModulator;\n        \n        \n        if (this.modulatorDestination > MAX_GENERATOR)\n        {\n            this.modulatorDestination = generatorTypes.INVALID; // flag as invalid (for linked ones)\n        }\n        \n    }\n    \n    /**\n     * @param modulator {Modulator}\n     * @returns {Modulator}\n     */\n    static copy(modulator)\n    {\n        return new Modulator(\n            modulator.sourceIndex,\n            modulator.sourceCurveType,\n            modulator.sourceUsesCC,\n            modulator.sourcePolarity,\n            modulator.sourceDirection,\n            modulator.secSrcIndex,\n            modulator.secSrcCurveType,\n            modulator.secSrcUsesCC,\n            modulator.secSrcPolarity,\n            modulator.secSrcDirection,\n            modulator.modulatorDestination,\n            modulator.transformAmount,\n            modulator.transformType,\n            modulator.isEffectModulator,\n            modulator.isDefaultResonantModulator\n        );\n    }\n    \n    /**\n     * @param mod1 {Modulator}\n     * @param mod2 {Modulator}\n     * @param checkAmount {boolean}\n     * @returns {boolean}\n     */\n    static isIdentical(mod1, mod2, checkAmount = false)\n    {\n        return (mod1.sourceIndex === mod2.sourceIndex)\n            && (mod1.sourceUsesCC === mod2.sourceUsesCC)\n            && (mod1.sourcePolarity === mod2.sourcePolarity)\n            && (mod1.sourceDirection === mod2.sourceDirection)\n            && (mod1.sourceCurveType === mod2.sourceCurveType)\n            \n            && (mod1.secSrcIndex === mod2.secSrcIndex)\n            && (mod1.secSrcUsesCC === mod2.secSrcUsesCC)\n            && (mod1.secSrcPolarity === mod2.secSrcPolarity)\n            && (mod1.secSrcDirection === mod2.secSrcDirection)\n            && (mod1.secSrcCurveType === mod2.secSrcCurveType)\n            \n            && (mod1.modulatorDestination === mod2.modulatorDestination)\n            && (mod1.transformType === mod2.transformType)\n            && (!checkAmount || (mod1.transformAmount === mod2.transformAmount));\n    }\n    \n    /**\n     * @param mod {Modulator}\n     * @returns {string}\n     */\n    static debugString(mod)\n    {\n        function getKeyByValue(object, value)\n        {\n            return Object.keys(object).find(key => object[key] === value);\n        }\n        \n        let sourceString = getKeyByValue(modulatorCurveTypes, mod.sourceCurveType);\n        sourceString += mod.sourcePolarity === 0 ? \" unipolar \" : \" bipolar \";\n        sourceString += mod.sourceDirection === 0 ? \"forwards \" : \"backwards \";\n        if (mod.sourceUsesCC)\n        {\n            sourceString += getKeyByValue(midiControllers, mod.sourceIndex);\n        }\n        else\n        {\n            sourceString += getKeyByValue(modulatorSources, mod.sourceIndex);\n        }\n        \n        let secSrcString = getKeyByValue(modulatorCurveTypes, mod.secSrcCurveType);\n        secSrcString += mod.secSrcPolarity === 0 ? \" unipolar \" : \" bipolar \";\n        secSrcString += mod.secSrcDirection === 0 ? \"forwards \" : \"backwards \";\n        if (mod.secSrcUsesCC)\n        {\n            secSrcString += getKeyByValue(midiControllers, mod.secSrcIndex);\n        }\n        else\n        {\n            secSrcString += getKeyByValue(modulatorSources, mod.secSrcIndex);\n        }\n        return `Modulator:\n        Source: ${sourceString}\n        Secondary source: ${secSrcString}\n        Destination: ${getKeyByValue(generatorTypes, mod.modulatorDestination)}\n        Trasform amount: ${mod.transformAmount}\n        Transform type: ${mod.transformType}\n        \\n\\n`;\n    }\n    \n    getSourceEnum()\n    {\n        return getModSourceEnum(\n            this.sourceCurveType,\n            this.sourcePolarity,\n            this.sourceDirection,\n            this.sourceUsesCC,\n            this.sourceIndex\n        );\n    }\n    \n    getSecSrcEnum()\n    {\n        return getModSourceEnum(\n            this.secSrcCurveType,\n            this.secSrcPolarity,\n            this.secSrcDirection,\n            this.secSrcUsesCC,\n            this.secSrcIndex\n        );\n    }\n    \n    /**\n     * Sum transform and create a NEW modulator\n     * @param modulator {Modulator}\n     * @returns {Modulator}\n     */\n    sumTransform(modulator)\n    {\n        return new Modulator(\n            this.sourceIndex,\n            this.sourceCurveType,\n            this.sourceUsesCC,\n            this.sourcePolarity,\n            this.sourceDirection,\n            this.secSrcIndex,\n            this.secSrcCurveType,\n            this.secSrcUsesCC,\n            this.secSrcPolarity,\n            this.secSrcDirection,\n            this.modulatorDestination,\n            this.transformAmount + modulator.transformAmount,\n            this.transformType,\n            this.isEffectModulator,\n            this.isDefaultResonantModulator\n        );\n    }\n}\n\nexport class DecodedModulator extends Modulator\n{\n    /**\n     * reads an SF2 modulator\n     * @param sourceEnum {number} SF2 source enum\n     * @param secondarySourceEnum {number} SF2 secondary source enum\n     * @param destination {generatorTypes|number} destination\n     * @param amount {number} amount\n     * @param transformType {number} transform type\n     */\n    constructor(sourceEnum, secondarySourceEnum, destination, amount, transformType)\n    {\n        // decode the source\n        const sourcePolarity = sourceEnum >> 9 & 1;\n        const sourceDirection = sourceEnum >> 8 & 1;\n        const sourceUsesCC = sourceEnum >> 7 & 1;\n        const sourceIndex = /** @type {modulatorSources} **/ sourceEnum & 127;\n        const sourceCurveType = /** @type {modulatorCurveTypes} **/ sourceEnum >> 10 & 3;\n        \n        // decode the secondary source\n        const secSrcPolarity = secondarySourceEnum >> 9 & 1;\n        const secSrcDirection = secondarySourceEnum >> 8 & 1;\n        const secSrcUsesCC = secondarySourceEnum >> 7 & 1;\n        const secSrcIndex = /** @type {modulatorSources} **/ secondarySourceEnum & 127;\n        const secSrcCurveType = /** @type {modulatorCurveTypes} **/ secondarySourceEnum >> 10 & 3;\n        \n        super(\n            sourceIndex,\n            sourceCurveType,\n            sourceUsesCC,\n            sourcePolarity,\n            sourceDirection,\n            secSrcIndex,\n            secSrcCurveType,\n            secSrcUsesCC,\n            secSrcPolarity,\n            secSrcDirection,\n            destination,\n            amount,\n            transformType\n        );\n        \n        \n        this.isEffectModulator =\n            (\n                sourceEnum === 0x00DB\n                || sourceEnum === 0x00DD\n            )\n            && secondarySourceEnum === 0x0\n            && (\n                this.modulatorDestination === generatorTypes.reverbEffectsSend\n                || this.modulatorDestination === generatorTypes.chorusEffectsSend\n            );\n        \n        \n        this.isDefaultResonantModulator = (\n            sourceEnum === defaultResonantModSource\n            && secondarySourceEnum === 0x0\n            && this.modulatorDestination === generatorTypes.initialFilterQ\n        );\n    }\n}\n\nexport const DEFAULT_ATTENUATION_MOD_AMOUNT = 960;\nexport const DEFAULT_ATTENUATION_MOD_CURVE_TYPE = modulatorCurveTypes.concave;\n\n\nconst soundFontModulators = [\n    // vel to attenuation\n    new DecodedModulator(\n        getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            0,\n            1,\n            0,\n            modulatorSources.noteOnVelocity\n        ),\n        0x0,\n        generatorTypes.initialAttenuation,\n        DEFAULT_ATTENUATION_MOD_AMOUNT,\n        0\n    ),\n    \n    // mod wheel to vibrato\n    new DecodedModulator(0x0081, 0x0, generatorTypes.vibLfoToPitch, 50, 0),\n    \n    // vol to attenuation\n    new DecodedModulator(\n        getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            0,\n            1,\n            1,\n            midiControllers.mainVolume\n        ),\n        0x0,\n        generatorTypes.initialAttenuation,\n        DEFAULT_ATTENUATION_MOD_AMOUNT,\n        0\n    ),\n    \n    // channel pressure to vibrato\n    new DecodedModulator(0x000D, 0x0, generatorTypes.vibLfoToPitch, 50, 0),\n    \n    // pitch wheel to tuning\n    new DecodedModulator(0x020E, 0x0010, generatorTypes.fineTune, 12700, 0),\n    \n    // pan to uhh, pan\n    // amount is 500 instead of 1000, see #59\n    new DecodedModulator(0x028A, 0x0, generatorTypes.pan, 500, 0),\n    \n    // expression to attenuation\n    new DecodedModulator(\n        getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            0,\n            1,\n            1,\n            midiControllers.expressionController\n        ),\n        0x0,\n        generatorTypes.initialAttenuation,\n        DEFAULT_ATTENUATION_MOD_AMOUNT,\n        0\n    ),\n    \n    // reverb effects to send\n    new DecodedModulator(0x00DB, 0x0, generatorTypes.reverbEffectsSend, 200, 0),\n    \n    // chorus effects to send\n    new DecodedModulator(0x00DD, 0x0, generatorTypes.chorusEffectsSend, 200, 0)\n];\n\nconst customModulators = [\n    // custom modulators heck yeah\n    // poly pressure to vibrato\n    new DecodedModulator(\n        getModSourceEnum(modulatorCurveTypes.linear, 0, 0, 0, modulatorSources.polyPressure),\n        0x0,\n        generatorTypes.vibLfoToPitch,\n        50,\n        0\n    ),\n    \n    // cc 92 (tremolo) to modLFO volume\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.linear,\n            0,\n            0,\n            1,\n            midiControllers.tremoloDepth\n        ), /*linear forward unipolar cc 92 */\n        0x0, // no controller\n        generatorTypes.modLfoToVolume,\n        24,\n        0\n    ),\n    \n    // cc 73 (attack time) to volEnv attack\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.convex,\n            1,\n            0,\n            1,\n            midiControllers.attackTime\n        ), // linear forward bipolar cc 72\n        0x0, // no controller\n        generatorTypes.attackVolEnv,\n        6000,\n        0\n    ),\n    \n    // cc 72 (release time) to volEnv release\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.linear,\n            1,\n            0,\n            1,\n            midiControllers.releaseTime\n        ), // linear forward bipolar cc 72\n        0x0, // no controller\n        generatorTypes.releaseVolEnv,\n        3600,\n        0\n    ),\n    \n    // cc 74 (brightness) to filterFc\n    new DecodedModulator(\n        getModSourceEnum(\n            modulatorCurveTypes.linear,\n            1,\n            0,\n            1,\n            midiControllers.brightness\n        ), // linear forwards bipolar cc 74\n        0x0, // no controller\n        generatorTypes.initialFilterFc,\n        6000,\n        0\n    ),\n    \n    // cc 71 (filter Q) to filter Q (default resonant modulator)\n    new DecodedModulator(\n        defaultResonantModSource,\n        0x0, // no controller\n        generatorTypes.initialFilterQ,\n        250,\n        0\n    )\n\n];\n\n/**\n * @type {Modulator[]}\n */\nexport const defaultModulators = soundFontModulators.concat(customModulators);", "import { midiControllers } from \"../../../midi/midi_message.js\";\nimport { modulatorSources } from \"../../../soundfont/basic_soundfont/modulator.js\";\n\n/*\n * A bit of explanation:\n * The controller table is stored as an int16 array, it stores 14-bit values.\n * This controller table is then extended with the modulatorSources section,\n * for example, pitch range and pitch range depth.\n * This allows us for precise control range and supports full pitch-wheel resolution.\n */\nexport const NON_CC_INDEX_OFFSET = 128;\nexport const CONTROLLER_TABLE_SIZE = 147;\n\n\n// an array with preset default values, so we can quickly use set() to reset the controllers\nexport const resetArray = new Int16Array(CONTROLLER_TABLE_SIZE).fill(0);\nexport const setResetValue = (i, v) => resetArray[i] = v << 7;\n\n// values come from Falcosoft MidiPlayer 6\nsetResetValue(midiControllers.mainVolume, 100);\nsetResetValue(midiControllers.balance, 64);\nsetResetValue(midiControllers.expressionController, 127);\nsetResetValue(midiControllers.pan, 64);\n\nsetResetValue(midiControllers.portamentoOnOff, 127);\n\nsetResetValue(midiControllers.filterResonance, 64);\nsetResetValue(midiControllers.releaseTime, 64);\nsetResetValue(midiControllers.attackTime, 64);\nsetResetValue(midiControllers.brightness, 64);\n\nsetResetValue(midiControllers.decayTime, 64);\nsetResetValue(midiControllers.vibratoRate, 64);\nsetResetValue(midiControllers.vibratoDepth, 64);\nsetResetValue(midiControllers.vibratoDelay, 64);\nsetResetValue(midiControllers.generalPurposeController6, 64);\nsetResetValue(midiControllers.generalPurposeController8, 64);\n\nsetResetValue(midiControllers.RPNLsb, 127);\nsetResetValue(midiControllers.RPNMsb, 127);\nsetResetValue(midiControllers.NRPNLsb, 127);\nsetResetValue(midiControllers.NRPNMsb, 127);\n\n\nexport const PORTAMENTO_CONTROL_UNSET = 1;\n// special case: portamento control\n// since it is only 7-bit, only the values at multiple of 128 are allowed.\n// a value of just 1 indicates no key set, hence no portamento.\n// this is the \"initial unset portamento key\" flag.\nresetArray[midiControllers.portamentoControl] = PORTAMENTO_CONTROL_UNSET;\n\n// pitch wheel\nsetResetValue(NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel, 64);\nsetResetValue(NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange, 2);\n\n/**\n * @enum {number}\n */\nexport const customControllers = {\n    channelTuning: 0,              // cents, RPN for fine tuning\n    channelTransposeFine: 1,       // cents, only the decimal tuning, (e.g., transpose is 4.5,\n    // then shift by 4 keys + tune by 50 cents)\n    modulationMultiplier: 2,       // cents, set by modulation depth RPN\n    masterTuning: 3,               // cents, set by system exclusive\n    channelTuningSemitones: 4,     // semitones, for RPN coarse tuning\n    channelKeyShift: 5,            // key shift: for system exclusive\n    sf2NPRNGeneratorLSB: 6         // sf2 NPRN LSB for selecting a generator value\n};\nexport const CUSTOM_CONTROLLER_TABLE_SIZE = Object.keys(customControllers).length;\nexport const customResetArray = new Float32Array(CUSTOM_CONTROLLER_TABLE_SIZE);\ncustomResetArray[customControllers.modulationMultiplier] = 1;\n/**\n * @enum {number}\n */\nexport const dataEntryStates = {\n    Idle: 0,\n    RPCoarse: 1,\n    RPFine: 2,\n    NRPCoarse: 3,\n    NRPFine: 4,\n    DataCoarse: 5,\n    DataFine: 6\n};\n/**\n * This is a channel configuration enum, it is internally sent from Synthetizer via controller change\n * @enum {number}\n */\nexport const channelConfiguration = {\n    velocityOverride: 128 // overrides velocity for the given channel\n};", "import { arrayToHexString, consoleColors } from \"../../../utils/other.js\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../../utils/loggin.js\";\nimport { midiControllers } from \"../../../midi/midi_message.js\";\nimport { ALL_CHANNELS_OR_DIFFERENT_ACTION } from \"../../synth_constants.js\";\nimport { isSystemXG } from \"../../../utils/xg_hacks.js\";\nimport { masterParameterType } from \"./controller_control/master_parameters.js\";\nimport { readBytesAsString } from \"../../../utils/byte_functions/string.js\";\nimport { synthDisplayTypes } from \"../engine_components/enums.js\";\nimport { customControllers, NON_CC_INDEX_OFFSET } from \"../engine_components/controller_tables.js\";\nimport { modulatorSources } from \"../../../soundfont/basic_soundfont/modulator.js\";\n\nimport { generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * KeyNum: tuning\n * @typedef {MTSNoteTuning[]} MTSProgramTuning\n */\n\n/**\n * @typedef {Object} MTSNoteTuning\n * @property {number} midiNote - the base midi note to use, -1 means no change\n * @property {number} centTuning - additional tuning\n */\n\n/**\n * Calculates freqency for MIDI Tuning Standard\n * @param byte1 {number}\n * @param byte2 {number}\n * @param byte3 {number}\n * @return {{midiNote: number, centTuning: number|null}}\n */\nfunction getTuning(byte1, byte2, byte3)\n{\n    const midiNote = byte1;\n    const fraction = (byte2 << 7) | byte3; // Combine byte2 and byte3 into a 14-bit number\n    \n    // no change\n    if (byte1 === 0x7F && byte2 === 0x7F && byte3 === 0x7F)\n    {\n        return { midiNote: -1, centTuning: null };\n    }\n    \n    // calculate cent tuning\n    return { midiNote: midiNote, centTuning: fraction * 0.0061 };\n}\n\n/**\n * Executes a system exclusive\n * @param syx {number[]|IndexedByteArray} - the message data without f0\n * @param channelOffset {number}\n * @this {SpessaSynthProcessor}\n */\nexport function systemExclusive(syx, channelOffset = 0)\n{\n    const type = syx[0];\n    if (this.deviceID !== ALL_CHANNELS_OR_DIFFERENT_ACTION && syx[1] !== 0x7F)\n    {\n        if (this.deviceID !== syx[1])\n        {\n            // not our device ID\n            return;\n        }\n    }\n    \n    function niceLogging(channel, value, what, units)\n    {\n        SpessaSynthInfo(\n            `%cChannel %c${channel}%c ${what}. %c${value} ${units}%c, with %c${arrayToHexString(syx)}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.value,\n            consoleColors.info,\n            consoleColors.value\n        );\n    }\n    \n    function notRecognized()\n    {\n        // this is some other GS sysex...\n        SpessaSynthWarn(\n            `%cUnrecognized Roland %cGS %cSysEx: %c${arrayToHexString(syx)}`,\n            consoleColors.warn,\n            consoleColors.recognized,\n            consoleColors.warn,\n            consoleColors.unrecognized\n        );\n    }\n    \n    switch (type)\n    {\n        default:\n            SpessaSynthWarn(\n                `%cUnrecognized SysEx: %c${arrayToHexString(syx)}`,\n                consoleColors.warn,\n                consoleColors.unrecognized\n            );\n            break;\n        \n        // non realtime\n        case 0x7E:\n        case 0x7F:\n            switch (syx[2])\n            {\n                case 0x04:\n                    let cents;\n                    // device control\n                    switch (syx[3])\n                    {\n                        case 0x01:\n                            // main volume\n                            const vol = syx[5] << 7 | syx[4];\n                            this.setMIDIVolume(vol / 16384);\n                            SpessaSynthInfo(\n                                `%cMaster Volume. Volume: %c${vol}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        \n                        case 0x02:\n                            // main balance\n                            // midi spec page 62\n                            const balance = syx[5] << 7 | syx[4];\n                            const pan = (balance - 8192) / 8192;\n                            this.setMasterParameter(masterParameterType.masterPan, pan);\n                            SpessaSynthInfo(\n                                `%cMaster Pan. Pan: %c${pan}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        \n                        \n                        case 0x03:\n                            // fine-tuning\n                            const tuningValue = ((syx[5] << 7) | syx[6]) - 8192;\n                            cents = Math.floor(tuningValue / 81.92); // [-100;+99] cents range\n                            this.setMasterTuning(cents);\n                            SpessaSynthInfo(\n                                `%cMaster Fine Tuning. Cents: %c${cents}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        \n                        case 0x04:\n                            // coarse tuning\n                            // lsb is ignored\n                            const semitones = syx[5] - 64;\n                            cents = semitones * 100;\n                            this.setMasterTuning(cents);\n                            SpessaSynthInfo(\n                                `%cMaster Coarse Tuning. Cents: %c${cents}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        \n                        default:\n                            SpessaSynthWarn(\n                                `%cUnrecognized MIDI Device Control Real-time message: %c${arrayToHexString(syx)}`,\n                                consoleColors.warn,\n                                consoleColors.unrecognized\n                            );\n                    }\n                    break;\n                \n                case 0x09:\n                    // gm system related\n                    if (syx[3] === 0x01)\n                    {\n                        SpessaSynthInfo(\"%cGM1 system on\", consoleColors.info);\n                        this.setSystem(\"gm\");\n                    }\n                    else if (syx[3] === 0x03)\n                    {\n                        SpessaSynthInfo(\"%cGM2 system on\", consoleColors.info);\n                        this.setSystem(\"gm2\");\n                    }\n                    else\n                    {\n                        SpessaSynthInfo(\"%cGM system off, defaulting to GS\", consoleColors.info);\n                        this.setSystem(\"gs\");\n                    }\n                    break;\n                \n                // MIDI Tuning standard\n                // https://midi.org/midi-tuning-updated-specification\n                case 0x08:\n                    let currentMessageIndex = 4;\n                    switch (syx[3])\n                    {\n                        // bulk tuning dump: all 128 notes\n                        case 0x01:\n                            const program = syx[currentMessageIndex++];\n                            // read the name\n                            syx.currentIndex = currentMessageIndex;\n                            const tuningName = readBytesAsString(syx, 16);\n                            currentMessageIndex += 16;\n                            if (syx.length < 384)\n                            {\n                                SpessaSynthWarn(`The Bulk Tuning Dump is too short! (${syx.length} bytes, at least 384 are expected)`);\n                                return;\n                            }\n                            // 128 frequencies follow\n                            for (let i = 0; i < 128; i++)\n                            {\n                                // set the given tuning to the program\n                                this.tunings[program][i] = getTuning(\n                                    syx[currentMessageIndex++],\n                                    syx[currentMessageIndex++],\n                                    syx[currentMessageIndex++]\n                                );\n                            }\n                            SpessaSynthInfo(\n                                `%cBulk Tuning Dump %c${tuningName}%c Program: %c${program}`,\n                                consoleColors.info,\n                                consoleColors.value,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        \n                        // single note change\n                        // single note change bank\n                        case 0x02:\n                        case 0x07:\n                            if (syx[3] === 0x07)\n                            {\n                                // skip the bank\n                                currentMessageIndex++;\n                            }\n                            // get program and number of changes\n                            const tuningProgram = syx[currentMessageIndex++];\n                            const numberOfChanges = syx[currentMessageIndex++];\n                            for (let i = 0; i < numberOfChanges; i++)\n                            {\n                                // set the given tuning to the program\n                                this.tunings[tuningProgram][syx[currentMessageIndex++]] = getTuning(\n                                    syx[currentMessageIndex++],\n                                    syx[currentMessageIndex++],\n                                    syx[currentMessageIndex++]\n                                );\n                            }\n                            SpessaSynthInfo(\n                                `%cSingle Note Tuning. Program: %c${tuningProgram}%c Keys affected: %c${numberOfChanges}`,\n                                consoleColors.info,\n                                consoleColors.recognized,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        \n                        // octave tuning (1 byte)\n                        // and octave tuning (2 bytes)\n                        case 0x09:\n                        case 0x08:\n                            // get tuning:\n                            const newOctaveTuning = new Int8Array(12);\n                            // start from bit 7\n                            if (syx[3] === 0x08)\n                            {\n                                // 1 byte tuning: 0 is -64 cents, 64 is 0, 127 is +63\n                                for (let i = 0; i < 12; i++)\n                                {\n                                    newOctaveTuning[i] = syx[7 + i] - 64;\n                                }\n                            }\n                            else\n                            {\n                                // 2 byte tuning. Like fine tune: 0 is -100 cents, 8192 is 0 cents, 16,383 is +100 cents\n                                for (let i = 0; i < 24; i += 2)\n                                {\n                                    const tuning = ((syx[7 + i] << 7) | syx[8 + i]) - 8192;\n                                    newOctaveTuning[i / 2] = Math.floor(tuning / 81.92); // map to [-100;+99] cents\n                                }\n                            }\n                            // apply to channels (ordered from 0)\n                            // bit 1: 14 and 15\n                            if ((syx[4] & 1) === 1)\n                            {\n                                this.midiAudioChannels[14 + channelOffset].setOctaveTuning(newOctaveTuning);\n                            }\n                            if (((syx[4] >> 1) & 1) === 1)\n                            {\n                                this.midiAudioChannels[15 + channelOffset].setOctaveTuning(newOctaveTuning);\n                            }\n                            \n                            // bit 2: channels 7 to 13\n                            for (let i = 0; i < 7; i++)\n                            {\n                                const bit = (syx[5] >> i) & 1;\n                                if (bit === 1)\n                                {\n                                    this.midiAudioChannels[7 + i + channelOffset].setOctaveTuning(newOctaveTuning);\n                                }\n                            }\n                            \n                            // bit 3: channels 0 to 16\n                            for (let i = 0; i < 7; i++)\n                            {\n                                const bit = (syx[6] >> i) & 1;\n                                if (bit === 1)\n                                {\n                                    this.midiAudioChannels[i + channelOffset].setOctaveTuning(newOctaveTuning);\n                                }\n                            }\n                            \n                            SpessaSynthInfo(\n                                `%cMIDI Octave Scale ${\n                                    syx[3] === 0x08 ? \"(1 byte)\" : \"(2 bytes)\"\n                                } tuning via Tuning: %c${newOctaveTuning.join(\" \")}`,\n                                consoleColors.info,\n                                consoleColors.value\n                            );\n                            break;\n                        \n                        default:\n                            SpessaSynthWarn(\n                                `%cUnrecognized MIDI Tuning standard message: %c${arrayToHexString(syx)}`,\n                                consoleColors.warn,\n                                consoleColors.unrecognized\n                            );\n                            break;\n                    }\n                    break;\n                \n                default:\n                    SpessaSynthWarn(\n                        `%cUnrecognized MIDI Realtime/non realtime message: %c${arrayToHexString(syx)}`,\n                        consoleColors.warn,\n                        consoleColors.unrecognized\n                    );\n                \n            }\n            break;\n        \n        // this is a roland sysex\n        // http://www.bandtrax.com.au/sysex.htm\n        // https://cdn.roland.com/assets/media/pdf/AT-20R_30R_MI.pdf\n        case 0x41:\n            if (syx[2] === 0x42 && syx[3] === 0x12)\n            {\n                // this is a GS sysex\n                const messageValue = syx[7];\n                // syx[5] and [6] is the system parameter, syx[7] is the value\n                // either patch common or SC-88 mode set\n                if (syx[4] === 0x40 || (syx[4] === 0x00 && syx[6] === 0x7F))\n                {\n                    // this is a channel parameter\n                    if ((syx[5] & 0x10) > 0)\n                    {\n                        // this is an individual part (channel) parameter\n                        // determine the channel 0 means channel 10 (default), 1 means 1 etc.\n                        // SC88 manual page 196\n                        const channel = [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15][syx[5] & 0x0F] + channelOffset;\n                        // for example, 0x1A means A = 11, which corresponds to channel 12 (counting from 1)\n                        const channelObject = this.midiAudioChannels[channel];\n                        switch (syx[6])\n                        {\n                            default:\n                                // this is some other GS sysex...\n                                notRecognized();\n                                break;\n                            \n                            case 0x15:\n                                // this is the Use for Drum Part sysex (multiple drums)\n                                const isDrums = messageValue > 0 && syx[5] >> 4; // if set to other than 0, is a drum channel\n                                channelObject.setDrums(isDrums);\n                                SpessaSynthInfo(\n                                    `%cChannel %c${channel}%c ${isDrums ?\n                                        \"is now a drum channel\"\n                                        :\n                                        \"now isn't a drum channel\"\n                                    }%c via: %c${arrayToHexString(syx)}`,\n                                    consoleColors.info,\n                                    consoleColors.value,\n                                    consoleColors.recognized,\n                                    consoleColors.info,\n                                    consoleColors.value\n                                );\n                                return;\n                            \n                            case 0x16:\n                                // this is the pitch key shift sysex\n                                const keyShift = messageValue - 64;\n                                channelObject.setCustomController(customControllers.channelKeyShift, keyShift);\n                                niceLogging(channel, keyShift, \"key shift\", \"keys\");\n                                return;\n                            \n                            // pan position\n                            case 0x1C:\n                                // 0 is random\n                                let panpot = messageValue;\n                                if (panpot === 0)\n                                {\n                                    channelObject.randomPan = true;\n                                    SpessaSynthInfo(\n                                        `%cRandom pan is set to %cON%c for %c${channel}`,\n                                        consoleColors.info,\n                                        consoleColors.recognized,\n                                        consoleColors.info,\n                                        consoleColors.value\n                                    );\n                                }\n                                else\n                                {\n                                    channelObject.randomPan = false;\n                                    channelObject.controllerChange(midiControllers.pan, panpot);\n                                }\n                                break;\n                            \n                            // chorus send\n                            case 0x21:\n                                channelObject.controllerChange(midiControllers.chorusDepth, messageValue);\n                                break;\n                            \n                            // reverb send\n                            case 0x22:\n                                channelObject.controllerChange(midiControllers.reverbDepth, messageValue);\n                                break;\n                            \n                            case 0x40:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4A:\n                            case 0x4B:\n                                // scale tuning: up to 12 bytes\n                                const tuningBytes = syx.length - 9; // data starts at 7, minus checksum and f7\n                                // read em bytes\n                                const newTuning = new Int8Array(12);\n                                for (let i = 0; i < tuningBytes; i++)\n                                {\n                                    newTuning[i] = syx[i + 7] - 64;\n                                }\n                                channelObject.setOctaveTuning(newTuning);\n                                const cents = messageValue - 64;\n                                niceLogging(channel, newTuning.join(\" \"), \"octave scale tuning\", \"cents\");\n                                channelObject.setTuning(cents);\n                                break;\n                        }\n                        return;\n                    }\n                    else\n                        // this is a channel parameter also\n                    if ((syx[5] & 0x20) > 0)\n                    {\n                        // this is an individual part (channel) parameter\n                        // determine the channel 0 means channel 10 (default), 1 means 1 etc.\n                        const channel = [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15][syx[5] & 0x0F] + channelOffset;\n                        // for example, 0x1A means A = 11, which corresponds to channel 12 (counting from 1)\n                        const channelObject = this.midiAudioChannels[channel];\n                        const centeredValue = (messageValue - 64);\n                        const normalizedValue = centeredValue / 64;\n                        const normalizedNotCentered = messageValue / 128;\n                        \n                        // setup receivers for cc to parameter (sc-88 manual page 198)\n                        const setupReceivers = (source, sourceName, bipolar = false) =>\n                        {\n                            switch (syx[6] & 0x0F)\n                            {\n                                case 0x00:\n                                    // see https://github.com/spessasus/SpessaSynth/issues/154\n                                    // pitch control\n                                    // special case:\n                                    // if the source is a pitch wheel, it's a strange way of setting the bend range\n                                    // testcase: th07_03.mid\n                                    if (source === NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel)\n                                    {\n                                        channelObject.controllerChange(midiControllers.RPNMsb, 0x0);\n                                        channelObject.controllerChange(midiControllers.RPNLsb, 0x0);\n                                        channelObject.controllerChange(\n                                            midiControllers.dataEntryMsb,\n                                            Math.floor(centeredValue)\n                                        );\n                                    }\n                                    else\n                                    {\n                                        channelObject.sysExModulators.setModulator(\n                                            source,\n                                            generatorTypes.fineTune,\n                                            centeredValue * 100,\n                                            bipolar\n                                        );\n                                        niceLogging(channel, centeredValue, `${sourceName} pitch control`, \"semitones\");\n                                    }\n                                    break;\n                                \n                                case 0x01:\n                                    // cutoff\n                                    channelObject.sysExModulators.setModulator(\n                                        source,\n                                        generatorTypes.initialFilterFc,\n                                        normalizedValue * 9600,\n                                        bipolar\n                                    );\n                                    niceLogging(\n                                        channel,\n                                        normalizedValue * 9600,\n                                        `${sourceName} pitch control`,\n                                        \"cents\"\n                                    );\n                                    break;\n                                \n                                case 0x02:\n                                    // amplitude\n                                    channelObject.sysExModulators.setModulator(\n                                        source,\n                                        generatorTypes.initialAttenuation,\n                                        normalizedValue * 960, // spec says \"100%\" so 960cB in sf2\n                                        bipolar\n                                    );\n                                    niceLogging(channel, normalizedValue * 960, `${sourceName} amplitude`, \"cB\");\n                                    break;\n                                \n                                // rate control is ignored as it is in hertz\n                                \n                                case 0x04:\n                                    // LFO1 pitch depth\n                                    channelObject.sysExModulators.setModulator(\n                                        source,\n                                        generatorTypes.vibLfoToPitch,\n                                        normalizedNotCentered * 600,\n                                        bipolar\n                                    );\n                                    niceLogging(\n                                        channel,\n                                        normalizedNotCentered * 600,\n                                        `${sourceName} LFO1 pitch depth`,\n                                        \"cents\"\n                                    );\n                                    break;\n                                \n                                case 0x05:\n                                    // LFO1 filter depth\n                                    channelObject.sysExModulators.setModulator(\n                                        source,\n                                        generatorTypes.vibLfoToFilterFc,\n                                        normalizedNotCentered * 2400,\n                                        bipolar\n                                    );\n                                    niceLogging(\n                                        channel,\n                                        normalizedNotCentered * 2400,\n                                        `${sourceName} LFO1 filter depth`,\n                                        \"cents\"\n                                    );\n                                    break;\n                                \n                                case 0x06:\n                                    // LFO1 amplitude depth\n                                    channelObject.sysExModulators.setModulator(\n                                        source,\n                                        generatorTypes.vibLfoToVolume,\n                                        normalizedValue * 960,\n                                        bipolar\n                                    );\n                                    niceLogging(\n                                        channel,\n                                        normalizedValue * 960,\n                                        `${sourceName} LFO1 amplitude depth`,\n                                        \"cB\"\n                                    );\n                                    break;\n                                \n                                // rate control is ignored as it is in hertz\n                                \n                                case 0x08:\n                                    // LFO2 pitch depth\n                                    channelObject.sysExModulators.setModulator(\n                                        source,\n                                        generatorTypes.modLfoToPitch,\n                                        normalizedNotCentered * 600,\n                                        bipolar\n                                    );\n                                    niceLogging(\n                                        channel,\n                                        normalizedNotCentered * 600,\n                                        `${sourceName} LFO2 pitch depth`,\n                                        \"cents\"\n                                    );\n                                    break;\n                                \n                                case 0x09:\n                                    // LFO2 filter depth\n                                    channelObject.sysExModulators.setModulator(\n                                        source,\n                                        generatorTypes.modLfoToFilterFc,\n                                        normalizedNotCentered * 2400,\n                                        bipolar\n                                    );\n                                    niceLogging(\n                                        channel,\n                                        normalizedNotCentered * 2400,\n                                        `${sourceName} LFO2 filter depth`,\n                                        \"cents\"\n                                    );\n                                    break;\n                                \n                                case 0x0A:\n                                    // LFO2 amplitude depth\n                                    channelObject.sysExModulators.setModulator(\n                                        source,\n                                        generatorTypes.modLfoToVolume,\n                                        normalizedValue * 960,\n                                        bipolar\n                                    );\n                                    niceLogging(\n                                        channel,\n                                        normalizedValue * 960,\n                                        `${sourceName} LFO2 amplitude depth`,\n                                        \"cB\"\n                                    );\n                                    break;\n                            }\n                        };\n                        \n                        // SC88 manual page 198\n                        switch (syx[6] & 0xF0)\n                        {\n                            default:\n                                // this is some other GS sysex...\n                                notRecognized();\n                                break;\n                            \n                            case 0x00:\n                                // modulation wheel\n                                setupReceivers(midiControllers.modulationWheel, \"mod wheel\");\n                                break;\n                            \n                            case 0x10:\n                                // pitch bend\n                                setupReceivers(NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel, \"pitch bend\", true);\n                                break;\n                            \n                            case 0x20:\n                                // channel pressure\n                                setupReceivers(\n                                    NON_CC_INDEX_OFFSET + modulatorSources.channelPressure,\n                                    \"channel pressure\"\n                                );\n                                break;\n                            \n                            case 0x30:\n                                // poly pressure\n                                setupReceivers(\n                                    NON_CC_INDEX_OFFSET + modulatorSources.polyPressure,\n                                    \"poly pressure\"\n                                );\n                                break;\n                        }\n                        return;\n                    }\n                    else\n                        // this is a global system parameter\n                    if (syx[5] === 0x00)\n                    {\n                        switch (syx[6])\n                        {\n                            default:\n                                notRecognized();\n                                break;\n                            \n                            case 0x7F:\n                                // roland mode set\n                                // GS mode set\n                                if (messageValue === 0x00)\n                                {\n                                    // this is a GS reset\n                                    SpessaSynthInfo(\"%cGS Reset received!\", consoleColors.info);\n                                    this.resetAllControllers(false);\n                                    this.setSystem(\"gs\");\n                                }\n                                else if (messageValue === 0x7F)\n                                {\n                                    // GS mode off\n                                    SpessaSynthInfo(\"%cGS system off, switching to GM2\", consoleColors.info);\n                                    this.resetAllControllers(false);\n                                    this.setSystem(\"gm2\");\n                                }\n                                break;\n                            \n                            case 0x06:\n                                // roland master pan\n                                SpessaSynthInfo(\n                                    `%cRoland GS Master Pan set to: %c${messageValue}%c with: %c${arrayToHexString(\n                                        syx)}`,\n                                    consoleColors.info,\n                                    consoleColors.value,\n                                    consoleColors.info,\n                                    consoleColors.value\n                                );\n                                this.setMasterParameter(masterParameterType.masterPan, (messageValue - 64) / 64);\n                                break;\n                            \n                            \n                            case 0x04:\n                                // roland GS master volume\n                                SpessaSynthInfo(\n                                    `%cRoland GS Master Volume set to: %c${messageValue}%c with: %c${arrayToHexString(\n                                        syx)}`,\n                                    consoleColors.info,\n                                    consoleColors.value,\n                                    consoleColors.info,\n                                    consoleColors.value\n                                );\n                                this.setMIDIVolume(messageValue / 127);\n                                break;\n                            \n                            case 0x05:\n                                // roland master key shift (transpose)\n                                const transpose = messageValue - 64;\n                                SpessaSynthInfo(\n                                    `%cRoland GS Master Key-Shift set to: %c${transpose}%c with: %c${arrayToHexString(\n                                        syx)}`,\n                                    consoleColors.info,\n                                    consoleColors.value,\n                                    consoleColors.info,\n                                    consoleColors.value\n                                );\n                                this.setMasterTuning(transpose * 100);\n                                break;\n                        }\n                        return;\n                    }\n                    else\n                        // this is a global system parameter also\n                    if (syx[5] === 0x01)\n                    {\n                        switch (syx[6])\n                        {\n                            default:\n                                notRecognized();\n                                break;\n                            \n                            case 0x00:\n                                // patch name. cool!\n                                syx.currentIndex = 7;\n                                const patchName = readBytesAsString(syx, 16);\n                                SpessaSynthInfo(\n                                    `%cGS Patch name: %c${patchName}`,\n                                    consoleColors.info,\n                                    consoleColors.value\n                                );\n                                break;\n                            \n                            case 0x33:\n                                // reverb level\n                                SpessaSynthInfo(\n                                    `%cGS Reverb level: %c${messageValue}`,\n                                    consoleColors.info, consoleColors.value\n                                );\n                                // 64 is the default\n                                this.reverbSend = messageValue / 64;\n                                break;\n                            \n                            // unsupported reverb params\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x34:\n                            case 0x35:\n                            case 0x37:\n                                SpessaSynthInfo(\n                                    `%cUnsupported GS Reverb Parameter: %c${syx[6].toString(16)}`,\n                                    consoleColors.warn, consoleColors.unrecognized\n                                );\n                                break;\n                            \n                            case 0x3A:\n                                // chorus level\n                                SpessaSynthInfo(\n                                    `%cGS Chorus level: %c${messageValue}`,\n                                    consoleColors.info, consoleColors.value\n                                );\n                                // 64 is the default\n                                this.chorusSend = messageValue / 64;\n                                break;\n                            \n                            // unsupported chorus params\n                            case 0x38:\n                            case 0x39:\n                            case 0x3B:\n                            case 0x3C:\n                            case 0x3D:\n                            case 0x3E:\n                            case 0x3F:\n                            case 0x40:\n                                SpessaSynthInfo(\n                                    `%cUnsupported GS Chorus Parameter: %c${syx[6].toString(16)}`,\n                                    consoleColors.warn, consoleColors.unrecognized\n                                );\n                                break;\n                        }\n                    }\n                }\n                else\n                {\n                    // this is some other GS sysex...\n                    notRecognized();\n                }\n                return;\n            }\n            else if (syx[2] === 0x45 && syx[3] === 0x12)\n            {\n                // 0x45: GS Display Data, 0x12: DT1 (Device Transmit)\n                // check for embedded copyright\n                // (roland SC display sysex) http://www.bandtrax.com.au/sysex.htm\n                \n                if (\n                    syx[4] === 0x10 && // Sound Canvas Display\n                    syx[6] === 0x00    // Data follows\n                )\n                {\n                    if (syx[5] === 0x00) // Display letters\n                    {\n                        // get the text\n                        // and header ends with (checksum) F7\n                        const text = new Uint8Array(syx.slice(7, syx.length - 2));\n                        this.callEvent(\n                            \"synthdisplay\",\n                            {\n                                displayData: text,\n                                displayType: synthDisplayTypes.SoundCanvasText\n                            }\n                        );\n                    }\n                    else if (syx[5] === 0x01) // Matrix display\n                    {\n                        // get the data\n                        // and header ends with (checksum) F7\n                        const dotMatrixData = new Uint8Array(syx.slice(7, syx.length - 3));\n                        this.callEvent(\n                            \"synthdisplay\",\n                            {\n                                displayData: dotMatrixData,\n                                displayType: synthDisplayTypes.SoundCanvasDotDisplay\n                            }\n                        );\n                        SpessaSynthInfo(\n                            `%cRoland SC Display Dot Matrix via: %c${arrayToHexString(\n                                syx)}`,\n                            consoleColors.info,\n                            consoleColors.value\n                        );\n                    }\n                    else\n                    {\n                        // this is some other GS sysex...\n                        notRecognized();\n                    }\n                }\n            }\n            else if (syx[2] === 0x16 && syx[3] === 0x12 && syx[4] === 0x10)\n            {\n                // this is a roland master volume message\n                this.setMIDIVolume(syx[7] / 100);\n                SpessaSynthInfo(\n                    `%cRoland Master Volume control set to: %c${syx[7]}%c via: %c${arrayToHexString(\n                        syx)}`,\n                    consoleColors.info,\n                    consoleColors.value,\n                    consoleColors.info,\n                    consoleColors.value\n                );\n                return;\n            }\n            else\n            {\n                // this is something else...\n                SpessaSynthWarn(\n                    `%cUnrecognized Roland SysEx: %c${arrayToHexString(syx)}`,\n                    consoleColors.warn,\n                    consoleColors.unrecognized\n                );\n                return;\n            }\n            break;\n        \n        // yamaha\n        // http://www.studio4all.de/htmle/main91.html\n        case 0x43:\n            // XG sysex\n            if (syx[2] === 0x4C)\n            {\n                // XG system parameter\n                if (syx[3] === 0x00 && syx[4] === 0x00)\n                {\n                    switch (syx[5])\n                    {\n                        // master volume\n                        case 0x04:\n                            const vol = syx[6];\n                            this.setMIDIVolume(vol / 127);\n                            SpessaSynthInfo(\n                                `%cXG master volume. Volume: %c${vol}`,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        \n                        // master transpose\n                        case 0x06:\n                            const transpose = syx[6] - 64;\n                            this.transposeAllChannels(transpose);\n                            SpessaSynthInfo(\n                                `%cXG master transpose. Volume: %c${transpose}`,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        \n                        // XG on\n                        case 0x7E:\n                            SpessaSynthInfo(\"%cXG system on\", consoleColors.info);\n                            this.resetAllControllers(false);\n                            this.setSystem(\"xg\");\n                            break;\n                    }\n                }\n                else\n                    // XG part parameter\n                if (syx[3] === 0x08)\n                {\n                    if (!isSystemXG(this.system))\n                    {\n                        return;\n                    }\n                    const channel = syx[4] + channelOffset;\n                    if (channel >= this.midiAudioChannels.length)\n                    {\n                        // invalid channel\n                        return;\n                    }\n                    const channelObject = this.midiAudioChannels[channel];\n                    const value = syx[6];\n                    switch (syx[5])\n                    {\n                        // bank-select MSB\n                        case 0x01:\n                            channelObject.controllerChange(midiControllers.bankSelect, value);\n                            break;\n                        \n                        // bank-select LSB\n                        case 0x02:\n                            channelObject.controllerChange(midiControllers.lsbForControl0BankSelect, value);\n                            break;\n                        \n                        // program change\n                        case 0x03:\n                            channelObject.programChange(value);\n                            break;\n                        \n                        // note shift\n                        case 0x08:\n                            if (channelObject.drumChannel)\n                            {\n                                return;\n                            }\n                            const semitones = value - 64;\n                            channelObject.channelTransposeKeyShift = semitones;\n                            break;\n                        \n                        // volume\n                        case 0x0B:\n                            channelObject.controllerChange(midiControllers.mainVolume, value);\n                            break;\n                        \n                        // pan position\n                        case 0x0E:\n                            let pan = value;\n                            if (pan === 0)\n                            {\n                                // 0 means random\n                                channelObject.randomPan = true;\n                                SpessaSynthInfo(\n                                    `%cRandom pan is set to %cON%c for %c${channel}`,\n                                    consoleColors.info,\n                                    consoleColors.recognized,\n                                    consoleColors.info,\n                                    consoleColors.value\n                                );\n                            }\n                            else\n                            {\n                                channelObject.controllerChange(midiControllers.pan, pan);\n                            }\n                            break;\n                        \n                        // reverb\n                        case 0x13:\n                            channelObject.controllerChange(midiControllers.reverbDepth, value);\n                            break;\n                        \n                        // chorus\n                        case 0x12:\n                            channelObject.controllerChange(midiControllers.chorusDepth, value);\n                            break;\n                        \n                        default:\n                            SpessaSynthWarn(\n                                `%cUnrecognized Yamaha XG Part Setup: %c${syx[5].toString(16)\n                                    .toUpperCase()}`,\n                                consoleColors.warn,\n                                consoleColors.unrecognized\n                            );\n                    }\n                }\n                else if (\n                    syx[3] === 0x06 && // XG System parameter\n                    syx[4] === 0x00    // System Byte\n                )\n                {\n                    // displayed letters (remove F7 at the end)\n                    // include byte 5 as it seems to be line information (useful)\n                    const textData = new Uint8Array(syx.slice(5, syx.length - 1));\n                    this.callEvent(\n                        \"synthdisplay\",\n                        {\n                            displayData: textData,\n                            displayType: synthDisplayTypes.XGText\n                        }\n                    );\n                }\n                else if (isSystemXG(this.system))\n                {\n                    SpessaSynthWarn(\n                        `%cUnrecognized Yamaha XG SysEx: %c${arrayToHexString(syx)}`,\n                        consoleColors.warn,\n                        consoleColors.unrecognized\n                    );\n                }\n                \n            }\n            else\n            {\n                if (isSystemXG(this.system))\n                {\n                    SpessaSynthWarn(\n                        `%cUnrecognized Yamaha SysEx: %c${arrayToHexString(syx)}`,\n                        consoleColors.warn,\n                        consoleColors.unrecognized\n                    );\n                }\n            }\n            break;\n        \n        \n    }\n}", "import { consoleColors } from \"../../../../utils/other.js\";\nimport { SpessaSynthInfo } from \"../../../../utils/loggin.js\";\nimport { modulatorSources } from \"../../../../soundfont/basic_soundfont/modulator.js\";\nimport {\n    customControllers,\n    customResetArray,\n    dataEntryStates,\n    NON_CC_INDEX_OFFSET,\n    PORTAMENTO_CONTROL_UNSET,\n    resetArray\n} from \"../../engine_components/controller_tables.js\";\nimport { midiControllers } from \"../../../../midi/midi_message.js\";\nimport { DEFAULT_PERCUSSION, DEFAULT_SYNTH_MODE } from \"../../../synth_constants.js\";\nimport { getDefaultBank } from \"../../../../utils/xg_hacks.js\";\n\n\n/**\n * Full system reset\n * @this {SpessaSynthProcessor}\n * @param log {boolean}\n */\nexport function resetAllControllers(log = true)\n{\n    if (log)\n    {\n        SpessaSynthInfo(\"%cResetting all controllers!\", consoleColors.info);\n    }\n    this.callEvent(\"allcontrollerreset\", undefined);\n    this.setSystem(DEFAULT_SYNTH_MODE);\n    for (let channelNumber = 0; channelNumber < this.midiAudioChannels.length; channelNumber++)\n    {\n        /**\n         * @type {MidiAudioChannel}\n         **/\n        const ch = this.midiAudioChannels[channelNumber];\n        \n        ch.resetControllers();\n        // if preset is unlocked, switch to non-drums and call event\n        if (!ch.lockPreset)\n        {\n            ch.setBankSelect(getDefaultBank(this.system));\n            if (channelNumber % 16 === DEFAULT_PERCUSSION)\n            {\n                ch.setPreset(this.drumPreset);\n                ch.drumChannel = true;\n                this.callEvent(\"drumchange\", {\n                    channel: channelNumber,\n                    isDrumChannel: true\n                });\n            }\n            else\n            {\n                ch.drumChannel = false;\n                ch.setPreset(this.defaultPreset);\n                this.callEvent(\"drumchange\", {\n                    channel: channelNumber,\n                    isDrumChannel: false\n                });\n            }\n        }\n        else\n        {\n            this.callEvent(\"drumchange\", {\n                channel: channelNumber,\n                isDrumChannel: ch.drumChannel\n            });\n        }\n        // safety net\n        if (!ch.preset)\n        {\n            continue;\n        }\n        const presetBank = ch.preset?.bank;\n        // call program change\n        this.callEvent(\"programchange\", {\n            channel: channelNumber,\n            program: ch.preset?.program,\n            bank: presetBank\n        });\n        \n        for (let ccNum = 0; ccNum < 128; ccNum++)\n        {\n            if (this.midiAudioChannels[channelNumber].lockedControllers[ccNum])\n            {\n                // was not reset so restore the value\n                this.callEvent(\"controllerchange\", {\n                    channel: channelNumber,\n                    controllerNumber: ccNum,\n                    controllerValue: this.midiAudioChannels[channelNumber].midiControllers[ccNum] >> 7\n                });\n            }\n            \n        }\n        \n        \n        // restore pitch wheel\n        if (this.midiAudioChannels[channelNumber].lockedControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel] === false)\n        {\n            const val = this.midiAudioChannels[channelNumber].midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel];\n            const msb = val >> 7;\n            const lsb = val & 0x7F;\n            this.callEvent(\"pitchwheel\", {\n                channel: channelNumber,\n                MSB: msb,\n                LSB: lsb\n            });\n        }\n        \n        // restore channel pressure\n        if (this.midiAudioChannels[channelNumber].lockedControllers[NON_CC_INDEX_OFFSET + modulatorSources.channelPressure] === false)\n        {\n            const val = this.midiAudioChannels[channelNumber].midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.channelPressure] >> 7;\n            this.callEvent(\"channelpressure\", {\n                channel: channelNumber,\n                pressure: val\n            });\n        }\n    }\n    this.tunings = [];\n    this.tunings = [];\n    for (let i = 0; i < 128; i++)\n    {\n        this.tunings.push([]);\n    }\n    \n    this.setMIDIVolume(1);\n}\n\n/**\n * Resets all controllers for channel\n * @this {MidiAudioChannel}\n */\nexport function resetControllers()\n{\n    this.channelOctaveTuning.fill(0);\n    \n    // reset the array\n    for (let i = 0; i < resetArray.length; i++)\n    {\n        if (this.lockedControllers[i])\n        {\n            continue;\n        }\n        const resetValue = resetArray[i];\n        if (this.midiControllers[i] !== resetValue && i < 127)\n        {\n            if (i === midiControllers.portamentoControl)\n            {\n                this.midiControllers[i] = PORTAMENTO_CONTROL_UNSET;\n            }\n            else\n            {\n                this.controllerChange(i, resetValue >> 7);\n            }\n        }\n        else\n        {\n            // out of range, do a regular reset\n            this.midiControllers[i] = resetValue;\n        }\n    }\n    this.channelVibrato = { rate: 0, depth: 0, delay: 0 };\n    this.holdPedal = false;\n    this.randomPan = false;\n    \n    this.sysExModulators.resetModulators();\n    \n    // reset custom controllers\n    // special case: transpose does not get affected\n    const transpose = this.customControllers[customControllers.channelTransposeFine];\n    this.customControllers.set(customResetArray);\n    this.setCustomController(customControllers.channelTransposeFine, transpose);\n    this.resetParameters();\n    \n}\n\n\n/**\n * @type {Set<midiControllers|number>}\n */\nexport const nonResetableCCs = new Set([\n    midiControllers.bankSelect,\n    midiControllers.lsbForControl0BankSelect,\n    midiControllers.mainVolume,\n    midiControllers.lsbForControl7MainVolume,\n    midiControllers.pan,\n    midiControllers.lsbForControl10Pan,\n    midiControllers.reverbDepth,\n    midiControllers.tremoloDepth,\n    midiControllers.chorusDepth,\n    midiControllers.detuneDepth,\n    midiControllers.phaserDepth,\n    midiControllers.soundVariation,\n    midiControllers.filterResonance,\n    midiControllers.releaseTime,\n    midiControllers.attackTime,\n    midiControllers.brightness,\n    midiControllers.decayTime,\n    midiControllers.vibratoRate,\n    midiControllers.vibratoDepth,\n    midiControllers.vibratoDelay,\n    midiControllers.soundController10\n]);\n\n/**\n * Reset all controllers for channel, but RP-15 compliant\n *  https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp15.pdf\n *  @this {MidiAudioChannel}\n */\nexport function resetControllersRP15Compliant()\n{\n    // reset tunings\n    this.channelOctaveTuning.fill(0);\n    \n    // reset pitch bend\n    this.pitchWheel(64, 0);\n    \n    this.channelVibrato = { rate: 0, depth: 0, delay: 0 };\n    \n    for (let i = 0; i < 128; i++)\n    {\n        const resetValue = resetArray[i];\n        if (!nonResetableCCs.has(i) && resetValue !== this.midiControllers[i])\n        {\n            if (i === midiControllers.portamentoControl)\n            {\n                this.midiControllers[i] = PORTAMENTO_CONTROL_UNSET;\n            }\n            else\n            {\n                this.controllerChange(i, resetValue >> 7);\n            }\n        }\n    }\n    this.resetGeneratorOverrides();\n    this.resetGeneratorOffsets();\n}\n\n/**\n * @this {MidiAudioChannel}\n */\nexport function resetParameters()\n{\n    /**\n     * reset the state machine to idle\n     */\n    this.dataEntryState = dataEntryStates.Idle;\n    this.midiControllers[midiControllers.NRPNLsb] = 127 << 7;\n    this.midiControllers[midiControllers.NRPNMsb] = 127 << 7;\n    this.midiControllers[midiControllers.RPNLsb] = 127 << 7;\n    this.midiControllers[midiControllers.RPNMsb] = 127 << 7;\n    this.resetGeneratorOverrides();\n    this.resetGeneratorOffsets();\n}", "import { SpessaSynthInfo, SpessaSynthWarn } from \"../../../utils/loggin.js\";\nimport { isXGDrums } from \"../../../utils/xg_hacks.js\";\nimport { EMBEDDED_SOUND_BANK_ID } from \"../../synth_constants.js\";\n\n/**\n * @typedef {Object} SoundFontType\n * @property {string} id - unique id for the soundfont\n * @property {BasicSoundBank} soundfont - the soundfont itself\n * @property {number} bankOffset - the soundfont's bank offset\n */\n\nexport class SoundFontManager\n{\n    /**\n     * All the soundfonts, ordered from the most important to the least.\n     * @type {SoundFontType[]}\n     */\n    soundfontList = [];\n    /**\n     * @type {{bank: number, presetName: string, program: number}[]}\n     */\n    presetList = [];\n    \n    /**\n     * @param presetListChangeCallback {function} to call when stuff changes\n     */\n    constructor(presetListChangeCallback)\n    {\n        this.presetListChangeCallback = presetListChangeCallback;\n    }\n    \n    generatePresetList()\n    {\n        /**\n         * <\"bank-program\", \"presetName\">\n         * @type {Record<string, string>}\n         */\n        const presetList = {};\n        // gather the presets in reverse and replace if necessary\n        for (let i = this.soundfontList.length - 1; i >= 0; i--)\n        {\n            const font = this.soundfontList[i];\n            /**\n             * prevent preset names from the same soudfont from being overriden\n             * if the soundfont has two presets with matching bank and program\n             * @type {Set<string>}\n             */\n            const presets = new Set();\n            for (const p of font.soundfont.presets)\n            {\n                const bank = Math.min(128, p.bank + font.bankOffset);\n                const presetString = `${bank}-${p.program}`;\n                if (presets.has(presetString))\n                {\n                    continue;\n                }\n                presets.add(presetString);\n                presetList[presetString] = p.presetName;\n            }\n        }\n        \n        this.presetList = [];\n        for (const [string, name] of Object.entries(presetList))\n        {\n            const pb = string.split(\"-\");\n            this.presetList.push({\n                presetName: name,\n                program: parseInt(pb[1]),\n                bank: parseInt(pb[0])\n            });\n        }\n        this.presetListChangeCallback();\n    }\n    \n    /**\n     * Get the final preset list\n     * @returns {{bank: number, presetName: string, program: number}[]}\n     */\n    getPresetList()\n    {\n        return this.presetList.slice();\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Clears all soundfonts and adds a new one with an ID \"main\"\n     * @param soundFont {BasicSoundBank}\n     */\n    reloadManager(soundFont)\n    {\n        // do not clear the embedded bank\n        this.soundfontList = this.soundfontList.filter(sf => sf.id === EMBEDDED_SOUND_BANK_ID);\n        this.soundfontList.push({\n            id: \"main\",\n            bankOffset: 0,\n            soundfont: soundFont\n        });\n        this.generatePresetList();\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Deletes a given soundfont.\n     * @param id {string}\n     */\n    deleteSoundFont(id)\n    {\n        if (this.soundfontList.length === 0)\n        {\n            SpessaSynthWarn(\"1 soundfont left. Aborting!\");\n            return;\n        }\n        const index = this.soundfontList.findIndex(s => s.id === id);\n        if (index === -1)\n        {\n            SpessaSynthInfo(`No soundfont with id of \"${id}\" found. Aborting!`);\n            return;\n        }\n        this.soundfontList.splice(index, 1);\n        this.generatePresetList();\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Adds a new soundfont with a given ID, or replaces an existing one.\n     * @param font {BasicSoundBank}\n     * @param id {string}\n     * @param bankOffset {number}\n     */\n    addNewSoundFont(font, id, bankOffset)\n    {\n        if (this.soundfontList.find(s => s.id === id) !== undefined)\n        {\n            // replace\n            const soundfont = this.soundfontList.find(s => s.id === id);\n            soundfont.soundfont = font;\n            soundfont.bankOffset = bankOffset;\n        }\n        else\n        {\n            this.soundfontList.push({\n                id: id,\n                soundfont: font,\n                bankOffset: bankOffset\n            });\n        }\n        this.generatePresetList();\n    }\n    \n    /**\n     * Gets the current soundfont order\n     * @returns {string[]}\n     */\n    getCurrentSoundFontOrder()\n    {\n        return this.soundfontList.map(s => s.id);\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Rearranges the soundfonts\n     * @param newList {string[]} the order of soundfonts, a list of strings, first overwrites second\n     */\n    rearrangeSoundFonts(newList)\n    {\n        this.soundfontList.sort((a, b) =>\n            newList.indexOf(a.id) - newList.indexOf(b.id)\n        );\n        this.generatePresetList();\n    }\n    \n    /**\n     * Gets a given preset from the soundfont stack\n     * @param bankNumber {number}\n     * @param programNumber {number}\n     * @param allowXGDrums {boolean} if true, allows XG drum banks (120, 126 and 127) as drum preset\n     * @returns {{preset: BasicPreset, bankOffset: number}} the preset and its bank offset\n     */\n    getPreset(bankNumber, programNumber, allowXGDrums = false)\n    {\n        if (this.soundfontList.length < 1)\n        {\n            throw new Error(\"No soundfonts! Did you forget to add one?\");\n        }\n        const isDrum = bankNumber === 128 || (allowXGDrums && isXGDrums(bankNumber));\n        for (const sf of this.soundfontList)\n        {\n            // check for the preset (with given offset)\n            const preset = sf.soundfont.getPresetNoFallback(\n                bankNumber === 128 ? 128 : bankNumber - sf.bankOffset,\n                programNumber,\n                allowXGDrums\n            );\n            if (preset !== undefined)\n            {\n                return {\n                    preset: preset,\n                    bankOffset: sf.bankOffset\n                };\n            }\n            // if not found, advance to the next soundfont\n        }\n        // if none found, return the first correct preset found\n        if (!isDrum)\n        {\n            for (const sf of this.soundfontList)\n            {\n                const preset = sf.soundfont.presets.find(p => p.program === programNumber && !p.isDrumPreset(\n                    allowXGDrums));\n                if (preset)\n                {\n                    return {\n                        preset: preset,\n                        bankOffset: sf.bankOffset\n                    };\n                }\n            }\n            // if nothing at all, use the first preset\n            const sf = this.soundfontList[0];\n            return {\n                preset: sf.soundfont.presets[0],\n                bankOffset: sf.bankOffset\n            };\n        }\n        else\n        {\n            for (const sf of this.soundfontList)\n            {\n                // check for any drum type (127/128) and matching program\n                const p = sf.soundfont.presets.find(p => p.isDrumPreset(allowXGDrums) && p.program === programNumber);\n                if (p)\n                {\n                    return {\n                        preset: p,\n                        bankOffset: sf.bankOffset\n                    };\n                }\n                // check for any drum preset\n                const preset = sf.soundfont.presets.find(p => p.isDrumPreset(allowXGDrums));\n                if (preset)\n                {\n                    return {\n                        preset: preset,\n                        bankOffset: sf.bankOffset\n                    };\n                }\n            }\n            // if nothing at all, use the first preset\n            const sf = this.soundfontList[0];\n            return {\n                preset: sf.soundfont.presets[0],\n                bankOffset: sf.bankOffset\n            };\n        }\n    }\n    \n    destroyManager()\n    {\n        this.soundfontList.forEach(s =>\n        {\n            s.soundfont.destroySoundBank();\n        });\n        delete this.soundfontList;\n    }\n}", "/**\n * A manager for custom key overrides for channels\n */\n\nexport class KeyModifier\n{\n    \n    /**\n     * The new override velocity. -1 means unchanged\n     * @type {number}\n     */\n    velocity = -1;\n    /**\n     * The patch this key uses. -1 on either means default\n     * @type {{bank: number, program: number}}\n     */\n    patch = { bank: -1, program: -1 };\n    \n    /**\n     * Linear gain override for the voice\n     */\n    gain = 1;\n    \n    /**\n     * @param velocity {number}\n     * @param bank {number}\n     * @param program {number}\n     * @param gain {number}\n     */\n    constructor(velocity = -1, bank = -1, program = -1, gain = 1)\n    {\n        this.velocity = velocity;\n        this.patch = {\n            bank: bank,\n            program: program\n        };\n        this.gain = gain;\n    }\n}\n\nexport class KeyModifierManager\n{\n    /**\n     * The velocity override mappings for MIDI keys\n     * stored as [channelNumber][midiNote]\n     * @type {KeyModifier[][]}\n     * @private\n     */\n    _keyMappings = [];\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     * @param mapping {KeyModifier}\n     */\n    addMapping(channel, midiNote, mapping)\n    {\n        if (this._keyMappings[channel] === undefined)\n        {\n            this._keyMappings[channel] = [];\n        }\n        this._keyMappings[channel][midiNote] = mapping;\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     */\n    deleteMapping(channel, midiNote)\n    {\n        if (this._keyMappings[channel]?.[midiNote] === undefined)\n        {\n            return;\n        }\n        this._keyMappings[channel][midiNote] = undefined;\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Clear all mappings\n     */\n    clearMappings()\n    {\n        this._keyMappings = [];\n    }\n    \n    /**\n     * @param mappings {KeyModifier[][]}\n     */\n    setMappings(mappings)\n    {\n        this._keyMappings = mappings;\n    }\n    \n    /**\n     * @returns {KeyModifier[][]}\n     */\n    getMappings()\n    {\n        return this._keyMappings;\n    }\n    \n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     * @returns {number} velocity, -1 if unchanged\n     */\n    getVelocity(channel, midiNote)\n    {\n        return this._keyMappings[channel]?.[midiNote]?.velocity ?? -1;\n    }\n    \n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     * @returns {number} linear gain\n     */\n    getGain(channel, midiNote)\n    {\n        return this._keyMappings[channel]?.[midiNote]?.gain ?? 1;\n    }\n    \n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     * @returns {boolean}\n     */\n    hasOverridePatch(channel, midiNote)\n    {\n        const bank = this._keyMappings[channel]?.[midiNote]?.patch?.bank;\n        return bank !== undefined && bank >= 0;\n    }\n    \n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     * @returns {{bank: number, program: number}} -1 if unchanged\n     */\n    getPatch(channel, midiNote)\n    {\n        const modifier = this._keyMappings[channel]?.[midiNote];\n        if (modifier)\n        {\n            return modifier.patch;\n        }\n        throw new Error(\"No modifier.\");\n    }\n    \n}", "import { absCentsToHz, decibelAttenuationToGain } from \"./unit_converter.js\";\nimport { generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * lowpass_filter.js\n * purpose: applies a low pass filter to a voice\n * note to self: a lot of tricks and come from fluidsynth.\n * They are the real smart guys.\n * Shoutout to them!\n * Give their repo a star over at:\n * https://github.com/FluidSynth/fluidsynth\n */\n\nexport const FILTER_SMOOTHING_FACTOR = 0.1;\n\n/**\n * @typedef {Object} CachedCoefficient\n * @property {number} a0 - Filter coefficient 1\n * @property {number} a1 - Filter coefficient 2\n * @property {number} a2 - Filter coefficient 3\n * @property {number} a3 - Filter coefficient 4\n * @property {number} a4 - Filter coefficient 5\n */\n\nexport class LowpassFilter\n{\n    /**\n     * Cached coefficient calculations\n     * stored as cachedCoefficients[resonanceCb][currentInitialFc]\n     * @type {CachedCoefficient[][]}\n     * @private\n     */\n    static cachedCoefficients = [];\n    /**\n     * Filter coefficient 1\n     * @type {number}\n     */\n    a0 = 0;\n    \n    /**\n     * Filter coefficient 2\n     * @type {number}\n     */\n    a1 = 0;\n    \n    /**\n     * Filter coefficient 3\n     * @type {number}\n     */\n    a2 = 0;\n    \n    /**\n     * Filter coefficient 4\n     * @type {number}\n     */\n    a3 = 0;\n    \n    /**\n     * Filter coefficient 5\n     * @type {number}\n     */\n    a4 = 0;\n    \n    /**\n     * Input history 1\n     * @type {number}\n     */\n    x1 = 0;\n    \n    /**\n     * Input history 2\n     * @type {number}\n     */\n    x2 = 0;\n    \n    /**\n     * Output history 1\n     * @type {number}\n     */\n    y1 = 0;\n    \n    /**\n     * Output history 2\n     * @type {number}\n     */\n    y2 = 0;\n    \n    /**\n     * Resonance in centibels\n     * @type {number}\n     */\n    resonanceCb = 0;\n    \n    /**\n     * Cutoff frequency in absolute cents\n     * @type {number}\n     */\n    currentInitialFc = 13500;\n    \n    /**\n     * For tracking the last cutoff frequency in the apply method, absolute cents\n     * Set to infinity to force recalculation\n     * @type {number}\n     */\n    lastTargetCutoff = Infinity;\n    \n    /**\n     * used for tracking if the filter has been initialized\n     * @type {boolean}\n     */\n    initialized = false;\n    /**\n     * Hertz\n     * @type {number}\n     */\n    sampleRate;\n    \n    /**\n     * @param sampleRate {number}\n     */\n    constructor(sampleRate)\n    {\n        this.sampleRate = sampleRate;\n        /**\n         * @type {number}\n         */\n        this.maxCutoff = sampleRate * 0.45;\n    }\n    \n    /**\n     * Applies a low-pass filter to the given buffer\n     * @param voice {Voice} the voice we are working on\n     * @param outputBuffer {Float32Array} the buffer to apply the filter to\n     * @param fcExcursion {number} the addition of modenv and mod lfo in cents to the filter\n     * @param smoothingFactor {number} filter's cutoff frequency smoothing factor\n     */\n    static apply(voice, outputBuffer, fcExcursion, smoothingFactor)\n    {\n        const initialFc = voice.modulatedGenerators[generatorTypes.initialFilterFc];\n        const filter = voice.filter;\n        \n        \n        if (!filter.initialized)\n        {\n            // filter initialization, set the current fc to target\n            filter.initialized = true;\n            filter.currentInitialFc = initialFc;\n        }\n        else\n        {\n            /* Note:\n             * We only smooth out the initialFc part,\n             * the modulation envelope and LFO excursions are not smoothed.\n             */\n            filter.currentInitialFc += (initialFc - filter.currentInitialFc) * smoothingFactor;\n        }\n        \n        // the final cutoff for this calculation\n        const targetCutoff = filter.currentInitialFc + fcExcursion;\n        const modulatedResonance = voice.modulatedGenerators[generatorTypes.initialFilterQ];\n        /* note:\n         * the check for initialFC is because of the filter optimization\n         * (if cents are the maximum then the filter is open)\n         * filter cannot use this optimization if it's dynamic (see #53), and\n         * the filter can only be dynamic if the initial filter is not open\n         */\n        if (filter.currentInitialFc > 13499 && targetCutoff > 13499 && modulatedResonance === 0)\n        {\n            filter.currentInitialFc = 13500;\n            return; // filter is open\n        }\n        \n        // check if the frequency has changed. if so, calculate new coefficients\n        if (Math.abs(filter.lastTargetCutoff - targetCutoff) > 1 || filter.resonanceCb !== modulatedResonance)\n        {\n            filter.lastTargetCutoff = targetCutoff;\n            filter.resonanceCb = modulatedResonance;\n            LowpassFilter.calculateCoefficients(filter, targetCutoff);\n        }\n        \n        // filter the input\n        // initial filtering code was ported from meltysynth created by sinshu.\n        for (let i = 0; i < outputBuffer.length; i++)\n        {\n            let input = outputBuffer[i];\n            let filtered = filter.a0 * input\n                + filter.a1 * filter.x1\n                + filter.a2 * filter.x2\n                - filter.a3 * filter.y1\n                - filter.a4 * filter.y2;\n            \n            // set buffer\n            filter.x2 = filter.x1;\n            filter.x1 = input;\n            filter.y2 = filter.y1;\n            filter.y1 = filtered;\n            \n            outputBuffer[i] = filtered;\n        }\n    }\n    \n    /**\n     * @param filter {LowpassFilter}\n     * @param cutoffCents {number}\n     */\n    static calculateCoefficients(filter, cutoffCents)\n    {\n        cutoffCents = ~~cutoffCents; // Math.floor\n        const qCb = filter.resonanceCb;\n        // check if these coefficients were already cached\n        const cached = LowpassFilter.cachedCoefficients?.[qCb]?.[cutoffCents];\n        if (cached !== undefined)\n        {\n            filter.a0 = cached.a0;\n            filter.a1 = cached.a1;\n            filter.a2 = cached.a2;\n            filter.a3 = cached.a3;\n            filter.a4 = cached.a4;\n            return;\n        }\n        let cutoffHz = absCentsToHz(cutoffCents);\n        \n        // fix cutoff on low sample rates\n        cutoffHz = Math.min(cutoffHz, filter.maxCutoff);\n        \n        // the coefficient calculation code was originally ported from meltysynth by sinshu.\n        // turn resonance to gain, -3.01 so it gives a non-resonant peak\n        const qDb = qCb / 10;\n        // -1 because it's attenuation, and we don't want attenuation\n        const resonanceGain = decibelAttenuationToGain(-(qDb - 3.01));\n        \n        // the sfspec asks for a reduction in gain based on the Q value.\n        // note that we calculate it again,\n        // without the 3.01-peak offset as it only applies to the coefficients, not the gain.\n        const qGain = 1 / Math.sqrt(decibelAttenuationToGain(-qDb));\n        \n        \n        // note: no sin or cos tables here as the coefficients are cached\n        let w = 2 * Math.PI * cutoffHz / filter.sampleRate;\n        let cosw = Math.cos(w);\n        let alpha = Math.sin(w) / (2 * resonanceGain);\n        \n        let b1 = (1 - cosw) * qGain;\n        let b0 = b1 / 2;\n        let b2 = b0;\n        let a0 = 1 + alpha;\n        let a1 = -2 * cosw;\n        let a2 = 1 - alpha;\n        \n        /**\n         * set coefficients\n         * @type {CachedCoefficient}\n         */\n        const toCache = {};\n        toCache.a0 = b0 / a0;\n        toCache.a1 = b1 / a0;\n        toCache.a2 = b2 / a0;\n        toCache.a3 = a1 / a0;\n        toCache.a4 = a2 / a0;\n        filter.a0 = toCache.a0;\n        filter.a1 = toCache.a1;\n        filter.a2 = toCache.a2;\n        filter.a3 = toCache.a3;\n        filter.a4 = toCache.a4;\n        \n        if (LowpassFilter.cachedCoefficients[qCb] === undefined)\n        {\n            LowpassFilter.cachedCoefficients[qCb] = [];\n        }\n        LowpassFilter.cachedCoefficients[qCb][cutoffCents] = toCache;\n    }\n}\n\n// precompute all the cutoffs for 0q (most common)\nconst dummy = new LowpassFilter(44100);\ndummy.resonanceCb = 0;\n// sfspec section 8.1.3: initialFilterFc ranges from 1500 to 13,500 cents\nfor (let i = 1500; i < 13500; i++)\n{\n    dummy.currentInitialFc = i;\n    LowpassFilter.calculateCoefficients(dummy, i);\n}\n", "import { modulatorCurveTypes } from \"../../../soundfont/basic_soundfont/modulator.js\";\n\n/**\n * modulator_curves.js\n * precomputes modulator concave and conves curves and calculates a curve value for a given polarity, direction and type\n */\n\n// the length of the precomputed curve tables\nexport const MOD_PRECOMPUTED_LENGTH = 16384;\n\n// Precalculate lookup tables for concave and convex curves\nconst concave = new Float32Array(MOD_PRECOMPUTED_LENGTH + 1);\nconst convex = new Float32Array(MOD_PRECOMPUTED_LENGTH + 1);\n// the equation is taken from FluidSynth as it's the standard for soundFonts\n// more precisely, the gen_conv.c file\nconcave[0] = 0;\nconcave[concave.length - 1] = 1;\n\nconvex[0] = 0;\nconvex[convex.length - 1] = 1;\nfor (let i = 1; i < MOD_PRECOMPUTED_LENGTH - 1; i++)\n{\n    let x = (-200 * 2 / 960) * Math.log(i / (concave.length - 1)) / Math.LN10;\n    convex[i] = 1 - x;\n    concave[concave.length - 1 - i] = x;\n}\n\n/**\n * Transforms a value with a given curve type\n * @param polarity {number} 0 or 1\n * @param direction {number} 0 or 1\n * @param curveType {number} see modulatorCurveTypes in modulators.js\n * @param value {number} the linear value, 0 to 1\n * @returns {number} the transformed value, 0 to 1, or -1 to 1\n */\nexport function getModulatorCurveValue(direction, curveType, value, polarity)\n{\n    // inverse the value if needed\n    if (direction)\n    {\n        value = 1 - value;\n    }\n    switch (curveType)\n    {\n        case modulatorCurveTypes.linear:\n            if (polarity)\n            {\n                // bipolar curve\n                return value * 2 - 1;\n            }\n            return value;\n        \n        case modulatorCurveTypes.switch:\n            // switch\n            value = value > 0.5 ? 1 : 0;\n            if (polarity)\n            {\n                // multiply\n                return value * 2 - 1;\n            }\n            return value;\n        \n        case modulatorCurveTypes.concave:\n            // look up the value\n            if (polarity)\n            {\n                value = value * 2 - 1;\n                if (value < 0)\n                {\n                    return -concave[~~(value * -MOD_PRECOMPUTED_LENGTH)];\n                }\n                return concave[~~(value * MOD_PRECOMPUTED_LENGTH)];\n            }\n            return concave[~~(value * MOD_PRECOMPUTED_LENGTH)];\n        \n        case modulatorCurveTypes.convex:\n            // look up the value\n            if (polarity)\n            {\n                value = value * 2 - 1;\n                if (value < 0)\n                {\n                    return -convex[~~(value * -MOD_PRECOMPUTED_LENGTH)];\n                }\n                return convex[~~(value * MOD_PRECOMPUTED_LENGTH)];\n            }\n            return convex[~~(value * MOD_PRECOMPUTED_LENGTH)];\n    }\n}\n", "import { timecentsToSeconds } from \"./unit_converter.js\";\nimport { getModulatorCurveValue } from \"./modulator_curves.js\";\nimport { modulatorCurveTypes } from \"../../../soundfont/basic_soundfont/modulator.js\";\nimport { generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * modulation_envelope.js\n * purpose: calculates the modulation envelope for the given voice\n */\nconst MODENV_PEAK = 1;\n\n// 1000 should be precise enough\nconst CONVEX_ATTACK = new Float32Array(1000);\nfor (let i = 0; i < CONVEX_ATTACK.length; i++)\n{\n    // this makes the db linear (I think)\n    CONVEX_ATTACK[i] = getModulatorCurveValue(0, modulatorCurveTypes.convex, i / 1000, 0);\n}\n\nexport class ModulationEnvelope\n{\n    /**\n     * The attack duration, in seconds\n     * @type {number}\n     */\n    attackDuration = 0;\n    /**\n     * The decay duration, in seconds\n     * @type {number}\n     */\n    decayDuration = 0;\n    \n    /**\n     * The hold duration, in seconds\n     * @type {number}\n     */\n    holdDuration = 0;\n    \n    /**\n     * Release duration, in seconds\n     * @type {number}\n     */\n    releaseDuration = 0;\n    \n    /**\n     * The sustain level 0-1\n     * @type {number}\n     */\n    sustainLevel = 0;\n    \n    /**\n     * Delay phase end time in seconds, absolute (audio context time)\n     * @type {number}\n     */\n    delayEnd = 0;\n    /**\n     * Attack phase end time in seconds, absolute (audio context time)\n     * @type {number}\n     */\n    attackEnd = 0;\n    /**\n     * Hold phase end time in seconds, absolute (audio context time)\n     * @type {number}\n     */\n    holdEnd = 0;\n    /**\n     * Decay phase end time in seconds, absolute (audio context time)\n     * @type {number}\n     */\n    decayEnd = 0;\n    \n    /**\n     * The level of the envelope when the release phase starts\n     * @type {number}\n     */\n    releaseStartLevel = 0;\n    \n    /**\n     * The current modulation envelope value\n     * @type {number}\n     */\n    currentValue = 0;\n    \n    /**\n     * Starts the release phase in the envelope\n     * @param voice {Voice} the voice this envelope belongs to\n     */\n    static startRelease(voice)\n    {\n        ModulationEnvelope.recalculate(voice);\n    }\n    \n    /**\n     * @param voice {Voice} the voice to recalculate\n     */\n    static recalculate(voice)\n    {\n        const env = voice.modulationEnvelope;\n        \n        // in release? Might need to recalculate the value as it can be modulated\n        if (voice.isInRelease)\n        {\n            env.releaseStartLevel = ModulationEnvelope.getValue(voice, voice.releaseStartTime, true);\n        }\n        \n        env.sustainLevel = 1 - (voice.modulatedGenerators[generatorTypes.sustainModEnv] / 1000);\n        \n        env.attackDuration = timecentsToSeconds(voice.modulatedGenerators[generatorTypes.attackModEnv]);\n        \n        const decayKeyExcursionCents = ((60 - voice.midiNote) * voice.modulatedGenerators[generatorTypes.keyNumToModEnvDecay]);\n        const decayTime = timecentsToSeconds(voice.modulatedGenerators[generatorTypes.decayModEnv] + decayKeyExcursionCents);\n        // according to the specification, the decay time is the time it takes to reach 0% from 100%.\n        // calculate the time to reach actual sustain level,\n        // for example, sustain 0.6 will be 0.4 of the decay time\n        env.decayDuration = decayTime * (1 - env.sustainLevel);\n        \n        const holdKeyExcursionCents = ((60 - voice.midiNote) * voice.modulatedGenerators[generatorTypes.keyNumToModEnvHold]);\n        env.holdDuration = timecentsToSeconds(holdKeyExcursionCents + voice.modulatedGenerators[generatorTypes.holdModEnv]);\n        \n        const releaseTime = timecentsToSeconds(voice.modulatedGenerators[generatorTypes.releaseModEnv]);\n        // release time is from the full level to 0%\n        // to get the actual time, multiply by the release start level\n        env.releaseDuration = releaseTime * env.releaseStartLevel;\n        \n        env.delayEnd = voice.startTime + timecentsToSeconds(voice.modulatedGenerators[generatorTypes.delayModEnv]);\n        env.attackEnd = env.delayEnd + env.attackDuration;\n        env.holdEnd = env.attackEnd + env.holdDuration;\n        env.decayEnd = env.holdEnd + env.decayDuration;\n    }\n    \n    /**\n     * Calculates the current modulation envelope value for the given time and voice\n     * @param voice {Voice} the voice we are working on\n     * @param currentTime {number} in seconds\n     * @param ignoreRelease {boolean} if true, it will compute the value as if the voice was not released\n     * @returns {number} modenv value, from 0 to 1\n     */\n    static getValue(voice, currentTime, ignoreRelease = false)\n    {\n        const env = voice.modulationEnvelope;\n        if (voice.isInRelease && !ignoreRelease)\n        {\n            // if the voice is still in the delay phase,\n            // start level will be 0 that will result in divide by zero\n            if (env.releaseStartLevel === 0)\n            {\n                return 0;\n            }\n            return Math.max(\n                0,\n                (1 - (currentTime - voice.releaseStartTime) / env.releaseDuration) * env.releaseStartLevel\n            );\n        }\n        \n        if (currentTime < env.delayEnd)\n        {\n            env.currentValue = 0; // delay\n        }\n        else if (currentTime < env.attackEnd)\n        {\n            // modulation envelope uses convex curve for attack\n            env.currentValue = CONVEX_ATTACK[~~((1 - (env.attackEnd - currentTime) / env.attackDuration) * 1000)];\n        }\n        else if (currentTime < env.holdEnd)\n        {\n            // hold: stay at 1\n            env.currentValue = MODENV_PEAK;\n        }\n        else if (currentTime < env.decayEnd)\n        {\n            // decay: linear ramp from 1 to sustain level\n            env.currentValue = (1 - (env.decayEnd - currentTime) / env.decayDuration) * (env.sustainLevel - MODENV_PEAK) + MODENV_PEAK;\n        }\n        else\n        {\n            // sustain: stay at sustain level\n            env.currentValue = env.sustainLevel;\n        }\n        return env.currentValue;\n    }\n}", "import { generatorLimits, generatorTypes } from \"./generator_types.js\";\n\nexport const GEN_BYTE_SIZE = 4;\n\nexport class Generator\n{\n    /**\n     * The generator's enum number\n     * @type {generatorTypes|number}\n     */\n    generatorType = generatorTypes.INVALID;\n    /**\n     * The generator's 16-bit value\n     * @type {number}\n     */\n    generatorValue = 0;\n    \n    /**\n     * Constructs a new generator\n     * @param type {generatorTypes|number}\n     * @param value {number}\n     * @param validate {boolean}\n     */\n    constructor(type = generatorTypes.INVALID, value = 0, validate = true)\n    {\n        this.generatorType = type;\n        if (value === undefined)\n        {\n            throw new Error(\"No value provided.\");\n        }\n        this.generatorValue = Math.round(value);\n        if (validate)\n        {\n            const lim = generatorLimits[type];\n            \n            if (lim !== undefined)\n            {\n                this.generatorValue = Math.max(lim.min, Math.min(lim.max, this.generatorValue));\n            }\n        }\n    }\n}\n\n/**\n * generator.js\n * purpose: contains enums for generators,\n * and their limis parses reads soundfont generators, sums them and applies limits\n */\n/**\n * @param generatorType {number}\n * @param presetGens {Generator[]}\n * @param instrumentGens {Generator[]}\n */\nexport function addAndClampGenerator(generatorType, presetGens, instrumentGens)\n{\n    const limits = generatorLimits[generatorType] || { min: 0, max: 32768, def: 0 };\n    let presetGen = presetGens.find(g => g.generatorType === generatorType);\n    let presetValue = 0;\n    if (presetGen)\n    {\n        presetValue = presetGen.generatorValue;\n    }\n    \n    let instruGen = instrumentGens.find(g => g.generatorType === generatorType);\n    let instruValue = limits.def;\n    if (instruGen)\n    {\n        instruValue = instruGen.generatorValue;\n    }\n    \n    // limits are applied in the compute_modulator function\n    return instruValue + presetValue;\n}", "/**\n * voice.js\n * purpose: prepares Voices from sample and generator data\n */\nimport { MIN_EXCLUSIVE_LENGTH, MIN_NOTE_LENGTH } from \"../main_processor.js\";\nimport { SpessaSynthWarn } from \"../../../utils/loggin.js\";\nimport { LowpassFilter } from \"./lowpass_filter.js\";\nimport { VolumeEnvelope } from \"./volume_envelope.js\";\nimport { ModulationEnvelope } from \"./modulation_envelope.js\";\nimport { addAndClampGenerator } from \"../../../soundfont/basic_soundfont/generator.js\";\nimport { Modulator } from \"../../../soundfont/basic_soundfont/modulator.js\";\nimport { GENERATORS_AMOUNT, generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\nconst EXCLUSIVE_CUTOFF_TIME = -2320;\nconst EXCLUSIVE_MOD_CUTOFF_TIME = -1130; // less because filter shenanigans\n\nclass AudioSample\n{\n    /**\n     * the sample's audio data\n     * @type {Float32Array}\n     */\n    sampleData;\n    /**\n     * Current playback step (rate)\n     * @type {number}\n     */\n    playbackStep = 0;\n    /**\n     * Current position in the sample\n     * @type {number}\n     */\n    cursor = 0;\n    /**\n     * MIDI root key of the sample\n     * @type {number}\n     */\n    rootKey = 0;\n    /**\n     * Start position of the loop\n     * @type {number}\n     */\n    loopStart = 0;\n    /**\n     * End position of the loop\n     * @type {number}\n     */\n    loopEnd = 0;\n    /**\n     * End position of the sample\n     * @type {number}\n     */\n    end = 0;\n    /**\n     * Looping mode of the sample:\n     * 0 - no loop\n     * 1 - loop\n     * 2 - UNOFFICIAL: polyphone 2.4 added start on release\n     * 3 - loop then play when released\n     * @type {0|1|2|3}\n     */\n    loopingMode = 0;\n    /**\n     * Indicates if the sample is currently looping\n     * @type {boolean}\n     */\n    isLooping = false;\n    \n    /**\n     * @param data {Float32Array}\n     * @param playbackStep {number} the playback step, a single increment\n     * @param cursorStart {number} the sample id which starts the playback\n     * @param rootKey {number} MIDI root key\n     * @param loopStart {number} loop start index\n     * @param loopEnd {number} loop end index\n     * @param endIndex {number} sample end index (for end offset)\n     * @param loopingMode {number} sample looping mode\n     */\n    constructor(\n        data,\n        playbackStep,\n        cursorStart,\n        rootKey,\n        loopStart,\n        loopEnd,\n        endIndex,\n        loopingMode\n    )\n    {\n        this.sampleData = data;\n        this.playbackStep = playbackStep;\n        this.cursor = cursorStart;\n        this.rootKey = rootKey;\n        this.loopStart = loopStart;\n        this.loopEnd = loopEnd;\n        this.end = endIndex;\n        this.loopingMode = loopingMode;\n        this.isLooping = this.loopingMode === 1 || this.loopingMode === 3;\n    }\n}\n\n\n/**\n * Voice represents a single instance of the\n * SoundFont2 synthesis model.\n * That is:\n * A wavetable oscillator (sample)\n * A volume envelope (volumeEnvelope)\n * A modulation envelope (modulationEnvelope)\n * Generators (generators and modulatedGenerators)\n * Modulators (modulators)\n * And MIDI params such as channel, MIDI note, velocity\n */\nclass Voice\n{\n    /**\n     * The sample of the voice.\n     * @type {AudioSample}\n     */\n    sample;\n    \n    /**\n     * Lowpass filter applied to the voice.\n     * @type {LowpassFilter}\n     */\n    filter;\n    \n    /**\n     * Linear gain of the voice. Used with Key Modifiers.\n     * @type {number}\n     */\n    gain = 1;\n    \n    /**\n     * The unmodulated (copied to) generators of the voice.\n     * @type {Int16Array}\n     */\n    generators;\n    \n    /**\n     * The voice's modulators.\n     * @type {Modulator[]}\n     */\n    modulators = [];\n    \n    /**\n     * Resonance offset, it is affected by the default resonant modulator\n     * @type {number}\n     */\n    resonanceOffset = 0;\n    \n    /**\n     * The generators in real-time, affected by modulators.\n     * This is used during rendering.\n     * @type {Int16Array}\n     */\n    modulatedGenerators;\n    \n    /**\n     * Indicates if the voice is finished.\n     * @type {boolean}\n     */\n    finished = false;\n    \n    /**\n     * Indicates if the voice is in the release phase.\n     * @type {boolean}\n     */\n    isInRelease = false;\n    \n    /**\n     * Velocity of the note.\n     * @type {number}\n     */\n    velocity = 0;\n    \n    /**\n     * MIDI note number.\n     * @type {number}\n     */\n    midiNote = 0;\n    \n    /**\n     * The pressure of the voice\n     * @type {number}\n     */\n    pressure = 0;\n    \n    /**\n     * Target key for the note.\n     * @type {number}\n     */\n    targetKey = 0;\n    \n    /**\n     * Modulation envelope.\n     * @type {ModulationEnvelope}\n     */\n    modulationEnvelope = new ModulationEnvelope();\n    \n    /**\n     * Volume envelope.\n     * @type {VolumeEnvelope}\n     */\n    volumeEnvelope;\n    \n    /**\n     * Start time of the voice, absolute.\n     * @type {number}\n     */\n    startTime = 0;\n    \n    /**\n     * Start time of the release phase, absolute.\n     * @type {number}\n     */\n    releaseStartTime = Infinity;\n    \n    /**\n     * Current tuning in cents.\n     * @type {number}\n     */\n    currentTuningCents = 0;\n    \n    /**\n     * Current calculated tuning. (as in ratio)\n     * @type {number}\n     */\n    currentTuningCalculated = 1;\n    \n    /**\n     * From -500 to 500.\n     * @param {number}\n     */\n    currentPan = 0;\n    \n    /**\n     * If MIDI Tuning Standard is already applied (at note-on time),\n     * this will be used to take the values at real-time tuning as \"midiNote\"\n     * property contains the tuned number.\n     * see #29 comment by @paulikaro\n     * @type {number}\n     */\n    realKey;\n    \n    /**\n     * @type {number} Initial key to glide from, MIDI Note number. If -1, the portamento is OFF.\n     */\n    portamentoFromKey = -1;\n    \n    /**\n     * Duration of the linear glide, in seconds.\n     * @type {number}\n     */\n    portamentoDuration = 0;\n    \n    /**\n     * From -500 to 500, where zero means disabled (use the channel pan). Used for random pan.\n     * @type {number}\n     */\n    overridePan = 0;\n    \n    /**\n     * Exclusive class number for hi-hats etc.\n     * @type {number}\n     */\n    exclusiveClass = 0;\n    \n    /**\n     * Creates a Voice\n     * @param sampleRate {number}\n     * @param audioSample {AudioSample}\n     * @param midiNote {number}\n     * @param velocity {number}\n     * @param currentTime {number}\n     * @param targetKey {number}\n     * @param realKey {number}\n     * @param generators {Int16Array}\n     * @param modulators {Modulator[]}\n     */\n    constructor(\n        sampleRate,\n        audioSample,\n        midiNote,\n        velocity,\n        currentTime,\n        targetKey,\n        realKey,\n        generators,\n        modulators\n    )\n    {\n        this.sample = audioSample;\n        this.generators = generators;\n        this.exclusiveClass = this.generators[generatorTypes.exclusiveClass];\n        this.modulatedGenerators = new Int16Array(generators);\n        this.modulators = modulators;\n        this.filter = new LowpassFilter(sampleRate);\n        this.velocity = velocity;\n        this.midiNote = midiNote;\n        this.startTime = currentTime;\n        this.targetKey = targetKey;\n        this.realKey = realKey;\n        this.volumeEnvelope = new VolumeEnvelope(sampleRate, generators[generatorTypes.sustainVolEnv]);\n    }\n    \n    /**\n     * copies the voice\n     * @param voice {Voice}\n     * @param currentTime {number}\n     * @param realKey {number}\n     * @returns Voice\n     */\n    static copy(voice, currentTime, realKey)\n    {\n        const sampleToCopy = voice.sample;\n        const sample = new AudioSample(\n            sampleToCopy.sampleData,\n            sampleToCopy.playbackStep,\n            sampleToCopy.cursor,\n            sampleToCopy.rootKey,\n            sampleToCopy.loopStart,\n            sampleToCopy.loopEnd,\n            sampleToCopy.end,\n            sampleToCopy.loopingMode\n        );\n        return new Voice(\n            voice.volumeEnvelope.sampleRate,\n            sample,\n            voice.midiNote,\n            voice.velocity,\n            currentTime,\n            voice.targetKey,\n            realKey,\n            new Int16Array(voice.generators),\n            voice.modulators.map(m => Modulator.copy(m))\n        );\n    }\n    \n    /**\n     * Releases the voice as exclusiveClass\n     * @param currentTime {number}\n     */\n    exclusiveRelease(currentTime)\n    {\n        this.release(currentTime, MIN_EXCLUSIVE_LENGTH);\n        this.modulatedGenerators[generatorTypes.releaseVolEnv] = EXCLUSIVE_CUTOFF_TIME; // make the release nearly instant\n        this.modulatedGenerators[generatorTypes.releaseModEnv] = EXCLUSIVE_MOD_CUTOFF_TIME;\n        VolumeEnvelope.recalculate(this);\n        ModulationEnvelope.recalculate(this);\n    }\n    \n    /**\n     * Stops the voice\n     * @param currentTime {number}\n     * @param minNoteLength {number} minimum note length in seconds\n     */\n    release(currentTime, minNoteLength = MIN_NOTE_LENGTH)\n    {\n        this.releaseStartTime = currentTime;\n        // check if the note is shorter than the min note time, if so, extend it\n        if (this.releaseStartTime - this.startTime < minNoteLength)\n        {\n            this.releaseStartTime = this.startTime + minNoteLength;\n        }\n    }\n}\n\n/**\n * @param preset {BasicPreset} the preset to get voices for\n * @param bank {number} the bank to cache the voices in\n * @param program {number} program to cache the voices in\n * @param midiNote {number} the MIDI note to use\n * @param velocity {number} the velocity to use\n * @param realKey {number} the real MIDI note if the \"midiNote\" was changed by MIDI Tuning Standard\n * @this {SpessaSynthProcessor}\n * @returns {Voice[]} output is an array of Voices\n */\nexport function getVoicesForPreset(preset, bank, program, midiNote, velocity, realKey)\n{\n    /**\n     * @type {Voice[]}\n     */\n    const voices = preset.getSamplesAndGenerators(midiNote, velocity)\n        .reduce((voices, sampleAndGenerators) =>\n        {\n            if (sampleAndGenerators.sample.getAudioData() === undefined)\n            {\n                SpessaSynthWarn(`Discarding invalid sample: ${sampleAndGenerators.sample.sampleName}`);\n                return voices;\n            }\n            \n            // create the generator list\n            const generators = new Int16Array(GENERATORS_AMOUNT);\n            // apply and sum the gens\n            for (let i = 0; i < 60; i++)\n            {\n                generators[i] = addAndClampGenerator(\n                    i,\n                    sampleAndGenerators.presetGenerators,\n                    sampleAndGenerators.instrumentGenerators\n                );\n            }\n            \n            // EMU initial attenuation correction, multiply initial attenuation by 0.4!\n            // all EMU sound cards have this quirk, and all sf2 editors and players emulate it too\n            generators[generatorTypes.initialAttenuation] = Math.floor(generators[generatorTypes.initialAttenuation] * 0.4);\n            \n            // key override\n            let rootKey = sampleAndGenerators.sample.samplePitch;\n            if (generators[generatorTypes.overridingRootKey] > -1)\n            {\n                rootKey = generators[generatorTypes.overridingRootKey];\n            }\n            \n            let targetKey = midiNote;\n            if (generators[generatorTypes.keyNum] > -1)\n            {\n                targetKey = generators[generatorTypes.keyNum];\n            }\n            \n            // determine looping mode now. if the loop is too small, disable\n            let loopStart = sampleAndGenerators.sample.sampleLoopStartIndex;\n            let loopEnd = sampleAndGenerators.sample.sampleLoopEndIndex;\n            let loopingMode = generators[generatorTypes.sampleModes];\n            /**\n             * create the sample\n             * offsets are calculated at note on time (to allow for modulation of them)\n             * @type {AudioSample}\n             */\n            const audioSample = new AudioSample(\n                sampleAndGenerators.sample.sampleData,\n                (sampleAndGenerators.sample.sampleRate / this.sampleRate) * Math.pow(\n                    2,\n                    sampleAndGenerators.sample.samplePitchCorrection / 1200\n                ), // cent tuning\n                0,\n                rootKey,\n                loopStart,\n                loopEnd,\n                Math.floor(sampleAndGenerators.sample.sampleData.length) - 1,\n                loopingMode\n            );\n            // velocity override\n            if (generators[generatorTypes.velocity] > -1)\n            {\n                velocity = generators[generatorTypes.velocity];\n            }\n            \n            // uncomment to print debug info\n            // SpessaSynthTable([{\n            //     Sample: sampleAndGenerators.sample.sampleName,\n            //     Generators: generators,\n            //     Modulators: sampleAndGenerators.modulators.map(m => Modulator.debugString(m)),\n            //     Velocity: velocity,\n            //     TargetKey: targetKey,\n            //     MidiNote: midiNote,\n            //     AudioSample: audioSample\n            // }]);\n            voices.push(\n                new Voice(\n                    this.sampleRate,\n                    audioSample,\n                    midiNote,\n                    velocity,\n                    this.currentSynthTime,\n                    targetKey,\n                    realKey,\n                    generators,\n                    sampleAndGenerators.modulators.map(m => Modulator.copy(m))\n                )\n            );\n            return voices;\n        }, []);\n    // cache the voice\n    this.setCachedVoice(bank, program, midiNote, velocity, voices);\n    return voices.map(v =>\n        Voice.copy(v, this.currentSynthTime, realKey));\n}\n\n/**\n * @param channel {number} a hint for the processor to recalculate sample cursors when sample dumping\n * @param midiNote {number} the MIDI note to use\n * @param velocity {number} the velocity to use\n * @param realKey {number} the real MIDI note if the \"midiNote\" was changed by MIDI Tuning Standard\n * @this {SpessaSynthProcessor}\n * @returns {Voice[]} output is an array of Voices\n */\nexport function getVoices(channel, midiNote, velocity, realKey)\n{\n    const channelObject = this.midiAudioChannels[channel];\n    \n    // override patch\n    const overridePatch = this.keyModifierManager.hasOverridePatch(channel, midiNote);\n    \n    let bank = channelObject.getBankSelect();\n    \n    let preset = channelObject.preset;\n    if (!preset)\n    {\n        SpessaSynthWarn(`No preset for channel ${channel}!`);\n        return [];\n    }\n    let program = preset.program;\n    if (overridePatch)\n    {\n        const override = this.keyModifierManager.getPatch(channel, midiNote);\n        bank = override.bank;\n        program = override.program;\n    }\n    \n    const cached = this.getCachedVoice(bank, program, midiNote, velocity);\n    // if cached, return it!\n    if (cached !== undefined)\n    {\n        return cached.map(v => Voice.copy(v, this.currentSynthTime, realKey));\n    }\n    \n    // not cached...\n    if (overridePatch)\n    {\n        preset = this.getPreset(bank, program);\n    }\n    return this.getVoicesForPreset(preset, bank, program, midiNote, velocity, realKey);\n}", "import { generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * stereo_panner.js\n * purpose: pans a given voice out to the stereo output and to the effects' outputs\n */\n\nexport const PAN_SMOOTHING_FACTOR = 0.05;\n\n// optimized for spessasynth_lib's effects\nexport const REVERB_DIVIDER = 3070;\nexport const CHORUS_DIVIDER = 2000;\nconst HALF_PI = Math.PI / 2;\n\nconst MIN_PAN = -500;\nconst MAX_PAN = 500;\nconst PAN_RESOLUTION = MAX_PAN - MIN_PAN;\n\n// initialize pan lookup tables\nconst panTableLeft = new Float32Array(PAN_RESOLUTION + 1);\nconst panTableRight = new Float32Array(PAN_RESOLUTION + 1);\nfor (let pan = MIN_PAN; pan <= MAX_PAN; pan++)\n{\n    // clamp to 0-1\n    const realPan = (pan - MIN_PAN) / PAN_RESOLUTION;\n    const tableIndex = pan - MIN_PAN;\n    panTableLeft[tableIndex] = Math.cos(HALF_PI * realPan);\n    panTableRight[tableIndex] = Math.sin(HALF_PI * realPan);\n}\n\n/**\n * Pans the voice to the given output buffers\n * @param voice {Voice} the voice to pan\n * @param inputBuffer {Float32Array} the input buffer in mono\n * @param outputLeft {Float32Array} left output buffer\n * @param outputRight {Float32Array} right output buffer\n * @param reverbLeft {Float32Array} left reverb input\n * @param reverbRight {Float32Array} right reverb input\n * @param chorusLeft {Float32Array} left chorus buffer\n * @param chorusRight {Float32Array} right chorus buffer\n * @param startIndex {number}\n * @this {MidiAudioChannel}\n */\nexport function panAndMixVoice(voice,\n                               inputBuffer,\n                               outputLeft, outputRight,\n                               reverbLeft, reverbRight,\n                               chorusLeft, chorusRight,\n                               startIndex)\n{\n    if (isNaN(inputBuffer[0]))\n    {\n        return;\n    }\n    /**\n     * clamp -500 to 500\n     * @type {number}\n     */\n    let pan;\n    if (voice.overridePan)\n    {\n        pan = voice.overridePan;\n    }\n    else\n    {\n        // smooth out pan to prevent clicking\n        voice.currentPan += (voice.modulatedGenerators[generatorTypes.pan] - voice.currentPan) * this.synth.panSmoothingFactor;\n        pan = voice.currentPan;\n    }\n    \n    const gain = this.synth.currentGain * voice.gain;\n    const index = ~~(pan + 500);\n    // get voice's gain levels for each channel\n    const gainLeft = panTableLeft[index] * gain * this.synth.panLeft;\n    const gainRight = panTableRight[index] * gain * this.synth.panRight;\n    \n    // disable reverb and chorus if necessary\n    if (this.synth.effectsEnabled)\n    {\n        const reverbSend = voice.modulatedGenerators[generatorTypes.reverbEffectsSend];\n        if (reverbSend > 0)\n        {\n            // reverb is mono so we need to multiply by gain\n            const reverbGain = this.synth.reverbGain * this.synth.reverbSend * gain * (reverbSend / REVERB_DIVIDER);\n            for (let i = 0; i < inputBuffer.length; i++)\n            {\n                const idx = i + startIndex;\n                reverbLeft[idx] += reverbGain * inputBuffer[i];\n                reverbRight[idx] += reverbGain * inputBuffer[i];\n            }\n        }\n        \n        const chorusSend = voice.modulatedGenerators[generatorTypes.chorusEffectsSend];\n        if (chorusSend > 0)\n        {\n            // chorus is stereo so we do not need to\n            const chorusGain = this.synth.chorusGain * this.synth.chorusSend * (chorusSend / CHORUS_DIVIDER);\n            const chorusLeftGain = gainLeft * chorusGain;\n            const chorusRightGain = gainRight * chorusGain;\n            for (let i = 0; i < inputBuffer.length; i++)\n            {\n                const idx = i + startIndex;\n                chorusLeft[idx] += chorusLeftGain * inputBuffer[i];\n                chorusRight[idx] += chorusRightGain * inputBuffer[i];\n            }\n        }\n    }\n    \n    // mix down the audio data\n    if (gainLeft > 0)\n    {\n        for (let i = 0; i < inputBuffer.length; i++)\n        {\n            outputLeft[i + startIndex] += gainLeft * inputBuffer[i];\n        }\n    }\n    if (gainRight > 0)\n    {\n        for (let i = 0; i < inputBuffer.length; i++)\n        {\n            outputRight[i + startIndex] += gainRight * inputBuffer[i];\n        }\n    }\n}", "import { SpessaSynthInfo } from \"../../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../../utils/other.js\";\n\n/**\n * @this {SpessaSynthProcessor}\n * @param force {boolean}\n */\nexport function stopAllChannels(force = false)\n{\n    SpessaSynthInfo(\"%cStop all received!\", consoleColors.info);\n    for (let i = 0; i < this.midiAudioChannels.length; i++)\n    {\n        this.midiAudioChannels[i].stopAllNotes(force);\n    }\n    this.callEvent(\"stopall\", undefined);\n}", "/**\n * Reads as little endian\n * @param dataArray {IndexedByteArray}\n * @param bytesAmount {number}\n * @returns {number}\n */\nexport function readLittleEndian(dataArray, bytesAmount)\n{\n    let out = 0;\n    for (let i = 0; i < bytesAmount; i++)\n    {\n        out |= (dataArray[dataArray.currentIndex++] << i * 8);\n    }\n    // make sure it stays unsigned\n    return out >>> 0;\n}\n\n/**\n * Writes a number as little endian seems to also work for negative numbers so yay?\n * @param dataArray {IndexedByteArray}\n * @param number {number}\n * @param byteTarget {number}\n */\nexport function writeLittleEndian(dataArray, number, byteTarget)\n{\n    for (let i = 0; i < byteTarget; i++)\n    {\n        dataArray[dataArray.currentIndex++] = (number >> (i * 8)) & 0xFF;\n    }\n}\n\n/**\n * @param dataArray {IndexedByteArray}\n * @param word {number}\n */\nexport function writeWord(dataArray, word)\n{\n    dataArray[dataArray.currentIndex++] = word & 0xFF;\n    dataArray[dataArray.currentIndex++] = word >> 8;\n}\n\n/**\n * @param dataArray {IndexedByteArray}\n * @param dword {number}\n */\nexport function writeDword(dataArray, dword)\n{\n    writeLittleEndian(dataArray, dword, 4);\n}\n\n/**\n * @param byte1 {number}\n * @param byte2 {number}\n * @returns {number}\n */\nexport function signedInt16(byte1, byte2)\n{\n    let val = (byte2 << 8) | byte1;\n    if (val > 32767)\n    {\n        return val - 65536;\n    }\n    return val;\n}\n\n/**\n * @param byte {number}\n * @returns {number}\n */\nexport function signedInt8(byte)\n{\n    if (byte > 127)\n    {\n        return byte - 256;\n    }\n    return byte;\n}", "import { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { readLittleEndian, writeDword } from \"../../utils/byte_functions/little_endian.js\";\nimport { readBytesAsString, writeStringAsBytes } from \"../../utils/byte_functions/string.js\";\n\n/**\n * riff_chunk.js\n * reads a riff chunk and stores it as a class\n */\n\nexport class RiffChunk\n{\n    /**\n     * The chunks FourCC code\n     * @type {string}\n     */\n    header;\n    \n    /**\n     * Chunk's size, in bytes\n     * @type {number}\n     */\n    size;\n    \n    /**\n     * Chunk's binary data\n     * @type {IndexedByteArray}\n     */\n    chunkData;\n    \n    /**\n     * Creates a new RIFF chunk\n     * @constructor\n     * @param header {string}\n     * @param size {number}\n     * @param data {IndexedByteArray}\n     */\n    constructor(header, size, data)\n    {\n        this.header = header;\n        this.size = size;\n        this.chunkData = data;\n    }\n    \n}\n\n/**\n * @param dataArray {IndexedByteArray}\n * @param readData {boolean}\n * @param forceShift {boolean}\n * @returns {RiffChunk}\n */\nexport function readRIFFChunk(dataArray, readData = true, forceShift = false)\n{\n    let header = readBytesAsString(dataArray, 4);\n    \n    let size = readLittleEndian(dataArray, 4);\n    if (header === \"\")\n    {\n        // safeguard against evil DLS files\n        // The test case: CrysDLS v1.23.dls\n        // https://github.com/spessasus/spessasynth_core/issues/5\n        size = 0;\n    }\n    /**\n     * @type {IndexedByteArray}\n     */\n    let chunkData = undefined;\n    if (readData)\n    {\n        chunkData = dataArray.slice(dataArray.currentIndex, dataArray.currentIndex + size);\n    }\n    if (readData || forceShift)\n    {\n        dataArray.currentIndex += size;\n    }\n    \n    if (size % 2 !== 0)\n    {\n        if (dataArray[dataArray.currentIndex] === 0)\n        {\n            dataArray.currentIndex++;\n        }\n    }\n    \n    return new RiffChunk(header, size, chunkData);\n}\n\n/**\n * Writes a RIFF chunk correctly\n * @param header {string} fourCC\n * @param data {Uint8Array} chunk data\n * @param addZeroByte {boolean} add a zero byte into the chunk size\n * @param isList {boolean} adds \"LIST\" as the chunk type and writes the actual type at the start of the data\n * @returns {IndexedByteArray}\n */\nexport function writeRIFFChunkRaw(header, data, addZeroByte = false, isList = false)\n{\n    let dataStartOffset = 8;\n    let headerWritten = header;\n    let dataLength = data.length;\n    if (addZeroByte)\n    {\n        dataLength++;\n    }\n    let writtenSize = dataLength;\n    if (isList)\n    {\n        // written header is LIST and the passed header is the first 4 bytes of chunk data\n        dataStartOffset += 4;\n        writtenSize += 4;\n        headerWritten = \"LIST\";\n    }\n    let finalSize = dataStartOffset + dataLength;\n    if (finalSize % 2 !== 0)\n    {\n        // pad byte does not get included in the size\n        finalSize++;\n    }\n    \n    const outArray = new IndexedByteArray(finalSize);\n    // FourCC (\"RIFF\", \"LIST\", \"pdta\" etc.)\n    writeStringAsBytes(outArray, headerWritten);\n    // chunk size\n    writeDword(outArray, writtenSize);\n    if (isList)\n    {\n        // list type (e.g. \"INFO\")\n        writeStringAsBytes(outArray, header);\n    }\n    outArray.set(data, dataStartOffset);\n    return outArray;\n}\n\n/**\n * Writes RIFF chunk given binary blobs\n * @param header {string} fourCC\n * @param chunks {Uint8Array[]} chunk data parts, it will be combined in order\n * @param isList {boolean} adds \"LIST\" as the chunk type and writes the actual type at the start of the data\n * @returns {IndexedByteArray}\n */\nexport function writeRIFFChunkParts(header, chunks, isList = false)\n{\n    let dataOffset = 8;\n    let headerWritten = header;\n    let dataLength = chunks.reduce((len, c) => c.length + len, 0);\n    let writtenSize = dataLength;\n    if (isList)\n    {\n        // written header is LIST and the passed header is the first 4 bytes of chunk data\n        dataOffset += 4;\n        writtenSize += 4;\n        headerWritten = \"LIST\";\n    }\n    let finalSize = dataOffset + dataLength;\n    if (finalSize % 2 !== 0)\n    {\n        // pad byte does not get included in the size\n        finalSize++;\n    }\n    \n    const outArray = new IndexedByteArray(finalSize);\n    // fourCC (\"RIFF\", \"LIST\", \"pdta\" etc.)\n    writeStringAsBytes(outArray, headerWritten);\n    // chunk size\n    writeDword(outArray, writtenSize);\n    if (isList)\n    {\n        // list type (e.g. \"INFO\")\n        writeStringAsBytes(outArray, header);\n    }\n    chunks.forEach(c =>\n    {\n        outArray.set(c, dataOffset);\n        dataOffset += c.length;\n    });\n    return outArray;\n}\n\n/**\n * @param collection {RiffChunk[]}\n * @param type {string}\n * @returns {RiffChunk|undefined}\n */\nexport function findRIFFListType(collection, type)\n{\n    return collection.find(c =>\n    {\n        if (c.header !== \"LIST\")\n        {\n            return false;\n        }\n        c.chunkData.currentIndex = 0;\n        return readBytesAsString(c.chunkData, 4) === type;\n    });\n}", "import { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { GEN_BYTE_SIZE, Generator } from \"../generator.js\";\nimport { generatorTypes } from \"../generator_types.js\";\n\n/**\n * @this {BasicSoundBank}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getIGEN()\n{\n    // go through all instruments -> zones and write generators sequentially (add 4 for terminal)\n    let igenSize = GEN_BYTE_SIZE;\n    for (const inst of this.instruments)\n    {\n        igenSize += inst.globalZone.generators.length * GEN_BYTE_SIZE;\n        igenSize += inst.instrumentZones.reduce((sum, z) =>\n        {\n            // clear sample and range generators before determining the size\n            z.generators = (z.generators.filter(g =>\n                g.generatorType !== generatorTypes.sampleID &&\n                g.generatorType !== generatorTypes.keyRange &&\n                g.generatorType !== generatorTypes.velRange\n            ));\n            // add sample and ranges if necessary\n            // unshift vel then key (to make key first) and the sample is last\n            if (z.hasVelRange)\n            {\n                z.prependGenerator(new Generator(\n                    generatorTypes.velRange,\n                    z.velRange.max << 8 | Math.max(z.velRange.min, 0),\n                    false\n                ));\n            }\n            if (z.hasKeyRange)\n            {\n                z.prependGenerator(new Generator(\n                    generatorTypes.keyRange,\n                    z.keyRange.max << 8 | Math.max(z.keyRange.min, 0),\n                    false\n                ));\n            }\n            // add sample id\n            z.addGenerators(new Generator(\n                generatorTypes.sampleID,\n                this.samples.indexOf(z.sample),\n                false\n            ));\n            return z.generators.length * GEN_BYTE_SIZE + sum;\n        }, 0);\n    }\n    const igenData = new IndexedByteArray(igenSize);\n    \n    /**\n     * @param z {BasicZone}\n     */\n    const writeZone = z =>\n    {\n        for (const gen of z.generators)\n        {\n            // name is deceptive, it works on negatives\n            writeWord(igenData, gen.generatorType);\n            writeWord(igenData, gen.generatorValue);\n        }\n    };\n    \n    for (const instrument of this.instruments)\n    {\n        // global zone\n        writeZone(instrument.globalZone);\n        for (const instrumentZone of instrument.instrumentZones)\n        {\n            writeZone(instrumentZone);\n        }\n    }\n    // terminal generator, is zero\n    writeDword(igenData, 0);\n    \n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xigenData = new IndexedByteArray(GEN_BYTE_SIZE);\n    writeDword(xigenData, 0);\n    \n    const igen = writeRIFFChunkRaw(\"igen\", igenData);\n    const xigen = writeRIFFChunkRaw(\"igen\", xigenData);\n    return {\n        pdta: igen,\n        xdta: xigen,\n        highestIndex: 0 // not applicable\n    };\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeStringAsBytes } from \"../../../utils/byte_functions/string.js\";\nimport { writeLittleEndian } from \"../../../utils/byte_functions/little_endian.js\";\nimport { SpessaSynthInfo } from \"../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\n\n/*\nSdta structure:\n\nLIST chunk\n- \"sdta\" ASCII string\n- smpl chunk\n- - raw data\n */\n\n// in bytes, from the start of sdta-LIST to the first actual sample\nconst SDTA_TO_DATA_OFFSET =\n    4 + // \"LIST\"\n    4 + // sdta size\n    4 + // \"sdta\"\n    4 + // \"smpl\"\n    4;  // smpl size\n\n/**\n * @this {BasicSoundBank}\n * @param smplStartOffsets {number[]}\n * @param smplEndOffsets {number[]}\n * @param compress {boolean}\n * @param decompress {boolean}\n * @param vorbisFunc {SampleEncodingFunction}\n * @param progressFunc {ProgressFunction|undefined}\n * @returns {Uint8Array}\n */\nexport async function getSDTA(smplStartOffsets,\n                              smplEndOffsets,\n                              compress,\n                              decompress,\n                              vorbisFunc,\n                              progressFunc\n)\n{\n    // write smpl: write int16 data of each sample linearly\n    // get size (calling getAudioData twice doesn't matter since it gets cached)\n    let writtenCount = 0;\n    let smplChunkSize = 0;\n    const sampleDatas = [];\n    \n    // linear async is faster here as the writing function usually uses a single wasm instance\n    for (const s of this.samples)\n    {\n        if (compress)\n        {\n            await s.compressSample(vorbisFunc);\n        }\n        if (decompress)\n        {\n            s.setAudioData(s.getAudioData());\n        }\n        \n        // raw data: either copy s16le or encoded vorbis or encode manually if overridden\n        // use set timeout so the thread doesn't die\n        const r = s.getRawData(true);\n        writtenCount++;\n        progressFunc?.(s.sampleName, writtenCount, this.samples.length);\n        \n        SpessaSynthInfo(\n            `%cEncoded sample %c${writtenCount}. ${s.sampleName}%c of %c${this.samples.length}%c. Compressed: %c${s.isCompressed}%c.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            s.isCompressed ? consoleColors.recognized : consoleColors.unrecognized,\n            consoleColors.info\n        );\n        \n        /* 6.1 Sample Data Format in the smpl Sub-chunk\n        Each sample is followed by a minimum of forty-six zero\n        valued sample data points. These zero valued data points are necessary to guarantee that any reasonable upward pitch shift\n        using any reasonable interpolator can loop on zero data at the end of the sound.\n        This doesn't apply to sf3 tho\n         */\n        smplChunkSize += r.length + (s.isCompressed ? 0 : 92);\n        sampleDatas.push(r);\n    }\n    \n    if (smplChunkSize % 2 !== 0)\n    {\n        smplChunkSize++;\n    }\n    \n    const sdta = new IndexedByteArray(smplChunkSize + SDTA_TO_DATA_OFFSET);\n    \n    // avoid using writeRIFFChunk for performance\n    // sdta chunk\n    writeStringAsBytes(sdta, \"LIST\");\n    // \"sdta\" + full smpl length\n    writeLittleEndian(sdta, smplChunkSize + SDTA_TO_DATA_OFFSET - 8, 4);\n    writeStringAsBytes(sdta, \"sdta\");\n    writeStringAsBytes(sdta, \"smpl\");\n    writeLittleEndian(sdta, smplChunkSize, 4);\n    \n    let offset = 0;\n    // write out\n    this.samples.forEach((sample, i) =>\n    {\n        const data = sampleDatas[i];\n        sdta.set(data, offset + SDTA_TO_DATA_OFFSET);\n        let startOffset;\n        let endOffset;\n        if (sample.isCompressed)\n        {\n            // sf3 offset is in bytes\n            startOffset = offset;\n            endOffset = startOffset + data.length;\n        }\n        else\n        {\n            // sf2 in sample data points\n            startOffset = offset / 2; // inclusive\n            endOffset = startOffset + data.length / 2; // exclusive\n            offset += 92; // 46 sample data points\n        }\n        offset += data.length;\n        smplStartOffsets.push(startOffset);\n        \n        smplEndOffsets.push(endOffset);\n    });\n    \n    return sdta;\n}", "import { SpessaSynthWarn } from \"../../utils/loggin.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { stbvorbis } from \"../../externals/stbvorbis_sync/stbvorbis_sync.min.js\";\n\n// should be reasonable for most cases\nconst RESAMPLE_RATE = 48000;\n\n/**\n * @typedef {1|2|4|8|32769|32770|32772|32776} sampleTypes\n */\n\n/**\n * @enum {sampleTypes}\n */\nexport const sampleTypes = {\n    monoSample: 1,\n    rightSample: 2,\n    leftSample: 4,\n    linkedSample: 8,\n    romMonoSample: 32769,\n    romRightSample: 32770,\n    romLeftSample: 32772,\n    romLinkedSample: 32776\n};\n\n/**\n * @typedef {function} SampleEncodingFunction\n * @async\n * @param audioData {Float32Array}\n * @param sampleRate {number}\n * @returns {Promise<Uint8Array>}\n */\n\nexport class BasicSample\n{\n    \n    /**\n     * The sample's name\n     * @type {string}\n     */\n    sampleName;\n    \n    /**\n     * Sample rate in Hz\n     * @type {number}\n     */\n    sampleRate;\n    \n    /**\n     * Original pitch of the sample as a MIDI note number\n     * @type {number}\n     */\n    samplePitch;\n    \n    /**\n     * Pitch correction, in cents. Can be negative\n     * @type {number}\n     */\n    samplePitchCorrection;\n    \n    /**\n     * Linked sample, unused if mono\n     * @type {BasicSample|undefined}\n     */\n    linkedSample;\n    \n    /**\n     * The type of the sample\n     * @type {sampleTypes}\n     */\n    sampleType;\n    \n    /**\n     * Relative to the start of the sample in sample points\n     * @type {number}\n     */\n    sampleLoopStartIndex;\n    \n    /**\n     * Relative to the start of the sample in sample points\n     * @type {number}\n     */\n    sampleLoopEndIndex;\n    \n    /**\n     * Indicates if the sample is compressed using vorbis SF3\n     * @type {boolean}\n     */\n    isCompressed = false;\n    \n    /**\n     * The compressed sample data if the sample has been compressed\n     * @type {Uint8Array|undefined}\n     */\n    compressedData = undefined;\n    /**\n     * Sample's linked instruments (the instruments that use it)\n     * note that duplicates are allowed since one instrument can use the same sample multople times\n     * @type {BasicInstrument[]}\n     */\n    linkedInstruments = [];\n    /**\n     * The sample's audio data\n     * @type {Float32Array|undefined}\n     */\n    sampleData = undefined;\n    \n    /**\n     * Indicates if the data was overriden, so it cannot be copied back unchanged\n     * @type {boolean}\n     */\n    dataOverriden = true;\n    \n    /**\n     * The basic representation of a sample\n     * @param sampleName {string} The sample's name\n     * @param sampleRate {number} The sample's rate in Hz\n     * @param samplePitch {number} The sample's pitch as a MIDI note number\n     * @param samplePitchCorrection {number} The sample's pitch correction in cents\n     * @param sampleType {sampleTypes} The sample's type, an enum that can indicate SF3\n     * @param loopStart {number} The sample's loop start relative to the sample start in sample points\n     * @param loopEnd {number} The sample's loop end relative to the sample start in sample points\n     */\n    constructor(\n        sampleName,\n        sampleRate,\n        samplePitch,\n        samplePitchCorrection,\n        sampleType,\n        loopStart,\n        loopEnd\n    )\n    {\n        this.sampleName = sampleName;\n        this.sampleRate = sampleRate;\n        this.samplePitch = samplePitch;\n        this.samplePitchCorrection = samplePitchCorrection;\n        this.sampleLoopStartIndex = loopStart;\n        this.sampleLoopEndIndex = loopEnd;\n        this.sampleType = sampleType;\n    }\n    \n    /**\n     * If the sample is linked to another sample\n     * @returns {boolean}\n     */\n    get isLinked()\n    {\n        return this.sampleType === sampleTypes.rightSample ||\n            this.sampleType === sampleTypes.leftSample ||\n            this.sampleType === sampleTypes.linkedSample;\n    }\n    \n    /**\n     * The sample's use count\n     * @type {number}\n     */\n    get useCount()\n    {\n        return this.linkedInstruments.length;\n    }\n    \n    /**\n     * Get raw data for writing the file\n     * @param allowVorbis {boolean}\n     * @return {Uint8Array} either s16 or vorbis data\n     * @virtual\n     */\n    getRawData(allowVorbis)\n    {\n        if (this.isCompressed && allowVorbis && !this.dataOverriden)\n        {\n            return this.compressedData;\n        }\n        return this.encodeS16LE();\n    }\n    \n    resampleData(newSampleRate)\n    {\n        let audioData = this.getAudioData();\n        const ratio = newSampleRate / this.sampleRate;\n        const resampled = new Float32Array(Math.floor(audioData.length * ratio));\n        for (let i = 0; i < resampled.length; i++)\n        {\n            resampled[i] = audioData[Math.floor(i * (1 / ratio))];\n        }\n        audioData = resampled;\n        this.sampleRate = newSampleRate;\n        // adjust loop points\n        this.sampleLoopStartIndex = Math.floor(this.sampleLoopStartIndex * ratio);\n        this.sampleLoopEndIndex = Math.floor(this.sampleLoopEndIndex * ratio);\n        this.sampleData = audioData;\n    }\n    \n    /**\n     * @param encodeVorbis {SampleEncodingFunction}\n     */\n    async compressSample(encodeVorbis)\n    {\n        // no need to compress\n        if (this.isCompressed)\n        {\n            return;\n        }\n        // compress, always mono!\n        try\n        {\n            // if the sample rate is too low or too high, resample\n            let audioData = this.getAudioData();\n            if (this.sampleRate < 8000 || this.sampleRate > 96000)\n            {\n                this.resampleData(RESAMPLE_RATE);\n                audioData = this.getAudioData();\n            }\n            const compressed = await encodeVorbis(audioData, this.sampleRate);\n            this.setCompressedData(compressed);\n        }\n        catch (e)\n        {\n            SpessaSynthWarn(`Failed to compress ${this.sampleName}. Leaving as uncompressed!`, e);\n            delete this.compressedData;\n            // flag as uncompressed\n            this.isCompressed = false;\n        }\n        \n    }\n    \n    /**\n     * @param type {sampleTypes|number}\n     */\n    setSampleType(type)\n    {\n        this.sampleType = type;\n        if (!this.isLinked)\n        {\n            // unlink the other sample\n            if (this.linkedSample)\n            {\n                this.linkedSample.linkedSample = undefined;\n                this.linkedSample.sampleType = type;\n            }\n            \n            this.linkedSample = undefined;\n        }\n        if ((type & 0x8000) > 0)\n        {\n            throw new Error(\"ROM samples are not supported.\");\n        }\n        \n    }\n    \n    deleteSample()\n    {\n        if (this.useCount > 0)\n        {\n            throw new Error(`Cannot delete sample used by: ${this.linkedInstruments.map(i => i.instrumentName)}.`);\n        }\n        this.unlinkSample();\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Unlinks a sample link\n     */\n    unlinkSample()\n    {\n        this.setSampleType(sampleTypes.monoSample);\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Links a stereo sample\n     * @param sample {BasicSample} the sample to link to\n     * @param type {sampleTypes} either left, right or linked\n     */\n    setLinkedSample(sample, type)\n    {\n        // sanity check\n        if (sample.linkedSample)\n        {\n            throw new Error(`${sample.sampleName} is linked tp ${sample.linkedSample.sampleName}. Unlink it first.`);\n        }\n        this.linkedSample = sample;\n        sample.linkedSample = this;\n        if (type === sampleTypes.leftSample)\n        {\n            this.setSampleType(sampleTypes.leftSample);\n            sample.setSampleType(sampleTypes.rightSample);\n        }\n        else if (type === sampleTypes.rightSample)\n        {\n            this.setSampleType(sampleTypes.rightSample);\n            sample.setSampleType(sampleTypes.leftSample);\n        }\n        else if (type === sampleTypes.linkedSample)\n        {\n            this.setSampleType(sampleTypes.linkedSample);\n            sample.setSampleType(sampleTypes.linkedSample);\n        }\n        else\n        {\n            throw new Error(\"Invalid sample type: \" + type);\n        }\n    }\n    \n    /**\n     * @param instrument {BasicInstrument}\n     */\n    linkTo(instrument)\n    {\n        this.linkedInstruments.push(instrument);\n    }\n    \n    /**\n     * @param instrument {BasicInstrument}\n     */\n    unlinkFrom(instrument)\n    {\n        const index = this.linkedInstruments.indexOf(instrument);\n        if (index < 0)\n        {\n            SpessaSynthWarn(`Cannot unlink ${instrument.instrumentName} from ${this.sampleName}: not linked.`);\n            return;\n        }\n        this.linkedInstruments.splice(index, 1);\n    }\n    \n    \n    /**\n     * @private\n     * Decode binary vorbis into a float32 pcm\n     * @returns {Float32Array}\n     */\n    decodeVorbis()\n    {\n        if (this.sampleData)\n        {\n            return this.sampleData;\n        }\n        // get the compressed byte stream\n        // reset array and being decoding\n        try\n        {\n            /**\n             * @type {{data: Float32Array[], error: (string|null), sampleRate: number, eof: boolean}}\n             */\n            const vorbis = stbvorbis.decode(this.compressedData);\n            const decoded = vorbis.data[0];\n            if (decoded === undefined)\n            {\n                SpessaSynthWarn(`Error decoding sample ${this.sampleName}: Vorbis decode returned undefined.`);\n                return new Float32Array(0);\n            }\n            // clip\n            // because vorbis can go above 1 sometimes\n            for (let i = 0; i < decoded.length; i++)\n            {\n                // magic number is 32,767 / 32,768\n                decoded[i] = Math.max(-1, Math.min(decoded[i], 0.999969482421875));\n            }\n            return decoded;\n        }\n        catch (e)\n        {\n            // do not error out, fill with silence\n            SpessaSynthWarn(`Error decoding sample ${this.sampleName}: ${e}`);\n            return new Float32Array(this.sampleLoopEndIndex + 1);\n        }\n    }\n    \n    /**\n     * Get the float32 audio data.\n     * Note that this either decodes the compressed data or passes the ready sampleData.\n     * If neither are set then it will throw an error!\n     * @returns {Float32Array}\n     */\n    getAudioData()\n    {\n        if (this.sampleData)\n        {\n            return this.sampleData;\n        }\n        if (this.isCompressed)\n        {\n            // SF3\n            // if compressed, decode\n            this.sampleData = this.decodeVorbis();\n            return this.sampleData;\n        }\n        throw new Error(\"Sample data is undefined for a BasicSample instance.\");\n    }\n    \n    /**\n     * Encodes s16le sample\n     * @return {IndexedByteArray}\n     */\n    encodeS16LE()\n    {\n        const data = this.getAudioData();\n        const data16 = new Int16Array(data.length);\n        const len = data.length;\n        for (let i = 0; i < len; i++)\n        {\n            let sample = data[i] * 32768;\n            // Clamp for safety (do not use Math.max/Math.min here)\n            if (sample > 32767)\n            {\n                sample = 32767;\n            }\n            else if (sample < -32768)\n            {\n                sample = -32768;\n            }\n            data16[i] = sample;\n        }\n        return new IndexedByteArray(data16.buffer);\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * REPLACES the audio data\n     * @param audioData {Float32Array}\n     * @virtual\n     */\n    setAudioData(audioData)\n    {\n        this.isCompressed = false;\n        delete this.compressedData;\n        this.sampleData = audioData;\n        this.dataOverriden = true;\n    }\n    \n    /**\n     * Replaces the audio with a compressed data sample\n     * @param data {Uint8Array}\n     */\n    setCompressedData(data)\n    {\n        this.sampleData = undefined;\n        this.compressedData = data;\n        this.isCompressed = true;\n        this.dataOverriden = false;\n    }\n}\n\n\nexport class CreatedSample extends BasicSample\n{\n    /**\n     * A simplified class for creating samples\n     * @param name\n     * @param sampleRate\n     * @param sampleData\n     */\n    constructor(name, sampleRate, sampleData)\n    {\n        super(name, sampleRate, 60, 0, sampleTypes.monoSample, 0, sampleData.length - 1);\n        this.setAudioData(sampleData);\n    }\n    \n    /**\n     * @param allowVorbis {boolean}\n     * @returns {Uint8Array}\n     */\n    getRawData(allowVorbis)\n    {\n        return super.getRawData(allowVorbis);\n    }\n    \n    /**\n     * @param audioData {Float32Array}\n     */\n    setAudioData(audioData)\n    {\n        super.setAudioData(audioData);\n    }\n}", "import { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { readLittleEndian, signedInt8 } from \"../../utils/byte_functions/little_endian.js\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../utils/loggin.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { BasicSample } from \"../basic_soundfont/basic_sample.js\";\nimport { consoleColors } from \"../../utils/other.js\";\n\n/**\n * samples.js\n * purpose: parses soundfont samples\n */\n\nexport const SF3_BIT_FLIT = 0x10;\n\nexport class SoundFontSample extends BasicSample\n{\n    /**\n     * Linked sample index for retrieving linked samples in sf2\n     * @type {number}\n     */\n    linkedSampleIndex;\n    \n    /**\n     * The sliced sample from the smpl chunk\n     * @type {Uint8Array}\n     */\n    s16leData;\n    \n    /**\n     * Creates a sample\n     * @param sampleName {string}\n     * @param sampleStartIndex {number}\n     * @param sampleEndIndex {number}\n     * @param sampleLoopStartIndex {number}\n     * @param sampleLoopEndIndex {number}\n     * @param sampleRate {number}\n     * @param samplePitch {number}\n     * @param samplePitchCorrection {number}\n     * @param linkedSampleIndex {number}\n     * @param sampleType {number}\n     * @param sampleDataArray {IndexedByteArray|Float32Array}\n     * @param sampleIndex {number} initial sample index when loading the sfont\n     * Used for SF2Pack support\n     */\n    constructor(\n        sampleName,\n        sampleStartIndex,\n        sampleEndIndex,\n        sampleLoopStartIndex,\n        sampleLoopEndIndex,\n        sampleRate,\n        samplePitch,\n        samplePitchCorrection,\n        linkedSampleIndex,\n        sampleType,\n        sampleDataArray,\n        sampleIndex\n    )\n    {\n        // read sf3\n        // https://github.com/FluidSynth/fluidsynth/wiki/SoundFont3Format\n        const compressed = (sampleType & SF3_BIT_FLIT) > 0;\n        // remove the compression flag\n        sampleType &= ~SF3_BIT_FLIT;\n        super(\n            sampleName,\n            sampleRate,\n            samplePitch,\n            samplePitchCorrection,\n            sampleType,\n            sampleLoopStartIndex - (sampleStartIndex / 2),\n            sampleLoopEndIndex - (sampleStartIndex / 2)\n        );\n        this.dataOverriden = false;\n        this.isCompressed = compressed;\n        this.sampleName = sampleName;\n        // in bytes\n        this.startByteOffset = sampleStartIndex;\n        this.endByteOffset = sampleEndIndex;\n        this.sampleID = sampleIndex;\n        const smplStart = sampleDataArray.currentIndex;\n        \n        // three data types in:\n        // SF2 (s16le)\n        // SF3 (vorbis)\n        // SF2Pack (\n        if (this.isCompressed)\n        {\n            // correct loop points\n            this.sampleLoopStartIndex += this.startByteOffset / 2;\n            this.sampleLoopEndIndex += this.startByteOffset / 2;\n            \n            // copy the compressed data, it can be preserved during writing\n            this.compressedData = sampleDataArray.slice(\n                this.startByteOffset / 2 + smplStart,\n                this.endByteOffset / 2 + smplStart\n            );\n        }\n        else\n        {\n            if (sampleDataArray instanceof Float32Array)\n            {\n                // float32 array from SF2pack, copy directly\n                this.sampleData = sampleDataArray.slice(\n                    this.startByteOffset / 2,\n                    this.endByteOffset / 2\n                );\n                this.dataOverriden = true;\n            }\n            else\n            {\n                // regular sf2 s16le\n                this.s16leData = sampleDataArray.slice(\n                    smplStart + this.startByteOffset,\n                    smplStart + this.endByteOffset\n                );\n            }\n            \n        }\n        this.linkedSampleIndex = linkedSampleIndex;\n    }\n    \n    /**\n     * @param samplesArray {BasicSample[]}\n     */\n    getLinkedSample(samplesArray)\n    {\n        if (this.linkedSample || !this.isLinked)\n        {\n            return;\n        }\n        const linked = samplesArray[this.linkedSampleIndex];\n        if (!linked)\n        {\n            // log as info because it's common and not really dangerous\n            SpessaSynthInfo(`%cInvalid linked sample for ${this.sampleName}. Setting to mono.`, consoleColors.warn);\n            this.unlinkSample();\n        }\n        else\n        {\n            // check for corrupted files (like FluidR3_GM.sf2 that link EVERYTHING to a single sample)\n            if (linked.linkedSample)\n            {\n                SpessaSynthInfo(\n                    `%cInvalid linked sample for ${this.sampleName}: Already linked to ${linked.linkedSample.sampleName}`,\n                    consoleColors.warn\n                );\n                this.unlinkSample();\n            }\n            else\n            {\n                this.setLinkedSample(linked, this.sampleType);\n            }\n        }\n    }\n    \n    /**\n     * @param audioData {Float32Array}\n     */\n    setAudioData(audioData)\n    {\n        super.setAudioData(audioData);\n    }\n    \n    /**\n     * Loads the audio data and stores it for reuse\n     * @returns {Float32Array} The audioData\n     */\n    getAudioData()\n    {\n        if (this.sampleData)\n        {\n            return this.sampleData;\n        }\n        // SF2Pack is decoded during load time\n        // SF3 is decoded in BasicSample\n        if (this.isCompressed)\n        {\n            return super.getAudioData();\n        }\n        \n        // start loading data if it is not loaded\n        const byteLength = this.endByteOffset - this.startByteOffset;\n        if (byteLength < 1)\n        {\n            SpessaSynthWarn(`Invalid sample ${this.sampleName}! Invalid length: ${byteLength}`);\n            return new Float32Array(1);\n        }\n        \n        \n        // SF2\n        // read the sample data\n        let audioData = new Float32Array(byteLength / 2);\n        let convertedSigned16 = new Int16Array(\n            this.s16leData.buffer\n        );\n        \n        // convert to float\n        for (let i = 0; i < convertedSigned16.length; i++)\n        {\n            audioData[i] = convertedSigned16[i] / 32768;\n        }\n        \n        this.sampleData = audioData;\n        return audioData;\n        \n    }\n    \n    /**\n     * @param allowVorbis\n     * @returns {Uint8Array}\n     */\n    getRawData(allowVorbis)\n    {\n        if (this.dataOverriden || this.compressedData)\n        {\n            // return vorbis or encode manually\n            return super.getRawData(allowVorbis);\n        }\n        // copy the smpl directly\n        return this.s16leData;\n    }\n}\n\n/**\n * Reads the generatorTranslator from the shdr read\n * @param sampleHeadersChunk {RiffChunk}\n * @param smplChunkData {IndexedByteArray|Float32Array}\n * @param linkSamples {boolean}\n * @returns {SoundFontSample[]}\n */\nexport function readSamples(sampleHeadersChunk, smplChunkData, linkSamples = true)\n{\n    /**\n     * @type {SoundFontSample[]}\n     */\n    let samples = [];\n    let index = 0;\n    while (sampleHeadersChunk.chunkData.length > sampleHeadersChunk.chunkData.currentIndex)\n    {\n        const sample = readSample(index, sampleHeadersChunk.chunkData, smplChunkData);\n        samples.push(sample);\n        index++;\n    }\n    // remove EOS\n    samples.pop();\n    \n    // link samples\n    if (linkSamples)\n    {\n        samples.forEach(s => s.getLinkedSample(samples));\n    }\n    \n    return samples;\n}\n\n/**\n * Reads it into a sample\n * @param index {number}\n * @param sampleHeaderData {IndexedByteArray}\n * @param smplArrayData {IndexedByteArray|Float32Array}\n * @returns {SoundFontSample}\n */\nfunction readSample(index, sampleHeaderData, smplArrayData)\n{\n    \n    // read the sample name\n    let sampleName = readBytesAsString(sampleHeaderData, 20);\n    \n    // read the sample start index\n    let sampleStartIndex = readLittleEndian(sampleHeaderData, 4) * 2;\n    \n    // read the sample end index\n    let sampleEndIndex = readLittleEndian(sampleHeaderData, 4) * 2;\n    \n    // read the sample looping start index\n    let sampleLoopStartIndex = readLittleEndian(sampleHeaderData, 4);\n    \n    // read the sample looping end index\n    let sampleLoopEndIndex = readLittleEndian(sampleHeaderData, 4);\n    \n    // read the sample rate\n    let sampleRate = readLittleEndian(sampleHeaderData, 4);\n    \n    // read the original sample pitch\n    let samplePitch = sampleHeaderData[sampleHeaderData.currentIndex++];\n    if (samplePitch > 127)\n    {\n        // if it's out of range, then default to 60\n        samplePitch = 60;\n    }\n    \n    // read the sample pitch correction\n    let samplePitchCorrection = signedInt8(sampleHeaderData[sampleHeaderData.currentIndex++]);\n    \n    \n    // read the link to the other channel\n    let sampleLink = readLittleEndian(sampleHeaderData, 2);\n    let sampleType = readLittleEndian(sampleHeaderData, 2);\n    \n    \n    return new SoundFontSample(\n        sampleName,\n        sampleStartIndex,\n        sampleEndIndex,\n        sampleLoopStartIndex,\n        sampleLoopEndIndex,\n        sampleRate,\n        samplePitch,\n        samplePitchCorrection,\n        sampleLink,\n        sampleType,\n        smplArrayData,\n        index\n    );\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeStringAsBytes } from \"../../../utils/byte_functions/string.js\";\nimport { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { SF3_BIT_FLIT } from \"../../read_sf2/samples.js\";\n\n/**\n * @this {BasicSoundBank}\n * @param smplStartOffsets {number[]}\n * @param smplEndOffsets {number[]}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getSHDR(smplStartOffsets, smplEndOffsets)\n{\n    const sampleLength = 46;\n    const shdrSize = sampleLength * (this.samples.length + 1); // +1 because EOP\n    const shdrData = new IndexedByteArray(shdrSize);\n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xshdrData = new IndexedByteArray(shdrSize);\n    let maxSampleLink = 0;\n    this.samples.forEach((sample, index) =>\n    {\n        // sample name\n        writeStringAsBytes(shdrData, sample.sampleName.substring(0, 20), 20);\n        writeStringAsBytes(xshdrData, sample.sampleName.substring(20), 20);\n        // start offset\n        const dwStart = smplStartOffsets[index];\n        writeDword(shdrData, dwStart);\n        xshdrData.currentIndex += 4;\n        // end offset\n        const dwEnd = smplEndOffsets[index];\n        writeDword(shdrData, dwEnd);\n        xshdrData.currentIndex += 4;\n        // loop is stored as relative in sample points, change it to absolute sample points here\n        let loopStart = sample.sampleLoopStartIndex + dwStart;\n        let loopEnd = sample.sampleLoopEndIndex + dwStart;\n        if (sample.isCompressed)\n        {\n            // https://github.com/FluidSynth/fluidsynth/wiki/SoundFont3Format\n            loopStart -= dwStart;\n            loopEnd -= dwStart;\n        }\n        writeDword(shdrData, loopStart);\n        writeDword(shdrData, loopEnd);\n        // sample rate\n        writeDword(shdrData, sample.sampleRate);\n        // pitch and correction\n        shdrData[shdrData.currentIndex++] = sample.samplePitch;\n        shdrData[shdrData.currentIndex++] = sample.samplePitchCorrection;\n        // skip all those for xshdr\n        xshdrData.currentIndex += 14;\n        // sample link\n        const sampleLinkIndex = this.samples.indexOf(sample.linkedSample);\n        writeWord(shdrData, Math.max(0, sampleLinkIndex) & 0xFFFF);\n        writeWord(xshdrData, Math.max(0, sampleLinkIndex) >> 16);\n        maxSampleLink = Math.max(maxSampleLink, sampleLinkIndex);\n        // sample type: add byte if compressed\n        let type = sample.sampleType;\n        if (sample.isCompressed)\n        {\n            type |= SF3_BIT_FLIT;\n        }\n        writeWord(shdrData, type);\n        xshdrData.currentIndex += 2;\n    });\n    \n    // write EOS and zero everything else\n    writeStringAsBytes(shdrData, \"EOS\", sampleLength);\n    writeStringAsBytes(xshdrData, \"EOS\", sampleLength);\n    const shdr = writeRIFFChunkRaw(\"shdr\", shdrData);\n    const xshdr = writeRIFFChunkRaw(\"shdr\", xshdrData);\n    return {\n        pdta: shdr,\n        xdta: xshdr,\n        highestIndex: maxSampleLink\n    };\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeLittleEndian, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { MOD_BYTE_SIZE } from \"../modulator.js\";\n\n/**\n * @this {BasicSoundBank}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getIMOD()\n{\n    // very similar to igen,\n    // go through all instruments -> zones and write modulators sequentially\n    let imodSize = MOD_BYTE_SIZE; // terminal\n    for (const inst of this.instruments)\n    {\n        imodSize += inst.globalZone.modulators.length * MOD_BYTE_SIZE;\n        // start with one mod for global\n        imodSize += inst.instrumentZones.reduce((sum, z) => z.modulators.length * MOD_BYTE_SIZE + sum, 0);\n    }\n    const imodData = new IndexedByteArray(imodSize);\n    \n    /**\n     * @param z {BasicZone}\n     */\n    const writeZone = z =>\n    {\n        for (const mod of z.modulators)\n        {\n            writeWord(imodData, mod.getSourceEnum());\n            writeWord(imodData, mod.modulatorDestination);\n            writeWord(imodData, mod.transformAmount);\n            writeWord(imodData, mod.getSecSrcEnum());\n            writeWord(imodData, mod.transformType);\n        }\n    };\n    \n    for (const inst of this.instruments)\n    {\n        // global\n        writeZone(inst.globalZone);\n        for (const instrumentZone of inst.instrumentZones)\n        {\n            writeZone(instrumentZone);\n        }\n    }\n    \n    // terminal modulator, is zero\n    writeLittleEndian(imodData, 0, MOD_BYTE_SIZE);\n    \n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const ximodData = new IndexedByteArray(MOD_BYTE_SIZE);\n    writeLittleEndian(ximodData, 0, MOD_BYTE_SIZE);\n    \n    const imod = writeRIFFChunkRaw(\"imod\", imodData);\n    const ximod = writeRIFFChunkRaw(\"imod\", ximodData);\n    return {\n        pdta: imod,\n        xdta: ximod,\n        highestIndex: 0 // not applicable\n    };\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\n\nconst BAG_SIZE = 4;\n\n/**\n * @this {BasicSoundBank}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getIBAG()\n{\n    // write all ibag with their start indexes as they were changed in getIGEN() and getIMOD()\n    const ibagSize = this.instruments.reduce(\n        (sum, i) =>\n            // +1 because global zone\n            (i.instrumentZones.length + 1) * BAG_SIZE + sum,\n        BAG_SIZE\n    );\n    const ibagData = new IndexedByteArray(ibagSize);\n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xibagData = new IndexedByteArray(ibagSize);\n    let generatorIndex = 0;\n    let modulatorIndex = 0;\n    /**\n     * @param z {BasicZone}\n     */\n    const writeZone = z =>\n    {\n        // bottom WORD: regular ibag\n        writeWord(ibagData, generatorIndex & 0xFFFF);\n        writeWord(ibagData, modulatorIndex & 0xFFFF);\n        // top WORD: extended ibag\n        writeWord(xibagData, generatorIndex >> 16);\n        writeWord(xibagData, modulatorIndex >> 16);\n        generatorIndex += z.generators.length;\n        modulatorIndex += z.modulators.length;\n    };\n    \n    for (const inst of this.instruments)\n    {\n        writeZone(inst.globalZone);\n        for (const ibag of inst.instrumentZones)\n        {\n            writeZone(ibag);\n        }\n    }\n    // write the terminal IBAG\n    writeWord(ibagData, generatorIndex & 0xFFFF);\n    writeWord(ibagData, modulatorIndex & 0xFFFF);\n    writeWord(xibagData, generatorIndex >> 16);\n    writeWord(xibagData, modulatorIndex >> 16);\n    const ibag = writeRIFFChunkRaw(\"ibag\", ibagData);\n    const xibag = writeRIFFChunkRaw(\"ibag\", xibagData);\n    return {\n        pdta: ibag,\n        xdta: xibag,\n        highestIndex: Math.max(generatorIndex, modulatorIndex)\n    };\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeStringAsBytes } from \"../../../utils/byte_functions/string.js\";\nimport { writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\n\nconst INST_SIZE = 22;\n\n/**\n * @this {BasicSoundBank}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getINST()\n{\n    const instSize = this.instruments.length * INST_SIZE + INST_SIZE;\n    const instData = new IndexedByteArray(instSize);\n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xinstData = new IndexedByteArray(instSize);\n    // the instrument start index is adjusted in ibag, write it here\n    let instrumentStart = 0;\n    for (const inst of this.instruments)\n    {\n        writeStringAsBytes(instData, inst.instrumentName.substring(0, 20), 20);\n        writeStringAsBytes(xinstData, inst.instrumentName.substring(20), 20);\n        writeWord(instData, instrumentStart & 0xFFFF);\n        writeWord(xinstData, instrumentStart >> 16);\n        instrumentStart += inst.instrumentZones.length + 1; // global\n    }\n    // write EOI\n    writeStringAsBytes(instData, \"EOI\", 20);\n    writeStringAsBytes(xinstData, \"EOI\", 20);\n    writeWord(instData, instrumentStart & 0xFFFF);\n    writeWord(xinstData, instrumentStart >> 16);\n    \n    const inst = writeRIFFChunkRaw(\"inst\", instData);\n    const xinst = writeRIFFChunkRaw(\"inst\", xinstData);\n    \n    return {\n        pdta: inst,\n        xdta: xinst,\n        highestIndex: instrumentStart\n    };\n}", "import { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\n\nimport { GEN_BYTE_SIZE, Generator } from \"../generator.js\";\nimport { generatorTypes } from \"../generator_types.js\";\n\n/**\n * @this {BasicSoundBank}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getPGEN()\n{\n    // almost identical to igen, except the correct instrument instead of sample gen\n    // goes through all preset zones and writes generators sequentially (add 4 for terminal)\n    let pgenSize = GEN_BYTE_SIZE;\n    for (const preset of this.presets)\n    {\n        pgenSize += preset.globalZone.generators.length * GEN_BYTE_SIZE;\n        pgenSize += preset.presetZones.reduce((size, z) =>\n        {\n            // clear instrument and range generators before determining the size\n            z.generators = z.generators.filter(g =>\n                g.generatorType !== generatorTypes.instrument &&\n                g.generatorType !== generatorTypes.keyRange &&\n                g.generatorType !== generatorTypes.velRange\n            );\n            // unshift vel then key and instrument is last\n            if (z.hasVelRange)\n            {\n                z.prependGenerator(new Generator(\n                    generatorTypes.velRange,\n                    z.velRange.max << 8 | Math.max(z.velRange.min, 0),\n                    false\n                ));\n            }\n            if (z.hasKeyRange)\n            {\n                z.prependGenerator(new Generator(\n                    generatorTypes.keyRange,\n                    z.keyRange.max << 8 | Math.max(z.keyRange.min, 0),\n                    false\n                ));\n            }\n            // write the instrument id\n            z.addGenerators(new Generator(\n                generatorTypes.instrument,\n                this.instruments.indexOf(z.instrument),\n                false\n            ));\n            return z.generators.length * GEN_BYTE_SIZE + size;\n        }, 0);\n    }\n    const pgenData = new IndexedByteArray(pgenSize);\n    \n    /**\n     * @param z {BasicZone}\n     */\n    const writeZone = z =>\n    {\n        for (const gen of z.generators)\n        {\n            // name is deceptive, it works on negatives\n            writeWord(pgenData, gen.generatorType);\n            writeWord(pgenData, gen.generatorValue);\n        }\n    };\n    for (const preset of this.presets)\n    {\n        // global zone\n        writeZone(preset.globalZone);\n        for (const zone of preset.presetZones)\n        {\n            writeZone(zone);\n        }\n    }\n    // terminal generator, is zero\n    writeDword(pgenData, 0);\n    \n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xpgenData = new IndexedByteArray(GEN_BYTE_SIZE);\n    writeDword(xpgenData, 0);\n    \n    const pgen = writeRIFFChunkRaw(\"pgen\", pgenData);\n    \n    const xpgen = writeRIFFChunkRaw(\"pgen\", xpgenData);\n    return {\n        pdta: pgen,\n        xdta: xpgen,\n        highestIndex: 0 // not applicable\n    };\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeLittleEndian, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { MOD_BYTE_SIZE } from \"../modulator.js\";\n\n/**\n * @this {BasicSoundBank}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getPMOD()\n{\n    // very similar to imod,\n    // go through all presets -> zones and write modulators sequentially\n    let pmodSize = MOD_BYTE_SIZE;\n    for (const preset of this.presets)\n    {\n        pmodSize += preset.globalZone.modulators.length * MOD_BYTE_SIZE;\n        pmodSize += preset.presetZones.reduce((sum, z) => z.modulators.length * MOD_BYTE_SIZE + sum, 0);\n    }\n    const pmodData = new IndexedByteArray(pmodSize);\n    \n    /**\n     * @param z {BasicZone}\n     */\n    const writeZone = z =>\n    {\n        for (const mod of z.modulators)\n        {\n            writeWord(pmodData, mod.getSourceEnum());\n            writeWord(pmodData, mod.modulatorDestination);\n            writeWord(pmodData, mod.transformAmount);\n            writeWord(pmodData, mod.getSecSrcEnum());\n            writeWord(pmodData, mod.transformType);\n        }\n    };\n    \n    \n    for (const preset of this.presets)\n    {\n        // global\n        writeZone(preset.globalZone);\n        for (const zone of preset.presetZones)\n        {\n            writeZone(zone);\n        }\n    }\n    \n    // terminal modulator, is zero\n    writeLittleEndian(pmodData, 0, MOD_BYTE_SIZE);\n    \n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xpmodData = new IndexedByteArray(MOD_BYTE_SIZE);\n    writeLittleEndian(xpmodData, 0, MOD_BYTE_SIZE);\n    \n    const pmod = writeRIFFChunkRaw(\"pmod\", pmodData);\n    const xpmod = writeRIFFChunkRaw(\"pmod\", xpmodData);\n    return {\n        pdta: pmod,\n        xdta: xpmod,\n        highestIndex: 0 // not applicable\n    };\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\n\nconst BAG_SIZE = 4;\n\n/**\n * @this {BasicSoundBank}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getPBAG()\n{\n    // write all pbag with their start indexes as they were changed in getPGEN() and getPMOD()\n    const pbagSize = this.presets.reduce((sum, i) =>\n        // +1 because global zone\n        (i.presetZones.length + 1) * BAG_SIZE + sum, BAG_SIZE);\n    const pbagData = new IndexedByteArray(pbagSize);\n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xpbagData = new IndexedByteArray(pbagSize);\n    let generatorIndex = 0;\n    let modulatorIndex = 0;\n    \n    /**\n     * @param z {BasicZone}\n     */\n    const writeZone = z =>\n    {\n        writeWord(pbagData, generatorIndex & 0xFFFF);\n        writeWord(pbagData, modulatorIndex & 0xFFFF);\n        writeWord(xpbagData, generatorIndex >> 16);\n        writeWord(xpbagData, modulatorIndex >> 16);\n        generatorIndex += z.generators.length;\n        modulatorIndex += z.modulators.length;\n    };\n    \n    for (const preset of this.presets)\n    {\n        // global\n        writeZone(preset.globalZone);\n        for (const pbag of preset.presetZones)\n        {\n            writeZone(pbag);\n        }\n    }\n    // write the terminal PBAG\n    writeWord(pbagData, generatorIndex);\n    writeWord(pbagData, modulatorIndex);\n    writeWord(xpbagData, generatorIndex);\n    writeWord(xpbagData, modulatorIndex);\n    const pbag = writeRIFFChunkRaw(\"pbag\", pbagData);\n    const xbag = writeRIFFChunkRaw(\"pbag\", xpbagData);\n    return {\n        pdta: pbag,\n        xdta: xbag,\n        highestIndex: Math.max(generatorIndex, modulatorIndex)\n    };\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeStringAsBytes } from \"../../../utils/byte_functions/string.js\";\nimport { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\n\nconst PHDR_SIZE = 38;\n\n/**\n * @this {BasicSoundBank}\n * @returns {ReturnedExtendedSf2Chunks}\n */\nexport function getPHDR()\n{\n    const phdrSize = this.presets.length * PHDR_SIZE + PHDR_SIZE;\n    const phdrData = new IndexedByteArray(phdrSize);\n    // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n    const xphdrData = new IndexedByteArray(phdrSize);\n    // the preset start is adjusted in pbag, this is only for the terminal preset index\n    let presetStart = 0;\n    for (const preset of this.presets)\n    {\n        writeStringAsBytes(phdrData, preset.presetName.substring(0, 20), 20);\n        writeStringAsBytes(xphdrData, preset.presetName.substring(20), 20);\n        \n        writeWord(phdrData, preset.program);\n        writeWord(phdrData, preset.bank);\n        writeWord(phdrData, presetStart & 0xFFFF);\n        \n        xphdrData.currentIndex += 4;\n        writeWord(xphdrData, presetStart >> 16);\n        \n        // 3 unused dword, spec says to keep em so we do\n        writeDword(phdrData, preset.library);\n        writeDword(phdrData, preset.genre);\n        writeDword(phdrData, preset.morphology);\n        \n        xphdrData.currentIndex += 12;\n        \n        presetStart += preset.presetZones.length + 1; // global\n    }\n    // write EOP\n    writeStringAsBytes(phdrData, \"EOP\", 20);\n    phdrData.currentIndex += 4; // program, bank\n    writeWord(phdrData, presetStart & 0xFFFF);\n    phdrData.currentIndex += 12;// library, genre, morphology\n    \n    writeStringAsBytes(xphdrData, \"EOP\", 20);\n    xphdrData.currentIndex += 4; // program, bank\n    writeWord(xphdrData, presetStart >> 16);\n    xphdrData.currentIndex += 12;// library, genre, morphology\n    \n    const phdr = writeRIFFChunkRaw(\"phdr\", phdrData);\n    \n    const xphdr = writeRIFFChunkRaw(\"phdr\", xphdrData);\n    \n    return {\n        pdta: phdr,\n        xdta: xphdr,\n        highestIndex: presetStart\n    };\n}", "/**\n * Fills the object with default values\n * @param obj {Object}\n * @param defObj {Object}\n * @returns {Object}\n */\nexport function fillWithDefaults(obj, defObj)\n{\n    if (obj === undefined)\n    {\n        obj = {};\n    }\n    for (const key in defObj)\n    {\n        if (defObj.hasOwnProperty(key) && !(key in obj))\n        {\n            obj[key] = defObj[key];\n        }\n    }\n    return obj;\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeRIFFChunkParts, writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { getStringBytes } from \"../../../utils/byte_functions/string.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\nimport { getIGEN } from \"./igen.js\";\nimport { getSDTA } from \"./sdta.js\";\nimport { getSHDR } from \"./shdr.js\";\nimport { getIMOD } from \"./imod.js\";\nimport { getIBAG } from \"./ibag.js\";\nimport { getINST } from \"./inst.js\";\nimport { getPGEN } from \"./pgen.js\";\nimport { getPMOD } from \"./pmod.js\";\nimport { getPBAG } from \"./pbag.js\";\nimport { getPHDR } from \"./phdr.js\";\nimport { writeLittleEndian, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../../utils/loggin.js\";\nimport { MOD_BYTE_SIZE } from \"../modulator.js\";\nimport { fillWithDefaults } from \"../../../utils/fill_with_defaults.js\";\n\n/**\n * @typedef {function} ProgressFunction\n * @param {string} sampleName - the written sample name.\n * @param {number} sampleIndex - the sample's index.\n * @param {number} sampleCount - the total sample count for progress displaying.\n */\n\n/**\n * @typedef {Object} SoundFont2WriteOptions\n * @property {boolean} compress - if the soundfont should be compressed with a given function.\n * @property {SampleEncodingFunction} compressionFunction -\n * the encode vorbis function. It can be undefined if not compressed.\n * @property {ProgressFunction} progressFunction - a function to show progress for writing large banks. It can be undefined.\n * @property {boolean} writeDefaultModulators - if the DMOD chunk should be written.\n * Recommended.\n * @property {boolean} writeExtendedLimits - if the xdta chunk should be written to allow virtually infinite parameters.\n * Recommended.\n * @property {boolean} decompress - if an sf3 bank should be decompressed back to sf2. Not recommended.\n */\n\n\n/**\n * @typedef {Object} ReturnedExtendedSf2Chunks\n * @property {IndexedByteArray} pdta - the pdta part of the chunk\n * @property {IndexedByteArray} xdta - the xdta (https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md) part of the chunk\n * @property {number} highestIndex - the highest index written (0 if not applicable). Used for determining whether the xdta chunk is necessary.\n */\n\n/**\n * @type {SoundFont2WriteOptions}\n */\nconst DEFAULT_WRITE_OPTIONS = {\n    compress: false,\n    compressionQuality: 0.5,\n    compressionFunction: undefined,\n    progressFunction: undefined,\n    writeDefaultModulators: true,\n    writeExtendedLimits: true,\n    decompress: false\n};\n\n/**\n * Write the soundfont as an .sf2 file\n * @this {BasicSoundBank}\n * @param {Partial<SoundFont2WriteOptions>} options\n * @returns {Uint8Array}\n */\nexport async function write(options = DEFAULT_WRITE_OPTIONS)\n{\n    options = fillWithDefaults(options, DEFAULT_WRITE_OPTIONS);\n    if (options?.compress)\n    {\n        if (typeof options?.compressionFunction !== \"function\")\n        {\n            throw new Error(\"No compression function supplied but compression enabled.\");\n        }\n        if (options?.decompress)\n        {\n            throw new Error(\"Decompressed and compressed at the same time.\");\n        }\n    }\n    SpessaSynthGroupCollapsed(\n        \"%cSaving soundfont...\",\n        consoleColors.info\n    );\n    SpessaSynthInfo(\n        `%cCompression: %c${options?.compress || \"false\"}%c quality: %c${options?.compressionQuality || \"none\"}`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized\n    );\n    SpessaSynthInfo(\n        \"%cWriting INFO...\",\n        consoleColors.info\n    );\n    /**\n     * Write INFO\n     * @type {IndexedByteArray[]}\n     */\n    const infoArrays = [];\n    this.soundFontInfo[\"ISFT\"] = \"SpessaSynth\"; // ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\n    if (options?.compress || this.samples.some(s => s.isCompressed))\n    {\n        this.soundFontInfo[\"ifil\"] = \"3.0\"; // set version to 3\n    }\n    if (options?.decompress)\n    {\n        this.soundFontInfo[\"ifil\"] = \"2.4\"; // set version to 2.04\n    }\n    \n    if (options?.writeDefaultModulators)\n    {\n        // trigger the DMOD write\n        this.soundFontInfo[\"DMOD\"] = `${this.defaultModulators.length} Modulators`;\n        this.customDefaultModulators = true;\n    }\n    else\n    {\n        delete this.soundFontInfo[\"DMOD\"];\n    }\n    \n    for (const [type, data] of Object.entries(this.soundFontInfo))\n    {\n        if (type === \"ifil\" || type === \"iver\")\n        {\n            const major = parseInt(data.split(\".\")[0]);\n            const minor = parseInt(data.split(\".\")[1]);\n            const ckdata = new IndexedByteArray(4);\n            writeWord(ckdata, major);\n            writeWord(ckdata, minor);\n            infoArrays.push(writeRIFFChunkRaw(type, ckdata));\n        }\n        else if (type === \"DMOD\")\n        {\n            const mods = this.defaultModulators;\n            SpessaSynthInfo(\n                `%cWriting %c${mods.length}%c default modulators...`,\n                consoleColors.info,\n                consoleColors.recognized,\n                consoleColors.info\n            );\n            let dmodsize = MOD_BYTE_SIZE + mods.length * MOD_BYTE_SIZE;\n            const dmoddata = new IndexedByteArray(dmodsize);\n            for (const mod of mods)\n            {\n                writeWord(dmoddata, mod.getSourceEnum());\n                writeWord(dmoddata, mod.modulatorDestination);\n                writeWord(dmoddata, mod.transformAmount);\n                writeWord(dmoddata, mod.getSecSrcEnum());\n                writeWord(dmoddata, mod.transformType);\n            }\n            \n            // terminal modulator, is zero\n            writeLittleEndian(dmoddata, 0, MOD_BYTE_SIZE);\n            \n            infoArrays.push(writeRIFFChunkRaw(type, dmoddata));\n        }\n        else\n        {\n            infoArrays.push(writeRIFFChunkRaw(\n                type,\n                getStringBytes(data, true, true) // pad with zero and ensure even length\n            ));\n        }\n    }\n    \n    SpessaSynthInfo(\n        \"%cWriting SDTA...\",\n        consoleColors.info\n    );\n    // write sdta\n    const smplStartOffsets = [];\n    const smplEndOffsets = [];\n    const sdtaChunk = await getSDTA.call(\n        this,\n        smplStartOffsets,\n        smplEndOffsets,\n        options.compress,\n        options.decompress,\n        options?.compressionFunction,\n        options?.progressFunction\n    );\n    \n    SpessaSynthInfo(\n        \"%cWriting PDTA...\",\n        consoleColors.info\n    );\n    // write pdta\n    // go in reverse so the indexes are correct\n    // instruments\n    SpessaSynthInfo(\n        \"%cWriting SHDR...\",\n        consoleColors.info\n    );\n    const shdrChunk = getSHDR.call(this, smplStartOffsets, smplEndOffsets);\n    SpessaSynthInfo(\n        \"%cWriting IGEN...\",\n        consoleColors.info\n    );\n    const igenChunk = getIGEN.call(this);\n    SpessaSynthInfo(\n        \"%cWriting IMOD...\",\n        consoleColors.info\n    );\n    const imodChunk = getIMOD.call(this);\n    SpessaSynthInfo(\n        \"%cWriting IBAG...\",\n        consoleColors.info\n    );\n    const ibagChunk = getIBAG.call(this);\n    SpessaSynthInfo(\n        \"%cWriting INST...\",\n        consoleColors.info\n    );\n    const instChunk = getINST.call(this);\n    SpessaSynthInfo(\n        \"%cWriting PGEN...\",\n        consoleColors.info\n    );\n    // presets\n    const pgenChunk = getPGEN.call(this);\n    SpessaSynthInfo(\n        \"%cWriting PMOD...\",\n        consoleColors.info\n    );\n    const pmodChunk = getPMOD.call(this);\n    SpessaSynthInfo(\n        \"%cWriting PBAG...\",\n        consoleColors.info\n    );\n    const pbagChunk = getPBAG.call(this);\n    SpessaSynthInfo(\n        \"%cWriting PHDR...\",\n        consoleColors.info\n    );\n    const phdrChunk = getPHDR.call(this);\n    /**\n     * @type {ReturnedExtendedSf2Chunks[]}\n     */\n    const chunks = [phdrChunk, pbagChunk, pmodChunk, pgenChunk, instChunk, ibagChunk, imodChunk, igenChunk, shdrChunk];\n    // combine in the sfspec order\n    const pdtaChunk = writeRIFFChunkParts(\n        \"pdta\",\n        chunks.map(c => c.pdta),\n        true\n    );\n    const maxIndex = Math.max(\n        ...chunks.map(c => c.highestIndex)\n    );\n    \n    const writeXdta = options.writeExtendedLimits && (\n        maxIndex > 0xFFFF\n        || this.presets.some(p => p.presetName.length > 20)\n        || this.instruments.some(i => i.instrumentName.length > 20)\n        || this.samples.some(s => s.sampleName.length > 20)\n    );\n    \n    if (writeXdta)\n    {\n        SpessaSynthInfo(\n            `%cWriting the xdta chunk! Max index: %c${maxIndex}`,\n            consoleColors.info,\n            consoleColors.value\n        );\n        // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n        const xpdtaChunk = writeRIFFChunkParts(\"xdta\", chunks.map(c => c.xdta), true);\n        infoArrays.push(xpdtaChunk);\n    }\n    \n    const infoChunk = writeRIFFChunkParts(\"INFO\", infoArrays, true);\n    SpessaSynthInfo(\n        \"%cWriting the output file...\",\n        consoleColors.info\n    );\n    // finally, combine everything\n    const main = writeRIFFChunkParts(\n        \"RIFF\",\n        [getStringBytes(\"sfbk\"), infoChunk, sdtaChunk, pdtaChunk]\n    );\n    SpessaSynthInfo(\n        `%cSaved succesfully! Final file size: %c${main.length}`,\n        consoleColors.info,\n        consoleColors.recognized\n    );\n    SpessaSynthGroupEnd();\n    return main;\n}", "/**\n * @typedef {Object} SoundFontRange\n * @property {number} min - the minimum midi note\n * @property {number} max - the maximum midi note\n */\nimport { generatorTypes } from \"./generator_types.js\";\nimport { Generator } from \"./generator.js\";\nimport { Modulator } from \"./modulator.js\";\n\nexport class BasicZone\n{\n    /**\n     * The zone's velocity range\n     * min -1 means that it is a default value\n     * @type {SoundFontRange}\n     */\n    velRange = { min: -1, max: 127 };\n    \n    /**\n     * The zone's key range\n     * min -1 means that it is a default value\n     * @type {SoundFontRange}\n     */\n    keyRange = { min: -1, max: 127 };\n    \n    /**\n     * The zone's generators\n     * @type {Generator[]}\n     */\n    generators = [];\n    /**\n     * The zone's modulators\n     * @type {Modulator[]}\n     */\n    modulators = [];\n    \n    /**\n     * @returns {boolean}\n     */\n    get hasKeyRange()\n    {\n        return this.keyRange.min !== -1;\n    }\n    \n    /**\n     * @returns {boolean}\n     */\n    get hasVelRange()\n    {\n        return this.velRange.min !== -1;\n    }\n    \n    /**\n     * Adds at the start\n     * @param generator {Generator}\n     */\n    prependGenerator(generator)\n    {\n        this.generators.unshift(generator);\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * @param type {generatorTypes}\n     * @param value {number}\n     */\n    setGenerator(type, value)\n    {\n        switch (type)\n        {\n            case generatorTypes.sampleID:\n                throw new Error(\"Use setSample()\");\n            case generatorTypes.instrument:\n                throw new Error(\"Use setInstrument()\");\n            \n            case generatorTypes.velRange:\n            case generatorTypes.keyRange:\n                throw new Error(\"Set the range manually\");\n        }\n        let generator = this.generators.find(g => g.generatorType === type);\n        if (generator)\n        {\n            generator.generatorValue = value;\n        }\n        else\n        {\n            this.addGenerators(new Generator(type, value));\n        }\n    }\n    \n    /**\n     * @param generators {Generator}\n     */\n    addGenerators(...generators)\n    {\n        generators.forEach(g =>\n        {\n            switch (g.generatorType)\n            {\n                default:\n                    this.generators.push(g);\n                    break;\n                \n                case generatorTypes.velRange:\n                    this.velRange.min = g.generatorValue & 0x7F;\n                    this.velRange.max = (g.generatorValue >> 8) & 0x7F;\n                    break;\n                \n                case generatorTypes.keyRange:\n                    this.keyRange.min = g.generatorValue & 0x7F;\n                    this.keyRange.max = (g.generatorValue >> 8) & 0x7F;\n            }\n        });\n    }\n    \n    /**\n     * @param modulators {Modulator}\n     */\n    addModulators(...modulators)\n    {\n        this.modulators.push(...modulators);\n    }\n    \n    /**\n     * @param generatorType {generatorTypes}\n     * @param notFoundValue {number}\n     * @returns {number}\n     */\n    getGeneratorValue(generatorType, notFoundValue)\n    {\n        return this.generators.find(g => g.generatorType === generatorType)?.generatorValue ?? notFoundValue;\n    }\n    \n    /**\n     * @param zone {BasicZone}\n     */\n    copyFrom(zone)\n    {\n        this.generators = [...zone.generators];\n        this.modulators = zone.modulators.map(m => Modulator.copy(m));\n        this.velRange = { ...zone.velRange };\n        this.keyRange = { ...zone.keyRange };\n    }\n}\n\n", "import { BasicZone } from \"./basic_zone.js\";\n\nexport class BasicGlobalZone extends BasicZone\n{\n    // nothing here, just a different instance...\n}", "import { BasicZone } from \"./basic_zone.js\";\n\nexport class BasicInstrumentZone extends BasicZone\n{\n    /**\n     * The parent instrument.\n     * @type {BasicInstrument}\n     */\n    parentInstrument;\n    \n    /**\n     * Zone's sample.\n     * @type {BasicSample}\n     */\n    sample;\n    /**\n     * For tracking on the individual zone level, since multiple presets can refer to the same instrument.\n     * @type {number}\n     */\n    useCount;\n    \n    /**\n     * @param instrument {BasicInstrument}\n     */\n    constructor(instrument)\n    {\n        super();\n        this.parentInstrument = instrument;\n        this.useCount = instrument.useCount;\n    }\n    \n    /**\n     * @param sample {BasicSample}\n     */\n    setSample(sample)\n    {\n        this.sample = sample;\n        sample.linkTo(this.parentInstrument);\n    }\n    \n    deleteZone()\n    {\n        this.sample.unlinkFrom(this.parentInstrument);\n    }\n}", "import { BasicGlobalZone } from \"./basic_global_zone.js\";\nimport { BasicInstrumentZone } from \"./basic_instrument_zone.js\";\nimport { SpessaSynthWarn } from \"../../utils/loggin.js\";\n\nexport class BasicInstrument\n{\n    /**\n     * The instrument's name\n     * @type {string}\n     */\n    instrumentName = \"\";\n    \n    /**\n     * The instrument's zones\n     * @type {BasicInstrumentZone[]}\n     * @readonly\n     */\n    instrumentZones = [];\n    \n    /**\n     * Instrument's global zone\n     * @type {BasicGlobalZone}\n     */\n    globalZone = new BasicGlobalZone();\n    \n    /**\n     * Instrument's linked presets (the presets that use it)\n     * note that duplicates are allowed since one preset can use the same instrument multople times\n     * @type {BasicPreset[]}\n     */\n    linkedPresets = [];\n    \n    /**\n     * @returns {number}\n     */\n    get useCount()\n    {\n        return this.linkedPresets.length;\n    }\n    \n    /**\n     * @returns {BasicInstrumentZone}\n     */\n    createZone()\n    {\n        const zone = new BasicInstrumentZone(this);\n        this.instrumentZones.push(zone);\n        return zone;\n    }\n    \n    /**\n     * @param preset {BasicPreset}\n     */\n    linkTo(preset)\n    {\n        this.linkedPresets.push(preset);\n        this.instrumentZones.forEach(z => z.useCount++);\n    }\n    \n    /**\n     * @param preset {BasicPreset}\n     */\n    unlinkFrom(preset)\n    {\n        const index = this.linkedPresets.indexOf(preset);\n        if (index < 0)\n        {\n            SpessaSynthWarn(`Cannot unlink ${preset.presetName} from ${this.instrumentName}: not linked.`);\n            return;\n        }\n        this.linkedPresets.splice(index, 1);\n        this.instrumentZones.forEach(z => z.useCount--);\n    }\n    \n    deleteUnusedZones()\n    {\n        this.instrumentZones = this.instrumentZones.filter(z =>\n        {\n            const stays = z.useCount > 0;\n            if (!stays)\n            {\n                z.deleteZone();\n            }\n            return stays;\n        });\n    }\n    \n    // unlinks everything from this instrument\n    deleteInstrument()\n    {\n        if (this.useCount > 0)\n        {\n            throw new Error(`Cannot delete an instrument that is used by: ${this.linkedPresets.map(p => p.presetName)}.`);\n        }\n        this.instrumentZones.forEach(z => z.deleteZone());\n    }\n    \n    /**\n     * @param index {number}\n     * @param force {boolean} ignore use count\n     * @returns {boolean} if deleted\n     */\n    deleteZone(index, force = false)\n    {\n        const zone = this.instrumentZones[index];\n        zone.useCount -= 1;\n        if (zone.useCount < 1 || force)\n        {\n            zone.deleteZone();\n            this.instrumentZones.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n}", "import { Modulator } from \"../modulator.js\";\nimport { Generator } from \"../generator.js\";\nimport { generatorLimits, generatorTypes } from \"../generator_types.js\";\nimport { BasicInstrument } from \"../basic_instrument.js\";\n\nconst notGlobalizedTypes = new Set([\n    generatorTypes.velRange,\n    generatorTypes.keyRange,\n    generatorTypes.instrument,\n    generatorTypes.exclusiveClass,\n    generatorTypes.endOper,\n    generatorTypes.sampleModes,\n    generatorTypes.startloopAddrsOffset,\n    generatorTypes.startloopAddrsCoarseOffset,\n    generatorTypes.endloopAddrsOffset,\n    generatorTypes.endloopAddrsCoarseOffset,\n    generatorTypes.startAddrsOffset,\n    generatorTypes.startAddrsCoarseOffset,\n    generatorTypes.endAddrOffset,\n    generatorTypes.endAddrsCoarseOffset,\n    generatorTypes.initialAttenuation, // written into wsmp, there's no global wsmp\n    generatorTypes.fineTune,           // written into wsmp, there's no global wsmp\n    generatorTypes.coarseTune,         // written into wsmp, there's no global wsmp\n    generatorTypes.keyNumToVolEnvHold, // KEY TO SOMETHING:\n    generatorTypes.keyNumToVolEnvDecay,// cannot be globalized as they modify their respective generators\n    generatorTypes.keyNumToModEnvHold, // (for example, keyNumToVolEnvDecay modifies VolEnvDecay)\n    generatorTypes.keyNumToModEnvDecay\n]);\n\n/**\n * Combines preset zones\n * @param preset {BasicPreset}\n * @param globalize {boolean}\n * @returns {BasicInstrument}\n */\nexport function combineZones(preset, globalize = true)\n{\n    /**\n     * @param main {Generator[]}\n     * @param adder {Generator[]}\n     */\n    function addUnique(main, adder)\n    {\n        main.push(...adder.filter(g => !main.find(mg => mg.generatorType === g.generatorType)));\n    }\n    \n    /**\n     * @param r1 {SoundFontRange}\n     * @param r2 {SoundFontRange}\n     * @returns {SoundFontRange}\n     */\n    function subtractRanges(r1, r2)\n    {\n        return { min: Math.max(r1.min, r2.min), max: Math.min(r1.max, r2.max) };\n    }\n    \n    /**\n     * @param main {Modulator[]}\n     * @param adder {Modulator[]}\n     */\n    function addUniqueMods(main, adder)\n    {\n        main.push(...adder.filter(m => !main.find(mm => Modulator.isIdentical(m, mm))));\n    }\n    \n    const outputInstrument = new BasicInstrument();\n    \n    /**\n     * @type {Generator[]}\n     */\n    const globalPresetGenerators = [];\n    /**\n     * @type {Modulator[]}\n     */\n    const globalPresetModulators = [];\n    // find the global zone and apply ranges, generators, and modulators\n    const globalPresetZone = preset.globalZone;\n    globalPresetGenerators.push(...globalPresetZone.generators);\n    globalPresetModulators.push(...globalPresetZone.modulators);\n    let globalPresetKeyRange = globalPresetZone.keyRange;\n    let globalPresetVelRange = globalPresetZone.velRange;\n    // for each non-global preset zone\n    for (const presetZone of preset.presetZones)\n    {\n        // use global ranges if not provided\n        let presetZoneKeyRange = presetZone.keyRange;\n        if (!presetZone.hasKeyRange)\n        {\n            presetZoneKeyRange = globalPresetKeyRange;\n        }\n        let presetZoneVelRange = presetZone.velRange;\n        if (!presetZone.hasVelRange)\n        {\n            presetZoneVelRange = globalPresetVelRange;\n        }\n        // add unique generators and modulators from the global zone\n        const presetGenerators = presetZone.generators.map(g => new Generator(g.generatorType, g.generatorValue));\n        addUnique(presetGenerators, globalPresetGenerators);\n        const presetModulators = [...presetZone.modulators];\n        addUniqueMods(presetModulators, globalPresetModulators);\n        const instrument = presetZone.instrument;\n        const iZones = instrument.instrumentZones;\n        /**\n         * @type {Generator[]}\n         */\n        const globalInstGenerators = [];\n        /**\n         * @type {Modulator[]}\n         */\n        const globalInstModulators = [];\n        const globalInstZone = instrument.globalZone;\n        globalInstGenerators.push(...globalInstZone.generators);\n        globalInstModulators.push(...globalInstZone.modulators);\n        let globalInstKeyRange = globalInstZone.keyRange;\n        let globalInstVelRange = globalInstZone.velRange;\n        // for each non-global instrument zone\n        for (const instZone of iZones)\n        {\n            // use global ranges if not provided\n            let instZoneKeyRange = instZone.keyRange;\n            if (!instZone.hasKeyRange)\n            {\n                instZoneKeyRange = globalInstKeyRange;\n            }\n            let instZoneVelRange = instZone.velRange;\n            if (!instZone.hasVelRange)\n            {\n                instZoneVelRange = globalInstVelRange;\n            }\n            instZoneKeyRange = subtractRanges(instZoneKeyRange, presetZoneKeyRange);\n            instZoneVelRange = subtractRanges(instZoneVelRange, presetZoneVelRange);\n            \n            // if either of the zones is out of range (i.e.m min larger than the max),\n            // then we discard that zone\n            if (instZoneKeyRange.max < instZoneKeyRange.min || instZoneVelRange.max < instZoneVelRange.min)\n            {\n                continue;\n            }\n            \n            // add unique generators and modulators from the global zone\n            const instGenerators = instZone.generators.map(g => new Generator(g.generatorType, g.generatorValue));\n            addUnique(instGenerators, globalInstGenerators);\n            const instModulators = [...instZone.modulators];\n            addUniqueMods(instModulators, globalInstModulators);\n            \n            /**\n             * sum preset modulators to instruments (amount) sf spec page 54\n             * @type {Modulator[]}\n             */\n            const finalModList = [...instModulators];\n            for (const mod of presetModulators)\n            {\n                const identicalInstMod = finalModList.findIndex(\n                    m => Modulator.isIdentical(mod, m));\n                if (identicalInstMod !== -1)\n                {\n                    // sum the amounts\n                    // (this makes a new modulator\n                    // because otherwise it would overwrite the one in the soundfont!\n                    finalModList[identicalInstMod] = finalModList[identicalInstMod].sumTransform(\n                        mod);\n                }\n                else\n                {\n                    finalModList.push(mod);\n                }\n            }\n            \n            // clone the generators as the values are modified during DLS conversion (keyNumToSomething)\n            let finalGenList = instGenerators.map(g => new Generator(g.generatorType, g.generatorValue));\n            for (const gen of presetGenerators)\n            {\n                if (gen.generatorType === generatorTypes.velRange ||\n                    gen.generatorType === generatorTypes.keyRange ||\n                    gen.generatorType === generatorTypes.instrument ||\n                    gen.generatorType === generatorTypes.endOper ||\n                    gen.generatorType === generatorTypes.sampleModes)\n                {\n                    continue;\n                }\n                const identicalInstGen = instGenerators.findIndex(g => g.generatorType === gen.generatorType);\n                if (identicalInstGen !== -1)\n                {\n                    // if exists, sum to that generator\n                    const newAmount = finalGenList[identicalInstGen].generatorValue + gen.generatorValue;\n                    finalGenList[identicalInstGen] = new Generator(gen.generatorType, newAmount);\n                }\n                else\n                {\n                    // if not, sum to the default generator\n                    const newAmount = generatorLimits[gen.generatorType].def + gen.generatorValue;\n                    finalGenList.push(new Generator(gen.generatorType, newAmount));\n                }\n            }\n            \n            // remove unwanted\n            finalGenList = finalGenList.filter(g =>\n                g.generatorType !== generatorTypes.sampleID &&\n                g.generatorType !== generatorTypes.keyRange &&\n                g.generatorType !== generatorTypes.velRange &&\n                g.generatorType !== generatorTypes.endOper &&\n                g.generatorType !== generatorTypes.instrument &&\n                g.generatorValue !== generatorLimits[g.generatorType].def\n            );\n            \n            // create the zone and copy over values\n            const zone = outputInstrument.createZone();\n            zone.keyRange = instZoneKeyRange;\n            zone.velRange = instZoneVelRange;\n            if (zone.keyRange.min === 0 && zone.keyRange.max === 127)\n            {\n                zone.keyRange.min = -1;\n            }\n            if (zone.velRange.min === 0 && zone.velRange.max === 127)\n            {\n                zone.velRange.min = -1;\n            }\n            zone.setSample(instZone.sample);\n            zone.addGenerators(...finalGenList);\n            zone.addModulators(...finalModList);\n        }\n    }\n    const globalZone = outputInstrument.globalZone;\n    if (globalize)\n    {\n        // create a global zone and add repeating generators to it\n        // also modulators\n        // iterate over every type of generator\n        for (let checkedType = 0; checkedType < 58; checkedType++)\n        {\n            // not these though\n            if (notGlobalizedTypes.has(checkedType))\n            {\n                continue;\n            }\n            /**\n             * @type {Record<string, number>}\n             */\n            let occurencesForValues = {};\n            const defaultForChecked = generatorLimits[checkedType]?.def || 0;\n            occurencesForValues[defaultForChecked] = 0;\n            for (const z of outputInstrument.instrumentZones)\n            {\n                const gen = z.generators.find(g => g.generatorType === checkedType);\n                if (gen)\n                {\n                    const value = gen.generatorValue;\n                    if (occurencesForValues[value] === undefined)\n                    {\n                        occurencesForValues[value] = 1;\n                    }\n                    else\n                    {\n                        occurencesForValues[value]++;\n                    }\n                }\n                else\n                {\n                    occurencesForValues[defaultForChecked]++;\n                }\n                \n                // if the checked type has the keyNumTo something generator set, it cannot be globalized.\n                let relativeCounterpart;\n                switch (checkedType)\n                {\n                    default:\n                        continue;\n                    \n                    case generatorTypes.decayVolEnv:\n                        relativeCounterpart = generatorTypes.keyNumToVolEnvDecay;\n                        break;\n                    case generatorTypes.holdVolEnv:\n                        relativeCounterpart = generatorTypes.keyNumToVolEnvHold;\n                        break;\n                    case generatorTypes.decayModEnv:\n                        relativeCounterpart = generatorTypes.keyNumToModEnvDecay;\n                        break;\n                    case generatorTypes.holdModEnv:\n                        relativeCounterpart = generatorTypes.keyNumToModEnvHold;\n                }\n                const relative = z.generators.find(g => g.generatorType === relativeCounterpart);\n                if (relative !== undefined)\n                {\n                    occurencesForValues = {};\n                    break;\n                }\n            }\n            // if at least one occurrence, find the most used one and add it to global\n            if (Object.keys(occurencesForValues).length > 0)\n            {\n                // [value, occurrences]\n                const valueToGlobalize = Object.entries(occurencesForValues).reduce((max, curr) =>\n                {\n                    if (max[1] < curr[1])\n                    {\n                        return curr;\n                    }\n                    return max;\n                }, [0, 0]);\n                const targetValue = parseInt(valueToGlobalize[0]);\n                \n                // if the global value is the default value just remove it, no need to add it\n                if (targetValue !== defaultForChecked)\n                {\n                    globalZone.addGenerators(new Generator(checkedType, targetValue));\n                }\n                // remove from the zones\n                outputInstrument.instrumentZones.forEach(z =>\n                {\n                    const gen = z.generators.findIndex(g =>\n                        g.generatorType === checkedType);\n                    if (gen !== -1)\n                    {\n                        if (z.generators[gen].generatorValue === targetValue)\n                        {\n                            // That exact value exists. Since it's global now, remove it\n                            z.generators.splice(gen, 1);\n                        }\n                    }\n                    else\n                    {\n                        // That type does not exist at all here.\n                        // Since we're globalizing, we need to add the default here.\n                        if (targetValue !== defaultForChecked)\n                        {\n                            z.addGenerators(new Generator(checkedType, defaultForChecked));\n                        }\n                    }\n                });\n            }\n        }\n        \n        // globalize only modulators that exist in all zones\n        const firstZone = outputInstrument.instrumentZones[0];\n        const modulators = firstZone.modulators.map(m => Modulator.copy(m));\n        for (const checkedModulator of modulators)\n        {\n            let existsForAllZones = true;\n            for (const zone of outputInstrument.instrumentZones)\n            {\n                if (!existsForAllZones)\n                {\n                    continue;\n                }\n                // check if that zone has an existing modulator\n                const mod = zone.modulators.find(m => Modulator.isIdentical(m, checkedModulator));\n                if (!mod)\n                {\n                    // does not exist for this zone, so it's not global.\n                    existsForAllZones = false;\n                }\n                // exists.\n                \n            }\n            if (existsForAllZones === true)\n            {\n                globalZone.addModulators(Modulator.copy(checkedModulator));\n                // delete it from local zones.\n                for (const zone of outputInstrument.instrumentZones)\n                {\n                    const modulator = zone.modulators.find(m => Modulator.isIdentical(m, checkedModulator));\n                    // Check if the amount is correct.\n                    // If so, delete it since it's global.\n                    // If not, then it will simply override global as it's identical.\n                    if (modulator.transformAmount === checkedModulator.transformAmount)\n                    {\n                        zone.modulators.splice(zone.modulators.indexOf(modulator), 1);\n                    }\n                }\n            }\n        }\n    }\n    return outputInstrument;\n}", "import { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeRIFFChunkRaw } from \"../riff_chunk.js\";\n\nconst WSMP_SIZE = 20;\n\n/**\n * @param sample {BasicSample}\n * @param rootKey {number}\n * @param tuning {number}\n * @param attenuationCentibels {number} CENTIBELS, NO CORRECTION\n * @param loopStart {number}\n * @param loopEnd {number}\n * @param loopingMode {number}\n * @returns {IndexedByteArray}\n */\nexport function writeWavesample(\n    sample,\n    rootKey,\n    tuning,\n    attenuationCentibels,\n    loopStart,\n    loopEnd,\n    loopingMode)\n{\n    let loopCount = loopingMode === 0 ? 0 : 1;\n    const wsmpData = new IndexedByteArray(WSMP_SIZE + loopCount * 16);\n    writeDword(wsmpData, WSMP_SIZE); // cbSize\n    // usUnityNote (apply root pitch here)\n    writeWord(wsmpData, rootKey);\n    // sFineTune\n    writeWord(wsmpData, tuning);\n    \n    // gain correction, use InitialAttenuation, apply attenuation correction\n    const attenuationCb = attenuationCentibels * 0.4;\n    \n    // gain correction: Each unit of gain represents 1/655360 dB\n    const lGain = Math.floor(attenuationCb * -65536);\n    writeDword(wsmpData, lGain);\n    // fulOptions: has to be 2, according to all DLS files I have\n    writeDword(wsmpData, 2);\n    \n    const loopSize = loopEnd - loopStart;\n    let ulLoopType = 0;\n    switch (loopingMode)\n    {\n        default:\n        case 0:\n            // no loop\n            loopCount = 0;\n            break;\n        \n        case 1:\n            // loop\n            ulLoopType = 0;\n            loopCount = 1;\n            break;\n        \n        case 3:\n            // loop and release\n            ulLoopType = 1;\n            loopCount = 1;\n    }\n    \n    // cSampleLoops\n    writeDword(wsmpData, loopCount);\n    if (loopCount === 1)\n    {\n        writeDword(wsmpData, 16); // cbSize\n        writeDword(wsmpData, ulLoopType);\n        writeDword(wsmpData, loopStart);\n        writeDword(wsmpData, loopSize);\n    }\n    return writeRIFFChunkRaw(\n        \"wsmp\",\n        wsmpData\n    );\n}", "import { DecodedModulator } from \"../basic_soundfont/modulator.js\";\n\nimport { generatorTypes } from \"../basic_soundfont/generator_types.js\";\n\n/**\n * @enum {number}\n */\nexport const DLSSources = {\n    none: 0x0,\n    modLfo: 0x1,\n    velocity: 0x2,\n    keyNum: 0x3,\n    volEnv: 0x4,\n    modEnv: 0x5,\n    pitchWheel: 0x6,\n    polyPressure: 0x7,\n    channelPressure: 0x8,\n    vibratoLfo: 0x9,\n    \n    modulationWheel: 0x81,\n    volume: 0x87,\n    pan: 0x8a,\n    expression: 0x8b,\n    // note: these are flipped unintentionally in DLS2 table 9. Argh!\n    chorus: 0xdd,\n    reverb: 0xdb,\n    \n    pitchWheelRange: 0x100,\n    fineTune: 0x101,\n    coarseTune: 0x102\n};\n\nexport const DEFAULT_DLS_REVERB = new DecodedModulator(\n    0x00DB,\n    0x0,\n    generatorTypes.reverbEffectsSend,\n    1000,\n    0\n);\n\nexport const DEFAULT_DLS_CHORUS = new DecodedModulator(\n    0x00DD,\n    0x0,\n    generatorTypes.chorusEffectsSend,\n    1000,\n    0\n);\n\nexport const DLS_1_NO_VIBRATO_MOD = new DecodedModulator(\n    0x0081,\n    0x0,\n    generatorTypes.vibLfoToPitch,\n    0,\n    0\n);\n\nexport const DLS_1_NO_VIBRATO_PRESSURE = new DecodedModulator(\n    0x000D,\n    0x0,\n    generatorTypes.vibLfoToPitch,\n    0,\n    0\n);", "/**\n *\n * @enum {number}\n */\nexport const DLSDestinations = {\n    none: 0x0,                  // no destination\n    gain: 0x1,                  // linear gain\n    reserved: 0x2,              // reserved\n    pitch: 0x3,                 // pitch in cents\n    pan: 0x4,                   // pan 10ths of a percent\n    keyNum: 0x5,                // MIDI key number\n    // nuh uh, the channel controllers are not supported!\n    chorusSend: 0x80,           // chorus send level 10ths of a percent\n    reverbSend: 0x81,           // reverb send level 10ths of a percent\n    \n    modLfoFreq: 0x104,          // modulation LFO frequency\n    modLfoDelay: 0x105,         // modulation LFO delay\n    \n    vibLfoFreq: 0x114,          // vibrato LFO frequency\n    vibLfoDelay: 0x115,         // vibrato LFO delay\n    \n    volEnvAttack: 0x206,        // volume envelope attack\n    volEnvDecay: 0x207,         // volume envelope decay\n    volEnvRelease: 0x209,       // volume envelope release\n    volEnvSustain: 0x20a,       // volume envelope sustain\n    volEnvDelay: 0x20b,         // volume envelope delay\n    volEnvHold: 0x20c,          // volume envelope hold\n    \n    modEnvAttack: 0x30a,        // modulation envelope attack\n    modEnvDecay: 0x30b,         // modulation envelope decay\n    modEnvRelease: 0x30d,       // modulation envelope release\n    modEnvSustain: 0x30e,       // modulation envelope sustain\n    modEnvDelay: 0x30f,         // modulation envelope delay\n    modEnvHold: 0x310,          // modulation envelope hold\n    \n    filterCutoff: 0x500,        // low pass filter cutoff frequency\n    filterQ: 0x501              // low pass filter resonance\n};", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\n\nexport class Articulator\n{\n    /**\n     * @type {DLSSources}\n     */\n    source;\n    /**\n     * @type {DLSSources}\n     */\n    control;\n    /**\n     * @type {DLSDestinations}\n     */\n    destination;\n    /**\n     * @type {number}\n     */\n    scale;\n    /**\n     * @type {number}\n     */\n    transform;\n    \n    constructor(source, control, destination, scale, transform)\n    {\n        this.source = source;\n        this.control = control;\n        this.destination = destination;\n        this.scale = scale;\n        this.transform = transform;\n    }\n    \n    /**\n     * @returns {IndexedByteArray}\n     */\n    writeArticulator()\n    {\n        const out = new IndexedByteArray(12);\n        writeWord(out, this.source);\n        writeWord(out, this.control);\n        writeWord(out, this.destination);\n        writeWord(out, this.transform);\n        writeDword(out, this.scale << 16);\n        return out;\n    }\n}", "import { midiControllers } from \"../../../midi/midi_message.js\";\nimport { DLSSources } from \"../../dls/dls_sources.js\";\nimport { modulatorCurveTypes, modulatorSources } from \"../modulator.js\";\nimport { DLSDestinations } from \"../../dls/dls_destinations.js\";\nimport { Articulator } from \"./articulator.js\";\nimport { SpessaSynthWarn } from \"../../../utils/loggin.js\";\nimport { generatorTypes } from \"../generator_types.js\";\n\n\n/**\n * @param cc {0|1}\n * @param index {number}\n * @returns {number|undefined}\n */\nfunction getDLSSourceFromSf2Source(cc, index)\n{\n    if (cc)\n    {\n        switch (index)\n        {\n            default:\n                // DLS supports limited controllers\n                return undefined;\n            \n            case midiControllers.modulationWheel:\n                return DLSSources.modulationWheel;\n            case midiControllers.mainVolume:\n                return DLSSources.volume;\n            case midiControllers.pan:\n                return DLSSources.pan;\n            case midiControllers.expressionController:\n                return DLSSources.expression;\n            case midiControllers.chorusDepth:\n                return DLSSources.chorus;\n            case midiControllers.reverbDepth:\n                return DLSSources.reverb;\n        }\n    }\n    else\n    {\n        switch (index)\n        {\n            default:\n                // cannot be a DLS articulator\n                return undefined;\n            \n            case modulatorSources.noteOnKeyNum:\n                return DLSSources.keyNum;\n            case modulatorSources.noteOnVelocity:\n                return DLSSources.velocity;\n            case modulatorSources.noController:\n                return DLSSources.none;\n            case modulatorSources.polyPressure:\n                return DLSSources.polyPressure;\n            case modulatorSources.channelPressure:\n                return DLSSources.channelPressure;\n            case modulatorSources.pitchWheel:\n                return DLSSources.pitchWheel;\n            case modulatorSources.pitchWheelRange:\n                return DLSSources.pitchWheelRange;\n        }\n    }\n}\n\n/**\n * @param dest {number}\n * @param amount {number}\n * @returns {number|undefined|{dest: number, amount: number}}\n */\nfunction getDLSDestinationFromSf2(dest, amount)\n{\n    switch (dest)\n    {\n        default:\n            return undefined;\n        \n        case generatorTypes.initialAttenuation:\n            // the amount does not get EMU corrected here, as this only applies to modulator attenuation\n            // the generator (affected) attenuation is handled in wsmp.\n            return { dest: DLSDestinations.gain, amount: -amount };\n        case generatorTypes.fineTune:\n            return DLSDestinations.pitch;\n        case generatorTypes.pan:\n            return DLSDestinations.pan;\n        case generatorTypes.keyNum:\n            return DLSDestinations.keyNum;\n        \n        case generatorTypes.reverbEffectsSend:\n            return DLSDestinations.reverbSend;\n        case generatorTypes.chorusEffectsSend:\n            return DLSDestinations.chorusSend;\n        \n        case generatorTypes.freqModLFO:\n            return DLSDestinations.modLfoFreq;\n        case generatorTypes.delayModLFO:\n            return DLSDestinations.modLfoDelay;\n        \n        case generatorTypes.delayVibLFO:\n            return DLSDestinations.vibLfoDelay;\n        case generatorTypes.freqVibLFO:\n            return DLSDestinations.vibLfoFreq;\n        \n        case generatorTypes.delayVolEnv:\n            return DLSDestinations.volEnvDelay;\n        case generatorTypes.attackVolEnv:\n            return DLSDestinations.volEnvAttack;\n        case generatorTypes.holdVolEnv:\n            return DLSDestinations.volEnvHold;\n        case generatorTypes.decayVolEnv:\n            return DLSDestinations.volEnvDecay;\n        case generatorTypes.sustainVolEnv:\n            return { dest: DLSDestinations.volEnvSustain, amount: 1000 - amount };\n        case generatorTypes.releaseVolEnv:\n            return DLSDestinations.volEnvRelease;\n        \n        case generatorTypes.delayModEnv:\n            return DLSDestinations.modEnvDelay;\n        case generatorTypes.attackModEnv:\n            return DLSDestinations.modEnvAttack;\n        case generatorTypes.holdModEnv:\n            return DLSDestinations.modEnvHold;\n        case generatorTypes.decayModEnv:\n            return DLSDestinations.modEnvDecay;\n        case generatorTypes.sustainModEnv:\n            return { dest: DLSDestinations.modEnvSustain, amount: 1000 - amount };\n        case generatorTypes.releaseModEnv:\n            return DLSDestinations.modEnvRelease;\n        \n        case generatorTypes.initialFilterFc:\n            return DLSDestinations.filterCutoff;\n        case generatorTypes.initialFilterQ:\n            return DLSDestinations.filterQ;\n    }\n}\n\n/**\n * @param dest {number}\n * @param amt {number}\n * @returns {{source: DLSSources, dest: DLSDestinations, amt: number, isBipolar: boolean}|undefined}\n */\nfunction checkSF2SpecialCombos(dest, amt)\n{\n    \n    switch (dest)\n    {\n        default:\n            return undefined;\n        // mod env\n        case generatorTypes.modEnvToFilterFc:\n            return { source: DLSSources.modEnv, dest: DLSDestinations.filterCutoff, amt: amt, isBipolar: false };\n        case generatorTypes.modEnvToPitch:\n            return { source: DLSSources.modEnv, dest: DLSDestinations.pitch, amt: amt, isBipolar: false };\n        \n        // mod lfo\n        case generatorTypes.modLfoToFilterFc:\n            return { source: DLSSources.modLfo, dest: DLSDestinations.filterCutoff, amt: amt, isBipolar: true };\n        case generatorTypes.modLfoToVolume:\n            return { source: DLSSources.modLfo, dest: DLSDestinations.gain, amt: amt, isBipolar: true };\n        case generatorTypes.modLfoToPitch:\n            return { source: DLSSources.modLfo, dest: DLSDestinations.pitch, amt: amt, isBipolar: true };\n        \n        // vib lfo\n        case generatorTypes.vibLfoToPitch:\n            return { source: DLSSources.vibratoLfo, dest: DLSDestinations.pitch, amt: amt, isBipolar: true };\n        \n        // key to something\n        case generatorTypes.keyNumToVolEnvHold:\n            return {\n                source: DLSSources.keyNum,\n                dest: DLSDestinations.volEnvHold,\n                amt: amt,\n                isBipolar: true\n            };\n        case generatorTypes.keyNumToVolEnvDecay:\n            return {\n                source: DLSSources.keyNum,\n                dest: DLSDestinations.volEnvDecay,\n                amt: amt,\n                isBipolar: true\n            };\n        case generatorTypes.keyNumToModEnvHold:\n            return {\n                source: DLSSources.keyNum,\n                dest: DLSDestinations.modEnvHold,\n                amt: amt,\n                isBipolar: true\n            };\n        case generatorTypes.keyNumToModEnvDecay:\n            return {\n                source: DLSSources.keyNum,\n                dest: DLSDestinations.modEnvDecay,\n                amt: amt,\n                isBipolar: true\n            };\n        \n        // Scale tuning is implemented in DLS via an articulator:\n        // keyNum to relative pitch at 12,800 cents.\n        // Change that to scale tuning * 128.\n        // Therefore, a regular scale is still 12,800, half is 6400, etc.\n        case generatorTypes.scaleTuning:\n            return {\n                source: DLSSources.keyNum,\n                dest: DLSDestinations.pitch,\n                amt: amt * 128,\n                isBipolar: false // according to table 4, this should be false.\n            };\n    }\n}\n\n/**\n * @param gen {Generator}\n * @returns {Articulator|undefined}\n */\nexport function getDLSArticulatorFromSf2Generator(gen)\n{\n    const dest = getDLSDestinationFromSf2(gen.generatorType, gen.generatorValue);\n    let destination = dest;\n    let source = 0;\n    let amount = gen.generatorValue;\n    if (dest?.amount !== undefined)\n    {\n        amount = dest.amount;\n        destination = dest.dest;\n    }\n    // check for special combo\n    const combo = checkSF2SpecialCombos(gen.generatorType, gen.generatorValue);\n    if (combo !== undefined)\n    {\n        amount = combo.amt;\n        destination = combo.dest;\n        source = combo.source;\n    }\n    else if (destination === undefined)\n    {\n        SpessaSynthWarn(`Invalid generator type: ${gen.generatorType}`);\n        return undefined;\n    }\n    return new Articulator(\n        source,\n        0,\n        destination,\n        amount,\n        0\n    );\n}\n\n\n/**\n * @param mod {Modulator}\n * @returns {Articulator|undefined}\n */\nexport function getDLSArticulatorFromSf2Modulator(mod)\n{\n    if (mod.transformType !== 0)\n    {\n        SpessaSynthWarn(\"Other transform types are not supported.\");\n        return undefined;\n    }\n    let source = getDLSSourceFromSf2Source(mod.sourceUsesCC, mod.sourceIndex);\n    let sourceTransformType = mod.sourceCurveType;\n    let sourceBipolar = mod.sourcePolarity;\n    let sourceDirection = mod.sourceDirection;\n    if (source === undefined)\n    {\n        SpessaSynthWarn(`Invalid source: ${mod.sourceIndex}, CC: ${mod.sourceUsesCC}`);\n        return undefined;\n    }\n    // Attenuation is the opposite of gain. Invert.\n    if (mod.modulatorDestination === generatorTypes.initialAttenuation)\n    {\n        sourceDirection = sourceDirection === 1 ? 0 : 1;\n    }\n    let control = getDLSSourceFromSf2Source(mod.secSrcUsesCC, mod.secSrcIndex);\n    let controlTransformType = mod.secSrcCurveType;\n    let controlBipolar = mod.secSrcPolarity;\n    let controlDirection = mod.secSrcDirection;\n    if (control === undefined)\n    {\n        SpessaSynthWarn(`Invalid secondary source: ${mod.secSrcIndex}, CC: ${mod.secSrcUsesCC}`);\n        return undefined;\n    }\n    let dlsDestinationFromSf2 = getDLSDestinationFromSf2(mod.modulatorDestination, mod.transformAmount);\n    let destination = dlsDestinationFromSf2;\n    let amt = mod.transformAmount;\n    if (dlsDestinationFromSf2?.dest !== undefined)\n    {\n        destination = dlsDestinationFromSf2.dest;\n        amt = dlsDestinationFromSf2.amount;\n    }\n    const specialCombo = checkSF2SpecialCombos(mod.modulatorDestination, mod.transformAmount);\n    if (specialCombo !== undefined)\n    {\n        amt = specialCombo.amt;\n        // move the source to control\n        control = source;\n        controlTransformType = sourceTransformType;\n        controlBipolar = sourceBipolar;\n        controlDirection = sourceDirection;\n        \n        // set source as static as it's either: env, lfo or key num\n        sourceTransformType = modulatorCurveTypes.linear;\n        sourceBipolar = specialCombo.isBipolar ? 1 : 0;\n        sourceDirection = 0;\n        source = specialCombo.source;\n        destination = specialCombo.dest;\n    }\n    else if (destination === undefined)\n    {\n        SpessaSynthWarn(`Invalid destination: ${mod.modulatorDestination}`);\n        return undefined;\n    }\n    \n    // source curve type maps to a desfont curve type in section 2.10, table 9\n    let transform = 0;\n    transform |= controlTransformType << 4;\n    transform |= controlBipolar << 8;\n    transform |= controlDirection << 9;\n    \n    // use the source curve in output transform\n    transform |= sourceTransformType;\n    transform |= sourceBipolar << 14;\n    transform |= sourceDirection << 15;\n    return new Articulator(\n        source,\n        control,\n        destination,\n        amt,\n        transform\n    );\n}", "import { getDLSArticulatorFromSf2Generator, getDLSArticulatorFromSf2Modulator } from \"./modulator_converter.js\";\nimport { writeRIFFChunkParts } from \"../riff_chunk.js\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { Generator } from \"../generator.js\";\nimport { writeDword } from \"../../../utils/byte_functions/little_endian.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../../utils/loggin.js\";\nimport { Modulator } from \"../modulator.js\";\nimport {\n    DEFAULT_DLS_CHORUS,\n    DEFAULT_DLS_REVERB,\n    DLS_1_NO_VIBRATO_MOD,\n    DLS_1_NO_VIBRATO_PRESSURE\n} from \"../../dls/dls_sources.js\";\nimport { generatorTypes } from \"../generator_types.js\";\n\nconst invalidGeneratorTypes = new Set([\n    generatorTypes.sampleModes,\n    generatorTypes.initialAttenuation,\n    generatorTypes.keyRange,\n    generatorTypes.velRange,\n    generatorTypes.sampleID,\n    generatorTypes.fineTune,\n    generatorTypes.coarseTune,\n    generatorTypes.startAddrsOffset,\n    generatorTypes.startAddrsCoarseOffset,\n    generatorTypes.endAddrOffset,\n    generatorTypes.endAddrsCoarseOffset,\n    generatorTypes.startloopAddrsOffset,\n    generatorTypes.startloopAddrsCoarseOffset,\n    generatorTypes.endloopAddrsOffset,\n    generatorTypes.endloopAddrsCoarseOffset,\n    generatorTypes.overridingRootKey,\n    generatorTypes.exclusiveClass\n]);\n\n/**\n * @param zone {BasicZone}\n * @returns {IndexedByteArray}\n */\nexport function writeArticulator(zone)\n{\n    \n    \n    // envelope generators are limited to 40 seconds\n    // in timecents, this is 1200 * log2(10) = 6386\n    \n    for (let i = 0; i < zone.generators.length; i++)\n    {\n        const g = zone.generators[i];\n        if (\n            g.generatorType === generatorTypes.delayVolEnv ||\n            g.generatorType === generatorTypes.attackVolEnv ||\n            g.generatorType === generatorTypes.holdVolEnv ||\n            g.generatorType === generatorTypes.decayVolEnv ||\n            g.generatorType === generatorTypes.releaseVolEnv ||\n            g.generatorType === generatorTypes.delayModEnv ||\n            g.generatorType === generatorTypes.attackModEnv ||\n            g.generatorType === generatorTypes.holdModEnv ||\n            g.generatorType === generatorTypes.decayModEnv\n        )\n        {\n            zone.generators[i] = new Generator(g.generatorType, Math.min(g.generatorValue, 6386), false);\n        }\n    }\n    \n    \n    // read_articulation.js:\n    // according to viena and another strange (with modulators) rendition of gm.dls in sf2,\n    // it shall be divided by -128,\n    // and a strange correction needs to be applied to the real value:\n    // real + (60 / 128) * scale\n    // we invert this here\n    for (let i = 0; i < zone.generators.length; i++)\n    {\n        const relativeGenerator = zone.generators[i];\n        let absoluteCounterpart = undefined;\n        switch (relativeGenerator.generatorType)\n        {\n            default:\n                continue;\n            \n            case generatorTypes.keyNumToVolEnvDecay:\n                absoluteCounterpart = generatorTypes.decayVolEnv;\n                break;\n            case generatorTypes.keyNumToVolEnvHold:\n                absoluteCounterpart = generatorTypes.holdVolEnv;\n                break;\n            case generatorTypes.keyNumToModEnvDecay:\n                absoluteCounterpart = generatorTypes.decayModEnv;\n                break;\n            case generatorTypes.keyNumToModEnvHold:\n                absoluteCounterpart = generatorTypes.holdModEnv;\n        }\n        let absoluteGenerator = zone.generators.find(g => g.generatorType === absoluteCounterpart);\n        if (absoluteGenerator === undefined)\n        {\n            // there's no absolute generator here.\n            continue;\n        }\n        const dlsRelative = relativeGenerator.generatorValue * -128;\n        const subtraction = (60 / 128) * dlsRelative;\n        const newAbsolute = absoluteGenerator.generatorValue - subtraction;\n        \n        const iR = zone.generators.indexOf(relativeGenerator);\n        const iA = zone.generators.indexOf(absoluteGenerator);\n        zone.generators[iA] =\n            new Generator(absoluteCounterpart, newAbsolute, false);\n        zone.generators[iR] =\n            new Generator(relativeGenerator.generatorType, dlsRelative, false);\n    }\n    /**\n     * @type {Articulator[]}\n     */\n    const generators = zone.generators.reduce((arrs, g) =>\n    {\n        if (invalidGeneratorTypes.has(g.generatorType))\n        {\n            return arrs;\n        }\n        const art = getDLSArticulatorFromSf2Generator(g);\n        if (art !== undefined)\n        {\n            arrs.push(art);\n            SpessaSynthInfo(\"%cSucceeded converting to DLS Articulator!\", consoleColors.recognized);\n            \n        }\n        else\n        {\n            SpessaSynthWarn(\"Failed converting to DLS Articulator!\");\n        }\n        return arrs;\n    }, []);\n    /**\n     * @type {Articulator[]}\n     */\n    const modulators = zone.modulators.reduce((arrs, m) =>\n    {\n        // do not write the default DLS modulators\n        if (\n            Modulator.isIdentical(m, DEFAULT_DLS_CHORUS, true) ||\n            Modulator.isIdentical(m, DEFAULT_DLS_REVERB, true) ||\n            Modulator.isIdentical(m, DLS_1_NO_VIBRATO_MOD, true) ||\n            Modulator.isIdentical(m, DLS_1_NO_VIBRATO_PRESSURE, true)\n        )\n        {\n            return arrs;\n        }\n        const art = getDLSArticulatorFromSf2Modulator(m);\n        if (art !== undefined)\n        {\n            arrs.push(art);\n            SpessaSynthInfo(\"%cSucceeded converting to DLS Articulator!\", consoleColors.recognized);\n            \n        }\n        else\n        {\n            SpessaSynthWarn(\"Failed converting to DLS Articulator!\");\n        }\n        return arrs;\n    }, []);\n    generators.push(...modulators);\n    \n    const art2Data = new IndexedByteArray(8);\n    writeDword(art2Data, 8); // cbSize\n    writeDword(art2Data, generators.length); // cbConnectionBlocks\n    \n    \n    const out = generators.map(a => a.writeArticulator());\n    return writeRIFFChunkParts(\n        \"art2\",\n        [art2Data, ...out]\n    );\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkParts, writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { writeWavesample } from \"./wsmp.js\";\nimport { writeArticulator } from \"./art2.js\";\nimport { generatorTypes } from \"../generator_types.js\";\n\n/**\n * @param zone {BasicInstrumentZone}\n * @param globalZone {BasicGlobalZone}\n * @this {BasicSoundBank}\n * @returns {IndexedByteArray}\n */\nexport function writeDLSRegion(zone, globalZone)\n{\n    // region header\n    const rgnhData = new IndexedByteArray(12);\n    // keyRange\n    writeWord(rgnhData, Math.max(zone.keyRange.min, 0));\n    writeWord(rgnhData, zone.keyRange.max);\n    // velRange\n    writeWord(rgnhData, Math.max(zone.velRange.min, 0));\n    writeWord(rgnhData, zone.velRange.max);\n    // fusOptions: 0 it seems\n    writeWord(rgnhData, 0);\n    // keyGroup (exclusive class)\n    const exclusive = zone.getGeneratorValue(generatorTypes.exclusiveClass, 0);\n    writeWord(rgnhData, exclusive);\n    // usLayer\n    writeWord(rgnhData, 0);\n    const rgnh = writeRIFFChunkRaw(\n        \"rgnh\",\n        rgnhData\n    );\n    \n    let rootKey = zone.getGeneratorValue(generatorTypes.overridingRootKey, zone.sample.samplePitch);\n    \n    // a lot of soundfonts like to set scale tuning to 0 in drums and keep the key at 60\n    // since we implement scale tuning via a dls articulator and fluid doesn't support these,\n    // change the root key here\n    const scaleTuning = zone.getGeneratorValue(\n        generatorTypes.scaleTuning,\n        globalZone.getGeneratorValue(generatorTypes.scaleTuning, 100)\n    );\n    if (scaleTuning === 0 && zone.keyRange.max - zone.keyRange.min === 0)\n    {\n        rootKey = zone.keyRange.min;\n    }\n    \n    // wave sample (Wsmp)\n    const wsmp = writeWavesample(\n        zone.sample,\n        rootKey,\n        zone.getGeneratorValue(\n            generatorTypes.fineTune,\n            0\n        ) + zone.getGeneratorValue(generatorTypes.coarseTune, 0) * 100\n        + zone.sample.samplePitchCorrection,\n        zone.getGeneratorValue(generatorTypes.initialAttenuation, 0),\n        // calculate loop with offsets\n        zone.sample.sampleLoopStartIndex\n        + zone.getGeneratorValue(generatorTypes.startloopAddrsOffset, 0)\n        + zone.getGeneratorValue(generatorTypes.startloopAddrsCoarseOffset, 0) * 32768,\n        zone.sample.sampleLoopEndIndex\n        + zone.getGeneratorValue(generatorTypes.endloopAddrsOffset, 0)\n        + zone.getGeneratorValue(generatorTypes.endloopAddrsCoarseOffset, 0) * 32768,\n        zone.getGeneratorValue(generatorTypes.sampleModes, 0)\n    );\n    \n    // wave link (wlnk)\n    const wlnkData = new IndexedByteArray(12);\n    writeWord(wlnkData, 0); // fusOptions\n    writeWord(wlnkData, 0); // usPhaseGroup\n    // let sampleType = 0;\n    // switch (zone.sample.sampleType)\n    // {\n    //     default:\n    //     case 1:\n    //     case 4:\n    //         // mono/left\n    //         sampleType = 0;\n    //         break;\n    //\n    //     case 2:\n    //         // right\n    //         sampleType = 1;\n    // }\n    // 1 means that the first bit is on so mono/left\n    writeDword(wlnkData, 1); // ulChannel\n    writeDword(wlnkData, this.samples.indexOf(zone.sample)); // ulTableIndex\n    const wlnk = writeRIFFChunkRaw(\n        \"wlnk\",\n        wlnkData\n    );\n    \n    // art\n    let lar2 = new IndexedByteArray(0);\n    if (zone.modulators.length + zone.generators.length > 0)\n    {\n        const art2 = writeArticulator(zone);\n        \n        lar2 = writeRIFFChunkRaw(\n            \"lar2\",\n            art2,\n            false,\n            true\n        );\n    }\n    \n    return writeRIFFChunkParts(\n        \"rgn2\",\n        [\n            rgnh,\n            wsmp,\n            wlnk,\n            lar2\n        ],\n        true\n    );\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { combineZones } from \"./combine_zones.js\";\nimport { writeRIFFChunkParts, writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { writeDword } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeDLSRegion } from \"./rgn2.js\";\nimport { writeArticulator } from \"./art2.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd } from \"../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\nimport { getStringBytes } from \"../../../utils/byte_functions/string.js\";\n\n/**\n * @this {BasicSoundBank}\n * @param preset {BasicPreset}\n * @returns {IndexedByteArray}\n */\nexport function writeIns(preset)\n{\n    SpessaSynthGroupCollapsed(\n        `%cWriting %c${preset.presetName}%c...`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info\n    );\n    // combine preset and instrument zones into a single instrument zone (region) list\n    const inst = combineZones(preset);\n    const global = inst.globalZone;\n    const zones = inst.instrumentZones;\n    \n    \n    // insh: instrument header\n    const inshData = new IndexedByteArray(12);\n    writeDword(inshData, zones.length); // cRegions\n    // bank MSB is in bits 8-14\n    let ulBank = (preset.bank & 127) << 8;\n    // bit 32 means drums\n    if (preset.bank === 128)\n    {\n        ulBank |= (1 << 31);\n    }\n    writeDword(inshData, ulBank);                     // ulBank\n    writeDword(inshData, preset.program & 127); // ulInstrument\n    \n    const insh = writeRIFFChunkRaw(\n        \"insh\",\n        inshData\n    );\n    \n    // write global zone\n    const art2 = writeArticulator(global);\n    let lar2 = writeRIFFChunkRaw(\n        \"lar2\",\n        art2,\n        false,\n        true\n    );\n    \n    // write the region list\n    const lrgn = writeRIFFChunkParts(\n        \"lrgn\",\n        zones.reduce((arrs, z) =>\n        {\n            arrs.push(writeDLSRegion.apply(this, [z, global]));\n            return arrs;\n        }, []),\n        true\n    );\n    \n    // writeINFO\n    const inam = writeRIFFChunkRaw(\n        \"INAM\",\n        getStringBytes(preset.presetName, true)\n    );\n    const info = writeRIFFChunkRaw(\n        \"INFO\",\n        inam,\n        false,\n        true\n    );\n    \n    SpessaSynthGroupEnd();\n    return writeRIFFChunkParts(\n        \"ins \", [insh, lrgn, lar2, info],\n        true\n    );\n}", "import { writeRIFFChunkParts } from \"../riff_chunk.js\";\nimport { writeIns } from \"./ins.js\";\n\n/**\n * @this {BasicSoundBank}\n * @returns {IndexedByteArray}\n */\nexport function writeLins()\n{\n    return writeRIFFChunkParts(\n        \"lins\",\n        this.presets.map(p => writeIns.apply(this, [p])),\n        true\n    );\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { writeRIFFChunkParts, writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { writeWavesample } from \"./wsmp.js\";\nimport { SpessaSynthInfo } from \"../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\nimport { getStringBytes } from \"../../../utils/byte_functions/string.js\";\n\n/**\n * @param sample {BasicSample}\n * @returns {IndexedByteArray}\n */\nexport function writeDLSSample(sample)\n{\n    const fmtData = new IndexedByteArray(18);\n    writeWord(fmtData, 1); // wFormatTag\n    writeWord(fmtData, 1); // wChannels\n    writeDword(fmtData, sample.sampleRate);\n    writeDword(fmtData, sample.sampleRate * 2); // 16-bit samples\n    writeWord(fmtData, 2); // wBlockAlign\n    writeWord(fmtData, 16); // wBitsPerSample\n    const fmt = writeRIFFChunkRaw(\n        \"fmt \",\n        fmtData\n    );\n    let loop = 1;\n    if (sample.sampleLoopStartIndex + Math.abs(sample.getAudioData().length - sample.sampleLoopEndIndex) < 2)\n    {\n        loop = 0;\n    }\n    const wsmp = writeWavesample(\n        sample,\n        sample.samplePitch,\n        sample.samplePitchCorrection,\n        0,\n        sample.sampleLoopStartIndex,\n        sample.sampleLoopEndIndex,\n        loop\n    );\n    let data = writeRIFFChunkRaw(\n        \"data\",\n        sample.getRawData(false) // no vorbis allowed\n    );\n    \n    const inam = writeRIFFChunkRaw(\n        \"INAM\",\n        getStringBytes(sample.sampleName, true)\n    );\n    const info = writeRIFFChunkRaw(\n        \"INFO\",\n        inam,\n        false,\n        true\n    );\n    SpessaSynthInfo(\n        `%cSaved %c${sample.sampleName}%c succesfully!`,\n        consoleColors.recognized,\n        consoleColors.value,\n        consoleColors.recognized\n    );\n    return writeRIFFChunkParts(\n        \"wave\",\n        [\n            fmt,\n            wsmp,\n            data,\n            info\n        ],\n        true\n    );\n}", "import { writeDLSSample } from \"./wave.js\";\nimport { writeRIFFChunkParts } from \"../riff_chunk.js\";\n\n/**\n * @this {BasicSoundBank}\n * @param {ProgressFunction|undefined} progressFunction\n * @returns {Promise<{data: IndexedByteArray, indexes: number[] }>}\n */\nexport async function writeWavePool(progressFunction)\n{\n    let currentIndex = 0;\n    const offsets = [];\n    /**\n     * @type {IndexedByteArray[]}\n     */\n    const samples = [];\n    let written = 0;\n    for (const s of this.samples)\n    {\n        const out = writeDLSSample(s);\n        await progressFunction?.(s.sampleName, written, this.samples.length);\n        offsets.push(currentIndex);\n        currentIndex += out.length;\n        samples.push(out);\n        written++;\n    }\n    return {\n        data: writeRIFFChunkParts(\n            \"wvpl\",\n            samples,\n            true\n        ),\n        indexes: offsets\n    };\n}", "import { writeRIFFChunkParts, writeRIFFChunkRaw } from \"../riff_chunk.js\";\nimport { writeDword } from \"../../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeLins } from \"./lins.js\";\nimport { getStringBytes } from \"../../../utils/byte_functions/string.js\";\nimport { writeWavePool } from \"./wvpl.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\nimport { fillWithDefaults } from \"../../../utils/fill_with_defaults.js\";\n\n/**\n * @typedef {Object} DLSWriteOptions\n * @property {ProgressFunction} progressFunction - a function to show progress for writing large banks. It can be undefined.\n */\n\n\n/**\n * @type {DLSWriteOptions}\n */\nconst DEFAULT_DLS_OPTIONS = {\n    progressFunction: undefined\n};\n\n/**\n * Write the soundfont as a .dls file. Experimental\n * @this {BasicSoundBank}\n * @param {Partial<DLSWriteOptions>} options - options for writing the file.\n * @returns {Uint8Array}\n */\nexport async function writeDLS(options = DEFAULT_DLS_OPTIONS)\n{\n    options = fillWithDefaults(options, DEFAULT_DLS_OPTIONS);\n    SpessaSynthGroupCollapsed(\n        \"%cSaving DLS...\",\n        consoleColors.info\n    );\n    // write colh\n    const colhNum = new IndexedByteArray(4);\n    writeDword(colhNum, this.presets.length);\n    const colh = writeRIFFChunkRaw(\n        \"colh\",\n        colhNum\n    );\n    SpessaSynthGroupCollapsed(\n        \"%cWriting instruments...\",\n        consoleColors.info\n    );\n    const lins = writeLins.apply(this);\n    SpessaSynthInfo(\n        \"%cSuccess!\",\n        consoleColors.recognized\n    );\n    SpessaSynthGroupEnd();\n    \n    SpessaSynthGroupCollapsed(\n        \"%cWriting WAVE samples...\",\n        consoleColors.info\n    );\n    const wavepool = await writeWavePool.call(this, options.progressFunction);\n    const wvpl = wavepool.data;\n    const ptblOffsets = wavepool.indexes;\n    SpessaSynthInfo(\"%cSucceeded!\", consoleColors.recognized);\n    SpessaSynthGroupEnd();\n    \n    // write ptbl\n    const ptblData = new IndexedByteArray(8 + 4 * ptblOffsets.length);\n    writeDword(ptblData, 8);\n    writeDword(ptblData, ptblOffsets.length);\n    for (const offset of ptblOffsets)\n    {\n        writeDword(ptblData, offset);\n    }\n    const ptbl = writeRIFFChunkRaw(\n        \"ptbl\",\n        ptblData\n    );\n    \n    this.soundFontInfo[\"ICMT\"] = (this.soundFontInfo[\"ICMT\"] || \"Soundfont\") + \"\\nConverted from SF2 to DLS using SpessaSynth\";\n    this.soundFontInfo[\"ISFT\"] = \"SpessaSynth\";\n    // write INFO\n    const infos = [];\n    for (const [info, data] of Object.entries(this.soundFontInfo))\n    {\n        if (\n            info !== \"ICMT\" &&\n            info !== \"INAM\" &&\n            info !== \"ICRD\" &&\n            info !== \"IENG\" &&\n            info !== \"ICOP\" &&\n            info !== \"ISFT\" &&\n            info !== \"ISBJ\"\n        )\n        {\n            continue;\n        }\n        infos.push(\n            writeRIFFChunkRaw(\n                info,\n                getStringBytes(data, true)\n            )\n        );\n    }\n    const info = writeRIFFChunkParts(\n        \"INFO\",\n        infos,\n        true\n    );\n    SpessaSynthInfo(\n        \"%cSaved succesfully!\",\n        consoleColors.recognized\n    );\n    SpessaSynthGroupEnd();\n    return writeRIFFChunkParts(\n        \"RIFF\",\n        [\n            getStringBytes(\"DLS \"),\n            colh,\n            lins,\n            ptbl,\n            wvpl,\n            info\n        ]\n    );\n}", "import { BasicZone } from \"./basic_zone.js\";\n\nexport class BasicPresetZone extends BasicZone\n{\n    /**\n     * The parent preset.\n     * @type {BasicPreset}\n     */\n    parentPreset;\n    \n    /**\n     * Zone's instrument.\n     * @type {BasicInstrument}\n     */\n    instrument;\n    \n    /**\n     * @param preset {BasicPreset}\n     */\n    constructor(preset)\n    {\n        super();\n        this.parentPreset = preset;\n    }\n    \n    deleteZone()\n    {\n        this.instrument.unlinkFrom(this.parentPreset);\n    }\n    \n    /**\n     * @param instrument {BasicInstrument}\n     */\n    setInstrument(instrument)\n    {\n        this.instrument = instrument;\n        this.instrument.linkTo(this.parentPreset);\n    }\n}", "/**\n * @typedef {{\n *  instrumentGenerators: Generator[],\n *  presetGenerators: Generator[],\n *  modulators: Modulator[],\n *  sample: BasicSample,\n * }} SampleAndGenerators\n */\nimport { Modulator } from \"./modulator.js\";\nimport { isXGDrums } from \"../../utils/xg_hacks.js\";\n\nimport { BasicGlobalZone } from \"./basic_global_zone.js\";\nimport { BasicPresetZone } from \"./basic_preset_zone.js\";\n\nexport class BasicPreset\n{\n    /**\n     * The parent soundbank instance\n     * Currently used for determining default modulators and XG status\n     * @type {BasicSoundBank}\n     */\n    parentSoundBank;\n    \n    /**\n     * The preset's name\n     * @type {string}\n     */\n    presetName = \"\";\n    \n    /**\n     * The preset's MIDI program number\n     * @type {number}\n     */\n    program = 0;\n    \n    /**\n     * The preset's MIDI bank number\n     * @type {number}\n     */\n    bank = 0;\n    \n    /**\n     * The preset's zones\n     * @type {BasicPresetZone[]}\n     */\n    presetZones = [];\n    \n    /**\n     * Preset's global zone\n     * @type {BasicGlobalZone}\n     */\n    globalZone = new BasicGlobalZone();\n    \n    /**\n     * unused metadata\n     * @type {number}\n     */\n    library = 0;\n    /**\n     * unused metadata\n     * @type {number}\n     */\n    genre = 0;\n    /**\n     * unused metadata\n     * @type {number}\n     */\n    morphology = 0;\n    \n    /**\n     * Creates a new preset representation\n     * @param parentSoundBank {BasicSoundBank}\n     */\n    constructor(parentSoundBank)\n    {\n        this.parentSoundBank = parentSoundBank;\n    }\n    \n    /**\n     * @param allowXG {boolean}\n     * @param allowSFX {boolean}\n     * @returns {boolean}\n     */\n    isDrumPreset(allowXG, allowSFX = false)\n    {\n        const xg = allowXG && this.parentSoundBank.isXGBank;\n        // sfx is not cool\n        return this.bank === 128 || (\n            xg &&\n            (isXGDrums(this.bank) && (this.bank !== 126 || allowSFX))\n        );\n    }\n    \n    // unlinks everything from this preset\n    deletePreset()\n    {\n        this.presetZones.forEach(z => z.deleteZone());\n    }\n    \n    /**\n     * @param index {number}\n     */\n    deleteZone(index)\n    {\n        this.presetZones[index].deleteZone();\n        this.presetZones.splice(index, 1);\n    }\n    \n    /**\n     * @returns {BasicPresetZone}\n     */\n    createZone()\n    {\n        const z = new BasicPresetZone(this);\n        this.presetZones.push(z);\n        return z;\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Preloads all samples (async)\n     */\n    preload(keyMin, keyMax)\n    {\n        for (let key = keyMin; key < keyMax + 1; key++)\n        {\n            for (let velocity = 0; velocity < 128; velocity++)\n            {\n                this.getSamplesAndGenerators(key, velocity).forEach(samandgen =>\n                {\n                    samandgen.sample.getAudioData();\n                });\n            }\n        }\n    }\n    \n    /**\n     * Returns samples and generators for given note\n     * @param midiNote {number}\n     * @param velocity {number}\n     * @returns {SampleAndGenerators[]}\n     */\n    getSamplesAndGenerators(midiNote, velocity)\n    {\n        \n        if (this.presetZones.length < 1)\n        {\n            return [];\n        }\n        \n        /**\n         * @param range {SoundFontRange}\n         * @param number {number}\n         * @returns {boolean}\n         */\n        function isInRange(range, number)\n        {\n            return number >= range.min && number <= range.max;\n        }\n        \n        /**\n         * @param main {Generator[]}\n         * @param adder {Generator[]}\n         */\n        function addUnique(main, adder)\n        {\n            main.push(...adder.filter(g => !main.find(mg => mg.generatorType === g.generatorType)));\n        }\n        \n        /**\n         * @param main {Modulator[]}\n         * @param adder {Modulator[]}\n         */\n        function addUniqueMods(main, adder)\n        {\n            main.push(...adder.filter(m => !main.find(mm => Modulator.isIdentical(m, mm))));\n        }\n        \n        /**\n         * @type {SampleAndGenerators[]}\n         */\n        let parsedGeneratorsAndSamples = [];\n        \n        /**\n         * global zone is always first, so it or nothing\n         * @type {Generator[]}\n         */\n        let globalPresetGenerators = [...this.globalZone.generators];\n        \n        /**\n         * @type {Modulator[]}\n         */\n        let globalPresetModulators = [...this.globalZone.modulators];\n        const globalKeyRange = this.globalZone.keyRange;\n        const globalVelRange = this.globalZone.velRange;\n        \n        // find the preset zones in range\n        let presetZonesInRange = this.presetZones.filter(currentZone =>\n            isInRange(\n                currentZone.hasKeyRange ? currentZone.keyRange : globalKeyRange,\n                midiNote\n            )\n            &&\n            isInRange(\n                currentZone.hasVelRange ? currentZone.velRange : globalVelRange,\n                velocity\n            )\n        );\n        \n        presetZonesInRange.forEach(presetZone =>\n        {\n            const instrument = presetZone.instrument;\n            // the global zone is already taken into account earlier\n            if (instrument.instrumentZones.length < 1)\n            {\n                return;\n            }\n            let presetGenerators = presetZone.generators;\n            let presetModulators = presetZone.modulators;\n            /**\n             * global zone is always first, so it or nothing\n             * @type {Generator[]}\n             */\n            let globalInstrumentGenerators = [...instrument.globalZone.generators];\n            let globalInstrumentModulators = [...instrument.globalZone.modulators];\n            const globalKeyRange = instrument.globalZone.keyRange;\n            const globalVelRange = instrument.globalZone.velRange;\n            \n            \n            let instrumentZonesInRange = instrument.instrumentZones\n                .filter(currentZone =>\n                    \n                    isInRange(\n                        currentZone.hasKeyRange ? currentZone.keyRange : globalKeyRange,\n                        midiNote\n                    )\n                    &&\n                    isInRange(\n                        currentZone.hasVelRange ? currentZone.velRange : globalVelRange,\n                        velocity\n                    )\n                );\n            \n            instrumentZonesInRange.forEach(instrumentZone =>\n            {\n                let instrumentGenerators = [...instrumentZone.generators];\n                let instrumentModulators = [...instrumentZone.modulators];\n                \n                addUnique(\n                    presetGenerators,\n                    globalPresetGenerators\n                );\n                // add the unique global preset generators (local replace global(\n                \n                \n                // add the unique global instrument generators (local replace global)\n                addUnique(\n                    instrumentGenerators,\n                    globalInstrumentGenerators\n                );\n                \n                addUniqueMods(\n                    presetModulators,\n                    globalPresetModulators\n                );\n                addUniqueMods(\n                    instrumentModulators,\n                    globalInstrumentModulators\n                );\n                \n                // default mods\n                addUniqueMods(\n                    instrumentModulators,\n                    this.parentSoundBank.defaultModulators\n                );\n                \n                /**\n                 * sum preset modulators to instruments (amount) sf spec page 54\n                 * @type {Modulator[]}\n                 */\n                const finalModulatorList = [...instrumentModulators];\n                for (let i = 0; i < presetModulators.length; i++)\n                {\n                    let mod = presetModulators[i];\n                    const identicalInstrumentModulator = finalModulatorList.findIndex(\n                        m => Modulator.isIdentical(mod, m));\n                    if (identicalInstrumentModulator !== -1)\n                    {\n                        // sum the amounts\n                        // this makes a new modulator\n                        // because otherwise it would overwrite the one in the soundfont!\n                        finalModulatorList[identicalInstrumentModulator] = finalModulatorList[identicalInstrumentModulator].sumTransform(\n                            mod);\n                    }\n                    else\n                    {\n                        finalModulatorList.push(mod);\n                    }\n                }\n                \n                \n                // combine both generators and add to the final result\n                parsedGeneratorsAndSamples.push({\n                    instrumentGenerators: instrumentGenerators,\n                    presetGenerators: presetGenerators,\n                    modulators: finalModulatorList,\n                    sample: instrumentZone.sample\n                });\n            });\n        });\n        return parsedGeneratorsAndSamples;\n    }\n}", "import {\n    SpessaSynthGroup,\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo,\n    SpessaSynthWarn\n} from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { write } from \"./write_sf2/write.js\";\nimport { defaultModulators, Modulator } from \"./modulator.js\";\nimport { writeDLS } from \"./write_dls/write_dls.js\";\nimport { BasicSample, sampleTypes } from \"./basic_sample.js\";\nimport { Generator } from \"./generator.js\";\nimport { BasicInstrument } from \"./basic_instrument.js\";\nimport { BasicPreset } from \"./basic_preset.js\";\nimport { isXGDrums } from \"../../utils/xg_hacks.js\";\nimport { generatorTypes } from \"./generator_types.js\";\nimport { BasicGlobalZone } from \"./basic_global_zone.js\";\nimport { stbvorbis } from \"../../externals/stbvorbis_sync/stbvorbis_sync.min.js\";\n\n/**\n * Represents a single sound bank, be it DLS or SF2.\n */\nclass BasicSoundBank\n{\n    /**\n     * Indicates if the SF3/SF2Pack decoder is ready.\n     * @type {Promise<boolean>}\n     * @static\n     */\n    static isSF3DecoderReady = stbvorbis.isInitialized;\n    \n    /**\n     * Soundfont's info stored as name: value. ifil and iver are stored as string representation of float (e.g., 2.1)\n     * @type {Record<string, string|IndexedByteArray>}\n     */\n    soundFontInfo = {};\n    \n    /**\n     * The soundfont's presets\n     * @type {BasicPreset[]}\n     * @readonly\n     */\n    presets = [];\n    \n    /**\n     * The soundfont's samples\n     * @type {BasicSample[]}\n     * @readonly\n     */\n    samples = [];\n    \n    /**\n     * The soundfont's instruments\n     * @type {BasicInstrument[]}\n     * @readonly\n     */\n    instruments = [];\n    \n    /**\n     * Soundfont's default modulatorss\n     * @type {Modulator[]}\n     */\n    defaultModulators = defaultModulators.map(m => Modulator.copy(m));\n    \n    /**\n     * If the bank has custom default modulators (DMOD).\n     * @type {boolean}\n     */\n    customDefaultModulators = false;\n    \n    /**\n     * Checks for XG drumsets and considers if this soundfont is XG.\n     * @type {boolean}\n     */\n    isXGBank = false;\n    \n    /**\n     * Creates a new basic soundfont template (or copies)\n     * @param data {undefined|{presets: BasicPreset[], info: Record<string, string>}}\n     */\n    constructor(data = undefined)\n    {\n        if (data?.presets)\n        {\n            this.soundFontInfo = data.info;\n            this.addPresets(...data.presets);\n            /**\n             * @type {BasicInstrument[]}\n             */\n            const instrumentList = [];\n            for (const preset of data.presets)\n            {\n                for (const zone of preset.presetZones)\n                {\n                    if (!instrumentList.includes(zone.instrument))\n                    {\n                        instrumentList.push(zone.instrument);\n                    }\n                }\n            }\n            this.addInstruments(...instrumentList);\n            \n            /**\n             * @type {BasicSample[]}\n             */\n            const sampleList = [];\n            \n            for (const instrument of instrumentList)\n            {\n                for (const zone of instrument.instrumentZones)\n                {\n                    if (!sampleList.includes(zone.sample))\n                    {\n                        sampleList.push(zone.sample);\n                    }\n                }\n            }\n            this.addSamples(...sampleList);\n        }\n    }\n    \n    /**\n     * Merges soundfonts with the given order. Keep in mind that the info read is copied from the first one\n     * @param soundfonts {...BasicSoundBank} the soundfonts to merge, the first overwrites the last\n     * @returns {BasicSoundBank}\n     */\n    static mergeSoundBanks(...soundfonts)\n    {\n        const mainSf = soundfonts.shift();\n        const presets = mainSf.presets;\n        while (soundfonts.length)\n        {\n            const newPresets = soundfonts.shift().presets;\n            newPresets.forEach(newPreset =>\n            {\n                if (\n                    presets.find(existingPreset => existingPreset.bank === newPreset.bank && existingPreset.program === newPreset.program) === undefined\n                )\n                {\n                    presets.push(newPreset);\n                }\n            });\n        }\n        \n        return new BasicSoundBank({ presets: presets, info: mainSf.soundFontInfo });\n    }\n    \n    /**\n     * Creates a simple soundfont with one saw wave preset.\n     * @returns {Promise<ArrayBufferLike>}\n     */\n    static async getDummySoundfontFile()\n    {\n        const font = new BasicSoundBank();\n        const sample = new BasicSample(\n            \"Saw\",\n            44100,\n            65,\n            20,\n            sampleTypes.monoSample,\n            0,\n            127\n        );\n        const sampleData = new Float32Array(128);\n        for (let i = 0; i < 128; i++)\n        {\n            sampleData[i] = (i / 128) * 2 - 1;\n        }\n        sample.setAudioData(sampleData);\n        font.addSamples(sample);\n        \n        const gZone = new BasicGlobalZone();\n        gZone.addGenerators(\n            new Generator(generatorTypes.initialAttenuation, 375),\n            new Generator(generatorTypes.releaseVolEnv, -1000),\n            new Generator(generatorTypes.sampleModes, 1)\n        );\n        \n        const inst = new BasicInstrument();\n        inst.instrumentName = \"Saw Wave\";\n        inst.globalZone = gZone;\n        \n        const zone1 = inst.createZone();\n        zone1.setSample(sample);\n        \n        const zone2 = inst.createZone();\n        zone2.setSample(sample);\n        zone2.addGenerators(new Generator(generatorTypes.fineTune, -9));\n        \n        font.addInstruments(inst);\n        \n        \n        const preset = new BasicPreset(font);\n        preset.presetName = \"Saw Wave\";\n        const pZone = preset.createZone();\n        pZone.setInstrument(inst);\n        \n        font.addPresets(preset);\n        \n        font.soundFontInfo[\"ifil\"] = \"2.1\";\n        font.soundFontInfo[\"isng\"] = \"E-mu 10K2\";\n        font.soundFontInfo[\"INAM\"] = \"Dummy\";\n        font.flush();\n        const f = await font.write();\n        return f.buffer;\n    }\n    \n    /**\n     * @param presets {BasicPreset}\n     */\n    addPresets(...presets)\n    {\n        this.presets.push(...presets);\n    }\n    \n    /**\n     * @param instruments {BasicInstrument}\n     */\n    addInstruments(...instruments)\n    {\n        this.instruments.push(...instruments);\n    }\n    \n    /**\n     * @param samples {BasicSample}\n     */\n    addSamples(...samples)\n    {\n        this.samples.push(...samples);\n    }\n    \n    /**\n     * Clones samples into this bank\n     * @param sample {BasicSample} samples to copy\n     * @returns {BasicSample} copied sample, if a sample exists with that name, it is returned instead\n     */\n    cloneSample(sample)\n    {\n        const duplicate = this.samples.find(s => s.sampleName === sample.sampleName);\n        if (duplicate)\n        {\n            return duplicate;\n        }\n        const newSample = new BasicSample(\n            sample.sampleName,\n            sample.sampleRate,\n            sample.samplePitch,\n            sample.samplePitchCorrection,\n            sample.sampleType,\n            sample.sampleLoopStartIndex,\n            sample.sampleLoopEndIndex\n        );\n        if (sample.isCompressed)\n        {\n            newSample.setCompressedData(sample.compressedData.slice());\n        }\n        else\n        {\n            newSample.setAudioData(sample.getAudioData());\n        }\n        this.addSamples(newSample);\n        if (sample.linkedSample)\n        {\n            const clonedLinked = this.cloneSample(sample.linkedSample);\n            // sanity check\n            if (!clonedLinked.linkedSample)\n            {\n                newSample.setLinkedSample(clonedLinked, newSample.sampleType);\n            }\n        }\n        return newSample;\n    }\n    \n    \n    /**\n     * Clones an instruments into this bank\n     * @param instrument {BasicInstrument}\n     * @returns {BasicInstrument} the copied instrument, if an instrument exists with that name, it is returned instead\n     */\n    cloneInstrument(instrument)\n    {\n        const duplicate = this.instruments.find(i => i.instrumentName === instrument.instrumentName);\n        if (duplicate)\n        {\n            return duplicate;\n        }\n        const newInstrument = new BasicInstrument();\n        newInstrument.instrumentName = instrument.instrumentName;\n        newInstrument.globalZone.copyFrom(instrument.globalZone);\n        for (const zone of instrument.instrumentZones)\n        {\n            const copiedZone = newInstrument.createZone();\n            copiedZone.copyFrom(zone);\n            copiedZone.setSample(this.cloneSample(zone.sample));\n        }\n        this.addInstruments(newInstrument);\n        return newInstrument;\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Clones presets into this sound bank\n     * @param preset {BasicPreset}\n     * @returns {BasicPreset} the copied preset, if a preset exists with that name, it is returned instead\n     */\n    clonePreset(preset)\n    {\n        const duplicate = this.presets.find(p => p.presetName === preset.presetName);\n        if (duplicate)\n        {\n            return duplicate;\n        }\n        const newPreset = new BasicPreset(this);\n        newPreset.presetName = preset.presetName;\n        newPreset.bank = preset.bank;\n        newPreset.program = preset.program;\n        newPreset.library = preset.library;\n        newPreset.genre = preset.genre;\n        newPreset.morphology = preset.morphology;\n        newPreset.globalZone.copyFrom(preset.globalZone);\n        for (const zone of preset.presetZones)\n        {\n            const copiedZone = newPreset.createZone();\n            copiedZone.copyFrom(zone);\n            copiedZone.setInstrument(this.cloneInstrument(zone.instrument));\n        }\n        \n        this.addPresets(newPreset);\n        return newPreset;\n    }\n    \n    flush()\n    {\n        this.presets.sort((a, b) =>\n        {\n            if (a.bank !== b.bank)\n            {\n                return a.bank - b.bank;\n            }\n            return a.program - b.program;\n        });\n        this._parseInternal();\n    }\n    \n    /**\n     * parses the bank after loading is done\n     * @protected\n     */\n    _parseInternal()\n    {\n        this.isXGBank = false;\n        // definitions for XG:\n        // at least one preset with bank 127, 126 or 120\n        // MUST be a valid XG bank.\n        // allowed banks: (see XG specification)\n        // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 24,\n        // 25, 27, 28, 29, 30, 31, 32, 33, 40, 41, 48, 56, 57, 58,\n        // 64, 65, 66, 126, 127\n        const allowedPrograms = new Set([\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 24,\n            25, 27, 28, 29, 30, 31, 32, 33, 40, 41, 48, 56, 57, 58,\n            64, 65, 66, 126, 127\n        ]);\n        for (const preset of this.presets)\n        {\n            if (isXGDrums(preset.bank))\n            {\n                this.isXGBank = true;\n                if (!allowedPrograms.has(preset.program))\n                {\n                    // not valid!\n                    this.isXGBank = false;\n                    SpessaSynthInfo(\n                        `%cThis bank is not valid XG. Preset %c${preset.bank}:${preset.program}%c is not a valid XG drum. XG mode will use presets on bank 128.`,\n                        consoleColors.info,\n                        consoleColors.value,\n                        consoleColors.info\n                    );\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Trims a sound bank to only contain samples in a given MIDI file\n     * @param mid {BasicMIDI} - the MIDI file\n     */\n    trimSoundBank(mid)\n    {\n        const soundfont = this;\n        \n        /**\n         * @param instrument {BasicInstrument}\n         * @param combos {{key: number, velocity: number}[]}\n         * @returns {number}\n         */\n        function trimInstrumentZones(instrument, combos)\n        {\n            let trimmedIZones = 0;\n            for (let iZoneIndex = 0; iZoneIndex < instrument.instrumentZones.length; iZoneIndex++)\n            {\n                const iZone = instrument.instrumentZones[iZoneIndex];\n                const iKeyRange = iZone.keyRange;\n                const iVelRange = iZone.velRange;\n                let isIZoneUsed = false;\n                for (const iCombo of combos)\n                {\n                    if (\n                        (iCombo.key >= iKeyRange.min && iCombo.key <= iKeyRange.max) &&\n                        (iCombo.velocity >= iVelRange.min && iCombo.velocity <= iVelRange.max)\n                    )\n                    {\n                        isIZoneUsed = true;\n                        break;\n                    }\n                }\n                if (!isIZoneUsed)\n                {\n                    SpessaSynthInfo(\n                        `%c${iZone.sample.sampleName} %cremoved from %c${instrument.instrumentName}%c.`,\n                        consoleColors.recognized,\n                        consoleColors.info,\n                        consoleColors.recognized,\n                        consoleColors.info\n                    );\n                    if (instrument.deleteZone(iZoneIndex))\n                    {\n                        trimmedIZones++;\n                        iZoneIndex--;\n                        SpessaSynthInfo(\n                            `%c${iZone.sample.sampleName} %cdeleted`,\n                            consoleColors.recognized,\n                            consoleColors.info\n                        );\n                    }\n                    if (iZone.sample.useCount < 1)\n                    {\n                        soundfont.deleteSample(iZone.sample);\n                    }\n                }\n                \n            }\n            return trimmedIZones;\n        }\n        \n        SpessaSynthGroup(\n            \"%cTrimming soundfont...\",\n            consoleColors.info\n        );\n        const usedProgramsAndKeys = mid.getUsedProgramsAndKeys(soundfont);\n        \n        SpessaSynthGroupCollapsed(\n            \"%cModifying soundfont...\",\n            consoleColors.info\n        );\n        SpessaSynthInfo(\"Detected keys for midi:\", usedProgramsAndKeys);\n        // modify the soundfont to only include programs and samples that are used\n        for (let presetIndex = 0; presetIndex < soundfont.presets.length; presetIndex++)\n        {\n            const p = soundfont.presets[presetIndex];\n            const string = p.bank + \":\" + p.program;\n            const used = usedProgramsAndKeys[string];\n            if (used === undefined)\n            {\n                SpessaSynthInfo(\n                    `%cDeleting preset %c${p.presetName}%c and its zones`,\n                    consoleColors.info,\n                    consoleColors.recognized,\n                    consoleColors.info\n                );\n                soundfont.deletePreset(p);\n                presetIndex--;\n            }\n            else\n            {\n                const combos = [...used].map(s =>\n                {\n                    const split = s.split(\"-\");\n                    return {\n                        key: parseInt(split[0]),\n                        velocity: parseInt(split[1])\n                    };\n                });\n                SpessaSynthGroupCollapsed(\n                    `%cTrimming %c${p.presetName}`,\n                    consoleColors.info,\n                    consoleColors.recognized\n                );\n                SpessaSynthInfo(`Keys for ${p.presetName}:`, combos);\n                let trimmedZones = 0;\n                // clean the preset to only use zones that are used\n                for (let zoneIndex = 0; zoneIndex < p.presetZones.length; zoneIndex++)\n                {\n                    const zone = p.presetZones[zoneIndex];\n                    const keyRange = zone.keyRange;\n                    const velRange = zone.velRange;\n                    // check if any of the combos matches the zone\n                    let isZoneUsed = false;\n                    for (const combo of combos)\n                    {\n                        if (\n                            (combo.key >= keyRange.min && combo.key <= keyRange.max) &&\n                            (combo.velocity >= velRange.min && combo.velocity <= velRange.max)\n                        )\n                        {\n                            // zone is used, trim the instrument zones\n                            isZoneUsed = true;\n                            const trimmedIZones = trimInstrumentZones(zone.instrument, combos);\n                            SpessaSynthInfo(\n                                `%cTrimmed off %c${trimmedIZones}%c zones from %c${zone.instrument.instrumentName}`,\n                                consoleColors.info,\n                                consoleColors.recognized,\n                                consoleColors.info,\n                                consoleColors.recognized\n                            );\n                            break;\n                        }\n                    }\n                    if (!isZoneUsed)\n                    {\n                        trimmedZones++;\n                        p.deleteZone(zoneIndex);\n                        if (zone.instrument.useCount < 1)\n                        {\n                            soundfont.deleteInstrument(zone.instrument);\n                        }\n                        zoneIndex--;\n                    }\n                }\n                SpessaSynthInfo(\n                    `%cTrimmed off %c${trimmedZones}%c zones from %c${p.presetName}`,\n                    consoleColors.info,\n                    consoleColors.recognized,\n                    consoleColors.info,\n                    consoleColors.recognized\n                );\n                SpessaSynthGroupEnd();\n            }\n        }\n        soundfont.removeUnusedElements();\n        \n        soundfont.soundFontInfo[\"ICMT\"] = `NOTE: This soundfont was trimmed by SpessaSynth to only contain presets used in \"${mid.midiName}\"\\n\\n`\n            + soundfont.soundFontInfo[\"ICMT\"];\n        \n        SpessaSynthInfo(\n            \"%cSoundfont modified!\",\n            consoleColors.recognized\n        );\n        SpessaSynthGroupEnd();\n        SpessaSynthGroupEnd();\n    }\n    \n    removeUnusedElements()\n    {\n        this.instruments = this.instruments.filter(i =>\n        {\n            i.deleteUnusedZones();\n            const deletable = i.useCount < 1;\n            if (deletable)\n            {\n                i.deleteInstrument();\n            }\n            return !deletable;\n        });\n        this.samples = this.samples.filter(s =>\n        {\n            const deletable = s.useCount < 1;\n            if (deletable)\n            {\n                s.deleteSample();\n            }\n            return !deletable;\n        });\n    }\n    \n    /**\n     * @param instrument {BasicInstrument}\n     */\n    deleteInstrument(instrument)\n    {\n        instrument.deleteInstrument();\n        this.instruments.splice(this.instruments.indexOf(instrument), 1);\n    }\n    \n    /**\n     * @param preset {BasicPreset}\n     */\n    deletePreset(preset)\n    {\n        preset.deletePreset();\n        this.presets.splice(this.presets.indexOf(preset), 1);\n    }\n    \n    /**\n     * @param sample {BasicSample}\n     */\n    deleteSample(sample)\n    {\n        sample.deleteSample();\n        this.samples.splice(this.samples.indexOf(sample), 1);\n    }\n    \n    /**\n     * Get the appropriate preset, undefined if not found\n     * @param bankNr {number}\n     * @param programNr {number}\n     * @param allowXGDrums {boolean} if true, allows XG drum banks (120, 126 and 127) as drum preset\n     * @return {BasicPreset}\n     */\n    getPresetNoFallback(bankNr, programNr, allowXGDrums = false)\n    {\n        const isDrum = bankNr === 128 || (allowXGDrums && isXGDrums(bankNr));\n        // check for exact match\n        let p;\n        if (isDrum)\n        {\n            p = this.presets.find(p => p.bank === bankNr && p.isDrumPreset(allowXGDrums) && p.program === programNr);\n        }\n        else\n        {\n            p = this.presets.find(p => p.bank === bankNr && p.program === programNr);\n        }\n        if (p)\n        {\n            return p;\n        }\n        // no match...\n        if (isDrum)\n        {\n            if (allowXGDrums)\n            {\n                // try any drum preset with matching program?\n                const p = this.presets.find(p => p.isDrumPreset(allowXGDrums) && p.program === programNr);\n                if (p)\n                {\n                    return p;\n                }\n            }\n        }\n        return undefined;\n    }\n    \n    /**\n     * Get the appropriate preset\n     * @param bankNr {number}\n     * @param programNr {number}\n     * @param allowXGDrums {boolean} if true, allows XG drum banks (120, 126 and 127) as drum preset\n     * @returns {BasicPreset}\n     */\n    getPreset(bankNr, programNr, allowXGDrums = false)\n    {\n        const isDrums = bankNr === 128 || (allowXGDrums && isXGDrums(bankNr));\n        // check for exact match\n        let preset;\n        // only allow drums if the preset is considered to be a drum preset\n        if (isDrums)\n        {\n            preset = this.presets.find(p => p.bank === bankNr && p.isDrumPreset(allowXGDrums) && p.program === programNr);\n        }\n        else\n        {\n            preset = this.presets.find(p => p.bank === bankNr && p.program === programNr);\n        }\n        if (preset)\n        {\n            return preset;\n        }\n        // no match...\n        if (isDrums)\n        {\n            // drum preset: find any preset with bank 128\n            preset = this.presets.find(p => p.isDrumPreset(allowXGDrums) && p.program === programNr);\n            if (!preset)\n            {\n                // only allow 128, otherwise it would default to XG SFX\n                preset = this.presets.find(p => p.isDrumPreset(allowXGDrums));\n            }\n        }\n        else\n        {\n            // non-drum preset: find any preset with the given program that is not a drum preset\n            preset = this.presets.find(p => p.program === programNr && !p.isDrumPreset(allowXGDrums));\n        }\n        if (preset)\n        {\n            SpessaSynthWarn(\n                `%cPreset ${bankNr}.${programNr} not found. Replaced with %c${preset.presetName} (${preset.bank}.${preset.program})`,\n                consoleColors.warn,\n                consoleColors.recognized\n            );\n        }\n        \n        // no preset, use the first one available\n        if (!preset)\n        {\n            SpessaSynthWarn(`Preset ${programNr} not found. Defaulting to`, this.presets[0].presetName);\n            preset = this.presets[0];\n        }\n        return preset;\n    }\n    \n    /**\n     * gets preset by name\n     * @param presetName {string}\n     * @returns {BasicPreset}\n     */\n    getPresetByName(presetName)\n    {\n        let preset = this.presets.find(p => p.presetName === presetName);\n        if (!preset)\n        {\n            SpessaSynthWarn(\"Preset not found. Defaulting to:\", this.presets[0].presetName);\n            preset = this.presets[0];\n        }\n        return preset;\n    }\n    \n    /**\n     * @param error {string}\n     */\n    parsingError(error)\n    {\n        throw new Error(`SF parsing error: ${error} The file may be corrupted.`);\n    }\n    \n    destroySoundBank()\n    {\n        delete this.presets;\n        delete this.instruments;\n        delete this.samples;\n        delete this.soundFontInfo;\n    }\n}\n\nBasicSoundBank.prototype.write = write;\nBasicSoundBank.prototype.writeDLS = writeDLS;\n\nexport { BasicSoundBank };", "import { readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\n\n/**\n * @this {DLSSoundFont}\n * @param instrumentListChunk {RiffChunk}\n */\nexport function readDLSInstrumentList(instrumentListChunk)\n{\n    SpessaSynthGroupCollapsed(\"%cLoading instruments...\", consoleColors.info);\n    for (let i = 0; i < this.instrumentAmount; i++)\n    {\n        this.readDLSInstrument(readRIFFChunk(instrumentListChunk.chunkData));\n    }\n    SpessaSynthGroupEnd();\n}", "import { Generator } from \"../basic_soundfont/generator.js\";\nimport { generatorTypes } from \"../basic_soundfont/generator_types.js\";\nimport { BasicInstrumentZone } from \"../basic_soundfont/basic_instrument_zone.js\";\n\nexport class DLSZone extends BasicInstrumentZone\n{\n    /**\n     * @param inst {BasicInstrument}\n     */\n    constructor(inst)\n    {\n        super(inst);\n    }\n    \n    /**\n     * @param attenuationCb {number} with EMU correction\n     * @param loopingMode {number} the sfont one\n     * @param loop {{start: number, end: number}}\n     * @param sampleKey {number}\n     * @param sample {BasicSample}\n     * @param sampleID {number}\n     * @param samplePitchCorrection {number} cents\n     */\n    setWavesample(\n        attenuationCb,\n        loopingMode,\n        loop,\n        sampleKey,\n        sample,\n        sampleID,\n        samplePitchCorrection\n    )\n    {\n        if (loopingMode !== 0)\n        {\n            this.addGenerators(new Generator(generatorTypes.sampleModes, loopingMode));\n        }\n        this.addGenerators(new Generator(generatorTypes.initialAttenuation, attenuationCb));\n        \n        // correct tuning if needed\n        samplePitchCorrection -= sample.samplePitchCorrection;\n        const coarseTune = Math.trunc(samplePitchCorrection / 100);\n        if (coarseTune !== 0)\n        {\n            this.addGenerators(new Generator(generatorTypes.coarseTune, coarseTune));\n        }\n        const fineTune = samplePitchCorrection - (coarseTune * 100);\n        if (fineTune !== 0)\n        {\n            this.addGenerators(new Generator(generatorTypes.fineTune, fineTune));\n        }\n        \n        // correct loop if needed\n        if (loopingMode !== 0)\n        {\n            const diffStart = loop.start - sample.sampleLoopStartIndex;\n            const diffEnd = loop.end - sample.sampleLoopEndIndex;\n            if (diffStart !== 0)\n            {\n                const fine = diffStart % 32768;\n                this.addGenerators(new Generator(generatorTypes.startloopAddrsOffset, fine));\n                // coarse generator uses 32768 samples per step\n                const coarse = Math.trunc(diffStart / 32768);\n                if (coarse !== 0)\n                {\n                    this.addGenerators(new Generator(generatorTypes.startloopAddrsCoarseOffset, coarse));\n                }\n            }\n            if (diffEnd !== 0)\n            {\n                const fine = diffEnd % 32768;\n                this.addGenerators(new Generator(generatorTypes.endloopAddrsOffset, fine));\n                // coarse generator uses 32768 samples per step\n                const coarse = Math.trunc(diffEnd / 32768);\n                if (coarse !== 0)\n                {\n                    this.addGenerators(new Generator(generatorTypes.endloopAddrsCoarseOffset, coarse));\n                }\n            }\n        }\n        // correct the key if needed\n        if (sampleKey !== sample.samplePitch)\n        {\n            this.addGenerators(new Generator(generatorTypes.overridingRootKey, sampleKey));\n        }\n        // add sample\n        this.setSample(sample);\n    }\n}", "import { BasicInstrument } from \"../basic_soundfont/basic_instrument.js\";\nimport { DLSZone } from \"./dls_zone.js\";\n\nexport class DLSInstrument extends BasicInstrument\n{\n    constructor()\n    {\n        super();\n    }\n    \n    /**\n     * @returns {DLSZone}\n     */\n    createZone()\n    {\n        const z = new DLSZone(this);\n        this.instrumentZones.push(z);\n        return z;\n    }\n}", "import { BasicPreset } from \"../basic_soundfont/basic_preset.js\";\nimport { DLSInstrument } from \"./dls_instrument.js\";\n\nexport class DLSPreset extends BasicPreset\n{\n    /**\n     * @type {DLSInstrument}\n     */\n    dlsInstrument = new DLSInstrument();\n    \n    /**\n     * Creates a new DLS preset\n     * @param dls {BasicSoundBank}\n     * @param ulBank {number}\n     * @param ulInstrument {number}\n     */\n    constructor(dls, ulBank, ulInstrument)\n    {\n        // use stock default modulators, dls won't ever have DMOD chunk\n        super(dls);\n        this.program = ulInstrument & 127;\n        const bankMSB = (ulBank >> 8) & 127;\n        const bankLSB = ulBank & 127;\n        // switch accordingly\n        if (bankMSB > 0)\n        {\n            this.bank = bankMSB;\n        }\n        else\n        {\n            this.bank = bankLSB;\n        }\n        const isDrums = ulBank >> 31;\n        if (isDrums)\n        {\n            // soundfont bank is 128, so we change it here\n            this.bank = 128;\n        }\n        \n        const zone = this.createZone();\n        zone.setInstrument(this.dlsInstrument);\n    }\n}", "import { readLittleEndian, signedInt16 } from \"../../utils/byte_functions/little_endian.js\";\nimport { findRIFFListType, readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { Generator } from \"../basic_soundfont/generator.js\";\nimport { generatorTypes } from \"../basic_soundfont/generator_types.js\";\nimport { SpessaSynthWarn } from \"../../utils/loggin.js\";\n\n/**\n * @this {DLSSoundFont}\n * @param chunk {RiffChunk}\n * @param instrument {DLSInstrument}\n */\nexport function readRegion(chunk, instrument)\n{\n    // regions are essentially instrument zones\n    \n    /**\n     * read chunks in the region\n     * @type {RiffChunk[]}\n     */\n    const regionChunks = [];\n    while (chunk.chunkData.length > chunk.chunkData.currentIndex)\n    {\n        regionChunks.push(readRIFFChunk(chunk.chunkData));\n    }\n    \n    // region header\n    const regionHeader = regionChunks.find(c => c.header === \"rgnh\");\n    \n    if (!regionHeader)\n    {\n        SpessaSynthWarn(\"Invalid DLS region: missing 'rgnh' chunk! Discarding...\");\n        return;\n    }\n    // key range\n    let keyMin = readLittleEndian(regionHeader.chunkData, 2);\n    let keyMax = readLittleEndian(regionHeader.chunkData, 2);\n    // vel range\n    let velMin = readLittleEndian(regionHeader.chunkData, 2);\n    let velMax = readLittleEndian(regionHeader.chunkData, 2);\n    \n    // a fix for not cool files\n    if (velMin === 0 && velMax === 0)\n    {\n        velMax = 127;\n        velMin = 0;\n    }\n    // cannot do the same to key zones sadly\n    // create zone\n    const zone = instrument.createZone();\n    // apply ranges\n    zone.keyRange = { min: keyMin, max: keyMax };\n    zone.velRange = { min: velMin, max: velMax };\n    \n    // fusOptions: no idea about that one???\n    readLittleEndian(regionHeader.chunkData, 2);\n    \n    // keyGroup: essentially exclusive class\n    const exclusive = readLittleEndian(regionHeader.chunkData, 2);\n    if (exclusive !== 0)\n    {\n        zone.addGenerators(new Generator(generatorTypes.exclusiveClass, exclusive));\n    }\n    \n    // lart\n    const lart = findRIFFListType(regionChunks, \"lart\");\n    const lar2 = findRIFFListType(regionChunks, \"lar2\");\n    this.readLart(lart, lar2, zone);\n    \n    // wsmp: wave sample chunk\n    const waveSampleChunk = regionChunks.find(c => c.header === \"wsmp\");\n    // cbSize\n    readLittleEndian(waveSampleChunk.chunkData, 4);\n    let originalKey = readLittleEndian(waveSampleChunk.chunkData, 2);\n    \n    // sFineTune\n    let pitchCorrection = signedInt16(\n        waveSampleChunk.chunkData[waveSampleChunk.chunkData.currentIndex++],\n        waveSampleChunk.chunkData[waveSampleChunk.chunkData.currentIndex++]\n    );\n    \n    // gain correction: Each unit of gain represents 1/655360 dB\n    // it is set after linking the sample\n    const gainCorrection = readLittleEndian(waveSampleChunk.chunkData, 4);\n    // convert to signed and turn into attenuation (invert)\n    const dbCorrection = (gainCorrection | 0) / -655360;\n    \n    // skip options\n    readLittleEndian(waveSampleChunk.chunkData, 4);\n    \n    // read loop count (always one or zero)\n    const loopsAmount = readLittleEndian(waveSampleChunk.chunkData, 4);\n    let loopingMode;\n    const loop = { start: 0, end: 0 };\n    if (loopsAmount === 0)\n    {\n        // no loop\n        loopingMode = 0;\n    }\n    else\n    {\n        // ignore cbSize\n        readLittleEndian(waveSampleChunk.chunkData, 4);\n        // loop type: loop normally or loop until release (like soundfont)\n        const loopType = readLittleEndian(waveSampleChunk.chunkData, 4); // why is it long?\n        if (loopType === 0)\n        {\n            loopingMode = 1;\n        }\n        else\n        {\n            loopingMode = 3;\n        }\n        loop.start = readLittleEndian(waveSampleChunk.chunkData, 4);\n        const loopLength = readLittleEndian(waveSampleChunk.chunkData, 4);\n        loop.end = loop.start + loopLength;\n    }\n    \n    // wave link\n    const waveLinkChunk = regionChunks.find(c => c.header === \"wlnk\");\n    if (waveLinkChunk === undefined)\n    {\n        // No wave link means no sample. What? Why is it even here then?\n        return undefined;\n    }\n    \n    // flags\n    readLittleEndian(waveLinkChunk.chunkData, 2);\n    // phase group\n    readLittleEndian(waveLinkChunk.chunkData, 2);\n    // channel\n    readLittleEndian(waveLinkChunk.chunkData, 4);\n    // sampleID\n    const sampleID = readLittleEndian(waveLinkChunk.chunkData, 4);\n    // noinspection JSValidateTypes\n    /**\n     * @type {DLSSample}\n     */\n    const sample = this.samples[sampleID];\n    if (sample === undefined)\n    {\n        throw new Error(\"Invalid sample ID!\");\n    }\n    \n    // this correction overrides the sample gain correction\n    const actualDbCorrection = dbCorrection || sample.sampleDbAttenuation;\n    // convert to centibels\n    const attenuation = (actualDbCorrection * 10) / 0.4; // make sure to apply EMU correction\n    \n    zone.setWavesample(\n        attenuation, loopingMode,\n        loop,\n        originalKey,\n        sample,\n        sampleID,\n        pitchCorrection\n    );\n}", "import { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { DLSPreset } from \"./dls_preset.js\";\nimport { findRIFFListType, readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { Modulator } from \"../basic_soundfont/modulator.js\";\nimport { DEFAULT_DLS_CHORUS, DEFAULT_DLS_REVERB } from \"./dls_sources.js\";\nimport { generatorLimits, generatorTypes } from \"../basic_soundfont/generator_types.js\";\nimport { readRegion } from \"./read_region.js\";\n\n/**\n * @this {DLSSoundFont}\n * @param chunk {RiffChunk}\n */\nexport function readDLSInstrument(chunk)\n{\n    this.verifyHeader(chunk, \"LIST\");\n    this.verifyText(readBytesAsString(chunk.chunkData, 4), \"ins \");\n    /**\n     * @type {RiffChunk[]}\n     */\n    const chunks = [];\n    while (chunk.chunkData.length > chunk.chunkData.currentIndex)\n    {\n        chunks.push(readRIFFChunk(chunk.chunkData));\n    }\n    \n    \n    const instrumentHeader = chunks.find(c => c.header === \"insh\");\n    if (!instrumentHeader)\n    {\n        SpessaSynthGroupEnd();\n        throw new Error(\"No instrument header!\");\n    }\n    \n    // read instrument header\n    const regions = readLittleEndian(instrumentHeader.chunkData, 4);\n    const ulBank = readLittleEndian(instrumentHeader.chunkData, 4);\n    const ulInstrument = readLittleEndian(instrumentHeader.chunkData, 4);\n    const preset = new DLSPreset(this, ulBank, ulInstrument);\n    \n    // read preset name in INFO\n    let presetName = ``;\n    const infoChunk = findRIFFListType(chunks, \"INFO\");\n    if (infoChunk)\n    {\n        let info = readRIFFChunk(infoChunk.chunkData);\n        while (info.header !== \"INAM\")\n        {\n            info = readRIFFChunk(infoChunk.chunkData);\n        }\n        presetName = readBytesAsString(info.chunkData, info.chunkData.length).trim();\n    }\n    if (presetName.length < 1)\n    {\n        presetName = `unnamed ${(ulBank >> 8) & 127}:${ulInstrument & 127}`;\n    }\n    preset.presetName = presetName;\n    preset.dlsInstrument.instrumentName = presetName;\n    SpessaSynthGroupCollapsed(\n        `%cParsing %c\"${presetName}\"%c...`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info\n    );\n    \n    // list of regions\n    const regionListChunk = findRIFFListType(chunks, \"lrgn\");\n    if (!regionListChunk)\n    {\n        SpessaSynthGroupEnd();\n        throw new Error(\"No region list!\");\n    }\n    \n    // global articulation: essentially global zone\n    const globalZone = preset.dlsInstrument.globalZone;\n    \n    // read articulators\n    const globalLart = findRIFFListType(chunks, \"lart\");\n    const globalLar2 = findRIFFListType(chunks, \"lar2\");\n    if (globalLar2 !== undefined || globalLart !== undefined)\n    {\n        this.readLart(globalLart, globalLar2, globalZone);\n    }\n    // remove generators with default values\n    globalZone.generators = globalZone.generators.filter(g => g.generatorValue !== generatorLimits[g.generatorType].def);\n    // override reverb and chorus with 1000 instead of 200 (if not override)\n    // reverb\n    if (globalZone.modulators.find(m => m.modulatorDestination === generatorTypes.reverbEffectsSend) === undefined)\n    {\n        globalZone.addModulators(Modulator.copy(DEFAULT_DLS_REVERB));\n    }\n    // chorus\n    if (globalZone.modulators.find(m => m.modulatorDestination === generatorTypes.chorusEffectsSend) === undefined)\n    {\n        globalZone.addModulators(Modulator.copy(DEFAULT_DLS_CHORUS));\n    }\n    \n    // read regions\n    for (let i = 0; i < regions; i++)\n    {\n        const chunk = readRIFFChunk(regionListChunk.chunkData);\n        this.verifyHeader(chunk, \"LIST\");\n        const type = readBytesAsString(chunk.chunkData, 4);\n        if (type !== \"rgn \" && type !== \"rgn2\")\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`Invalid DLS region! Expected \"rgn \" or \"rgn2\" got \"${type}\"`);\n        }\n        \n        \n        readRegion.call(this, chunk, preset.dlsInstrument);\n    }\n    this.addPresets(preset);\n    this.addInstruments(preset.dlsInstrument);\n    SpessaSynthGroupEnd();\n}", "import { DLSSources } from \"./dls_sources.js\";\nimport {\n    DecodedModulator,\n    getModSourceEnum,\n    Modulator,\n    modulatorCurveTypes,\n    modulatorSources\n} from \"../basic_soundfont/modulator.js\";\nimport { midiControllers } from \"../../midi/midi_message.js\";\nimport { DLSDestinations } from \"./dls_destinations.js\";\n\nimport { consoleColors } from \"../../utils/other.js\";\nimport { SpessaSynthWarn } from \"../../utils/loggin.js\";\nimport { generatorTypes } from \"../basic_soundfont/generator_types.js\";\n\n/**\n * @param source {number}\n * @returns {{enum: number, isCC: boolean}|undefined}\n */\nfunction getSF2SourceFromDLS(source)\n{\n    let sourceEnum = undefined;\n    let isCC = false;\n    switch (source)\n    {\n        default:\n        case DLSSources.modLfo:\n        case DLSSources.vibratoLfo:\n        case DLSSources.coarseTune:\n        case DLSSources.fineTune:\n        case DLSSources.modEnv:\n            return undefined; // cannot be this in sf2\n        \n        case DLSSources.keyNum:\n            sourceEnum = modulatorSources.noteOnKeyNum;\n            break;\n        case DLSSources.none:\n            sourceEnum = modulatorSources.noController;\n            break;\n        case DLSSources.modulationWheel:\n            sourceEnum = midiControllers.modulationWheel;\n            isCC = true;\n            break;\n        case DLSSources.pan:\n            sourceEnum = midiControllers.pan;\n            isCC = true;\n            break;\n        case DLSSources.reverb:\n            sourceEnum = midiControllers.reverbDepth;\n            isCC = true;\n            break;\n        case DLSSources.chorus:\n            sourceEnum = midiControllers.chorusDepth;\n            isCC = true;\n            break;\n        case DLSSources.expression:\n            sourceEnum = midiControllers.expressionController;\n            isCC = true;\n            break;\n        case DLSSources.volume:\n            sourceEnum = midiControllers.mainVolume;\n            isCC = true;\n            break;\n        case DLSSources.velocity:\n            sourceEnum = modulatorSources.noteOnVelocity;\n            break;\n        case DLSSources.polyPressure:\n            sourceEnum = modulatorSources.polyPressure;\n            break;\n        case DLSSources.channelPressure:\n            sourceEnum = modulatorSources.channelPressure;\n            break;\n        case DLSSources.pitchWheel:\n            sourceEnum = modulatorSources.pitchWheel;\n            break;\n        case DLSSources.pitchWheelRange:\n            sourceEnum = modulatorSources.pitchWheelRange;\n            break;\n    }\n    if (sourceEnum === undefined)\n    {\n        throw new Error(`Unknown DLS Source: ${source}`);\n    }\n    return { enum: sourceEnum, isCC: isCC };\n}\n\n/**\n * @param destination {number}\n * @param amount {number}\n * @returns {generatorTypes|{gen: generatorTypes, newAmount: number}} // transform amount to sf2 units\n */\nfunction getSF2GeneratorFromDLS(destination, amount)\n{\n    switch (destination)\n    {\n        default:\n        case DLSDestinations.none:\n            return undefined;\n        case DLSDestinations.pan:\n            return generatorTypes.pan;\n        case DLSDestinations.gain:\n            return { gen: generatorTypes.initialAttenuation, newAmount: amount * -1 };\n        case DLSDestinations.pitch:\n            return generatorTypes.fineTune;\n        case DLSDestinations.keyNum:\n            return generatorTypes.overridingRootKey;\n        \n        // vol env\n        case DLSDestinations.volEnvDelay:\n            return generatorTypes.delayVolEnv;\n        case DLSDestinations.volEnvAttack:\n            return generatorTypes.attackVolEnv;\n        case DLSDestinations.volEnvHold:\n            return generatorTypes.holdVolEnv;\n        case DLSDestinations.volEnvDecay:\n            return generatorTypes.decayVolEnv;\n        case DLSDestinations.volEnvSustain:\n            return { gen: generatorTypes.sustainVolEnv, newAmount: 1000 - amount };\n        case DLSDestinations.volEnvRelease:\n            return generatorTypes.releaseVolEnv;\n        \n        // mod env\n        case DLSDestinations.modEnvDelay:\n            return generatorTypes.delayModEnv;\n        case DLSDestinations.modEnvAttack:\n            return generatorTypes.attackModEnv;\n        case DLSDestinations.modEnvHold:\n            return generatorTypes.holdModEnv;\n        case DLSDestinations.modEnvDecay:\n            return generatorTypes.decayModEnv;\n        case DLSDestinations.modEnvSustain:\n            return { gen: generatorTypes.sustainModEnv, newAmount: (1000 - amount) / 10 };\n        case DLSDestinations.modEnvRelease:\n            return generatorTypes.releaseModEnv;\n        \n        case DLSDestinations.filterCutoff:\n            return generatorTypes.initialFilterFc;\n        case DLSDestinations.filterQ:\n            return generatorTypes.initialFilterQ;\n        case DLSDestinations.chorusSend:\n            return generatorTypes.chorusEffectsSend;\n        case DLSDestinations.reverbSend:\n            return generatorTypes.reverbEffectsSend;\n        \n        // lfo\n        case DLSDestinations.modLfoFreq:\n            return generatorTypes.freqModLFO;\n        case DLSDestinations.modLfoDelay:\n            return generatorTypes.delayModLFO;\n        case DLSDestinations.vibLfoFreq:\n            return generatorTypes.freqVibLFO;\n        case DLSDestinations.vibLfoDelay:\n            return generatorTypes.delayVibLFO;\n    }\n}\n\n/**\n * checks for combos such as mod lfo as source and pitch as destination which results in modLfoToPitch\n * @param source {number}\n * @param destination {number}\n * @returns {generatorTypes} real destination\n */\nfunction checkForSpecialDLSCombo(source, destination)\n{\n    if (source === DLSSources.vibratoLfo && destination === DLSDestinations.pitch)\n    {\n        // vibrato lfo to pitch\n        return generatorTypes.vibLfoToPitch;\n    }\n    else if (source === DLSSources.modLfo && destination === DLSDestinations.pitch)\n    {\n        // mod lfo to pitch\n        return generatorTypes.modLfoToPitch;\n    }\n    else if (source === DLSSources.modLfo && destination === DLSDestinations.filterCutoff)\n    {\n        // mod lfo to filter\n        return generatorTypes.modLfoToFilterFc;\n    }\n    else if (source === DLSSources.modLfo && destination === DLSDestinations.gain)\n    {\n        // mod lfo to volume\n        return generatorTypes.modLfoToVolume;\n    }\n    else if (source === DLSSources.modEnv && destination === DLSDestinations.filterCutoff)\n    {\n        // mod envelope to filter\n        return generatorTypes.modEnvToFilterFc;\n    }\n    else if (source === DLSSources.modEnv && destination === DLSDestinations.pitch)\n    {\n        // mod envelope to pitch\n        return generatorTypes.modEnvToPitch;\n    }\n    else\n    {\n        return undefined;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * @param source {number}\n * @param control {number}\n * @param destination {number}\n * @param value {number}\n * @param transform {number}\n * @param msg {string}\n */\nexport function modulatorConverterDebug(\n    source,\n    control,\n    destination,\n    value,\n    transform,\n    msg = \"Attempting to convert the following DLS Articulator to SF2 Modulator:\"\n)\n{\n    const type = Object.keys(DLSDestinations).find(k => DLSDestinations[k] === destination);\n    const srcType = Object.keys(DLSSources).find(k => DLSSources[k] === source);\n    const ctrlType = Object.keys(DLSSources).find(k => DLSSources[k] === control);\n    const typeString = type ? type : destination.toString(16);\n    const srcString = srcType ? srcType : source.toString(16);\n    const ctrlString = ctrlType ? ctrlType : control.toString(16);\n    console.debug(\n        `%c${msg}\n        Source: %c${srcString}%c\n        Control: %c${ctrlString}%c\n        Destination: %c${typeString}%c\n        Amount: %c${value}%c\n        Transform: %c${transform}%c...`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info\n    );\n}\n\n/**\n * @param source {number}\n * @param control {number}\n * @param destination {number}\n * @param transform {number}\n * @param value {number}\n * @returns {Modulator|undefined}\n */\nexport function getSF2ModulatorFromArticulator(\n    source,\n    control,\n    destination,\n    transform,\n    value\n)\n{\n    // modulatorConverterDebug(\n    //     source,\n    //     control,\n    //     destination,\n    //     value,\n    //     transform\n    // );\n    // check for special combinations\n    const specialDestination = checkForSpecialDLSCombo(source, destination);\n    /**\n     * @type {generatorTypes}\n     */\n    let destinationGenerator;\n    /**\n     * @type {{enum: number, isCC: boolean}}\n     */\n    let sf2Source;\n    let swapSources = false;\n    let isSourceNoController = false;\n    let newValue = value;\n    if (specialDestination === undefined)\n    {\n        // determine destination\n        const sf2GenDestination = getSF2GeneratorFromDLS(destination, value);\n        if (sf2GenDestination === undefined)\n        {\n            // cannot be a valid modulator\n            SpessaSynthWarn(`Invalid destination: ${destination}`);\n            return undefined;\n        }\n        /**\n         * @type {generatorTypes}\n         */\n        destinationGenerator = sf2GenDestination;\n        if (sf2GenDestination.newAmount !== undefined)\n        {\n            newValue = sf2GenDestination.newAmount;\n            destinationGenerator = sf2GenDestination.gen;\n        }\n        sf2Source = getSF2SourceFromDLS(source);\n        if (sf2Source === undefined)\n        {\n            // cannot be a valid modulator\n            SpessaSynthWarn(`Invalid source: ${source}`);\n            return undefined;\n        }\n    }\n    else\n    {\n        destinationGenerator = specialDestination;\n        swapSources = true;\n        sf2Source = { enum: modulatorSources.noController, isCC: false };\n        isSourceNoController = true;\n    }\n    let sf2SecondSource = getSF2SourceFromDLS(control);\n    if (sf2SecondSource === undefined)\n    {\n        // cannot be a valid modulator\n        SpessaSynthWarn(`Invalid control: ${control}`);\n        return undefined;\n    }\n    \n    // get transforms and final enums\n    let sourceEnumFinal;\n    if (isSourceNoController)\n    {\n        // we force it into this state because before it was some strange value,\n        // like vibrato lfo bipolar, for example,\n        // since we turn it into NoController -> vibLfoToPitch,\n        // the result is the same and bipolar controller is technically 0\n        sourceEnumFinal = 0x0;\n    }\n    else\n    {\n        // output transform is ignored as it's not a thing in sfont format\n        // unless the curve type of source is linear, then output is copied\n        const outputTransform = transform & 0b1111;\n        // source curve type maps to a desfont curve type in section 2.10, table 9\n        let sourceTransform = (transform >> 10) & 0b1111;\n        if (sourceTransform === modulatorCurveTypes.linear && outputTransform !== modulatorCurveTypes.linear)\n        {\n            sourceTransform = outputTransform;\n        }\n        const sourceIsBipolar = (transform >> 14) & 1;\n        let sourceIsNegative = (transform >> 15) & 1;\n        // special case: for attenuation, invert source (dls gain is the opposite of sf2 attenuation)\n        if (destinationGenerator === generatorTypes.initialAttenuation)\n        {\n            // if the value is negative, the source shall be negative!\n            // why?\n            // IDK, it makes it work with ROCK.RMI and NOKIA_S30.dls\n            if (value < 0)\n            {\n                sourceIsNegative = 1;\n            }\n        }\n        sourceEnumFinal = getModSourceEnum(\n            sourceTransform,\n            sourceIsBipolar,\n            sourceIsNegative,\n            sf2Source.isCC,\n            sf2Source.enum\n        );\n    }\n    \n    // a corrupted rendition of gm.dls was found under\n    // https://sembiance.com/fileFormatSamples/audio/downloadableSoundBank/\n    // which specifies a whopping -32,768 decibels of attenuation\n    if (destinationGenerator === generatorTypes.initialAttenuation)\n    {\n        newValue = Math.max(960, Math.min(0, newValue));\n    }\n    \n    const secSourceTransform = (transform >> 4) & 0b1111;\n    const secSourceIsBipolar = (transform >> 8) & 1;\n    const secSourceIsNegative = transform >> 9 & 1;\n    let secSourceEnumFinal = getModSourceEnum(\n        secSourceTransform,\n        secSourceIsBipolar,\n        secSourceIsNegative,\n        sf2SecondSource.isCC,\n        sf2SecondSource.enum\n    );\n    \n    if (swapSources)\n    {\n        const temp = secSourceEnumFinal;\n        secSourceEnumFinal = sourceEnumFinal;\n        sourceEnumFinal = temp;\n    }\n    \n    // return the modulator!\n    return new DecodedModulator(\n        sourceEnumFinal,\n        secSourceEnumFinal,\n        destinationGenerator,\n        newValue,\n        0x0\n    );\n    \n}", "import { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { DLSDestinations } from \"./dls_destinations.js\";\nimport { DLS_1_NO_VIBRATO_MOD, DLS_1_NO_VIBRATO_PRESSURE, DLSSources } from \"./dls_sources.js\";\nimport { getSF2ModulatorFromArticulator } from \"./articulator_converter.js\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { Generator } from \"../basic_soundfont/generator.js\";\nimport { Modulator } from \"../basic_soundfont/modulator.js\";\nimport { generatorTypes } from \"../basic_soundfont/generator_types.js\";\n\n\n/**\n * Reads the articulator chunk\n * @param chunk {RiffChunk}\n * @param disableVibrato {boolean} it seems that dls 1 does not have vibrato lfo, so we shall disable it\n * @returns {{modulators: Modulator[], generators: Generator[]}}\n */\nexport function readArticulation(chunk, disableVibrato)\n{\n    const artData = chunk.chunkData;\n    /**\n     * @type {Generator[]}\n     */\n    const generators = [];\n    /**\n     * @type {Modulator[]}\n     */\n    const modulators = [];\n    \n    // cbSize (ignore)\n    readLittleEndian(artData, 4);\n    const connectionsAmount = readLittleEndian(artData, 4);\n    for (let i = 0; i < connectionsAmount; i++)\n    {\n        // read the block\n        const source = readLittleEndian(artData, 2);\n        const control = readLittleEndian(artData, 2);\n        const destination = readLittleEndian(artData, 2);\n        const transform = readLittleEndian(artData, 2);\n        const scale = readLittleEndian(artData, 4) | 0;\n        const value = scale >> 16; // convert it to 16 bit as soundfont uses that\n        \n        // modulatorConverterDebug(\n        //     source,\n        //     control,\n        //     destination,\n        //     value,\n        //     transform\n        // );\n        \n        // interpret this somehow...\n        // if source and control are both zero, it's a generator\n        if (source === 0 && control === 0 && transform === 0)\n        {\n            /**\n             * @type {Generator}\n             */\n            let generator;\n            switch (destination)\n            {\n                case DLSDestinations.pan:\n                    generator = new Generator(generatorTypes.pan, value); // turn percent into tenths of percent\n                    break;\n                case DLSDestinations.gain:\n                    generator = new Generator(generatorTypes.initialAttenuation, -value * 10 / 0.4); // turn to centibels and apply emu correction\n                    break;\n                case DLSDestinations.filterCutoff:\n                    generator = new Generator(generatorTypes.initialFilterFc, value);\n                    break;\n                case DLSDestinations.filterQ:\n                    generator = new Generator(generatorTypes.initialFilterQ, value);\n                    break;\n                \n                // mod lfo raw values it seems\n                case DLSDestinations.modLfoFreq:\n                    generator = new Generator(generatorTypes.freqModLFO, value);\n                    break;\n                case DLSDestinations.modLfoDelay:\n                    generator = new Generator(generatorTypes.delayModLFO, value);\n                    break;\n                case DLSDestinations.vibLfoFreq:\n                    generator = new Generator(generatorTypes.freqVibLFO, value);\n                    break;\n                case DLSDestinations.vibLfoDelay:\n                    generator = new Generator(generatorTypes.delayVibLFO, value);\n                    break;\n                \n                // vol. env: all times are timecents like sf2\n                case DLSDestinations.volEnvDelay:\n                    generator = new Generator(generatorTypes.delayVolEnv, value);\n                    break;\n                case DLSDestinations.volEnvAttack:\n                    generator = new Generator(generatorTypes.attackVolEnv, value);\n                    break;\n                case DLSDestinations.volEnvHold:\n                    // do not validate because keyNumToSomething\n                    generator = new Generator(generatorTypes.holdVolEnv, value, false);\n                    break;\n                case DLSDestinations.volEnvDecay:\n                    // do not validate because keyNumToSomething\n                    generator = new Generator(generatorTypes.decayVolEnv, value, false);\n                    break;\n                case DLSDestinations.volEnvRelease:\n                    generator = new Generator(generatorTypes.releaseVolEnv, value);\n                    break;\n                case DLSDestinations.volEnvSustain:\n                    // gain seems to be (1000 - value) / 10 = sustain dB\n                    const sustainCb = 1000 - value;\n                    generator = new Generator(generatorTypes.sustainVolEnv, sustainCb);\n                    break;\n                \n                // mod env\n                case DLSDestinations.modEnvDelay:\n                    generator = new Generator(generatorTypes.delayModEnv, value);\n                    break;\n                case DLSDestinations.modEnvAttack:\n                    generator = new Generator(generatorTypes.attackModEnv, value);\n                    break;\n                case DLSDestinations.modEnvHold:\n                    // do not validate because keyNumToSomething\n                    generator = new Generator(generatorTypes.holdModEnv, value, false);\n                    break;\n                case DLSDestinations.modEnvDecay:\n                    // do not validate because keyNumToSomething\n                    generator = new Generator(generatorTypes.decayModEnv, value, false);\n                    break;\n                case DLSDestinations.modEnvRelease:\n                    generator = new Generator(generatorTypes.releaseModEnv, value);\n                    break;\n                case DLSDestinations.modEnvSustain:\n                    // dls uses 1%, desfont uses 0.1%\n                    const percentageSustain = 1000 - value;\n                    generator = new Generator(generatorTypes.sustainModEnv, percentageSustain);\n                    break;\n                \n                case DLSDestinations.reverbSend:\n                    generator = new Generator(generatorTypes.reverbEffectsSend, value);\n                    break;\n                case DLSDestinations.chorusSend:\n                    generator = new Generator(generatorTypes.chorusEffectsSend, value);\n                    break;\n                case DLSDestinations.pitch:\n                    // split it up\n                    const semi = Math.floor(value / 100);\n                    const cents = Math.floor(value - semi * 100);\n                    generator = new Generator(generatorTypes.fineTune, cents);\n                    generators.push(new Generator(generatorTypes.coarseTune, semi));\n                    break;\n            }\n            if (generator)\n            {\n                generators.push(generator);\n            }\n        }\n        else\n            // if not, modulator?\n        {\n            let isGenerator = true;\n            \n            const applyKeyToCorrection = (value, keyToGen, realGen) =>\n            {\n                // according to viena and another strange (with modulators) rendition of gm.dls in sf2,\n                // it shall be divided by -128\n                // and a strange correction needs to be applied to the real value:\n                // real + (60 / 128) * scale\n                const keyToGenValue = value / -128;\n                generators.push(new Generator(keyToGen, keyToGenValue));\n                // airfont 340 fix\n                if (keyToGenValue <= 120)\n                {\n                    const correction = Math.round((60 / 128) * value);\n                    generators.forEach(g =>\n                    {\n                        if (g.generatorType === realGen)\n                        {\n                            g.generatorValue += correction;\n                        }\n                    });\n                }\n            };\n            \n            // a few special cases which are generators:\n            if (control === DLSSources.none)\n            {\n                // mod lfo to pitch\n                if (source === DLSSources.modLfo && destination === DLSDestinations.pitch)\n                {\n                    generators.push(new Generator(generatorTypes.modLfoToPitch, value));\n                }\n                else\n                    // mod lfo to volume\n                if (source === DLSSources.modLfo && destination === DLSDestinations.gain)\n                {\n                    generators.push(new Generator(generatorTypes.modLfoToVolume, value));\n                }\n                else\n                    // mod lfo to filter\n                if (source === DLSSources.modLfo && destination === DLSDestinations.filterCutoff)\n                {\n                    generators.push(new Generator(generatorTypes.modLfoToFilterFc, value));\n                }\n                else\n                    // vib lfo to pitch\n                if (source === DLSSources.vibratoLfo && destination === DLSDestinations.pitch)\n                {\n                    generators.push(new Generator(generatorTypes.vibLfoToPitch, value));\n                }\n                else\n                    // mod env to pitch\n                if (source === DLSSources.modEnv && destination === DLSDestinations.pitch)\n                {\n                    generators.push(new Generator(generatorTypes.modEnvToPitch, value));\n                }\n                else\n                    // mod env to filter\n                if (source === DLSSources.modEnv && destination === DLSDestinations.filterCutoff)\n                {\n                    generators.push(new Generator(generatorTypes.modEnvToFilterFc, value));\n                }\n                else\n                    // scale tuning (key number to pitch)\n                if (source === DLSSources.keyNum && destination === DLSDestinations.pitch)\n                {\n                    // this is just a soundfont generator, but the amount must be changed\n                    // 12,800 means the regular scale (100)\n                    generators.push(new Generator(generatorTypes.scaleTuning, value / 128));\n                }\n                else\n                    // key to vol env hold\n                if (source === DLSSources.keyNum && destination === DLSDestinations.volEnvHold)\n                {\n                    applyKeyToCorrection(value, generatorTypes.keyNumToVolEnvHold, generatorTypes.holdVolEnv);\n                }\n                else\n                    // key to vol env decay\n                if (source === DLSSources.keyNum && destination === DLSDestinations.volEnvDecay)\n                {\n                    applyKeyToCorrection(value, generatorTypes.keyNumToVolEnvDecay, generatorTypes.decayVolEnv);\n                }\n                else\n                    // key to mod env hold\n                if (source === DLSSources.keyNum && destination === DLSDestinations.modEnvHold)\n                {\n                    applyKeyToCorrection(value, generatorTypes.keyNumToModEnvHold, generatorTypes.holdModEnv);\n                }\n                else\n                    // key to mod env decay\n                if (source === DLSSources.keyNum && destination === DLSDestinations.modEnvDecay)\n                {\n                    applyKeyToCorrection(value, generatorTypes.keyNumToModEnvDecay, generatorTypes.decayModEnv);\n                }\n                else\n                {\n                    isGenerator = false;\n                }\n                \n            }\n            else\n            {\n                isGenerator = false;\n            }\n            if (isGenerator === false)\n            {\n                // UNCOMMENT TO ENABLE DEBUG\n                // modulatorConverterDebug(source, control, destination, value, transform)\n                // convert it to modulator\n                const mod = getSF2ModulatorFromArticulator(\n                    source,\n                    control,\n                    destination,\n                    transform,\n                    value\n                );\n                if (mod)\n                {\n                    // some articulators cannot be turned into modulators, that's why this check is a thing\n                    modulators.push(mod);\n                    SpessaSynthInfo(\"%cSucceeded converting to SF2 Modulator!\", consoleColors.recognized);\n                }\n                else\n                {\n                    SpessaSynthWarn(\"Failed converting to SF2 Modulator!\");\n                }\n            }\n        }\n    }\n    \n    // it seems that dls 1 does not have vibrato lfo, so we shall disable it\n    if (disableVibrato)\n    {\n        modulators.push(\n            // mod to vib\n            Modulator.copy(DLS_1_NO_VIBRATO_MOD),\n            // press to vib\n            Modulator.copy(DLS_1_NO_VIBRATO_PRESSURE)\n        );\n    }\n    \n    return { modulators: modulators, generators: generators };\n}", "import { readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { readArticulation } from \"./read_articulation.js\";\n\n/**\n * @param lartChunk {RiffChunk|undefined}\n * @param lar2Chunk {RiffChunk|undefined}\n * @param zone {BasicZone}\n * @this {DLSSoundFont}\n */\nexport function readLart(lartChunk, lar2Chunk, zone)\n{\n    if (lartChunk)\n    {\n        while (lartChunk.chunkData.currentIndex < lartChunk.chunkData.length)\n        {\n            const art1 = readRIFFChunk(lartChunk.chunkData);\n            this.verifyHeader(art1, \"art1\", \"art2\");\n            const modsAndGens = readArticulation(art1, true);\n            zone.addGenerators(...modsAndGens.generators);\n            zone.addModulators(...modsAndGens.modulators);\n        }\n    }\n    \n    if (lar2Chunk)\n    {\n        while (lar2Chunk.chunkData.currentIndex < lar2Chunk.chunkData.length)\n        {\n            const art2 = readRIFFChunk(lar2Chunk.chunkData);\n            this.verifyHeader(art2, \"art2\", \"art1\");\n            const modsAndGens = readArticulation(art2, false);\n            zone.addGenerators(...modsAndGens.generators);\n            zone.addModulators(...modsAndGens.modulators);\n        }\n    }\n}", "import { BasicSample, sampleTypes } from \"../basic_soundfont/basic_sample.js\";\nimport { SpessaSynthWarn } from \"../../utils/loggin.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\n\nconst W_FORMAT_TAG = {\n    PCM: 0x01,\n    ALAW: 0x6\n};\n\n\n/**\n * @param data {IndexedByteArray}\n * @param bytesPerSample {number}\n * @returns {Float32Array}\n */\nfunction readPCM(data, bytesPerSample)\n{\n    const maxSampleValue = Math.pow(2, bytesPerSample * 8 - 1); // Max value for the sample\n    const maxUnsigned = Math.pow(2, bytesPerSample * 8);\n    \n    let normalizationFactor;\n    let isUnsigned = false;\n    \n    if (bytesPerSample === 1)\n    {\n        normalizationFactor = 255; // For 8-bit normalize from 0-255\n        isUnsigned = true;\n    }\n    else\n    {\n        normalizationFactor = maxSampleValue; // For 16-bit normalize from -32,768 to 32,767\n    }\n    const sampleLength = data.length / bytesPerSample;\n    const sampleData = new Float32Array(sampleLength);\n    if (bytesPerSample === 2)\n    {\n        // special optimized case for s16 (most common)\n        const s16 = new Int16Array(data.buffer);\n        for (let i = 0; i < s16.length; i++)\n        {\n            sampleData[i] = s16[i] / 32768;\n        }\n    }\n    else\n    {\n        for (let i = 0; i < sampleData.length; i++)\n        {\n            // read\n            let sample = readLittleEndian(data, bytesPerSample);\n            // turn into signed\n            if (isUnsigned)\n            {\n                // normalize unsigned 8-bit sample\n                sampleData[i] = (sample / normalizationFactor) - 0.5;\n            }\n            else\n            {\n                // normalize signed sample\n                if (sample >= maxSampleValue)\n                {\n                    sample -= maxUnsigned;\n                }\n                sampleData[i] = sample / normalizationFactor;\n            }\n        }\n    }\n    return sampleData;\n}\n\n/**\n * @param data {IndexedByteArray}\n * @param bytesPerSample {number}\n * @returns {Float32Array}\n */\nfunction readALAW(data, bytesPerSample)\n{\n    const sampleLength = data.length / bytesPerSample;\n    const sampleData = new Float32Array(sampleLength);\n    for (let i = 0; i < sampleData.length; i++)\n    {\n        // read\n        const input = readLittleEndian(data, bytesPerSample);\n        \n        // https://en.wikipedia.org/wiki/G.711#A-law\n        // re-toggle toggled bits\n        let sample = input ^ 0x55;\n        \n        // remove sign bit\n        sample &= 0x7F;\n        \n        // extract exponent\n        let exponent = sample >> 4;\n        // extract mantissa\n        let mantissa = sample & 0xF;\n        if (exponent > 0)\n        {\n            mantissa += 16; // add leading '1', if exponent > 0\n        }\n        \n        mantissa = (mantissa << 4) + 0x8;\n        if (exponent > 1)\n        {\n            mantissa = mantissa << (exponent - 1);\n        }\n        \n        const s16sample = input > 127 ? mantissa : -mantissa;\n        \n        // convert to float\n        sampleData[i] = s16sample / 32678;\n    }\n    return sampleData;\n}\n\nexport class DLSSample extends BasicSample\n{\n    /**\n     * in decibels of attenuation, WITHOUT EMU CORRECTION\n     * @type {number}\n     */\n    sampleDbAttenuation;\n    /**\n     * @type {Float32Array}\n     */\n    sampleData;\n    \n    /**\n     * @type {number}\n     */\n    wFormatTag;\n    \n    /**\n     * @type {number}\n     */\n    bytesPerSample;\n    \n    /**\n     * Sample's raw data before decoding it, for faster writing\n     * @type {IndexedByteArray}\n     */\n    rawData;\n    \n    /**\n     * @param name {string}\n     * @param rate {number}\n     * @param pitch {number}\n     * @param pitchCorrection {number}\n     * @param loopStart {number} sample data points\n     * @param loopEnd {number} sample data points\n     * @param sampleDbAttenuation {number} in db\n     * @param dataChunk {RiffChunk}\n     * @param wFormatTag {number}\n     * @param bytesPerSample {number}\n     */\n    constructor(\n        name,\n        rate,\n        pitch,\n        pitchCorrection,\n        loopStart,\n        loopEnd,\n        sampleDbAttenuation,\n        dataChunk,\n        wFormatTag,\n        bytesPerSample\n    )\n    {\n        super(\n            name,\n            rate,\n            pitch,\n            pitchCorrection,\n            sampleTypes.monoSample,\n            loopStart,\n            loopEnd\n        );\n        this.sampleDbAttenuation = sampleDbAttenuation;\n        this.dataOverriden = false;\n        /**\n         * @type {IndexedByteArray}\n         */\n        this.rawData = dataChunk.chunkData;\n        this.wFormatTag = wFormatTag;\n        this.bytesPerSample = bytesPerSample;\n    }\n    \n    getAudioData()\n    {\n        if (!(this.rawData instanceof Uint8Array))\n        {\n            return new Float32Array(0);\n        }\n        if (!this.sampleData)\n        {\n            let sampleData;\n            switch (this.wFormatTag)\n            {\n                default:\n                    SpessaSynthWarn(`Failed to decode sample. Unknown wFormatTag: ${this.wFormatTag}`);\n                    sampleData = new Float32Array(this.rawData.length / this.bytesPerSample);\n                    break;\n                \n                case W_FORMAT_TAG.PCM:\n                    sampleData = readPCM(this.rawData, this.bytesPerSample);\n                    break;\n                \n                case W_FORMAT_TAG.ALAW:\n                    sampleData = readALAW(this.rawData, this.bytesPerSample);\n                    break;\n                \n            }\n            this.setAudioData(sampleData);\n        }\n        return this.sampleData;\n    }\n    \n    /**\n     * @param audioData {Float32Array}\n     */\n    setAudioData(audioData)\n    {\n        super.setAudioData(audioData);\n    }\n    \n    getRawData(allowVorbis)\n    {\n        if (this.dataOverriden || this.isCompressed)\n        {\n            return super.getRawData(allowVorbis);\n        }\n        if (this.wFormatTag === W_FORMAT_TAG.PCM && this.bytesPerSample === 2)\n        {\n            // copy straight away\n            return this.rawData;\n        }\n        return this.encodeS16LE();\n    }\n}", "import { findRIFFListType, readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport {\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo,\n    SpessaSynthWarn\n} from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { readLittleEndian, signedInt16 } from \"../../utils/byte_functions/little_endian.js\";\nimport { DLSSample } from \"./dls_sample.js\";\n\n\n/**\n * @this {DLSSoundFont}\n * @param waveListChunk {RiffChunk}\n */\nexport function readDLSSamples(waveListChunk)\n{\n    SpessaSynthGroupCollapsed(\n        \"%cLoading Wave samples...\",\n        consoleColors.recognized\n    );\n    let sampleID = 0;\n    while (waveListChunk.chunkData.currentIndex < waveListChunk.chunkData.length)\n    {\n        const waveChunk = readRIFFChunk(waveListChunk.chunkData);\n        this.verifyHeader(waveChunk, \"LIST\");\n        this.verifyText(readBytesAsString(waveChunk.chunkData, 4), \"wave\");\n        \n        /**\n         * @type {RiffChunk[]}\n         */\n        const waveChunks = [];\n        while (waveChunk.chunkData.currentIndex < waveChunk.chunkData.length)\n        {\n            waveChunks.push(readRIFFChunk(waveChunk.chunkData));\n        }\n        \n        const fmtChunk = waveChunks.find(c => c.header === \"fmt \");\n        if (!fmtChunk)\n        {\n            throw new Error(\"No fmt chunk in the wave file!\");\n        }\n        // https://github.com/tpn/winsdk-10/blob/9b69fd26ac0c7d0b83d378dba01080e93349c2ed/Include/10.0.14393.0/shared/mmreg.h#L2108\n        const wFormatTag = readLittleEndian(fmtChunk.chunkData, 2);\n        const channelsAmount = readLittleEndian(fmtChunk.chunkData, 2);\n        if (channelsAmount !== 1)\n        {\n            throw new Error(`Only mono samples are supported. Fmt reports ${channelsAmount} channels`);\n        }\n        const sampleRate = readLittleEndian(fmtChunk.chunkData, 4);\n        // skip avg bytes\n        readLittleEndian(fmtChunk.chunkData, 4);\n        // blockAlign\n        readLittleEndian(fmtChunk.chunkData, 2);\n        // it's bits per sample because one channel\n        const wBitsPerSample = readLittleEndian(fmtChunk.chunkData, 2);\n        const bytesPerSample = wBitsPerSample / 8;\n        \n        const dataChunk = waveChunks.find(c => c.header === \"data\");\n        if (!dataChunk)\n        {\n            this.parsingError(\"No data chunk in the WAVE chunk!\");\n        }\n        \n        // read sample name\n        const waveInfo = findRIFFListType(waveChunks, \"INFO\");\n        let sampleName = `Unnamed ${sampleID}`;\n        if (waveInfo)\n        {\n            let infoChunk = readRIFFChunk(waveInfo.chunkData);\n            while (infoChunk.header !== \"INAM\" && waveInfo.chunkData.currentIndex < waveInfo.chunkData.length)\n            {\n                infoChunk = readRIFFChunk(waveInfo.chunkData);\n            }\n            if (infoChunk.header === \"INAM\")\n            {\n                sampleName = readBytesAsString(infoChunk.chunkData, infoChunk.size).trim();\n            }\n        }\n        \n        // correct defaults\n        let sampleKey = 60;\n        let samplePitch = 0;\n        let sampleLoopStart = 0;\n        const sampleLength = dataChunk.size / bytesPerSample;\n        let sampleLoopEnd = sampleLength - 1;\n        let sampleDbAttenuation = 0;\n        \n        // read wsmp\n        const wsmpChunk = waveChunks.find(c => c.header === \"wsmp\");\n        if (wsmpChunk)\n        {\n            // skip cbsize\n            readLittleEndian(wsmpChunk.chunkData, 4);\n            sampleKey = readLittleEndian(wsmpChunk.chunkData, 2);\n            // section 1.14.2: Each relative pitch unit represents 1/65536 cents.\n            // but that doesn't seem true for this one: it's just cents.\n            samplePitch = signedInt16(\n                wsmpChunk.chunkData[wsmpChunk.chunkData.currentIndex++],\n                wsmpChunk.chunkData[wsmpChunk.chunkData.currentIndex++]\n            );\n            \n            // pitch correction: convert hundreds to the root key\n            const samplePitchSemitones = Math.trunc(samplePitch / 100);\n            sampleKey += samplePitchSemitones;\n            samplePitch -= samplePitchSemitones * 100;\n            \n            \n            // gain is applied it manually here (literally multiplying the samples)\n            const gainCorrection = readLittleEndian(wsmpChunk.chunkData, 4);\n            // convert to signed and turn into decibels\n            sampleDbAttenuation = (gainCorrection | 0) / -655360;\n            // no idea about ful options\n            readLittleEndian(wsmpChunk.chunkData, 4);\n            const loopsAmount = readLittleEndian(wsmpChunk.chunkData, 4);\n            if (loopsAmount === 1)\n            {\n                // skip size and type\n                readLittleEndian(wsmpChunk.chunkData, 8);\n                sampleLoopStart = readLittleEndian(wsmpChunk.chunkData, 4);\n                const loopSize = readLittleEndian(wsmpChunk.chunkData, 4);\n                sampleLoopEnd = sampleLoopStart + loopSize;\n            }\n        }\n        else\n        {\n            SpessaSynthWarn(\"No wsmp chunk in wave... using sane defaults.\");\n        }\n        \n        this.samples.push(new DLSSample(\n            sampleName,\n            sampleRate,\n            sampleKey,\n            samplePitch,\n            sampleLoopStart,\n            sampleLoopEnd,\n            sampleDbAttenuation,\n            dataChunk,\n            wFormatTag,\n            bytesPerSample\n        ));\n        \n        \n        sampleID++;\n        SpessaSynthInfo(\n            `%cLoaded sample %c${sampleName}`,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n    }\n    SpessaSynthGroupEnd();\n}", "import { BasicSoundBank } from \"../basic_soundfont/basic_soundbank.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { findRIFFListType, readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { readDLSInstrumentList } from \"./read_instrument_list.js\";\nimport { readDLSInstrument } from \"./read_instrument.js\";\nimport { readLart } from \"./read_lart.js\";\nimport { readDLSSamples } from \"./read_samples.js\";\n\nclass DLSSoundFont extends BasicSoundBank\n{\n    /**\n     * Loads a new DLS (Downloadable sounds) soundfont\n     * @param buffer {ArrayBuffer}\n     */\n    constructor(buffer)\n    {\n        super();\n        this.dataArray = new IndexedByteArray(buffer);\n        SpessaSynthGroup(\"%cParsing DLS...\", consoleColors.info);\n        if (!this.dataArray)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No data provided!\");\n        }\n        \n        // read the main chunk\n        let firstChunk = readRIFFChunk(this.dataArray, false);\n        this.verifyHeader(firstChunk, \"riff\");\n        this.verifyText(readBytesAsString(this.dataArray, 4).toLowerCase(), \"dls \");\n        \n        /**\n         * Read the list\n         * @type {RiffChunk[]}\n         */\n        const chunks = [];\n        while (this.dataArray.currentIndex < this.dataArray.length)\n        {\n            chunks.push(readRIFFChunk(this.dataArray));\n        }\n        \n        // mandatory\n        this.soundFontInfo[\"ifil\"] = \"2.1\"; // always for dls\n        this.soundFontInfo[\"isng\"] = \"E-mu 10K2\";\n        \n        // set some defaults\n        this.soundFontInfo[\"INAM\"] = \"Unnamed DLS\";\n        this.soundFontInfo[\"IENG\"] = \"Unknown\";\n        this.soundFontInfo[\"IPRD\"] = \"SpessaSynth DLS\";\n        this.soundFontInfo[\"ICRD\"] = new Date().toDateString();\n        \n        // read info\n        const infoChunk = findRIFFListType(chunks, \"INFO\");\n        if (infoChunk)\n        {\n            while (infoChunk.chunkData.currentIndex < infoChunk.chunkData.length)\n            {\n                const infoPart = readRIFFChunk(infoChunk.chunkData);\n                this.soundFontInfo[infoPart.header] = readBytesAsString(infoPart.chunkData, infoPart.size);\n            }\n        }\n        this.soundFontInfo[\"ICMT\"] = this.soundFontInfo[\"ICMT\"] || \"(No description)\";\n        if (this.soundFontInfo[\"ISBJ\"])\n        {\n            // merge it\n            this.soundFontInfo[\"ICMT\"] += \"\\n\" + this.soundFontInfo[\"ISBJ\"];\n            delete this.soundFontInfo[\"ISBJ\"];\n        }\n        this.soundFontInfo[\"ICMT\"] += \"\\nConverted from DLS to SF2 with SpessaSynth\";\n        \n        for (const [info, value] of Object.entries(this.soundFontInfo))\n        {\n            SpessaSynthInfo(\n                `%c\"${info}\": %c\"${value}\"`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n        }\n        \n        // read \"colh\"\n        let colhChunk = chunks.find(c => c.header === \"colh\");\n        if (!colhChunk)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No colh chunk!\");\n        }\n        this.instrumentAmount = readLittleEndian(colhChunk.chunkData, 4);\n        SpessaSynthInfo(\n            `%cInstruments amount: %c${this.instrumentAmount}`,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n        \n        // read the wave list\n        let waveListChunk = findRIFFListType(chunks, \"wvpl\");\n        if (!waveListChunk)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No wvpl chunk!\");\n        }\n        this.readDLSSamples(waveListChunk);\n        \n        // read the instrument list\n        let instrumentListChunk = findRIFFListType(chunks, \"lins\");\n        if (!instrumentListChunk)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No lins chunk!\");\n        }\n        this.readDLSInstrumentList(instrumentListChunk);\n        \n        // sort presets\n        this.flush();\n        SpessaSynthInfo(\n            `%cParsing finished! %c\"${this.soundFontInfo[\"INAM\"] || \"UNNAMED\"}\"%c has %c${this.presets.length} %cpresets,\n        %c${this.instruments.length}%c instruments and %c${this.samples.length}%c samples.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        SpessaSynthGroupEnd();\n    }\n    \n    /**\n     * @param chunk {RiffChunk}\n     * @param expected {string}\n     */\n    verifyHeader(chunk, ...expected)\n    {\n        for (const expect of expected)\n        {\n            if (chunk.header.toLowerCase() === expect.toLowerCase())\n            {\n                return;\n            }\n        }\n        SpessaSynthGroupEnd();\n        this.parsingError(`Invalid DLS chunk header! Expected \"${expected.toString()}\" got \"${chunk.header.toLowerCase()}\"`);\n    }\n    \n    /**\n     * @param text {string}\n     * @param expected {string}\n     */\n    verifyText(text, expected)\n    {\n        if (text.toLowerCase() !== expected.toLowerCase())\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`FourCC error: Expected \"${expected.toLowerCase()}\" got \"${text.toLowerCase()}\"`);\n        }\n    }\n    \n    /**\n     * @param error {string}\n     */\n    parsingError(error)\n    {\n        throw new Error(`DLS parse error: ${error} The file may be corrupted.`);\n    }\n    \n    destroySoundBank()\n    {\n        super.destroySoundBank();\n        delete this.dataArray;\n    }\n}\n\nDLSSoundFont.prototype.readDLSInstrumentList = readDLSInstrumentList;\nDLSSoundFont.prototype.readDLSInstrument = readDLSInstrument;\nDLSSoundFont.prototype.readLart = readLart;\nDLSSoundFont.prototype.readDLSSamples = readDLSSamples;\n\nexport { DLSSoundFont };", "import { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { signedInt16 } from \"../../utils/byte_functions/little_endian.js\";\nimport { Generator } from \"../basic_soundfont/generator.js\";\n\n\nexport class ReadGenerator extends Generator\n{\n    /**\n     * Creates a generator\n     * @param dataArray {IndexedByteArray}\n     */\n    constructor(dataArray)\n    {\n        super();\n        // 4 bytes:\n        // type, type, type, value\n        const i = dataArray.currentIndex;\n        /**\n         * @type {generatorTypes|number}\n         */\n        this.generatorType = (dataArray[i + 1] << 8) | dataArray[i];\n        this.generatorValue = signedInt16(dataArray[i + 2], dataArray[i + 3]);\n        dataArray.currentIndex += 4;\n    }\n}\n\n/**\n * Reads the generator read\n * @param generatorChunk {RiffChunk}\n * @returns {Generator[]}\n */\nexport function readGenerators(generatorChunk)\n{\n    let gens = [];\n    while (generatorChunk.chunkData.length > generatorChunk.chunkData.currentIndex)\n    {\n        gens.push(new ReadGenerator(generatorChunk.chunkData));\n    }\n    // remove terminal\n    gens.pop();\n    return gens;\n}", "import { BasicPresetZone } from \"../basic_soundfont/basic_preset_zone.js\";\nimport { Generator } from \"../basic_soundfont/generator.js\";\nimport { Modulator } from \"../basic_soundfont/modulator.js\";\nimport { generatorTypes } from \"../basic_soundfont/generator_types.js\";\n\n/**\n * preset_zones.js\n * purpose: reads preset zones from soundfont and gets their respective samples and generators and modulators\n */\n\nexport class PresetZone extends BasicPresetZone\n{\n    /**\n     * Creates a zone (preset)\n     * @param preset {BasicPreset}\n     */\n    constructor(preset)\n    {\n        super(preset);\n    }\n    \n    /**\n     * grab the instrument\n     * @param instruments {BasicInstrument[]}\n     */\n    getInstrument(instruments)\n    {\n        let instrumentID = this.generators.find(g => g.generatorType === generatorTypes.instrument);\n        if (instrumentID)\n        {\n            this.setInstrument(instruments[instrumentID.generatorValue]);\n        }\n    }\n}\n\n\n/**\n * Reads the given preset zone\n * @param indexes {{mod: number[], gen: number[]}}\n * @param presetGens {Generator[]}\n * @param instruments {BasicInstrument[]}\n * @param presetMods {Modulator[]}\n * @param presets {Preset[]}\n */\nexport function applyPresetZones(indexes, presetGens, presetMods, instruments, presets)\n{\n    const genStartIndexes = indexes.gen;\n    const modStartIndexes = indexes.mod;\n    \n    let modIndex = 0;\n    let genIndex = 0;\n    for (const preset of presets)\n    {\n        for (let i = 0; i < preset.zonesCount; i++)\n        {\n            const gensStart = genStartIndexes[genIndex++];\n            const gensEnd = genStartIndexes[genIndex];\n            const gens = presetGens.slice(gensStart, gensEnd);\n            const modsStart = modStartIndexes[modIndex++];\n            const modsEnd = modStartIndexes[modIndex];\n            const mods = presetMods.slice(modsStart, modsEnd);\n            // check for global zone\n            if (gens.find(g => g.generatorType === generatorTypes.instrument) !== undefined)\n            {\n                // regular zone\n                const zone = preset.createZone();\n                zone.addGenerators(...gens);\n                zone.addModulators(...mods);\n                zone.getInstrument(instruments);\n            }\n            else\n            {\n                // global zone\n                preset.globalZone.addGenerators(...gens);\n                preset.globalZone.addModulators(...mods);\n            }\n        }\n    }\n}", "import { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { BasicPreset } from \"../basic_soundfont/basic_preset.js\";\nimport { PresetZone } from \"./preset_zones.js\";\n\n/**\n * parses soundfont presets, also includes function for getting the generators and samples from midi note and velocity\n */\n\nexport class Preset extends BasicPreset\n{\n    \n    /**\n     * @type {number}\n     */\n    zoneStartIndex;\n    /**\n     * @type {number}\n     */\n    zonesCount = 0;\n    \n    /**\n     * Creates a preset\n     * @param presetChunk {RiffChunk}\n     * @param sf2 {BasicSoundBank}\n     */\n    constructor(presetChunk, sf2)\n    {\n        super(sf2);\n        this.presetName = readBytesAsString(presetChunk.chunkData, 20)\n            .replace(/\\d{3}:\\d{3}/, \"\"); // remove those pesky \"000:001\"\n        \n        this.program = readLittleEndian(presetChunk.chunkData, 2);\n        this.bank = readLittleEndian(presetChunk.chunkData, 2);\n        this.zoneStartIndex = readLittleEndian(presetChunk.chunkData, 2);\n        \n        // read the dword\n        this.library = readLittleEndian(presetChunk.chunkData, 4);\n        this.genre = readLittleEndian(presetChunk.chunkData, 4);\n        this.morphology = readLittleEndian(presetChunk.chunkData, 4);\n    }\n    \n    /**\n     * @returns {PresetZone}\n     */\n    createZone()\n    {\n        const z = new PresetZone(this);\n        this.presetZones.push(z);\n        return z;\n    }\n}\n\n/**\n * Reads the presets\n * @param presetChunk {RiffChunk}\n * @param parent {BasicSoundBank}\n * @returns {Preset[]}\n */\nexport function readPresets(presetChunk, parent)\n{\n    /**\n     * @type {Preset[]}\n     */\n    let presets = [];\n    while (presetChunk.chunkData.length > presetChunk.chunkData.currentIndex)\n    {\n        let preset = new Preset(presetChunk, parent);\n        if (presets.length > 0)\n        {\n            const previous = presets[presets.length - 1];\n            previous.zonesCount = preset.zoneStartIndex - previous.zoneStartIndex;\n        }\n        presets.push(preset);\n    }\n    // remove EOP\n    presets.pop();\n    return presets;\n}", "/**\n * instrument_zones.js\n * purpose: reads instrument zones from soundfont and gets their respective samples and generators and modulators\n */\nimport { BasicInstrumentZone } from \"../basic_soundfont/basic_instrument_zone.js\";\nimport { generatorTypes } from \"../basic_soundfont/generator_types.js\";\n\nexport class InstrumentZone extends BasicInstrumentZone\n{\n    /**\n     * Creates a zone (instrument)\n     * @param inst {Instrument}\n     */\n    constructor(inst)\n    {\n        super(inst);\n    }\n    \n    /**\n     * Loads the zone's sample\n     * @param samples {BasicSample[]}\n     */\n    getSample(samples)\n    {\n        let sampleID = this.generators.find(g => g.generatorType === generatorTypes.sampleID);\n        if (sampleID)\n        {\n            this.setSample(samples[sampleID.generatorValue]);\n        }\n    }\n}\n\n/**\n * Reads the given instrument zone\n * @param indexes {{mod: number[], gen: number[]}}\n * @param instrumentGenerators {Generator[]}\n * @param instrumentModulators {Modulator[]}\n * @param samples {BasicSample[]}\n * @param instruments {Instrument[]}\n */\nexport function applyInstrumentZones(indexes, instrumentGenerators, instrumentModulators, samples, instruments)\n{\n    const genStartIndexes = indexes.gen;\n    const modStartIndexes = indexes.mod;\n    \n    let modIndex = 0;\n    let genIndex = 0;\n    for (const instrument of instruments)\n    {\n        for (let i = 0; i < instrument.zonesCount; i++)\n        {\n            const gensStart = genStartIndexes[genIndex++];\n            const gensEnd = genStartIndexes[genIndex];\n            const gens = instrumentGenerators.slice(gensStart, gensEnd);\n            const modsStart = modStartIndexes[modIndex++];\n            const modsEnd = modStartIndexes[modIndex];\n            const mods = instrumentModulators.slice(modsStart, modsEnd);\n            // check for global zone\n            if (gens.find(g => g.generatorType === generatorTypes.sampleID))\n            {\n                // regular zone\n                const zone = instrument.createZone();\n                zone.addGenerators(...gens);\n                zone.addModulators(...mods);\n                zone.getSample(samples);\n            }\n            else\n            {\n                // global zone\n                instrument.globalZone.addGenerators(...gens);\n                instrument.globalZone.addModulators(...mods);\n            }\n        }\n    }\n}", "import { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { BasicInstrument } from \"../basic_soundfont/basic_instrument.js\";\n\nimport { InstrumentZone } from \"./instrument_zones.js\";\n\n/**\n * instrument.js\n * purpose: parses soundfont instrument and stores them as a class\n */\n\nexport class Instrument extends BasicInstrument\n{\n    /**\n     * @type {number}\n     */\n    zoneStartIndex;\n    /**\n     * @type {number}\n     */\n    zonesCount = 0;\n    \n    /**\n     * Creates an instrument\n     * @param instrumentChunk {RiffChunk}\n     */\n    constructor(instrumentChunk)\n    {\n        super();\n        this.instrumentName = readBytesAsString(instrumentChunk.chunkData, 20);\n        this.zoneStartIndex = readLittleEndian(instrumentChunk.chunkData, 2);\n    }\n    \n    /**\n     * @returns {InstrumentZone}\n     */\n    createZone()\n    {\n        const z = new InstrumentZone(this);\n        this.instrumentZones.push(z);\n        return z;\n    }\n}\n\n/**\n * Reads the instruments\n * @param instrumentChunk {RiffChunk}\n * @returns {Instrument[]}\n */\nexport function readInstruments(instrumentChunk)\n{\n    /**\n     * @type {Instrument[]}\n     */\n    let instruments = [];\n    while (instrumentChunk.chunkData.length > instrumentChunk.chunkData.currentIndex)\n    {\n        let instrument = new Instrument(instrumentChunk);\n        \n        if (instruments.length > 0)\n        {\n            const previous = instruments[instruments.length - 1];\n            previous.zonesCount = instrument.zoneStartIndex - previous.zoneStartIndex;\n        }\n        instruments.push(instrument);\n    }\n    // remove EOI\n    instruments.pop();\n    return instruments;\n}", "import { readLittleEndian, signedInt16 } from \"../../utils/byte_functions/little_endian.js\";\nimport { DecodedModulator, Modulator } from \"../basic_soundfont/modulator.js\";\n\n/**\n * Reads the modulator read\n * @param modulatorChunk {RiffChunk}\n * @returns {Modulator[]}\n */\nexport function readModulators(modulatorChunk)\n{\n    let mods = [];\n    while (modulatorChunk.chunkData.length > modulatorChunk.chunkData.currentIndex)\n    {\n        const dataArray = modulatorChunk.chunkData;\n        const sourceEnum = readLittleEndian(dataArray, 2);\n        const destination = readLittleEndian(dataArray, 2);\n        const amount = signedInt16(dataArray[dataArray.currentIndex++], dataArray[dataArray.currentIndex++]);\n        const secondarySourceEnum = readLittleEndian(dataArray, 2);\n        const transformType = readLittleEndian(dataArray, 2);\n        mods.push(new DecodedModulator(sourceEnum, secondarySourceEnum, destination, amount, transformType));\n    }\n    // remove terminal\n    mods.pop();\n    return mods;\n}", "import { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\n\n/**\n *\n * @param zonesChunk {RiffChunk} both pbag and ibag work\n * @returns {{mod: number[], gen: number[]}}\n */\nexport function readZoneIndexes(zonesChunk)\n{\n    /**\n     * @type {number[]}\n     */\n    const modStartIndexes = [];\n    /**\n     * @type {number[]}\n     */\n    const genStartIndexes = [];\n    \n    while (zonesChunk.chunkData.length > zonesChunk.chunkData.currentIndex)\n    {\n        genStartIndexes.push(readLittleEndian(zonesChunk.chunkData, 2));\n        modStartIndexes.push(readLittleEndian(zonesChunk.chunkData, 2));\n    }\n    return {\n        mod: modStartIndexes,\n        gen: genStartIndexes\n    };\n}", "import { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { readSamples } from \"./samples.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { readGenerators } from \"./generators.js\";\nimport { applyPresetZones } from \"./preset_zones.js\";\nimport { readPresets } from \"./presets.js\";\nimport { readInstruments } from \"./instruments.js\";\nimport { readModulators } from \"./modulators.js\";\nimport { readRIFFChunk, RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { stbvorbis } from \"../../externals/stbvorbis_sync/stbvorbis_sync.min.js\";\nimport { BasicSoundBank } from \"../basic_soundfont/basic_soundbank.js\";\nimport { Generator } from \"../basic_soundfont/generator.js\";\nimport { Modulator } from \"../basic_soundfont/modulator.js\";\nimport { applyInstrumentZones, InstrumentZone } from \"./instrument_zones.js\";\nimport { readZoneIndexes } from \"./zones.js\";\n\n/**\n * soundfont.js\n * purpose: parses a soundfont2 file\n */\n\nexport class SoundFont2 extends BasicSoundBank\n{\n    /**\n     * @type {Instrument[]}\n     */\n    instruments = [];\n    \n    /**\n     * @type {Preset[]}\n     */\n    presets = [];\n    \n    /**\n     * Initializes a new SoundFont2 Parser and parses the given data array\n     * @param arrayBuffer {ArrayBuffer}\n     * @param warnDeprecated {boolean}\n     */\n    constructor(arrayBuffer, warnDeprecated = true)\n    {\n        super();\n        if (warnDeprecated)\n        {\n            console.warn(\"Using the constructor directly is deprecated. Use loadSoundFont instead.\");\n        }\n        const mainFileArray = new IndexedByteArray(arrayBuffer);\n        SpessaSynthGroup(\"%cParsing SoundFont...\", consoleColors.info);\n        if (!mainFileArray)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No data provided!\");\n        }\n        \n        // read the main chunk\n        let firstChunk = readRIFFChunk(mainFileArray, false);\n        this.verifyHeader(firstChunk, \"riff\");\n        \n        const type = readBytesAsString(mainFileArray, 4).toLowerCase();\n        if (type !== \"sfbk\" && type !== \"sfpk\")\n        {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(`Invalid soundFont! Expected \"sfbk\" or \"sfpk\" got \"${type}\"`);\n        }\n        /*\n        Some SF2Pack description:\n        this is essentially sf2, but the entire smpl chunk is compressed (we only support Ogg Vorbis here)\n        and the only other difference is that the main chunk isn't \"sfbk\" but rather \"sfpk\"\n         */\n        const isSF2Pack = type === \"sfpk\";\n        \n        // INFO\n        let infoChunk = readRIFFChunk(mainFileArray);\n        this.verifyHeader(infoChunk, \"list\");\n        const infoString = readBytesAsString(infoChunk.chunkData, 4);\n        if (infoString !== \"INFO\")\n        {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(`Invalid soundFont! Expected \"INFO\" or \"${infoString}\"`);\n        }\n        \n        /**\n         * @type {RiffChunk|undefined}\n         */\n        let xdtaChunk = undefined;\n        \n        \n        while (infoChunk.chunkData.length > infoChunk.chunkData.currentIndex)\n        {\n            let chunk = readRIFFChunk(infoChunk.chunkData);\n            let text;\n            // special cases\n            switch (chunk.header.toLowerCase())\n            {\n                case  \"ifil\":\n                case \"iver\":\n                    text = `${readLittleEndian(chunk.chunkData, 2)}.${readLittleEndian(chunk.chunkData, 2)}`;\n                    this.soundFontInfo[chunk.header] = text;\n                    break;\n                \n                case \"icmt\":\n                    text = readBytesAsString(chunk.chunkData, chunk.chunkData.length, false);\n                    this.soundFontInfo[chunk.header] = text;\n                    break;\n                \n                // dmod: default modulators\n                case \"dmod\":\n                    const newModulators = readModulators(chunk);\n                    text = `Modulators: ${newModulators.length}`;\n                    \n                    // override default modulators\n                    this.defaultModulators = newModulators;\n                    this.customDefaultModulators = true;\n                    this.soundFontInfo[chunk.header] = text;\n                    break;\n                \n                case \"list\":\n                    // possible xdta\n                    const listType = readBytesAsString(chunk.chunkData, 4);\n                    if (listType === \"xdta\")\n                    {\n                        SpessaSynthInfo(\"%cExtended SF2 found!\", consoleColors.recognized);\n                        xdtaChunk = chunk;\n                    }\n                    break;\n                \n                default:\n                    text = readBytesAsString(chunk.chunkData, chunk.chunkData.length);\n                    this.soundFontInfo[chunk.header] = text;\n            }\n            \n            SpessaSynthInfo(\n                `%c\"${chunk.header}\": %c\"${text}\"`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n        }\n        // https://github.com/spessasus/soundfont-proposals/blob/main/extended_limits.md\n        const isExtended = xdtaChunk !== undefined;\n        /**\n         * @type {{\n         *     phdr: RiffChunk,\n         *     pbag: RiffChunk,\n         *     pmod: RiffChunk,\n         *     pgen: RiffChunk,\n         *     inst: RiffChunk,\n         *     ibag: RiffChunk,\n         *     imod: RiffChunk,\n         *     igen: RiffChunk,\n         *     shdr: RiffChunk,\n         * }}\n         */\n        let xChunks = {};\n        if (isExtended)\n        {\n            // read the hydra chunks\n            xChunks.phdr = readRIFFChunk(xdtaChunk.chunkData);\n            xChunks.pbag = readRIFFChunk(xdtaChunk.chunkData);\n            xChunks.pmod = readRIFFChunk(xdtaChunk.chunkData);\n            xChunks.pgen = readRIFFChunk(xdtaChunk.chunkData);\n            xChunks.inst = readRIFFChunk(xdtaChunk.chunkData);\n            xChunks.ibag = readRIFFChunk(xdtaChunk.chunkData);\n            xChunks.imod = readRIFFChunk(xdtaChunk.chunkData);\n            xChunks.igen = readRIFFChunk(xdtaChunk.chunkData);\n            xChunks.shdr = readRIFFChunk(xdtaChunk.chunkData);\n        }\n        \n        // SDTA\n        const sdtaChunk = readRIFFChunk(mainFileArray, false);\n        this.verifyHeader(sdtaChunk, \"list\");\n        this.verifyText(readBytesAsString(mainFileArray, 4), \"sdta\");\n        \n        // smpl\n        SpessaSynthInfo(\"%cVerifying smpl chunk...\", consoleColors.warn);\n        let sampleDataChunk = readRIFFChunk(mainFileArray, false);\n        this.verifyHeader(sampleDataChunk, \"smpl\");\n        /**\n         * @type {IndexedByteArray|Float32Array}\n         */\n        let sampleData;\n        // SF2Pack: the entire data is compressed\n        if (isSF2Pack)\n        {\n            SpessaSynthInfo(\n                \"%cSF2Pack detected, attempting to decode the smpl chunk...\",\n                consoleColors.info\n            );\n            try\n            {\n                /**\n                 * @type {Float32Array}\n                 */\n                sampleData = stbvorbis.decode(mainFileArray.buffer.slice(\n                    mainFileArray.currentIndex,\n                    mainFileArray.currentIndex + sdtaChunk.size - 12\n                )).data[0];\n            }\n            catch (e)\n            {\n                SpessaSynthGroupEnd();\n                throw new Error(`SF2Pack Ogg Vorbis decode error: ${e}`);\n            }\n            SpessaSynthInfo(\n                `%cDecoded the smpl chunk! Length: %c${sampleData.length}`,\n                consoleColors.info,\n                consoleColors.value\n            );\n        }\n        else\n        {\n            /**\n             * @type {IndexedByteArray}\n             */\n            sampleData = mainFileArray;\n            this.sampleDataStartIndex = mainFileArray.currentIndex;\n        }\n        \n        SpessaSynthInfo(\n            `%cSkipping sample chunk, length: %c${sdtaChunk.size - 12}`,\n            consoleColors.info,\n            consoleColors.value\n        );\n        mainFileArray.currentIndex += sdtaChunk.size - 12;\n        \n        // PDTA\n        SpessaSynthInfo(\"%cLoading preset data chunk...\", consoleColors.warn);\n        let presetChunk = readRIFFChunk(mainFileArray);\n        this.verifyHeader(presetChunk, \"list\");\n        readBytesAsString(presetChunk.chunkData, 4);\n        \n        // read the hydra chunks\n        const phdrChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(phdrChunk, \"phdr\");\n        \n        const pbagChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(pbagChunk, \"pbag\");\n        \n        const pmodChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(pmodChunk, \"pmod\");\n        \n        const pgenChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(pgenChunk, \"pgen\");\n        \n        const instChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(instChunk, \"inst\");\n        \n        const ibagChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(ibagChunk, \"ibag\");\n        \n        const imodChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(imodChunk, \"imod\");\n        \n        const igenChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(igenChunk, \"igen\");\n        \n        const shdrChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(shdrChunk, \"shdr\");\n        \n        /**\n         * read all the samples\n         * (the current index points to start of the smpl read)\n         */\n        mainFileArray.currentIndex = this.sampleDataStartIndex;\n        const samples = readSamples(shdrChunk, sampleData, !isExtended);\n        \n        if (isExtended)\n        {\n            // apply extensions to samples\n            const xSamples = readSamples(xChunks.shdr, new Float32Array(1), false);\n            if (xSamples.length === samples.length)\n            {\n                samples.forEach((s, i) =>\n                {\n                    s.sampleName += xSamples[i].sampleName;\n                    s.linkedSampleIndex |= xSamples[i].linkedSampleIndex << 16;\n                });\n            }\n            \n        }\n        // trim names\n        samples.forEach(s => s.sampleName = s.sampleName.trim());\n        this.samples.push(...samples);\n        \n        /**\n         * read all the instrument generators\n         * @type {Generator[]}\n         */\n        let instrumentGenerators = readGenerators(igenChunk);\n        \n        /**\n         * read all the instrument modulators\n         * @type {Modulator[]}\n         */\n        let instrumentModulators = readModulators(imodChunk);\n        \n        const instruments = readInstruments(instChunk);\n        \n        if (isExtended)\n        {\n            // apply extensions to instruments\n            const xInst = readInstruments(xChunks.inst);\n            if (xInst.length === instruments.length)\n            {\n                instruments.forEach((inst, i) =>\n                {\n                    inst.instrumentName += xInst[i].instrumentName;\n                    inst.zoneStartIndex |= xInst[i].zoneStartIndex;\n                });\n                // adjust zone counts\n                instruments.forEach((inst, i) =>\n                {\n                    if (i < instruments.length - 1)\n                    {\n                        inst.zonesCount = instruments[i + 1].zoneStartIndex - inst.zoneStartIndex;\n                    }\n                });\n            }\n            \n        }\n        // trim names\n        instruments.forEach(i => i.instrumentName = i.instrumentName.trim());\n        this.instruments.push(...instruments);\n        \n        const ibagIndexes = readZoneIndexes(ibagChunk);\n        \n        if (isExtended)\n        {\n            const extraIndexes = readZoneIndexes(xChunks.ibag);\n            for (let i = 0; i < ibagIndexes.mod.length; i++)\n            {\n                ibagIndexes.mod[i] |= extraIndexes.mod[i] << 16;\n            }\n            for (let i = 0; i < ibagIndexes.gen.length; i++)\n            {\n                ibagIndexes.gen[i] |= extraIndexes.gen[i] << 16;\n            }\n        }\n        \n        /**\n         * read all the instrument zones (and apply them)\n         * @type {InstrumentZone[]}\n         */\n        applyInstrumentZones(\n            ibagIndexes,\n            instrumentGenerators,\n            instrumentModulators,\n            this.samples,\n            this.instruments\n        );\n        \n        /**\n         * read all the preset generators\n         * @type {Generator[]}\n         */\n        let presetGenerators = readGenerators(pgenChunk);\n        \n        /**\n         * Read all the preset modulatorrs\n         * @type {Modulator[]}\n         */\n        let presetModulators = readModulators(pmodChunk);\n        \n        const presets = readPresets(phdrChunk, this);\n        \n        if (isExtended)\n        {\n            // apply extensions to presets\n            const xPreset = readPresets(xChunks.phdr, this);\n            if (xPreset.length === presets.length)\n            {\n                presets.forEach((pres, i) =>\n                {\n                    pres.presetName += xPreset[i].presetName;\n                    pres.zoneStartIndex |= xPreset[i].zoneStartIndex;\n                });\n                // adjust zone counts\n                presets.forEach((preset, i) =>\n                {\n                    if (i < presets.length - 1)\n                    {\n                        preset.zonesCount = presets[i + 1].zoneStartIndex - preset.zoneStartIndex;\n                    }\n                });\n            }\n            \n        }\n        \n        // trim names\n        presets.forEach(p => p.presetName === p.presetName.trim());\n        this.addPresets(...presets);\n        \n        const pbagIndexes = readZoneIndexes(pbagChunk);\n        \n        if (isExtended)\n        {\n            const extraIndexes = readZoneIndexes(xChunks.pbag);\n            for (let i = 0; i < pbagIndexes.mod.length; i++)\n            {\n                pbagIndexes.mod[i] |= extraIndexes.mod[i] << 16;\n            }\n            for (let i = 0; i < pbagIndexes.gen.length; i++)\n            {\n                pbagIndexes.gen[i] |= extraIndexes.gen[i] << 16;\n            }\n        }\n        \n        applyPresetZones(pbagIndexes, presetGenerators, presetModulators, this.instruments, this.presets);\n        this.flush();\n        SpessaSynthInfo(\n            `%cParsing finished! %c\"${this.soundFontInfo[\"INAM\"]}\"%c has %c${this.presets.length} %cpresets,\n        %c${this.instruments.length}%c instruments and %c${this.samples.length}%c samples.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        SpessaSynthGroupEnd();\n    }\n    \n    /**\n     * @param chunk {RiffChunk}\n     * @param expected {string}\n     */\n    verifyHeader(chunk, expected)\n    {\n        if (chunk.header.toLowerCase() !== expected.toLowerCase())\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`Invalid chunk header! Expected \"${expected.toLowerCase()}\" got \"${chunk.header.toLowerCase()}\"`);\n        }\n    }\n    \n    /**\n     * @param text {string}\n     * @param expected {string}\n     */\n    verifyText(text, expected)\n    {\n        if (text.toLowerCase() !== expected.toLowerCase())\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`Invalid FourCC: Expected \"${expected.toLowerCase()}\" got \"${text.toLowerCase()}\"\\``);\n        }\n    }\n}", "import { IndexedByteArray } from \"../utils/indexed_array.js\";\nimport { readBytesAsString } from \"../utils/byte_functions/string.js\";\nimport { DLSSoundFont } from \"./dls/dls_soundfont.js\";\nimport { SoundFont2 } from \"./read_sf2/soundfont.js\";\n\n/**\n * Loads a soundfont or dls file\n * @param buffer {ArrayBuffer} the binary file to load\n * @returns {BasicSoundBank}\n */\nexport function loadSoundFont(buffer)\n{\n    const check = buffer.slice(8, 12);\n    const a = new IndexedByteArray(check);\n    const id = readBytesAsString(a, 4, false).toLowerCase();\n    if (id === \"dls \")\n    {\n        return new DLSSoundFont(buffer);\n    }\n    return new SoundFont2(buffer, false);\n}", "import { loadSoundFont } from \"../../../../soundfont/load_soundfont.js\";\nimport { SpessaSynthInfo } from \"../../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../../utils/other.js\";\nimport { EMBEDDED_SOUND_BANK_ID } from \"../../../synth_constants.js\";\n\n/**\n * @this {SpessaSynthProcessor}\n */\nexport function clearEmbeddedBank()\n{\n    if (this.soundfontManager.soundfontList.some(s => s.id === EMBEDDED_SOUND_BANK_ID))\n    {\n        this.soundfontManager.deleteSoundFont(EMBEDDED_SOUND_BANK_ID);\n    }\n}\n\n/**\n * Sets the embedded (RMI soundfont)\n * @param font {ArrayBuffer}\n * @param offset {number}\n * @this {SpessaSynthProcessor}\n */\nexport function setEmbeddedSoundFont(font, offset)\n{\n    // the embedded bank is set as the first bank in the manager,\n    // with a special ID that does not clear when reloadManager is performed.\n    const loadedFont = loadSoundFont(font);\n    this.soundfontManager.addNewSoundFont(loadedFont, EMBEDDED_SOUND_BANK_ID, offset);\n    // rearrange so the embedded is first (most important as it overrides all others)\n    const order = this.soundfontManager.getCurrentSoundFontOrder();\n    order.pop();\n    order.unshift(EMBEDDED_SOUND_BANK_ID);\n    this.soundfontManager.rearrangeSoundFonts(order);\n    \n    \n    // apply snapshot again if applicable\n    if (this._snapshot !== undefined)\n    {\n        this.applySynthesizerSnapshot(this._snapshot);\n    }\n    SpessaSynthInfo(`%cEmbedded sound bank set at offset %c${offset}`, consoleColors.recognized, consoleColors.value);\n}", "/**\n * @this {SpessaSynthProcessor}\n */\nexport function updatePresetList()\n{\n    /**\n     * @type {{bank: number, presetName: string, program: number}[]}\n     */\n    const mainFont = this.soundfontManager.getPresetList();\n    this.clearCache();\n    this.callEvent(\"presetlistchange\", mainFont);\n    this.getDefaultPresets();\n    // unlock presets\n    this.midiAudioChannels.forEach(c =>\n    {\n        c.setPresetLock(false);\n    });\n    this.resetAllControllers(false);\n}", "/**\n * Transposes all channels by given amount of semitones\n * @this {SpessaSynthProcessor}\n * @param semitones {number} Can be float\n * @param force {boolean} defaults to false, if true transposes the channel even if it's a drum channel\n */\nexport function transposeAllChannels(semitones, force = false)\n{\n    this.transposition = 0;\n    for (let i = 0; i < this.midiAudioChannels.length; i++)\n    {\n        this.midiAudioChannels[i].transposeChannel(semitones, force);\n    }\n    this.transposition = semitones;\n}", "import { customControllers } from \"../../engine_components/controller_tables.js\";\n\n/**\n * Sets the synth's primary tuning\n * @this {SpessaSynthProcessor}\n * @param cents {number}\n */\nexport function setMasterTuning(cents)\n{\n    cents = Math.round(cents);\n    for (let i = 0; i < this.midiAudioChannels.length; i++)\n    {\n        this.midiAudioChannels[i].setCustomController(customControllers.masterTuning, cents);\n    }\n}", "/**\n * Represents a snapshot of a single channel's state in the synthesizer.\n */\nexport class ChannelSnapshot\n{\n    /**\n     * The channel's MIDI program number.\n     * @type {number}\n     */\n    program;\n    \n    /**\n     * The channel's bank number.\n     * @type {number}\n     */\n    bank;\n    \n    /**\n     * If the bank is LSB. For restoring.\n     * @type {boolean}\n     */\n    isBankLSB;\n    \n    /**\n     * The name of the patch currently loaded in the channel.\n     * @type {string}\n     */\n    patchName;\n    \n    /**\n     * Indicates whether the channel's program change is disabled.\n     * @type {boolean}\n     */\n    lockPreset;\n    \n    /**\n     * Indicates the MIDI system when the preset was locked\n     * @type {SynthSystem}\n     */\n    lockedSystem;\n    \n    /**\n     * The array of all MIDI controllers (in 14-bit values) with the modulator sources at the end.\n     * @type {Int16Array}\n     */\n    midiControllers;\n    \n    /**\n     * An array of booleans, indicating if the controller with a current index is locked.\n     * @type {boolean[]}\n     */\n    lockedControllers;\n    \n    /**\n     * Array of custom (not SF2) control values such as RPN pitch tuning, transpose, modulation depth, etc.\n     * @type {Float32Array}\n     */\n    customControllers;\n    \n    /**\n     * Indicates whether the channel vibrato is locked.\n     * @type {boolean}\n     */\n    lockVibrato;\n    \n    /**\n     * The channel's vibrato settings.\n     * @type {Object}\n     * @property {number} depth - Vibrato depth, in gain.\n     * @property {number} delay - Vibrato delay from note on in seconds.\n     * @property {number} rate - Vibrato rate in Hz.\n     */\n    channelVibrato;\n    \n    /**\n     * Key shift for the channel.\n     * @type {number}\n     */\n    channelTransposeKeyShift;\n    \n    /**\n     * The channel's octave tuning in cents.\n     * @type {Int8Array}\n     */\n    channelOctaveTuning;\n    \n    /**\n     * Indicates whether the channel is muted.\n     * @type {boolean}\n     */\n    isMuted;\n    \n    /**\n     * Overrides velocity if greater than 0, otherwise disabled.\n     * @type {number}\n     */\n    velocityOverride;\n    \n    /**\n     * Indicates whether the channel is a drum channel.\n     * @type {boolean}\n     */\n    drumChannel;\n    \n    /**\n     * Creates a snapshot of a single channel's state in the synthesizer.\n     * @param spessaSynthProcessor {SpessaSynthProcessor}\n     * @param channelNumber {number}\n     * @returns {ChannelSnapshot}\n     */\n    static getChannelSnapshot(spessaSynthProcessor, channelNumber)\n    {\n        const channelObject = spessaSynthProcessor.midiAudioChannels[channelNumber];\n        const channelSnapshot = new ChannelSnapshot();\n        // program data\n        channelSnapshot.program = channelObject.preset.program;\n        channelSnapshot.bank = channelObject.getBankSelect();\n        channelSnapshot.isBankLSB = channelSnapshot.bank !== channelObject.bank;\n        channelSnapshot.lockPreset = channelObject.lockPreset;\n        channelSnapshot.lockedSystem = channelObject.lockedSystem;\n        channelSnapshot.patchName = channelObject.preset.presetName;\n        \n        // controller data\n        channelSnapshot.midiControllers = channelObject.midiControllers;\n        channelSnapshot.lockedControllers = channelObject.lockedControllers;\n        channelSnapshot.customControllers = channelObject.customControllers;\n        \n        // vibrato data\n        channelSnapshot.channelVibrato = channelObject.channelVibrato;\n        channelSnapshot.lockVibrato = channelObject.lockGSNRPNParams;\n        \n        // tuning and transpose data\n        channelSnapshot.channelTransposeKeyShift = channelObject.channelTransposeKeyShift;\n        channelSnapshot.channelOctaveTuning = channelObject.channelOctaveTuning;\n        \n        // other data\n        channelSnapshot.isMuted = channelObject.isMuted;\n        channelSnapshot.velocityOverride = channelObject.velocityOverride;\n        channelSnapshot.drumChannel = channelObject.drumChannel;\n        return channelSnapshot;\n    }\n    \n    /**\n     * Applies the snapshot to the specified channel.\n     * @param spessaSynthProcessor {SpessaSynthProcessor}\n     * @param channelNumber {number}\n     * @param channelSnapshot {ChannelSnapshot}\n     */\n    static applyChannelSnapshot(spessaSynthProcessor, channelNumber, channelSnapshot)\n    {\n        const channelObject = spessaSynthProcessor.midiAudioChannels[channelNumber];\n        channelObject.muteChannel(channelSnapshot.isMuted);\n        channelObject.setDrums(channelSnapshot.drumChannel);\n        \n        // restore controllers\n        channelObject.midiControllers = channelSnapshot.midiControllers;\n        channelObject.lockedControllers = channelSnapshot.lockedControllers;\n        channelObject.customControllers = channelSnapshot.customControllers;\n        channelObject.updateChannelTuning();\n        \n        // restore vibrato and transpose\n        channelObject.channelVibrato = channelSnapshot.channelVibrato;\n        channelObject.lockGSNRPNParams = channelSnapshot.lockVibrato;\n        channelObject.channelTransposeKeyShift = channelSnapshot.channelTransposeKeyShift;\n        channelObject.channelOctaveTuning = channelSnapshot.channelOctaveTuning;\n        channelObject.velocityOverride = channelSnapshot.velocityOverride;\n        \n        // restore preset and lock\n        channelObject.setPresetLock(false);\n        channelObject.setBankSelect(channelSnapshot.bank, channelSnapshot.isBankLSB);\n        channelObject.programChange(channelSnapshot.program);\n        channelObject.setPresetLock(channelSnapshot.lockPreset);\n        channelObject.lockedSystem = channelSnapshot.lockedSystem;\n    }\n}", "import { SpessaSynthInfo } from \"../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\nimport { ChannelSnapshot } from \"./channel_snapshot.js\";\nimport { masterParameterType } from \"../engine_methods/controller_control/master_parameters.js\";\n\n/**\n * Represents a snapshot of the synthesizer's state.\n */\nexport class SynthesizerSnapshot\n{\n    /**\n     * The individual channel snapshots.\n     * @type {ChannelSnapshot[]}\n     */\n    channelSnapshots;\n    \n    /**\n     * Key modifiers.\n     * @type {KeyModifier[][]}\n     */\n    keyMappings;\n    \n    /**\n     * Main synth volume (set by MIDI), from 0 to 1.\n     * @type {number}\n     */\n    mainVolume;\n    \n    /**\n     * Master stereo panning, from -1 to 1.\n     * @type {number}\n     */\n    pan;\n    \n    /**\n     * The synth's interpolation type.\n     * @type {interpolationTypes}\n     */\n    interpolation;\n    \n    /**\n     * The synth's system. Values can be \"gs\", \"gm\", \"gm2\" or \"xg\".\n     * @type {SynthSystem}\n     */\n    system;\n    \n    /**\n     * The current synth transposition in semitones. Can be a float.\n     * @type {number}\n     */\n    transposition;\n    \n    \n    /**\n     * Creates a snapshot of the synthesizer's state.\n     * @param spessaSynthProcessor {SpessaSynthProcessor}\n     * @returns {SynthesizerSnapshot}\n     */\n    static createSynthesizerSnapshot(spessaSynthProcessor)\n    {\n        const snapshot = new SynthesizerSnapshot();\n        // channel snapshots\n        snapshot.channelSnapshots =\n            spessaSynthProcessor.midiAudioChannels.map((_, i) =>\n                ChannelSnapshot.getChannelSnapshot(spessaSynthProcessor, i));\n        \n        // key mappings\n        snapshot.keyMappings = spessaSynthProcessor.keyModifierManager.getMappings();\n        // pan and volume\n        snapshot.mainVolume = spessaSynthProcessor.midiVolume;\n        snapshot.pan = spessaSynthProcessor.pan;\n        \n        // others\n        snapshot.system = spessaSynthProcessor.system;\n        snapshot.interpolation = spessaSynthProcessor.interpolationType;\n        snapshot.transposition = spessaSynthProcessor.transposition;\n        \n        // effect config is stored on the main thread, leave it empty\n        snapshot.effectsConfig = {};\n        return snapshot;\n        \n    }\n    \n    /**\n     * Applies the snapshot to the synthesizer.\n     * @param spessaSynthProcessor {SpessaSynthProcessor}\n     * @param snapshot {SynthesizerSnapshot}\n     */\n    static applySnapshot(spessaSynthProcessor, snapshot)\n    {\n        // restore system\n        spessaSynthProcessor.setSystem(snapshot.system);\n        \n        // restore pan and volume\n        spessaSynthProcessor.setMasterParameter(masterParameterType.mainVolume, snapshot.mainVolume);\n        spessaSynthProcessor.setMasterParameter(masterParameterType.masterPan, snapshot.pan);\n        spessaSynthProcessor.transposeAllChannels(snapshot.transposition);\n        spessaSynthProcessor.interpolationType = snapshot.interpolation;\n        spessaSynthProcessor.keyModifierManager.setMappings(snapshot.keyMappings);\n        \n        // add channels if more needed\n        while (spessaSynthProcessor.midiAudioChannels.length < snapshot.channelSnapshots.length)\n        {\n            spessaSynthProcessor.createMidiChannel();\n        }\n        \n        // restore channels\n        snapshot.channelSnapshots.forEach((channelSnapshot, index) =>\n        {\n            ChannelSnapshot.applyChannelSnapshot(spessaSynthProcessor, index, channelSnapshot);\n        });\n        \n        SpessaSynthInfo(\"%cFinished restoring controllers!\", consoleColors.info);\n    }\n}\n\n", "import { SpessaSynthInfo } from \"../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\nimport { SynthesizerSnapshot } from \"./synthesizer_snapshot.js\";\n\n/**\n * Applies the snapshot to the synth\n * @param snapshot {SynthesizerSnapshot}\n * @this {SpessaSynthProcessor}\n */\nexport function applySynthesizerSnapshot(snapshot)\n{\n    this._snapshot = snapshot;\n    SynthesizerSnapshot.applySnapshot(this, snapshot);\n    SpessaSynthInfo(\"%cFinished applying snapshot!\", consoleColors.info);\n    this.resetAllControllers();\n}", "/**\n * lfo.js\n * purpose: low frequency triangel oscillator\n */\n\n/**\n * Calculates a triangular wave value for the given time\n * @param startTime {number} seconds\n * @param frequency {number} Hz\n * @param currentTime {number} seconds\n * @return {number} the value from -1 to 1\n */\nexport function getLFOValue(startTime, frequency, currentTime)\n{\n    if (currentTime < startTime)\n    {\n        return 0;\n    }\n    \n    const xVal = (currentTime - startTime) / (1 / frequency) + 0.25;\n    // offset by -0.25, otherwise we start at -1 and can have unexpected jump in pitch or low-pass\n    // (happened with Synth Strings 2)\n    \n    // triangle, not sine\n    return Math.abs(xVal - (~~(xVal + 0.5))) * 4 - 1;\n}\n", "import { interpolationTypes } from \"./enums.js\";\n\n/**\n * wavetable_oscillator.js\n * purpose: plays back raw audio data at an arbitrary playback rate\n */\n\n\nexport class WavetableOscillator\n{\n    /**\n     * Fills the output buffer with raw sample data using a given interpolation\n     * @param voice {Voice} the voice we're working on\n     * @param outputBuffer {Float32Array} the output buffer to write to\n     * @param interpolation {interpolationTypes} the interpolation type\n     */\n    static getSample(voice, outputBuffer, interpolation)\n    {\n        const step = voice.currentTuningCalculated * voice.sample.playbackStep;\n        // why not?\n        if (step === 1)\n        {\n            WavetableOscillator.getSampleNearest(voice, outputBuffer, step);\n            return;\n        }\n        switch (interpolation)\n        {\n            case interpolationTypes.fourthOrder:\n                this.getSampleHermite(voice, outputBuffer, step);\n                return;\n            \n            case interpolationTypes.linear:\n            default:\n                this.getSampleLinear(voice, outputBuffer, step);\n                return;\n            \n            case interpolationTypes.nearestNeighbor:\n                WavetableOscillator.getSampleNearest(voice, outputBuffer, step);\n                return;\n        }\n    }\n    \n    /**\n     * Fills the output buffer with raw sample data using linear interpolation\n     * @param voice {Voice} the voice we're working on\n     * @param outputBuffer {Float32Array} the output buffer to write to\n     * @param step {number} the step to advance every sample\n     */\n    static getSampleLinear(voice, outputBuffer, step)\n    {\n        const sample = voice.sample;\n        let cur = sample.cursor;\n        const sampleData = sample.sampleData;\n        \n        if (sample.isLooping)\n        {\n            const loopLength = sample.loopEnd - sample.loopStart;\n            for (let i = 0; i < outputBuffer.length; i++)\n            {\n                // check for loop\n                while (cur >= sample.loopEnd)\n                {\n                    cur -= loopLength;\n                }\n                \n                // grab the 2 nearest points\n                const floor = ~~cur;\n                let ceil = floor + 1;\n                \n                while (ceil >= sample.loopEnd)\n                {\n                    ceil -= loopLength;\n                }\n                \n                const fraction = cur - floor;\n                \n                // grab the samples and interpolate\n                const upper = sampleData[ceil];\n                const lower = sampleData[floor];\n                outputBuffer[i] = (lower + (upper - lower) * fraction);\n                \n                cur += step;\n            }\n        }\n        else\n        {\n            for (let i = 0; i < outputBuffer.length; i++)\n            {\n                \n                // linear interpolation\n                const floor = ~~cur;\n                const ceil = floor + 1;\n                \n                // flag the voice as finished if needed\n                if (ceil >= sample.end)\n                {\n                    voice.finished = true;\n                    return;\n                }\n                \n                const fraction = cur - floor;\n                \n                // grab the samples and interpolate\n                const upper = sampleData[ceil];\n                const lower = sampleData[floor];\n                outputBuffer[i] = (lower + (upper - lower) * fraction);\n                \n                cur += step;\n            }\n        }\n        voice.sample.cursor = cur;\n    }\n    \n    /**\n     * Fills the output buffer with raw sample data using no interpolation (nearest neighbor)\n     * @param voice {Voice} the voice we're working on\n     * @param outputBuffer {Float32Array} the output buffer to write to\n     * @param step {number} the step to advance every sample\n     */\n    static getSampleNearest(voice, outputBuffer, step)\n    {\n        const sample = voice.sample;\n        let cur = sample.cursor;\n        const sampleData = sample.sampleData;\n        \n        if (sample.isLooping)\n        {\n            const loopLength = sample.loopEnd - sample.loopStart;\n            for (let i = 0; i < outputBuffer.length; i++)\n            {\n                // check for loop\n                while (cur >= sample.loopEnd)\n                {\n                    cur -= loopLength;\n                }\n                \n                // grab the nearest neighbor\n                let ceil = ~~cur + 1;\n                \n                while (ceil >= sample.loopEnd)\n                {\n                    ceil -= loopLength;\n                }\n                \n                outputBuffer[i] = sampleData[ceil];\n                cur += step;\n            }\n        }\n        else\n        {\n            for (let i = 0; i < outputBuffer.length; i++)\n            {\n                \n                // nearest neighbor\n                const ceil = ~~cur + 1;\n                \n                // flag the voice as finished if needed\n                if (ceil >= sample.end)\n                {\n                    voice.finished = true;\n                    return;\n                }\n                \n                outputBuffer[i] = sampleData[ceil];\n                cur += step;\n            }\n        }\n        sample.cursor = cur;\n    }\n    \n    \n    /**\n     * Fills the output buffer with raw sample data using Hermite interpolation\n     * @param voice {Voice} the voice we're working on\n     * @param outputBuffer {Float32Array} the output buffer to write to\n     * @param step {number} the step to advance every sample\n     */\n    static getSampleHermite(voice, outputBuffer, step)\n    {\n        const sample = voice.sample;\n        let cur = sample.cursor;\n        const sampleData = sample.sampleData;\n        \n        if (sample.isLooping)\n        {\n            const loopLength = sample.loopEnd - sample.loopStart;\n            for (let i = 0; i < outputBuffer.length; i++)\n            {\n                // check for loop (it can exceed the end point multiple times)\n                while (cur >= sample.loopEnd)\n                {\n                    cur -= loopLength;\n                }\n                \n                // grab the 4 points\n                const y0 = ~~cur;   // point before the cursor. twice bitwise-not is just a faster Math.floor\n                let y1 = y0 + 1;    // point after the cursor\n                let y2 = y0 + 2;    // point 1 after the cursor\n                let y3 = y0 + 3;    // point 2 after the cursor\n                const t = cur - y0; // the distance from y0 to cursor [0;1]\n                // y0 is not handled here\n                // as it's math.floor of cur which is handled above\n                if (y1 >= sample.loopEnd)\n                {\n                    y1 -= loopLength;\n                }\n                if (y2 >= sample.loopEnd)\n                {\n                    y2 -= loopLength;\n                }\n                if (y3 >= sample.loopEnd)\n                {\n                    y3 -= loopLength;\n                }\n                \n                // grab the samples\n                const xm1 = sampleData[y0];\n                const x0 = sampleData[y1];\n                const x1 = sampleData[y2];\n                const x2 = sampleData[y3];\n                \n                // interpolate\n                // https://www.musicdsp.org/en/latest/Other/93-hermite-interpollation.html\n                const c = (x1 - xm1) * 0.5;\n                const v = x0 - x1;\n                const w = c + v;\n                const a = w + v + (x2 - x0) * 0.5;\n                const b = w + a;\n                outputBuffer[i] = ((((a * t) - b) * t + c) * t + x0);\n                \n                cur += step;\n            }\n        }\n        else\n        {\n            for (let i = 0; i < outputBuffer.length; i++)\n            {\n                // grab the 4 points\n                const y0 = ~~cur;   // point before the cursor. twice bitwise-not is just a faster Math.floor\n                let y1 = y0 + 1;    // point after the cursor\n                let y2 = y0 + 2;    // point 1 after the cursor\n                let y3 = y0 + 3;    // point 2 after the cursor\n                const t = cur - y0; // the distance from y0 to cursor [0;1]\n                \n                // flag as finished if needed\n                if (y1 >= sample.end ||\n                    y2 >= sample.end ||\n                    y3 >= sample.end)\n                {\n                    voice.finished = true;\n                    return;\n                }\n                \n                // grab the samples\n                const xm1 = sampleData[y0];\n                const x0 = sampleData[y1];\n                const x1 = sampleData[y2];\n                const x2 = sampleData[y3];\n                \n                // interpolate\n                // https://www.musicdsp.org/en/latest/Other/93-hermite-interpollation.html\n                const c = (x1 - xm1) * 0.5;\n                const v = x0 - x1;\n                const w = c + v;\n                const a = w + v + (x2 - x0) * 0.5;\n                const b = w + a;\n                outputBuffer[i] = ((((a * t) - b) * t + c) * t + x0);\n                \n                cur += step;\n            }\n        }\n        voice.sample.cursor = cur;\n    }\n}", "import { VolumeEnvelope } from \"../engine_components/volume_envelope.js\";\nimport { ModulationEnvelope } from \"../engine_components/modulation_envelope.js\";\nimport { customControllers } from \"../engine_components/controller_tables.js\";\nimport { absCentsToHz, timecentsToSeconds } from \"../engine_components/unit_converter.js\";\nimport { getLFOValue } from \"../engine_components/lfo.js\";\nimport { WavetableOscillator } from \"../engine_components/wavetable_oscillator.js\";\nimport { LowpassFilter } from \"../engine_components/lowpass_filter.js\";\nimport { generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * Renders a voice to the stereo output buffer\n * @param voice {Voice} the voice to render\n * @param timeNow {number} current time in seconds\n * @param outputLeft {Float32Array} the left output buffer\n * @param outputRight {Float32Array} the right output buffer\n * @param reverbOutputLeft {Float32Array} left output for reverb\n * @param reverbOutputRight {Float32Array} right output for reverb\n * @param chorusOutputLeft {Float32Array} left output for chorus\n * @param chorusOutputRight {Float32Array} right output for chorus\n * @param startIndex {number}\n * @param sampleCount {number}\n * @this {MidiAudioChannel}\n * @returns {boolean} true if the voice is finished\n */\nexport function renderVoice(\n    voice, timeNow,\n    outputLeft, outputRight,\n    reverbOutputLeft, reverbOutputRight,\n    chorusOutputLeft, chorusOutputRight,\n    startIndex, sampleCount\n)\n{\n    // check if release\n    if (!voice.isInRelease)\n    {\n        // if not in release, check if the release time is\n        if (timeNow >= voice.releaseStartTime)\n        {\n            // release the voice here\n            voice.isInRelease = true;\n            VolumeEnvelope.startRelease(voice);\n            ModulationEnvelope.startRelease(voice);\n            if (voice.sample.loopingMode === 3)\n            {\n                voice.sample.isLooping = false;\n            }\n        }\n    }\n    \n    \n    // if the initial attenuation is more than 100dB, skip the voice (it's silent anyway)\n    if (voice.modulatedGenerators[generatorTypes.initialAttenuation] > 2500)\n    {\n        if (voice.isInRelease)\n        {\n            voice.finished = true;\n        }\n        return voice.finished;\n    }\n    \n    // TUNING\n    let targetKey = voice.targetKey;\n    \n    // calculate tuning\n    let cents = voice.modulatedGenerators[generatorTypes.fineTune]         // soundfont fine tune\n        + this.channelOctaveTuning[voice.midiNote]                         // MTS octave tuning\n        + this.channelTuningCents;                                         // channel tuning\n    let semitones = voice.modulatedGenerators[generatorTypes.coarseTune];  // soundfont coarse tuning\n    \n    // midi tuning standard\n    const tuning = this.synth.tunings[this.preset?.program]?.[voice.realKey];\n    if (tuning !== undefined && tuning?.midiNote >= 0)\n    {\n        // override key\n        targetKey = tuning.midiNote;\n        // add micro-tonal tuning\n        cents += tuning.centTuning;\n    }\n    \n    // portamento\n    if (voice.portamentoFromKey > -1)\n    {\n        // 0 to 1\n        const elapsed = Math.min((timeNow - voice.startTime) / voice.portamentoDuration, 1);\n        const diff = targetKey - voice.portamentoFromKey;\n        // zero progress means the pitch being in fromKey, full progress means the normal pitch\n        semitones -= diff * (1 - elapsed);\n    }\n    \n    // calculate tuning by key using soundfont's scale tuning\n    cents += (targetKey - voice.sample.rootKey) * voice.modulatedGenerators[generatorTypes.scaleTuning];\n    \n    // low pass excursion with LFO and mod envelope\n    let lowpassExcursion = 0;\n    let volumeExcursionCentibels = 0;\n    \n    // vibrato LFO\n    const vibPitchDepth = voice.modulatedGenerators[generatorTypes.vibLfoToPitch];\n    const vibVolDepth = voice.modulatedGenerators[generatorTypes.vibLfoToVolume];\n    const vibFilterDepth = voice.modulatedGenerators[generatorTypes.vibLfoToFilterFc];\n    if (vibPitchDepth !== 0 || vibVolDepth !== 0 || vibFilterDepth !== 0)\n    {\n        // calculate start time and lfo value\n        const vibStart = voice.startTime + timecentsToSeconds(voice.modulatedGenerators[generatorTypes.delayVibLFO]);\n        const vibFreqHz = absCentsToHz(voice.modulatedGenerators[generatorTypes.freqVibLFO]);\n        const vibLfoValue = getLFOValue(vibStart, vibFreqHz, timeNow);\n        // use modulation multiplier (RPN modulation depth)\n        cents += vibLfoValue * (vibPitchDepth * this.customControllers[customControllers.modulationMultiplier]);\n        // vol env volume offset\n        // negate the lfo value because audigy starts with increase rather than decrease\n        volumeExcursionCentibels += -vibLfoValue * vibVolDepth;\n        // low pass frequency\n        lowpassExcursion += vibLfoValue * vibFilterDepth;\n    }\n    \n    // mod LFO\n    const modPitchDepth = voice.modulatedGenerators[generatorTypes.modLfoToPitch];\n    const modVolDepth = voice.modulatedGenerators[generatorTypes.modLfoToVolume];\n    const modFilterDepth = voice.modulatedGenerators[generatorTypes.modLfoToFilterFc];\n    // don't compute mod lfo unless necessary\n    if (modPitchDepth !== 0 || modFilterDepth !== 0 || modVolDepth !== 0)\n    {\n        // calculate start time and lfo value\n        const modStart = voice.startTime + timecentsToSeconds(voice.modulatedGenerators[generatorTypes.delayModLFO]);\n        const modFreqHz = absCentsToHz(voice.modulatedGenerators[generatorTypes.freqModLFO]);\n        const modLfoValue = getLFOValue(modStart, modFreqHz, timeNow);\n        // use modulation multiplier (RPN modulation depth)\n        cents += modLfoValue * (modPitchDepth * this.customControllers[customControllers.modulationMultiplier]);\n        // vol env volume offset\n        // negate the lfo value because audigy starts with increase rather than decrease\n        volumeExcursionCentibels += -modLfoValue * modVolDepth;\n        // low pass frequency\n        lowpassExcursion += modLfoValue * modFilterDepth;\n    }\n    \n    // channel vibrato (GS NRPN)\n    if (this.channelVibrato.depth > 0)\n    {\n        // same as others\n        const channelVibrato = getLFOValue(\n            voice.startTime + this.channelVibrato.delay,\n            this.channelVibrato.rate,\n            timeNow\n        );\n        if (channelVibrato)\n        {\n            cents += channelVibrato * this.channelVibrato.depth;\n        }\n    }\n    \n    // mod env\n    const modEnvPitchDepth = voice.modulatedGenerators[generatorTypes.modEnvToPitch];\n    const modEnvFilterDepth = voice.modulatedGenerators[generatorTypes.modEnvToFilterFc];\n    // don't compute mod env unless necessary\n    if (modEnvFilterDepth !== 0 || modEnvPitchDepth !== 0)\n    {\n        const modEnv = ModulationEnvelope.getValue(voice, timeNow);\n        // apply values\n        lowpassExcursion += modEnv * modEnvFilterDepth;\n        cents += modEnv * modEnvPitchDepth;\n    }\n    \n    // default resonant modulator: it does not affect the filter gain (neither XG nor GS did that)\n    volumeExcursionCentibels -= voice.resonanceOffset;\n    \n    // finally, calculate the playback rate\n    const centsTotal = ~~(cents + semitones * 100);\n    if (centsTotal !== voice.currentTuningCents)\n    {\n        voice.currentTuningCents = centsTotal;\n        voice.currentTuningCalculated = Math.pow(2, centsTotal / 1200);\n    }\n    \n    \n    // SYNTHESIS\n    const bufferOut = new Float32Array(sampleCount);\n    \n    \n    // looping mode 2: start on release. process only volEnv\n    if (voice.sample.loopingMode === 2 && !voice.isInRelease)\n    {\n        VolumeEnvelope.apply(\n            voice,\n            bufferOut,\n            volumeExcursionCentibels,\n            this.synth.volumeEnvelopeSmoothingFactor\n        );\n        return voice.finished;\n    }\n    \n    // wave table oscillator\n    WavetableOscillator.getSample(voice, bufferOut, this.synth.interpolationType);\n    \n    // low pass filter\n    LowpassFilter.apply(voice, bufferOut, lowpassExcursion, this.synth.filterSmoothingFactor);\n    \n    // vol env\n    VolumeEnvelope.apply(\n        voice,\n        bufferOut,\n        volumeExcursionCentibels,\n        this.synth.volumeEnvelopeSmoothingFactor\n    );\n    \n    this.panAndMixVoice(\n        voice,\n        bufferOut,\n        outputLeft, outputRight,\n        reverbOutputLeft, reverbOutputRight,\n        chorusOutputLeft, chorusOutputRight,\n        startIndex\n    );\n    return voice.finished;\n}", "import { customControllers } from \"../../engine_components/controller_tables.js\";\nimport { generatorTypes } from \"../../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * Stops a note nearly instantly\n * @param midiNote {number}\n * @param releaseTime {number} ticks\n * @this {MidiAudioChannel}\n */\nexport function killNote(midiNote, releaseTime = -12000)\n{\n    midiNote += this.customControllers[customControllers.channelKeyShift];\n    \n    this.voices.forEach(v =>\n    {\n        if (v.realKey !== midiNote)\n        {\n            return;\n        }\n        v.modulatedGenerators[generatorTypes.releaseVolEnv] = releaseTime; // set release to be very short\n        v.release(this.synth.currentSynthTime);\n    });\n}", "import { customControllers } from \"../../engine_components/controller_tables.js\";\nimport { SpessaSynthInfo } from \"../../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../../utils/other.js\";\n\n/**\n * Sets the channel's tuning\n * @this {MidiAudioChannel}\n * @param cents {number}\n * @param log {boolean}\n */\nexport function setTuning(cents, log = true)\n{\n    cents = Math.round(cents);\n    this.setCustomController(customControllers.channelTuning, cents);\n    if (!log)\n    {\n        return;\n    }\n    SpessaSynthInfo(\n        `%cFine tuning for %c${this.channelNumber}%c is now set to %c${cents}%c cents.`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.value,\n        consoleColors.info\n    );\n}", "import { SpessaSynthInfo } from \"../../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../../utils/other.js\";\nimport { customControllers } from \"../../engine_components/controller_tables.js\";\n\n/**\n * @this {MidiAudioChannel}\n * @param cents {number}\n */\nexport function setModulationDepth(cents)\n{\n    cents = Math.round(cents);\n    SpessaSynthInfo(\n        `%cChannel ${this.channelNumber} modulation depth. Cents: %c${cents}`,\n        consoleColors.info,\n        consoleColors.value\n    );\n    /* ==============\n        IMPORTANT\n        here we convert cents into a multiplier.\n        midi spec assumes the default is 50 cents,\n        but it might be different for the soundfont,\n        so we create a multiplier by dividing cents by 50.\n        for example, if we want 100 cents, then multiplier will be 2,\n        which for a preset with depth of 50 will create 100.\n     ================ */\n    this.setCustomController(customControllers.modulationMultiplier, cents / 50);\n}", "import { customControllers, dataEntryStates, NON_CC_INDEX_OFFSET } from \"../../engine_components/controller_tables.js\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../../utils/other.js\";\nimport { midiControllers } from \"../../../../midi/midi_message.js\";\nimport { modulatorSources } from \"../../../../soundfont/basic_soundfont/modulator.js\";\n\n\n/**\n * @enum {number}\n */\nexport const registeredParameterTypes = {\n    pitchBendRange: 0x0000,\n    fineTuning: 0x0001,\n    coarseTuning: 0x0002,\n    modulationDepth: 0x0005,\n    resetParameters: 0x3FFF\n};\n\n/**\n * @enum {number}\n */\nexport const nonRegisteredMSB = {\n    partParameter: 0x01,\n    awe32: 0x7F,\n    SF2: 120\n};\n\n/**\n * https://cdn.roland.com/assets/media/pdf/SC-88PRO_OM.pdf\n * http://hummer.stanford.edu/sig/doc/classes/MidiOutput/rpn.html\n * @enum {number}\n */\nconst nonRegisteredGSLSB = {\n    vibratoRate: 0x08,\n    vibratoDepth: 0x09,\n    vibratoDelay: 0x0A,\n    \n    TVFFilterCutoff: 0x20,\n    TVFFilterResonance: 0x21,\n    \n    EGAttackTime: 0x63,\n    EGReleaseTime: 0x66\n    \n};\n\n\n/**\n * Executes a data entry for an NRP for a sc88pro NRP (because touhou yes) and RPN tuning\n * @param dataValue {number} dataEntryCoarse MSB\n * @this {MidiAudioChannel}\n * @private\n */\nexport function dataEntryCoarse(dataValue)\n{\n    // store in cc table\n    this.midiControllers[midiControllers.dataEntryMsb] = dataValue << 7;\n    /*\n    A note on this vibrato.\n    This is a completely custom vibrato, with its own oscillator and parameters.\n    It is disabled by default,\n    only being enabled when one of the NPRN messages changing it is received\n    and stays on until the next system-reset.\n     */\n    const addDefaultVibrato = () =>\n    {\n        if (this.channelVibrato.delay === 0 && this.channelVibrato.rate === 0 && this.channelVibrato.depth === 0)\n        {\n            this.channelVibrato.depth = 50;\n            this.channelVibrato.rate = 8;\n            this.channelVibrato.delay = 0.6;\n        }\n    };\n    \n    const coolInfo = (what, value, type) =>\n    {\n        if (type.length > 0)\n        {\n            type = \" \" + type;\n        }\n        SpessaSynthInfo(\n            `%c${what} for %c${this.channelNumber}%c is now set to %c${value}%c${type}.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.value,\n            consoleColors.info\n        );\n    };\n    switch (this.dataEntryState)\n    {\n        default:\n        case dataEntryStates.Idle:\n            break;\n        \n        // process GS NRPNs\n        case dataEntryStates.NRPFine:\n            if (this.lockGSNRPNParams)\n            {\n                return;\n            }\n            /**\n             * @type {number}\n             */\n            const NRPNCoarse = this.midiControllers[midiControllers.NRPNMsb] >> 7;\n            /**\n             * @type {number}\n             */\n            const NRPNFine = this.midiControllers[midiControllers.NRPNLsb] >> 7;\n            const dataEntryFine = this.midiControllers[midiControllers.lsbForControl6DataEntry] >> 7;\n            switch (NRPNCoarse)\n            {\n                default:\n                    if (dataValue === 64)\n                    {\n                        // default value\n                        return;\n                    }\n                    SpessaSynthWarn(\n                        `%cUnrecognized NRPN for %c${this.channelNumber}%c: %c(0x${NRPNFine.toString(16)\n                            .toUpperCase()} 0x${NRPNFine.toString(\n                            16).toUpperCase()})%c data value: %c${dataValue}`,\n                        consoleColors.warn,\n                        consoleColors.recognized,\n                        consoleColors.warn,\n                        consoleColors.unrecognized,\n                        consoleColors.warn,\n                        consoleColors.value\n                    );\n                    break;\n                \n                // part parameters: vibrato, cutoff\n                case nonRegisteredMSB.partParameter:\n                    switch (NRPNFine)\n                    {\n                        default:\n                            if (dataValue === 64)\n                            {\n                                // default value\n                                return;\n                            }\n                            SpessaSynthWarn(\n                                `%cUnrecognized NRPN for %c${this.channelNumber}%c: %c(0x${NRPNCoarse.toString(16)} 0x${NRPNFine.toString(\n                                    16)})%c data value: %c${dataValue}`,\n                                consoleColors.warn,\n                                consoleColors.recognized,\n                                consoleColors.warn,\n                                consoleColors.unrecognized,\n                                consoleColors.warn,\n                                consoleColors.value\n                            );\n                            break;\n                        \n                        // vibrato rate\n                        case nonRegisteredGSLSB.vibratoRate:\n                            if (dataValue === 64)\n                            {\n                                return;\n                            }\n                            addDefaultVibrato();\n                            this.channelVibrato.rate = (dataValue / 64) * 8;\n                            coolInfo(\"Vibrato rate\", `${dataValue} = ${this.channelVibrato.rate}`, \"Hz\");\n                            break;\n                        \n                        // vibrato depth\n                        case nonRegisteredGSLSB.vibratoDepth:\n                            if (dataValue === 64)\n                            {\n                                return;\n                            }\n                            addDefaultVibrato();\n                            this.channelVibrato.depth = dataValue / 2;\n                            coolInfo(\"Vibrato depth\", `${dataValue} = ${this.channelVibrato.depth}`, \"cents of detune\");\n                            break;\n                        \n                        // vibrato delay\n                        case nonRegisteredGSLSB.vibratoDelay:\n                            if (dataValue === 64)\n                            {\n                                return;\n                            }\n                            addDefaultVibrato();\n                            this.channelVibrato.delay = (dataValue / 64) / 3;\n                            coolInfo(\"Vibrato delay\", `${dataValue} = ${this.channelVibrato.delay}`, \"seconds\");\n                            break;\n                        \n                        // filter cutoff\n                        case nonRegisteredGSLSB.TVFFilterCutoff:\n                            // affect the \"brightness\" controller as we have a default modulator that controls it\n                            this.controllerChange(midiControllers.brightness, dataValue);\n                            coolInfo(\"Filter cutoff\", dataValue.toString(), \"\");\n                            break;\n                        \n                        // attack time\n                        case nonRegisteredGSLSB.EGAttackTime:\n                            // affect the \"attack time\" controller as we have a default modulator that controls it\n                            this.controllerChange(midiControllers.attackTime, dataValue);\n                            coolInfo(\"EG attack time\", dataValue.toString(), \"\");\n                            break;\n                        \n                        // release time\n                        case nonRegisteredGSLSB.EGReleaseTime:\n                            // affect the \"release time\" controller as we have a default modulator that controls it\n                            this.controllerChange(midiControllers.releaseTime, dataValue);\n                            coolInfo(\"EG release time\", dataValue.toString(), \"\");\n                            break;\n                    }\n                    break;\n                \n                case nonRegisteredMSB.awe32:\n                    break;\n                \n                // SF2 NRPN\n                case nonRegisteredMSB.SF2:\n                    if (NRPNFine > 100)\n                    {\n                        // sfspec:\n                        // Note that NRPN Select LSB greater than 100 are for setup only, and should not be used on their own to select a\n                        // generator parameter.\n                        break;\n                    }\n                    const gen = this.customControllers[customControllers.sf2NPRNGeneratorLSB];\n                    const offset = (dataValue << 7 | dataEntryFine) - 8192;\n                    this.setGeneratorOffset(gen, offset);\n                    break;\n            }\n            break;\n        \n        case dataEntryStates.RPCoarse:\n        case dataEntryStates.RPFine:\n            /**\n             * @type {number}\n             */\n            const rpnValue = this.midiControllers[midiControllers.RPNMsb] | (this.midiControllers[midiControllers.RPNLsb] >> 7);\n            switch (rpnValue)\n            {\n                default:\n                    SpessaSynthWarn(\n                        `%cUnrecognized RPN for %c${this.channelNumber}%c: %c(0x${rpnValue.toString(16)})%c data value: %c${dataValue}`,\n                        consoleColors.warn,\n                        consoleColors.recognized,\n                        consoleColors.warn,\n                        consoleColors.unrecognized,\n                        consoleColors.warn,\n                        consoleColors.value\n                    );\n                    break;\n                \n                // pitch bend range\n                case registeredParameterTypes.pitchBendRange:\n                    this.midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange] = dataValue << 7;\n                    coolInfo(\"Pitch bend range\", dataValue.toString(), \"semitones\");\n                    break;\n                \n                // coarse tuning\n                case registeredParameterTypes.coarseTuning:\n                    // semitones\n                    const semitones = dataValue - 64;\n                    this.setCustomController(customControllers.channelTuningSemitones, semitones);\n                    coolInfo(\"Coarse tuning\", semitones.toString(), \"semitones\");\n                    break;\n                \n                // fine-tuning\n                case registeredParameterTypes.fineTuning:\n                    // note: this will not work properly unless the lsb is sent!\n                    // here we store the raw value to then adjust in fine\n                    this.setTuning(dataValue - 64, false);\n                    break;\n                \n                // modulation depth\n                case registeredParameterTypes.modulationDepth:\n                    this.setModulationDepth(dataValue * 100);\n                    break;\n                \n                case registeredParameterTypes.resetParameters:\n                    this.resetParameters();\n                    break;\n                \n            }\n        \n    }\n}", "import { SpessaSynthWarn } from \"../../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../../utils/other.js\";\nimport { generatorTypes } from \"../../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * http://archive.gamedev.net/archive/reference/articles/article445.html\n * https://github.com/user-attachments/files/15757220/adip301.pdf\n * @type {generatorTypes[]}\n */\nconst AWE_NRPN_GENERATOR_MAPPINGS = [\n    generatorTypes.delayModLFO,\n    generatorTypes.freqModLFO,\n    \n    generatorTypes.delayVibLFO,\n    generatorTypes.freqVibLFO,\n    \n    generatorTypes.delayModEnv,\n    generatorTypes.attackModEnv,\n    generatorTypes.holdModEnv,\n    generatorTypes.decayModEnv,\n    generatorTypes.sustainModEnv,\n    generatorTypes.releaseModEnv,\n    \n    generatorTypes.delayVolEnv,\n    generatorTypes.attackVolEnv,\n    generatorTypes.holdVolEnv,\n    generatorTypes.decayVolEnv,\n    generatorTypes.sustainVolEnv,\n    generatorTypes.releaseVolEnv,\n    \n    generatorTypes.fineTune,\n    \n    generatorTypes.modLfoToPitch,\n    generatorTypes.vibLfoToPitch,\n    generatorTypes.modEnvToPitch,\n    generatorTypes.modLfoToVolume,\n    \n    generatorTypes.initialFilterFc,\n    generatorTypes.initialFilterQ,\n    \n    generatorTypes.modLfoToFilterFc,\n    generatorTypes.modEnvToFilterFc,\n    \n    generatorTypes.chorusEffectsSend,\n    generatorTypes.reverbEffectsSend\n];\n\n/**\n * Function that emulates AWE32 similarly to fluidsynth\n * https://github.com/FluidSynth/fluidsynth/wiki/FluidFeatures\n *\n * Note: This makes use of findings by mrbumpy409:\n * https://github.com/fluidSynth/fluidsynth/issues/1473\n *\n * The excellent test files are available here, also collected and converted by mrbumpy409:\n * https://github.com/mrbumpy409/AWE32-midi-conversions\n * @this {MidiAudioChannel}\n * @param aweGen {number}\n * @param dataLSB {number}\n * @param dataMSB {number}\n */\nexport function handleAWE32NRPN(aweGen, dataLSB, dataMSB)\n{\n    const clip = (v, min, max) => Math.max(min, Math.min(max, v));\n    const msecToTimecents = ms => Math.max(-32768, 1200 * Math.log2(ms / 1000));\n    const hzToCents = hz => 6900 + 1200 * Math.log2(hz / 440);\n    \n    \n    let dataValue = (dataMSB << 7) | dataLSB;\n    // center the value\n    // though ranges reported as 0 to 127 only use LSB\n    dataValue -= 8192;\n    const generator = AWE_NRPN_GENERATOR_MAPPINGS[aweGen];\n    if (!generator)\n    {\n        SpessaSynthWarn(\n            `Invalid AWE32 LSB: %c${aweGen}`,\n            consoleColors.unrecognized\n        );\n    }\n    let milliseconds, hertz, centibels, cents;\n    switch (generator)\n    {\n        default:\n            // this should not happen\n            break;\n        \n        // delays\n        case generatorTypes.delayModLFO:\n        case generatorTypes.delayVibLFO:\n        case generatorTypes.delayVolEnv:\n        case generatorTypes.delayModEnv:\n            milliseconds = 4 * clip(dataValue, 0, 5900);\n            // convert to timecents\n            this.setGeneratorOverride(generator, msecToTimecents(milliseconds));\n            break;\n        \n        // attacks\n        case generatorTypes.attackVolEnv:\n        case generatorTypes.attackModEnv:\n            milliseconds = clip(dataValue, 0, 5940);\n            // convert to timecents\n            this.setGeneratorOverride(generator, msecToTimecents(milliseconds));\n            break;\n        \n        // holds\n        case generatorTypes.holdVolEnv:\n        case generatorTypes.holdModEnv:\n            milliseconds = clip(dataValue, 0, 8191);\n            // convert to timecents\n            this.setGeneratorOverride(generator, msecToTimecents(milliseconds));\n            break;\n        \n        // decays and releases (share clips and units)\n        case generatorTypes.decayModEnv:\n        case generatorTypes.decayVolEnv:\n        case generatorTypes.releaseVolEnv:\n        case generatorTypes.releaseModEnv:\n            milliseconds = 4 * clip(dataValue, 0, 5940);\n            // convert to timecents\n            this.setGeneratorOverride(generator, msecToTimecents(milliseconds));\n            break;\n        \n        // lfo frequencies\n        case generatorTypes.freqVibLFO:\n        case generatorTypes.freqModLFO:\n            hertz = 0.084 * dataLSB;\n            // convert to abs cents\n            this.setGeneratorOverride(generator, hzToCents(hertz), true);\n            break;\n        \n        // sustains\n        case generatorTypes.sustainVolEnv:\n        case generatorTypes.sustainModEnv:\n            // 0.75 dB is 7.5 cB\n            centibels = dataLSB * 7.5;\n            this.setGeneratorOverride(generator, centibels);\n            break;\n        \n        // pitch\n        case generatorTypes.fineTune:\n            // data is already centered\n            this.setGeneratorOverride(generator, dataValue, true);\n            break;\n        \n        // lfo to pitch\n        case generatorTypes.modLfoToPitch:\n        case generatorTypes.vibLfoToPitch:\n            cents = clip(dataValue, -127, 127) * 9.375;\n            this.setGeneratorOverride(generator, cents, true);\n            break;\n        \n        // env to pitch\n        case generatorTypes.modEnvToPitch:\n            cents = clip(dataValue, -127, 127) * 9.375;\n            this.setGeneratorOverride(generator, cents);\n            break;\n        \n        // mod lfo to vol\n        case generatorTypes.modLfoToVolume:\n            // 0.1875 dB is 1.875 cB\n            centibels = 1.875 * dataLSB;\n            this.setGeneratorOverride(generator, centibels, true);\n            break;\n        \n        // filter fc\n        case generatorTypes.initialFilterFc:\n            // minimum: 100 Hz -> 4335 cents\n            const fcCents = 4335 + 59 * dataLSB;\n            this.setGeneratorOverride(generator, fcCents, true);\n            break;\n        \n        // filter Q\n        case generatorTypes.initialFilterQ:\n            // note: this uses the \"modulator-ish\" approach proposed by mrbumpy409\n            // here https://github.com/FluidSynth/fluidsynth/issues/1473\n            centibels = 215 * (dataLSB / 127);\n            this.setGeneratorOverride(generator, centibels, true);\n            break;\n        \n        // to filterFc\n        case generatorTypes.modLfoToFilterFc:\n            cents = clip(dataValue, -64, 63) * 56.25;\n            this.setGeneratorOverride(generator, cents, true);\n            break;\n        \n        case generatorTypes.modEnvToFilterFc:\n            cents = clip(dataValue, -64, 63) * 56.25;\n            this.setGeneratorOverride(generator, cents);\n            break;\n        \n        // effects\n        case generatorTypes.chorusEffectsSend:\n        case generatorTypes.reverbEffectsSend:\n            this.setGeneratorOverride(generator, clip(dataValue, 0, 255) * (1000 / 255));\n            break;\n    }\n}", "import { consoleColors } from \"../../../../utils/other.js\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../../../utils/loggin.js\";\nimport { modulatorSources } from \"../../../../soundfont/basic_soundfont/modulator.js\";\nimport { customControllers, dataEntryStates, NON_CC_INDEX_OFFSET } from \"../../engine_components/controller_tables.js\";\nimport { midiControllers } from \"../../../../midi/midi_message.js\";\nimport { nonRegisteredMSB, registeredParameterTypes } from \"./data_entry_coarse.js\";\nimport { handleAWE32NRPN } from \"./awe32.js\";\n\n/**\n * Executes a data entry for an RPN tuning\n * @param dataValue {number} dataEntry LSB\n * @this {MidiAudioChannel}\n * @private\n */\nexport function dataEntryFine(dataValue)\n{\n    // store in cc table\n    this.midiControllers[midiControllers.lsbForControl6DataEntry] = dataValue << 7;\n    switch (this.dataEntryState)\n    {\n        default:\n            break;\n        \n        case dataEntryStates.RPCoarse:\n        case dataEntryStates.RPFine:\n            const rpnValue = this.midiControllers[midiControllers.RPNMsb] | (this.midiControllers[midiControllers.RPNLsb] >> 7);\n            switch (rpnValue)\n            {\n                default:\n                    break;\n                \n                // pitch bend range fine tune\n                case registeredParameterTypes.pitchBendRange:\n                    if (dataValue === 0)\n                    {\n                        break;\n                    }\n                    // 14-bit value, so upper 7 are coarse and lower 7 are fine!\n                    this.midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange] |= dataValue;\n                    const actualTune = (this.midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange] >> 7) + dataValue / 128;\n                    SpessaSynthInfo(\n                        `%cChannel ${this.channelNumber} bend range. Semitones: %c${actualTune}`,\n                        consoleColors.info,\n                        consoleColors.value\n                    );\n                    break;\n                \n                // fine-tuning\n                case registeredParameterTypes.fineTuning:\n                    // grab the data and shift\n                    const coarse = this.customControllers[customControllers.channelTuning];\n                    const finalTuning = (coarse << 7) | dataValue;\n                    this.setTuning(finalTuning * 0.01220703125); // multiply by 8192 / 100 (cent increments)\n                    break;\n                \n                // modulation depth\n                case registeredParameterTypes.modulationDepth:\n                    const currentModulationDepthCents = this.customControllers[customControllers.modulationMultiplier] * 50;\n                    let cents = currentModulationDepthCents + (dataValue / 128) * 100;\n                    this.setModulationDepth(cents);\n                    break;\n                \n                case 0x3FFF:\n                    this.resetParameters();\n                    break;\n                \n            }\n            break;\n        \n        case dataEntryStates.NRPFine:\n            /**\n             * @type {number}\n             */\n            const NRPNCoarse = this.midiControllers[midiControllers.NRPNMsb] >> 7;\n            /**\n             * @type {number}\n             */\n            const NRPNFine = this.midiControllers[midiControllers.NRPNLsb] >> 7;\n            if (NRPNCoarse === nonRegisteredMSB.SF2)\n            {\n                return;\n            }\n            switch (NRPNCoarse)\n            {\n                default:\n                    SpessaSynthWarn(\n                        `%cUnrecognized NRPN LSB for %c${this.channelNumber}%c: %c(0x${NRPNFine.toString(16)\n                            .toUpperCase()} 0x${NRPNFine.toString(\n                            16).toUpperCase()})%c data value: %c${dataValue}`,\n                        consoleColors.warn,\n                        consoleColors.recognized,\n                        consoleColors.warn,\n                        consoleColors.unrecognized,\n                        consoleColors.warn,\n                        consoleColors.value\n                    );\n                    break;\n                \n                case nonRegisteredMSB.awe32:\n                    handleAWE32NRPN.call(\n                        this,\n                        NRPNFine,\n                        dataValue,\n                        this.midiControllers[midiControllers.dataEntryMsb] >> 7\n                    );\n                    break;\n            }\n    }\n}", "import { midiControllers } from \"../../../../midi/midi_message.js\";\nimport { channelConfiguration, customControllers, dataEntryStates } from \"../../engine_components/controller_tables.js\";\nimport { nonRegisteredMSB } from \"../data_entry/data_entry_coarse.js\";\n\n/**\n * @param controllerNumber {number}\n * @param controllerValue {number}\n * @param force {boolean}\n * @this {MidiAudioChannel}\n */\nexport function controllerChange(controllerNumber, controllerValue, force = false)\n{\n    if (controllerNumber > 127)\n    {\n        // channel configuration. force must be set to true\n        if (!force)\n        {\n            return;\n        }\n        switch (controllerNumber)\n        {\n            default:\n                return;\n            \n            case channelConfiguration.velocityOverride:\n                this.velocityOverride = controllerValue;\n        }\n    }\n    \n    // lsb controller values: append them as the lower nibble of the 14-bit value\n    // excluding bank select and data entry as it's handled separately\n    if (\n        controllerNumber >= midiControllers.lsbForControl1ModulationWheel\n        && controllerNumber <= midiControllers.lsbForControl13EffectControl2\n        && controllerNumber !== midiControllers.lsbForControl6DataEntry\n    )\n    {\n        const actualCCNum = controllerNumber - 32;\n        if (this.lockedControllers[actualCCNum])\n        {\n            return;\n        }\n        // append the lower nibble to the main controller\n        this.midiControllers[actualCCNum] = (this.midiControllers[actualCCNum] & 0x3F80) | (controllerValue & 0x7F);\n        this.voices.forEach(v => this.computeModulators(v, 1, actualCCNum));\n    }\n    if (this.lockedControllers[controllerNumber])\n    {\n        return;\n    }\n    \n    // apply the cc to the table\n    this.midiControllers[controllerNumber] = controllerValue << 7;\n    \n    // interpret special CCs\n    {\n        switch (controllerNumber)\n        {\n            case midiControllers.allNotesOff:\n                this.stopAllNotes();\n                break;\n            \n            case midiControllers.allSoundOff:\n                this.stopAllNotes(true);\n                break;\n            \n            // special case: bank select\n            case midiControllers.bankSelect:\n                this.setBankSelect(controllerValue);\n                break;\n            \n            case midiControllers.lsbForControl0BankSelect:\n                this.setBankSelect(controllerValue, true);\n                break;\n            \n            // check for RPN and NPRN and data entry\n            case midiControllers.RPNLsb:\n                this.dataEntryState = dataEntryStates.RPFine;\n                break;\n            \n            case midiControllers.RPNMsb:\n                this.dataEntryState = dataEntryStates.RPCoarse;\n                break;\n            \n            case midiControllers.NRPNMsb:\n                // sfspec section 9.6.2\n                this.customControllers[customControllers.sf2NPRNGeneratorLSB] = 0;\n                this.dataEntryState = dataEntryStates.NRPCoarse;\n                break;\n            \n            case midiControllers.NRPNLsb:\n                if (this.midiControllers[midiControllers.NRPNMsb] >> 7 === nonRegisteredMSB.SF2)\n                {\n                    // if a <100 value has already been sent, reset!\n                    if (this.customControllers[customControllers.sf2NPRNGeneratorLSB] % 100 !== 0)\n                    {\n                        this.customControllers[customControllers.sf2NPRNGeneratorLSB] = 0;\n                    }\n                    \n                    if (controllerValue === 100)\n                    {\n                        this.customControllers[customControllers.sf2NPRNGeneratorLSB] += 100;\n                    }\n                    else if (controllerValue === 101)\n                    {\n                        this.customControllers[customControllers.sf2NPRNGeneratorLSB] += 1000;\n                    }\n                    else if (controllerValue === 102)\n                    {\n                        this.customControllers[customControllers.sf2NPRNGeneratorLSB] += 10000;\n                    }\n                    else if (controllerValue < 100)\n                    {\n                        this.customControllers[customControllers.sf2NPRNGeneratorLSB] += controllerValue;\n                    }\n                }\n                this.dataEntryState = dataEntryStates.NRPFine;\n                break;\n            \n            case midiControllers.dataEntryMsb:\n                this.dataEntryCoarse(controllerValue);\n                break;\n            \n            case midiControllers.lsbForControl6DataEntry:\n                this.dataEntryFine(controllerValue);\n                break;\n            \n            case midiControllers.resetAllControllers:\n                this.resetControllersRP15Compliant();\n                break;\n            \n            case midiControllers.sustainPedal:\n                if (controllerValue >= 64)\n                {\n                    this.holdPedal = true;\n                }\n                else\n                {\n                    this.holdPedal = false;\n                    this.sustainedVoices.forEach(v =>\n                    {\n                        v.release(this.synth.currentSynthTime);\n                    });\n                    this.sustainedVoices = [];\n                }\n                break;\n            \n            // default: just compute modulators\n            default:\n                this.voices.forEach(v => this.computeModulators(v, 1, controllerNumber));\n                break;\n        }\n    }\n    this.synth.callEvent(\"controllerchange\", {\n        channel: this.channelNumber,\n        controllerNumber: controllerNumber,\n        controllerValue: controllerValue\n    });\n}", "/**\n * stops all notes on a given channel\n * @param force {boolean}\n * @this {MidiAudioChannel}\n */\nexport function stopAllNotes(force = false)\n{\n    if (force)\n    {\n        // force stop all\n        this.voices.length = 0;\n        this.sustainedVoices.length = 0;\n        this.sendChannelProperty();\n    }\n    else\n    {\n        this.voices.forEach(v =>\n        {\n            if (v.isInRelease)\n            {\n                return;\n            }\n            v.release(this.synth.currentSynthTime);\n        });\n        this.sustainedVoices.forEach(v =>\n        {\n            v.release(this.synth.currentSynthTime);\n        });\n    }\n}", "/**\n * @param isMuted {boolean}\n * @this {MidiAudioChannel}\n */\nexport function muteChannel(isMuted)\n{\n    if (isMuted)\n    {\n        this.stopAllNotes(true);\n    }\n    this.isMuted = isMuted;\n    this.sendChannelProperty();\n    this.synth.callEvent(\"mutechannel\", {\n        channel: this.channelNumber,\n        isMuted: isMuted\n    });\n}", "import { customControllers } from \"../../engine_components/controller_tables.js\";\nimport { midiControllers } from \"../../../../midi/midi_message.js\";\n\n/**\n * Transposes the channel by given amount of semitones\n * @this {MidiAudioChannel}\n * @param semitones {number} Can be float\n * @param force {boolean} defaults to false, if true transposes the channel even if it's a drum channel\n */\nexport function transposeChannel(semitones, force = false)\n{\n    if (!this.drumChannel)\n    {\n        semitones += this.synth.transposition;\n    }\n    const keyShift = Math.trunc(semitones);\n    const currentTranspose = this.channelTransposeKeyShift + this.customControllers[customControllers.channelTransposeFine] / 100;\n    if (\n        (this.drumChannel && !force)\n        || semitones === currentTranspose\n    )\n    {\n        return;\n    }\n    if (keyShift !== this.channelTransposeKeyShift)\n    {\n        // stop all (and emit cc change)\n        this.controllerChange(midiControllers.allNotesOff, 127);\n    }\n    // apply transpose\n    this.channelTransposeKeyShift = keyShift;\n    this.setCustomController(customControllers.channelTransposeFine, (semitones - keyShift) * 100);\n    this.sendChannelProperty();\n}", "// Tests were performed by John Novak\n// https://github.com/dosbox-staging/dosbox-staging/pull/2705\n\n/*\nCC 5 value  Portamento time\n----------  ---------------\n     0          0.000 s\n     1          0.006 s\n     2          0.023 s\n     4          0.050 s\n     8          0.110 s\n    16          0.250 s\n    32          0.500 s\n    64          2.060 s\n    80          4.200 s\n    96          8.400 s\n   112         19.500 s\n   116         26.700 s\n   120         40.000 s\n   124         80.000 s\n   127        480.000 s\n*/\n\nconst portamentoLookup = {\n    0: 0.000,\n    1: 0.006,\n    2: 0.023,\n    4: 0.050,\n    8: 0.110,\n    16: 0.250,\n    32: 0.500,\n    64: 2.060,\n    80: 4.200,\n    96: 8.400,\n    112: 19.500,\n    116: 26.700,\n    120: 40.000,\n    124: 80.000,\n    127: 480.000\n};\n\n/**\n * @param value {number}\n * @returns {number}\n */\nfunction getLookup(value)\n{\n    if (portamentoLookup[value] !== undefined)\n    {\n        return portamentoLookup[value];\n    }\n    // get the nearest lower and upper points from the lookup table\n    let lower = null;\n    let upper = null;\n    \n    for (let key of Object.keys(portamentoLookup))\n    {\n        key = parseInt(key);\n        if (key < value && (lower === null || key > lower))\n        {\n            lower = key;\n        }\n        if (key > value && (upper === null || key < upper))\n        {\n            upper = key;\n        }\n    }\n    \n    // if we have found both lower and upper points, perform linear interpolation\n    if (lower !== null && upper !== null)\n    {\n        let lowerTime = portamentoLookup[lower];\n        let upperTime = portamentoLookup[upper];\n        \n        // linear interpolation\n        return lowerTime + ((value - lower) * (upperTime - lowerTime)) / (upper - lower);\n    }\n    return 0;\n}\n\n\n/**\n * Converts portamento time to seconds\n * @param time {number} 0 - 127\n * @param distance {number} distance in keys\n * @returns {number} seconds\n */\nexport function portamentoTimeToSeconds(time, distance)\n{\n    // this seems to work fine for the MIDIs I have\n    return getLookup(time) * (distance / 30);\n}", "import { midiControllers } from \"../../../midi/midi_message.js\";\nimport { portamentoTimeToSeconds } from \"./portamento_time.js\";\nimport { customControllers } from \"../engine_components/controller_tables.js\";\nimport { Modulator } from \"../../../soundfont/basic_soundfont/modulator.js\";\nimport { GENERATOR_OVERRIDE_NO_CHANGE_VALUE } from \"../../synth_constants.js\";\nimport { generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\nimport { SpessaSynthWarn } from \"../../../utils/loggin.js\";\n\n/**\n * sends a \"MIDI Note on message\"\n * @param midiNote {number}\n * @param velocity {number}\n * @this {MidiAudioChannel}\n */\nexport function noteOn(midiNote, velocity)\n{\n    if (velocity < 1)\n    {\n        this.noteOff(midiNote);\n        return;\n    }\n    velocity = Math.min(127, velocity);\n    \n    if (\n        (this.synth.highPerformanceMode && this.synth.totalVoicesAmount > 200 && velocity < 40) ||\n        (this.synth.highPerformanceMode && velocity < 10) ||\n        (this.isMuted)\n    )\n    {\n        return;\n    }\n    \n    if (!this.preset)\n    {\n        SpessaSynthWarn(`No preset for channel ${this.channelNumber}!`);\n        return;\n    }\n    \n    const realKey = midiNote + this.channelTransposeKeyShift + this.customControllers[customControllers.channelKeyShift];\n    let internalMidiNote = realKey;\n    \n    if (realKey > 127 || realKey < 0)\n    {\n        return;\n    }\n    const program = this.preset?.program;\n    const tune = this.synth.tunings[program]?.[realKey]?.midiNote;\n    if (tune >= 0)\n    {\n        internalMidiNote = tune;\n    }\n    \n    // velocity override\n    if (this.velocityOverride > 0)\n    {\n        velocity = this.velocityOverride;\n    }\n    \n    // key velocity override\n    const keyVel = this.synth.keyModifierManager.getVelocity(this.channelNumber, realKey);\n    if (keyVel > -1)\n    {\n        velocity = keyVel;\n    }\n    \n    // gain\n    const voiceGain = this.synth.keyModifierManager.getGain(this.channelNumber, realKey);\n    \n    // portamento\n    let portamentoFromKey = -1;\n    let portamentoDuration = 0;\n    // note: the 14-bit value needs to go down to 7-bit\n    const portamentoTime = this.midiControllers[midiControllers.portamentoTime] >> 7;\n    const control = this.midiControllers[midiControllers.portamentoControl];\n    const currentFromKey = control >> 7;\n    if (\n        !this.drumChannel && // no portamento on drum channel\n        currentFromKey !== internalMidiNote && // if the same note, there's no portamento\n        this.midiControllers[midiControllers.portamentoOnOff] >= 8192 && // (64 << 7)\n        portamentoTime > 0 // 0 duration is no portamento\n    )\n    {\n        // a value of one means the initial portamento\n        if (control !== 1)\n        {\n            const diff = Math.abs(internalMidiNote - currentFromKey);\n            portamentoDuration = portamentoTimeToSeconds(portamentoTime, diff);\n            portamentoFromKey = currentFromKey;\n        }\n        // set portamento control to previous value\n        this.controllerChange(midiControllers.portamentoControl, internalMidiNote);\n    }\n    // get voices\n    const voices = this.synth.getVoices(\n        this.channelNumber,\n        internalMidiNote,\n        velocity,\n        realKey\n    );\n    \n    // zero means disabled\n    let panOverride = 0;\n    if (this.randomPan)\n    {\n        // the range is -500 to 500\n        panOverride = Math.round(Math.random() * 1000 - 500);\n    }\n    \n    // add voices\n    const channelVoices = this.voices;\n    voices.forEach(voice =>\n    {\n        // apply portamento\n        voice.portamentoFromKey = portamentoFromKey;\n        voice.portamentoDuration = portamentoDuration;\n        \n        // apply pan override\n        voice.overridePan = panOverride;\n        \n        // apply gain override\n        voice.gain = voiceGain;\n        \n        // dynamic modulators (if none, this won't iterate over anything)\n        this.sysExModulators.modulatorList.forEach(m =>\n        {\n            const mod = m.mod;\n            const existingModIndex = voice.modulators.findIndex(voiceMod => Modulator.isIdentical(voiceMod, mod));\n            \n            // replace or add\n            if (existingModIndex !== -1)\n            {\n                voice.modulators[existingModIndex] = Modulator.copy(mod);\n            }\n            else\n            {\n                voice.modulators.push(Modulator.copy(mod));\n            }\n        });\n        \n        // apply generator override\n        if (this.generatorOverridesEnabled)\n        {\n            this.generatorOverrides.forEach((overrideValue, generatorType) =>\n            {\n                if (overrideValue === GENERATOR_OVERRIDE_NO_CHANGE_VALUE)\n                {\n                    return;\n                }\n                voice.generators[generatorType] = overrideValue;\n            });\n        }\n        \n        \n        // apply exclusive class\n        const exclusive = voice.exclusiveClass;\n        if (exclusive !== 0)\n        {\n            // kill all voices with the same exclusive class\n            channelVoices.forEach(v =>\n            {\n                if (v.exclusiveClass === exclusive)\n                {\n                    v.exclusiveRelease(this.synth.currentSynthTime);\n                }\n            });\n        }\n        // compute all modulators\n        this.computeModulators(voice);\n        // modulate sample offsets (these are not real time)\n        const cursorStartOffset = voice.modulatedGenerators[generatorTypes.startAddrsOffset] + voice.modulatedGenerators[generatorTypes.startAddrsCoarseOffset] * 32768;\n        const endOffset = voice.modulatedGenerators[generatorTypes.endAddrOffset] + voice.modulatedGenerators[generatorTypes.endAddrsCoarseOffset] * 32768;\n        const loopStartOffset = voice.modulatedGenerators[generatorTypes.startloopAddrsOffset] + voice.modulatedGenerators[generatorTypes.startloopAddrsCoarseOffset] * 32768;\n        const loopEndOffset = voice.modulatedGenerators[generatorTypes.endloopAddrsOffset] + voice.modulatedGenerators[generatorTypes.endloopAddrsCoarseOffset] * 32768;\n        const sm = voice.sample;\n        // apply them\n        const clamp = num => Math.max(0, Math.min(sm.sampleData.length - 1, num));\n        sm.cursor = clamp(sm.cursor + cursorStartOffset);\n        sm.end = clamp(sm.end + endOffset);\n        sm.loopStart = clamp(sm.loopStart + loopStartOffset);\n        sm.loopEnd = clamp(sm.loopEnd + loopEndOffset);\n        // swap loops if needed\n        if (sm.loopEnd < sm.loopStart)\n        {\n            const temp = sm.loopStart;\n            sm.loopStart = sm.loopEnd;\n            sm.loopEnd = temp;\n        }\n        if (sm.loopEnd - sm.loopStart < 1)\n        {\n            sm.loopingMode = 0;\n            sm.isLooping = false;\n        }\n        // set the current attenuation to target,\n        // as it's interpolated (we don't want 0 attenuation for even a split second)\n        voice.volumeEnvelope.attenuation = voice.volumeEnvelope.attenuationTargetGain;\n        // set initial pan to avoid split second changing from middle to the correct value\n        voice.currentPan = Math.max(-500, Math.min(500, voice.modulatedGenerators[generatorTypes.pan])); //  -500 to 500\n    });\n    \n    this.synth.totalVoicesAmount += voices.length;\n    // cap the voices\n    if (this.synth.totalVoicesAmount > this.synth.voiceCap)\n    {\n        this.synth.voiceKilling(voices.length);\n    }\n    channelVoices.push(...voices);\n    this.sendChannelProperty();\n    this.synth.callEvent(\"noteon\", {\n        midiNote: midiNote,\n        channel: this.channelNumber,\n        velocity: velocity\n    });\n    \n}", "import { SpessaSynthWarn } from \"../../../../utils/loggin.js\";\nimport { customControllers } from \"../../engine_components/controller_tables.js\";\n\n/**\n * Release a note\n * @param midiNote {number}\n * @this {MidiAudioChannel}\n */\nexport function noteOff(midiNote)\n{\n    if (midiNote > 127 || midiNote < 0)\n    {\n        SpessaSynthWarn(`Received a noteOn for note`, midiNote, \"Ignoring.\");\n        return;\n    }\n    \n    let realKey = midiNote + this.channelTransposeKeyShift + this.customControllers[customControllers.channelKeyShift];\n    \n    // if high performance mode, kill notes instead of stopping them\n    if (this.synth.highPerformanceMode)\n    {\n        // if the channel is percussion channel, do not kill the notes\n        if (!this.drumChannel)\n        {\n            this.killNote(realKey, -6950);\n            this.synth.callEvent(\"noteoff\", {\n                midiNote: midiNote,\n                channel: this.channelNumber\n            });\n            return;\n        }\n    }\n    \n    const channelVoices = this.voices;\n    channelVoices.forEach(v =>\n    {\n        if (v.realKey !== realKey || v.isInRelease === true)\n        {\n            return;\n        }\n        // if hold pedal, move to sustain\n        if (this.holdPedal)\n        {\n            this.sustainedVoices.push(v);\n        }\n        else\n        {\n            v.release(this.synth.currentSynthTime);\n        }\n    });\n    this.synth.callEvent(\"noteoff\", {\n        midiNote: midiNote,\n        channel: this.channelNumber\n    });\n}\n\n", "import { modulatorSources } from \"../../../../soundfont/basic_soundfont/modulator.js\";\n\n/**\n * Sets the pressure of the given note on a specific channel\n * @this {MidiAudioChannel}\n * @param midiNote {number} 0-127\n * @param pressure {number} the pressure of the note\n */\nexport function polyPressure(midiNote, pressure)\n{\n    this.voices.forEach(v =>\n    {\n        if (v.midiNote !== midiNote)\n        {\n            return;\n        }\n        v.pressure = pressure;\n        this.computeModulators(\n            v,\n            0,\n            modulatorSources.polyPressure\n        );\n    });\n    this.synth.callEvent(\"polypressure\", {\n        channel: this.channelNumber,\n        midiNote: midiNote,\n        pressure: pressure\n    });\n}", "import { NON_CC_INDEX_OFFSET } from \"../../engine_components/controller_tables.js\";\nimport { modulatorSources } from \"../../../../soundfont/basic_soundfont/modulator.js\";\n\n/**\n * Sets the pressure of the given channel\n * @this {MidiAudioChannel}\n * @param pressure {number} the pressure of the channel\n */\nexport function channelPressure(pressure)\n{\n    this.midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.channelPressure] = pressure << 7;\n    this.updateChannelTuning();\n    this.voices.forEach(v =>\n        this.computeModulators(\n            v,\n            0,\n            modulatorSources.channelPressure\n        ));\n    this.synth.callEvent(\"channelpressure\", {\n        channel: this.channelNumber,\n        pressure: pressure\n    });\n}", "import { NON_CC_INDEX_OFFSET } from \"../../engine_components/controller_tables.js\";\nimport { modulatorSources } from \"../../../../soundfont/basic_soundfont/modulator.js\";\n\n/**\n * Sets the pitch of the given channel\n * @this {MidiAudioChannel}\n * @param MSB {number} SECOND byte of the MIDI pitchWheel message\n * @param LSB {number} FIRST byte of the MIDI pitchWheel message\n */\nexport function pitchWheel(MSB, LSB)\n{\n    if (this.lockedControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel])\n    {\n        return;\n    }\n    const bend = (LSB | (MSB << 7));\n    this.synth.callEvent(\"pitchwheel\", {\n        channel: this.channelNumber,\n        MSB: MSB,\n        LSB: LSB\n    });\n    this.midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel] = bend;\n    this.voices.forEach(v =>\n        // compute pitch modulators\n        this.computeModulators(\n            v,\n            0,\n            modulatorSources.pitchWheel\n        ));\n    this.sendChannelProperty();\n}", "/**\n * Sets the octave tuning for a given channel\n * @this {MidiAudioChannel}\n * @param tuning {Int8Array} LENGTH of 12!\n * relative cent tuning.\n * min -128 max 127.\n */\nexport function setOctaveTuning(tuning)\n{\n    if (tuning.length !== 12)\n    {\n        throw new Error(\"Tuning is not the length of 12.\");\n    }\n    this.channelOctaveTuning = new Int8Array(128);\n    for (let i = 0; i < 128; i++)\n    {\n        this.channelOctaveTuning[i] = tuning[i % 12];\n    }\n}", "import { SpessaSynthWarn } from \"../../../utils/loggin.js\";\nimport { BasicPreset } from \"../../../soundfont/basic_soundfont/basic_preset.js\";\n\n/**\n * executes a program change\n * @param programNumber {number}\n * @this {MidiAudioChannel}\n */\nexport function programChange(programNumber)\n{\n    if (this.lockPreset)\n    {\n        return;\n    }\n    // always 128 for percussion\n    let bank = this.getBankSelect();\n    \n    const isXG = this.isXGChannel;\n    const p = this.synth.soundfontManager.getPreset(bank, programNumber, isXG);\n    let preset = p.preset;\n    if (!preset)\n    {\n        SpessaSynthWarn(\"No presets! Using empty fallback.\");\n        preset = new BasicPreset(this.synth.soundfontManager.soundfontList[0].soundfont);\n        preset.presetName = \"SPESSA EMPTY FALLBACK PRESET\";\n    }\n    this.setPreset(preset);\n    this.sentBank = Math.min(128, preset.bank + p.bankOffset);\n    this.synth.callEvent(\"programchange\", {\n        channel: this.channelNumber,\n        program: preset.program,\n        bank: this.sentBank\n    });\n    this.sendChannelProperty();\n}", "import { Modulator, modulatorCurveTypes, modulatorSources } from \"../../../soundfont/basic_soundfont/modulator.js\";\nimport { NON_CC_INDEX_OFFSET } from \"./controller_tables.js\";\n\n/**\n * A class for dynamic modulators\n * that are assigned for more complex system exclusive messages\n */\nexport class DynamicModulatorSystem\n{\n    /**\n     * the current dynamic modulator list\n     * @type {{mod: Modulator, id: string}[]}\n     */\n    modulatorList = [];\n    \n    resetModulators()\n    {\n        this.modulatorList = [];\n    }\n    \n    /**\n     * @param source {number}\n     * @param destination {generatorTypes}\n     * @param isBipolar {boolean}\n     * @param isNegative {boolean}\n     */\n    _getModulatorId(source, destination, isBipolar, isNegative)\n    {\n        return `${source}-${destination}-${isBipolar}-${isNegative}`;\n    }\n    \n    /**\n     * @param id {string}\n     * @private\n     */\n    _deleteModulator(id)\n    {\n        this.modulatorList = this.modulatorList.filter(m => m.id !== id);\n    }\n    \n    /**\n     * @param source {number} like in midiControllers: values below NON_CC_INDEX_OFFSET are CCs,\n     * above are regular modulator sources\n     * @param destination {generatorTypes}\n     * @param amount {number}\n     * @param isBipolar {boolean}\n     * @param isNegative {boolean}\n     */\n    setModulator(source, destination, amount, isBipolar = false, isNegative = false)\n    {\n        const id = this._getModulatorId(source, destination, isBipolar, isNegative);\n        if (amount === 0)\n        {\n            this._deleteModulator(id);\n        }\n        const mod = this.modulatorList.find(m => m.id === id);\n        if (mod)\n        {\n            mod.mod.transformAmount = amount;\n        }\n        else\n        {\n            let srcNum, isCC;\n            if (source >= NON_CC_INDEX_OFFSET)\n            {\n                srcNum = source - NON_CC_INDEX_OFFSET;\n                isCC = false;\n            }\n            else\n            {\n                srcNum = source;\n                isCC = true;\n            }\n            const modulator = new Modulator(\n                srcNum,\n                modulatorCurveTypes.linear,\n                isCC ? 1 : 0,\n                isBipolar ? 1 : 0,\n                0,\n                modulatorSources.noController,\n                modulatorCurveTypes.linear,\n                0,\n                0,\n                0,\n                destination,\n                amount,\n                0\n            );\n            this.modulatorList.push({\n                mod: modulator,\n                id: id\n            });\n        }\n    }\n}", "import { getModulatorCurveValue, MOD_PRECOMPUTED_LENGTH } from \"./modulator_curves.js\";\nimport { VolumeEnvelope } from \"./volume_envelope.js\";\nimport { ModulationEnvelope } from \"./modulation_envelope.js\";\nimport { Modulator, modulatorSources } from \"../../../soundfont/basic_soundfont/modulator.js\";\nimport { NON_CC_INDEX_OFFSET } from \"./controller_tables.js\";\nimport { generatorLimits, generatorTypes } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * compute_modulator.js\n * purpose: precomputes all curve types and computes modulators\n */\n\nconst EFFECT_MODULATOR_TRANSFORM_MULTIPLIER = 1000 / 200;\n\n/**\n * Computes a given modulator\n * @param controllerTable {Int16Array} all midi controllers as 14bit values + the non-controller indexes, starting at 128\n * @param modulator {Modulator} the modulator to compute\n * @param voice {Voice} the voice belonging to the modulator\n * @returns {number} the computed value\n */\nexport function computeModulator(controllerTable, modulator, voice)\n{\n    if (modulator.transformAmount === 0)\n    {\n        modulator.currentValue = 0;\n        return 0;\n    }\n    // mapped to 0-16,384\n    let rawSourceValue;\n    if (modulator.sourceUsesCC)\n    {\n        rawSourceValue = controllerTable[modulator.sourceIndex];\n    }\n    else\n    {\n        const index = modulator.sourceIndex + NON_CC_INDEX_OFFSET;\n        switch (modulator.sourceIndex)\n        {\n            case modulatorSources.noController:\n                rawSourceValue = 16383; // equals to 1\n                break;\n            \n            case modulatorSources.noteOnKeyNum:\n                rawSourceValue = voice.midiNote << 7;\n                break;\n            \n            case modulatorSources.noteOnVelocity:\n                rawSourceValue = voice.velocity << 7;\n                break;\n            \n            case modulatorSources.polyPressure:\n                rawSourceValue = voice.pressure << 7;\n                break;\n            \n            default:\n                rawSourceValue = controllerTable[index]; // pitch bend and range are stored in the cc table\n                break;\n        }\n        \n    }\n    \n    const sourceValue = transforms[modulator.sourceCurveType][modulator.sourcePolarity][modulator.sourceDirection][rawSourceValue];\n    \n    // mapped to 0-127\n    let rawSecondSrcValue;\n    if (modulator.secSrcUsesCC)\n    {\n        rawSecondSrcValue = controllerTable[modulator.secSrcIndex];\n    }\n    else\n    {\n        const index = modulator.secSrcIndex + NON_CC_INDEX_OFFSET;\n        switch (modulator.secSrcIndex)\n        {\n            case modulatorSources.noController:\n                rawSecondSrcValue = 16383; // equals to 1\n                break;\n            \n            case modulatorSources.noteOnKeyNum:\n                rawSecondSrcValue = voice.midiNote << 7;\n                break;\n            \n            case modulatorSources.noteOnVelocity:\n                rawSecondSrcValue = voice.velocity << 7;\n                break;\n            \n            case modulatorSources.polyPressure:\n                rawSecondSrcValue = voice.pressure << 7;\n                break;\n            \n            default:\n                rawSecondSrcValue = controllerTable[index]; // pitch bend and range are stored in the cc table\n        }\n        \n    }\n    const secondSrcValue = transforms[modulator.secSrcCurveType][modulator.secSrcPolarity][modulator.secSrcDirection][rawSecondSrcValue];\n    \n    // see the comment for isEffectModulator (modulator.js in basic_soundfont) for explanation\n    let transformAmount = modulator.transformAmount;\n    if (modulator.isEffectModulator && transformAmount <= 1000)\n    {\n        transformAmount *= EFFECT_MODULATOR_TRANSFORM_MULTIPLIER;\n        transformAmount = Math.min(transformAmount, 1000);\n    }\n    \n    // compute the modulator\n    let computedValue = sourceValue * secondSrcValue * transformAmount;\n    \n    if (modulator.transformType === 2)\n    {\n        // abs value\n        computedValue = Math.abs(computedValue);\n    }\n    \n    // resonant modulator: take its value and ensure that it won't change the final gain\n    if (modulator.isDefaultResonantModulator)\n    {\n        // half the gain, negates the filter\n        voice.resonanceOffset = Math.max(0, computedValue / 2);\n    }\n    \n    modulator.currentValue = computedValue;\n    return computedValue;\n}\n\n/**\n * Computes modulators of a given voice. Source and index indicate what modulators shall be computed\n * @param voice {Voice} the voice to compute modulators for\n * @param sourceUsesCC {number} what modulators should be computed, -1 means all, 0 means modulator source enum 1 means midi controller\n * @param sourceIndex {number} enum for the source\n * @this {MidiAudioChannel}\n */\nexport function computeModulators(voice, sourceUsesCC = -1, sourceIndex = 0)\n{\n    const modulators = voice.modulators;\n    let generators = voice.generators;\n    // apply offsets if enabled\n    if (this.generatorOffsetsEnabled)\n    {\n        generators = new Int16Array(generators);\n        for (let i = 0; i < generators.length; i++)\n        {\n            generators[i] += this.generatorOffsets[i];\n        }\n    }\n    const modulatedGenerators = voice.modulatedGenerators;\n    \n    if (sourceUsesCC === -1)\n    {\n        // All modulators mode: compute all modulators\n        modulatedGenerators.set(generators);\n        modulators.forEach(mod =>\n        {\n            modulatedGenerators[mod.modulatorDestination] += computeModulator(\n                this.midiControllers,\n                mod,\n                voice\n            );\n        });\n        // apply limits\n        for (let gen = 0; gen < modulatedGenerators.length; gen++)\n        {\n            const limit = generatorLimits[gen];\n            if (!limit)\n            {\n                // skip unused\n                continue;\n            }\n            modulatedGenerators[gen] = Math.min(limit.max, Math.max(limit.min, modulatedGenerators[gen]));\n        }\n        VolumeEnvelope.recalculate(voice);\n        ModulationEnvelope.recalculate(voice);\n        return;\n    }\n    \n    // Optimized mode: calculate only modulators that use the given source\n    const volenvNeedsRecalculation = new Set([\n        generatorTypes.initialAttenuation,\n        generatorTypes.delayVolEnv,\n        generatorTypes.attackVolEnv,\n        generatorTypes.holdVolEnv,\n        generatorTypes.decayVolEnv,\n        generatorTypes.sustainVolEnv,\n        generatorTypes.releaseVolEnv,\n        generatorTypes.keyNumToVolEnvHold,\n        generatorTypes.keyNumToVolEnvDecay\n    ]);\n    \n    const computedDestinations = new Set();\n    \n    modulators.forEach(mod =>\n    {\n        if (\n            (mod.sourceUsesCC === sourceUsesCC && mod.sourceIndex === sourceIndex) ||\n            (mod.secSrcUsesCC === sourceUsesCC && mod.secSrcIndex === sourceIndex)\n        )\n        {\n            const destination = mod.modulatorDestination;\n            if (!computedDestinations.has(destination))\n            {\n                // Reset this destination\n                modulatedGenerators[destination] = generators[destination];\n                // compute our modulator\n                computeModulator(this.midiControllers, mod, voice);\n                // sum the values of all modulators for this destination\n                modulators.forEach(m =>\n                {\n                    if (m.modulatorDestination === destination)\n                    {\n                        modulatedGenerators[destination] += m.currentValue;\n                    }\n                });\n                // apply limits\n                const limits = generatorLimits[destination];\n                modulatedGenerators[destination] = Math.max(\n                    limits.min,\n                    Math.min(modulatedGenerators[destination], limits.max)\n                );\n                computedDestinations.add(destination);\n            }\n        }\n    });\n    \n    // Recalculate volume envelope if necessary\n    if ([...computedDestinations].some(dest => volenvNeedsRecalculation.has(dest)))\n    {\n        VolumeEnvelope.recalculate(voice);\n    }\n    \n    ModulationEnvelope.recalculate(voice);\n}\n\n\n/**\n * as follows: transforms[curveType][polarity][direction] is an array\n * @type {Float32Array[][][]}\n */\nconst transforms = [];\n\nfor (let curve = 0; curve < 4; curve++)\n{\n    transforms[curve] =\n        [\n            [\n                new Float32Array(MOD_PRECOMPUTED_LENGTH),\n                new Float32Array(MOD_PRECOMPUTED_LENGTH)\n            ],\n            [\n                new Float32Array(MOD_PRECOMPUTED_LENGTH),\n                new Float32Array(MOD_PRECOMPUTED_LENGTH)\n            ]\n        ];\n    for (let i = 0; i < MOD_PRECOMPUTED_LENGTH; i++)\n    {\n        \n        // polarity 0 dir 0\n        transforms[curve][0][0][i] = getModulatorCurveValue(\n            0,\n            curve,\n            i / MOD_PRECOMPUTED_LENGTH,\n            0\n        );\n        \n        // polarity 1 dir 0\n        transforms[curve][1][0][i] = getModulatorCurveValue(\n            0,\n            curve,\n            i / MOD_PRECOMPUTED_LENGTH,\n            1\n        );\n        \n        // polarity 0 dir 1\n        transforms[curve][0][1][i] = getModulatorCurveValue(\n            1,\n            curve,\n            i / MOD_PRECOMPUTED_LENGTH,\n            0\n        );\n        \n        // polarity 1 dir 1\n        transforms[curve][1][1][i] = getModulatorCurveValue(\n            1,\n            curve,\n            i / MOD_PRECOMPUTED_LENGTH,\n            1\n        );\n    }\n}", "import {\n    CONTROLLER_TABLE_SIZE,\n    CUSTOM_CONTROLLER_TABLE_SIZE,\n    customControllers,\n    dataEntryStates,\n    NON_CC_INDEX_OFFSET\n} from \"./controller_tables.js\";\nimport {\n    resetControllers,\n    resetControllersRP15Compliant,\n    resetParameters\n} from \"../engine_methods/controller_control/reset_controllers.js\";\nimport { renderVoice } from \"../engine_methods/render_voice.js\";\nimport { panAndMixVoice } from \"./stereo_panner.js\";\nimport { killNote } from \"../engine_methods/stopping_notes/kill_note.js\";\nimport { setTuning } from \"../engine_methods/tuning_control/set_tuning.js\";\nimport { setModulationDepth } from \"../engine_methods/tuning_control/set_modulation_depth.js\";\nimport { dataEntryFine } from \"../engine_methods/data_entry/data_entry_fine.js\";\nimport { controllerChange } from \"../engine_methods/controller_control/controller_change.js\";\nimport { stopAllNotes } from \"../engine_methods/stopping_notes/stop_all_notes.js\";\nimport { muteChannel } from \"../engine_methods/mute_channel.js\";\nimport { transposeChannel } from \"../engine_methods/tuning_control/transpose_channel.js\";\nimport { dataEntryCoarse } from \"../engine_methods/data_entry/data_entry_coarse.js\";\nimport { noteOn } from \"../engine_methods/note_on.js\";\nimport { noteOff } from \"../engine_methods/stopping_notes/note_off.js\";\nimport { polyPressure } from \"../engine_methods/tuning_control/poly_pressure.js\";\nimport { channelPressure } from \"../engine_methods/tuning_control/channel_pressure.js\";\nimport { pitchWheel } from \"../engine_methods/tuning_control/pitch_wheel.js\";\nimport { setOctaveTuning } from \"../engine_methods/tuning_control/set_octave_tuning.js\";\nimport { programChange } from \"../engine_methods/program_change.js\";\nimport { chooseBank, isSystemXG, parseBankSelect } from \"../../../utils/xg_hacks.js\";\nimport { DEFAULT_PERCUSSION, GENERATOR_OVERRIDE_NO_CHANGE_VALUE } from \"../../synth_constants.js\";\nimport { modulatorSources } from \"../../../soundfont/basic_soundfont/modulator.js\";\nimport { DynamicModulatorSystem } from \"./dynamic_modulator_system.js\";\nimport { computeModulators } from \"./compute_modulator.js\";\nimport { generatorLimits, GENERATORS_AMOUNT } from \"../../../soundfont/basic_soundfont/generator_types.js\";\n\n/**\n * This class represents a single MIDI Channel within the synthesizer.\n */\nclass MidiAudioChannel\n{\n    /**\n     * An array of MIDI controller values and values used by modulators as the source (e.g., pitch bend, bend range, etc.).\n     * These are stored as 14-bit values.\n     * Refer to controller_tables.js for the index definitions.\n     * @type {Int16Array}\n     */\n    midiControllers = new Int16Array(CONTROLLER_TABLE_SIZE);\n    \n    /**\n     * An array indicating if a controller, at the equivalent index in the midiControllers array, is locked\n     * (i.e., not allowed changing).\n     * A locked controller cannot be modified.\n     * @type {boolean[]}\n     */\n    lockedControllers = Array(CONTROLLER_TABLE_SIZE).fill(false);\n    \n    /**\n     * An array of custom (non-SF2) control values such as RPN pitch tuning, transpose, modulation depth, etc.\n     * Refer to controller_tables.js for the index definitions.\n     * @type {Float32Array}\n     */\n    customControllers = new Float32Array(CUSTOM_CONTROLLER_TABLE_SIZE);\n    \n    /**\n     * The key shift of the channel (in semitones).\n     * @type {number}\n     */\n    channelTransposeKeyShift = 0;\n    \n    /**\n     * An array of octave tuning values for each note on the channel.\n     * Each index corresponds to a note (0 = C, 1 = C#, ..., 11 = B).\n     * Note: Repeaded every 12 notes\n     * @type {Int8Array}\n     */\n    channelOctaveTuning = new Int8Array(128);\n    \n    /**\n     * Will be updated every time something tuning-related gets changed.\n     * This is used to avoid a big addition for every voice rendering call.\n     * @type {number}\n     */\n    channelTuningCents = 0;\n    \n    /**\n     * A system for dynamic modulator assignment for advanced system exclusives.\n     * @type {DynamicModulatorSystem}\n     */\n    sysExModulators = new DynamicModulatorSystem();\n    \n    /**\n     * An array of offsets generators for SF2 nrpn support.\n     * A value of 0 means no change; -10 means 10 lower, etc.\n     * @type {Int16Array}\n     */\n    generatorOffsets = new Int16Array(GENERATORS_AMOUNT);\n    \n    /**\n     * A small optimization that disables applying offsets until at least one is set.\n     * @type {boolean}\n     */\n    generatorOffsetsEnabled = false;\n    \n    /**\n     * An array of override generators for AWE32 support.\n     * A value of 32,767 means unchanged, as it is not allowed anywhere.\n     * @type {Int16Array}\n     */\n    generatorOverrides = new Int16Array(GENERATORS_AMOUNT);\n    \n    /**\n     * A small optimization that disables applying overrides until at least one is set.\n     * @type {boolean}\n     */\n    generatorOverridesEnabled = false;\n    \n    /**\n     * Indicates whether the sustain (hold) pedal is active.\n     * @type {boolean}\n     */\n    holdPedal = false;\n    \n    /**\n     * Indicates whether this channel is a drum channel.\n     * @type {boolean}\n     */\n    drumChannel = false;\n    \n    /**\n     * If greater than 0, overrides the velocity value for the channel, otherwise it's disabled.\n     * @type {number}\n     */\n    velocityOverride = 0;\n    \n    /**\n     * Enables random panning for every note played on this channel.\n     * @type {boolean}\n     */\n    randomPan = false;\n    \n    /**\n     * The current state of the data entry for the channel.\n     * @type {dataEntryStates}\n     */\n    dataEntryState = dataEntryStates.Idle;\n    \n    /**\n     * The bank number of the channel (used for patch changes).\n     * @type {number}\n     */\n    bank = 0;\n    \n    /**\n     * The bank number sent as channel properties.\n     * @type {number}\n     */\n    sentBank = 0;\n    \n    /**\n     * The bank LSB number of the channel (used for patch changes in XG mode).\n     * @type {number}\n     */\n    bankLSB = 0;\n    \n    /**\n     * The preset currently assigned to the channel.\n     * @type {?BasicPreset}\n     */\n    preset = undefined;\n    \n    /**\n     * Indicates whether the program on this channel is locked.\n     * @type {boolean}\n     */\n    lockPreset = false;\n    \n    /**\n     * Indicates the MIDI system when the preset was locked.\n     * @type {SynthSystem}\n     */\n    lockedSystem = \"gs\";\n    \n    /**\n     * Indicates whether the GS NRPN parameters are enabled for this channel.\n     * @type {boolean}\n     */\n    lockGSNRPNParams = false;\n    \n    /**\n     * The vibrato settings for the channel.\n     * @type {Object}\n     * @property {number} depth - Depth of the vibrato effect in cents.\n     * @property {number} delay - Delay before the vibrato effect starts (in seconds).\n     * @property {number} rate - Rate of the vibrato oscillation (in Hz).\n     */\n    channelVibrato = { delay: 0, depth: 0, rate: 0 };\n    \n    /**\n     * Indicates whether the channel is muted.\n     * @type {boolean}\n     */\n    isMuted = false;\n    \n    /**\n     * An array of voices currently active on the channel.\n     * @type {Voice[]}\n     */\n    voices = [];\n    \n    /**\n     * An array of voices that are sustained on the channel.\n     * @type {Voice[]}\n     */\n    sustainedVoices = [];\n    \n    /**\n     * The channel's number (0-based index)\n     * @type {number}\n     */\n    channelNumber;\n    \n    /**\n     * Parent processor instance.\n     * @type {SpessaSynthProcessor}\n     */\n    synth;\n    \n    /**\n     * Constructs a new MIDI channel\n     * @param synth {SpessaSynthProcessor}\n     * @param preset {BasicPreset}\n     * @param channelNumber {number}\n     */\n    constructor(synth, preset, channelNumber)\n    {\n        this.synth = synth;\n        this.preset = preset;\n        this.channelNumber = channelNumber;\n        this.resetGeneratorOverrides();\n        this.resetGeneratorOffsets();\n    }\n    \n    get isXGChannel()\n    {\n        return isSystemXG(this.synth.system) || (this.lockPreset && isSystemXG(this.lockedSystem));\n    }\n    \n    /**\n     * @param type {customControllers|number}\n     * @param value {number}\n     */\n    setCustomController(type, value)\n    {\n        this.customControllers[type] = value;\n        this.updateChannelTuning();\n    }\n    \n    updateChannelTuning()\n    {\n        this.channelTuningCents =\n            this.customControllers[customControllers.channelTuning]                         // RPN channel fine tuning\n            + this.customControllers[customControllers.channelTransposeFine]                // user tuning (transpose)\n            + this.customControllers[customControllers.masterTuning]                        // master tuning, set by sysEx\n            + (this.customControllers[customControllers.channelTuningSemitones] * 100);      // RPN channel coarse tuning\n    }\n    \n    /**\n     * @param outputLeft {Float32Array} the left output buffer\n     * @param outputRight {Float32Array} the right output buffer\n     * @param reverbOutputLeft {Float32Array} left output for reverb\n     * @param reverbOutputRight {Float32Array} right output for reverb\n     * @param chorusOutputLeft {Float32Array} left output for chorus\n     * @param chorusOutputRight {Float32Array} right output for chorus\n     * @param startIndex {number}\n     * @param sampleCount {number}\n     */\n    renderAudio(\n        outputLeft, outputRight,\n        reverbOutputLeft, reverbOutputRight,\n        chorusOutputLeft, chorusOutputRight,\n        startIndex, sampleCount\n    )\n    {\n        this.voices = this.voices.filter(v => !this.renderVoice(\n            v, this.synth.currentSynthTime,\n            outputLeft, outputRight,\n            reverbOutputLeft, reverbOutputRight,\n            chorusOutputLeft, chorusOutputRight,\n            startIndex, sampleCount\n        ));\n    }\n    \n    /**\n     * @param locked {boolean}\n     */\n    setPresetLock(locked)\n    {\n        this.lockPreset = locked;\n        if (locked)\n        {\n            this.lockedSystem = this.synth.system;\n        }\n    }\n    \n    /**\n     * @param bank {number}\n     * @param isLSB {boolean}\n     */\n    setBankSelect(bank, isLSB = false)\n    {\n        if (this.lockPreset)\n        {\n            return;\n        }\n        if (isLSB)\n        {\n            this.bankLSB = bank;\n        }\n        else\n        {\n            this.bank = bank;\n            const bankLogic = parseBankSelect(\n                this.getBankSelect(),\n                bank,\n                this.synth.system,\n                false,\n                this.drumChannel,\n                this.channelNumber\n            );\n            switch (bankLogic.drumsStatus)\n            {\n                default:\n                case 0:\n                    break;\n                \n                case 1:\n                    if (this.channelNumber % 16 === DEFAULT_PERCUSSION)\n                    {\n                        // cannot disable drums on channel 9\n                        this.bank = 127;\n                    }\n                    break;\n                \n                case 2:\n                    this.setDrums(true);\n                    break;\n            }\n        }\n    }\n    \n    /**\n     * @returns {number}\n     */\n    getBankSelect()\n    {\n        return chooseBank(this.bank, this.bankLSB, this.drumChannel, this.isXGChannel);\n    }\n    \n    /**\n     * Changes a preset of this channel\n     * @param preset {BasicPreset}\n     */\n    setPreset(preset)\n    {\n        if (this.lockPreset)\n        {\n            return;\n        }\n        this.preset = preset;\n    }\n    \n    /**\n     * Sets drums on channel.\n     * @param isDrum {boolean}\n     */\n    setDrums(isDrum)\n    {\n        if (this.lockPreset)\n        {\n            return;\n        }\n        if (this.drumChannel === isDrum)\n        {\n            return;\n        }\n        if (isDrum)\n        {\n            // clear transpose\n            this.channelTransposeKeyShift = 0;\n            this.drumChannel = true;\n        }\n        else\n        {\n            this.drumChannel = false;\n        }\n        this.synth.callEvent(\"drumchange\", {\n            channel: this.channelNumber,\n            isDrumChannel: this.drumChannel\n        });\n        this.programChange(this.preset.program);\n        this.sendChannelProperty();\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Sets a custom vibrato\n     * @param depth {number} cents\n     * @param rate {number} Hz\n     * @param delay {number} seconds\n     */\n    setVibrato(depth, rate, delay)\n    {\n        if (this.lockGSNRPNParams)\n        {\n            return;\n        }\n        this.channelVibrato.rate = rate;\n        this.channelVibrato.delay = delay;\n        this.channelVibrato.depth = depth;\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Yes\n     */\n    disableAndLockGSNRPN()\n    {\n        this.lockGSNRPNParams = true;\n        this.channelVibrato.rate = 0;\n        this.channelVibrato.delay = 0;\n        this.channelVibrato.depth = 0;\n    }\n    \n    \n    /**\n     * @typedef {Object} ChannelProperty\n     * @property {number} voicesAmount - the channel's current voice amount\n     * @property {number} pitchBend - the channel's current pitch bend from -8192 do 8192\n     * @property {number} pitchBendRangeSemitones - the pitch bend's range, in semitones\n     * @property {boolean} isMuted - indicates whether the channel is muted\n     * @property {boolean} isDrum - indicates whether the channel is a drum channel\n     * @property {number} transposition - the channel's transposition, in semitones\n     * @property {number} bank - the bank number of the current preset\n     * @property {number} program - the MIDI program number of the current preset\n     */\n    \n    \n    /**\n     * Sends this channel's property\n     */\n    sendChannelProperty()\n    {\n        if (!this.synth.enableEventSystem)\n        {\n            return;\n        }\n        /**\n         * @type {ChannelProperty}\n         */\n        const data = {\n            voicesAmount: this.voices.length,\n            pitchBend: this.midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel],\n            pitchBendRangeSemitones: this.midiControllers[NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange] / 128,\n            isMuted: this.isMuted,\n            isDrum: this.drumChannel,\n            transposition: this.channelTransposeKeyShift + this.customControllers[customControllers.channelTransposeFine] / 100,\n            bank: this.sentBank,\n            program: this.preset?.program\n        };\n        this.synth?.onChannelPropertyChange?.(data, this.channelNumber);\n    }\n    \n    resetGeneratorOverrides()\n    {\n        this.generatorOverrides.fill(GENERATOR_OVERRIDE_NO_CHANGE_VALUE);\n        this.generatorOverridesEnabled = false;\n    }\n    \n    /**\n     * @param gen {generatorTypes}\n     * @param value {number}\n     * @param realtime {boolean}\n     */\n    setGeneratorOverride(gen, value, realtime = false)\n    {\n        this.generatorOverrides[gen] = value;\n        this.generatorOverridesEnabled = true;\n        if (realtime)\n        {\n            this.voices.forEach(v =>\n            {\n                v.generators[gen] = value;\n                this.computeModulators(v);\n            });\n        }\n    }\n    \n    resetGeneratorOffsets()\n    {\n        this.generatorOffsets.fill(0);\n        this.generatorOffsetsEnabled = false;\n    }\n    \n    /**\n     * @param gen {generatorTypes}\n     * @param value {number}\n     */\n    setGeneratorOffset(gen, value)\n    {\n        this.generatorOffsets[gen] = value * generatorLimits[gen].nrpn;\n        this.generatorOffsetsEnabled = true;\n        this.voices.forEach(v =>\n        {\n            this.computeModulators(v);\n        });\n    }\n}\n\n// voice\nMidiAudioChannel.prototype.renderVoice = renderVoice;\nMidiAudioChannel.prototype.panAndMixVoice = panAndMixVoice;\nMidiAudioChannel.prototype.killNote = killNote;\nMidiAudioChannel.prototype.stopAllNotes = stopAllNotes;\nMidiAudioChannel.prototype.muteChannel = muteChannel;\nMidiAudioChannel.prototype.computeModulators = computeModulators;\n\n// MIDI messages\nMidiAudioChannel.prototype.noteOn = noteOn;\nMidiAudioChannel.prototype.noteOff = noteOff;\nMidiAudioChannel.prototype.polyPressure = polyPressure;\nMidiAudioChannel.prototype.channelPressure = channelPressure;\nMidiAudioChannel.prototype.pitchWheel = pitchWheel;\nMidiAudioChannel.prototype.programChange = programChange;\n\n// Tuning\nMidiAudioChannel.prototype.setTuning = setTuning;\nMidiAudioChannel.prototype.setOctaveTuning = setOctaveTuning;\nMidiAudioChannel.prototype.setModulationDepth = setModulationDepth;\nMidiAudioChannel.prototype.transposeChannel = transposeChannel;\n\n// CC\nMidiAudioChannel.prototype.controllerChange = controllerChange;\nMidiAudioChannel.prototype.resetControllers = resetControllers;\nMidiAudioChannel.prototype.resetControllersRP15Compliant = resetControllersRP15Compliant;\nMidiAudioChannel.prototype.resetParameters = resetParameters;\nMidiAudioChannel.prototype.dataEntryFine = dataEntryFine;\nMidiAudioChannel.prototype.dataEntryCoarse = dataEntryCoarse;\n\nexport { MidiAudioChannel };\n", "import { MidiAudioChannel } from \"../engine_components/midi_audio_channel.js\";\n\n/**\n * @param sendEvent {boolean}\n * @this {SpessaSynthProcessor}\n */\nexport function createMidiChannel(sendEvent = false)\n{\n    /**\n     * @type {MidiAudioChannel}\n     */\n    const channel = new MidiAudioChannel(this, this.defaultPreset, this.midiAudioChannels.length);\n    this.midiAudioChannels.push(channel);\n    if (sendEvent)\n    {\n        this.callEvent(\"newchannel\", undefined);\n        channel.sendChannelProperty();\n        this.midiAudioChannels[this.midiAudioChannels.length - 1].setDrums(true);\n    }\n}", "/**\n * @typedef {Object} SynthProcessorOptions\n * @property {boolean?} enableEventSystem - if the event system is enabled.\n * @property {number?} initialTime - initial synth time, in seconds.\n * @property {boolean?} effectsEnabled - if the processor should route audio to the effect channels.\n * @property {number?} midiChannels - the default MIDI channel count.\n */\n\n\n/**\n * @type {SynthProcessorOptions}\n */\nexport const DEFAULT_SYNTH_OPTIONS = {\n    enableEventSystem: true,\n    initialTime: 0,\n    effectsEnabled: true,\n    midiChannels: 16\n};", "import { SpessaSynthInfo } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { voiceKilling } from \"./engine_methods/stopping_notes/voice_killing.js\";\nimport { ALL_CHANNELS_OR_DIFFERENT_ACTION, DEFAULT_SYNTH_MODE, VOICE_CAP } from \"../synth_constants.js\";\nimport { stbvorbis } from \"../../externals/stbvorbis_sync/stbvorbis_sync.min.js\";\nimport { VOLUME_ENVELOPE_SMOOTHING_FACTOR } from \"./engine_components/volume_envelope.js\";\nimport { systemExclusive } from \"./engine_methods/system_exclusive.js\";\nimport { masterParameterType, setMasterParameter } from \"./engine_methods/controller_control/master_parameters.js\";\nimport { resetAllControllers } from \"./engine_methods/controller_control/reset_controllers.js\";\nimport { SoundFontManager } from \"./engine_components/soundfont_manager.js\";\nimport { KeyModifierManager } from \"./engine_components/key_modifier_manager.js\";\nimport { getVoices, getVoicesForPreset } from \"./engine_components/voice.js\";\nimport { PAN_SMOOTHING_FACTOR } from \"./engine_components/stereo_panner.js\";\nimport { stopAllChannels } from \"./engine_methods/stopping_notes/stop_all_channels.js\";\nimport { clearEmbeddedBank, setEmbeddedSoundFont } from \"./engine_methods/soundfont_management/embedded_sound_bank.js\";\nimport { updatePresetList } from \"./engine_methods/soundfont_management/update_preset_list.js\";\nimport { transposeAllChannels } from \"./engine_methods/tuning_control/transpose_all_channels.js\";\nimport { setMasterTuning } from \"./engine_methods/tuning_control/set_master_tuning.js\";\nimport { applySynthesizerSnapshot } from \"./snapshot/apply_synthesizer_snapshot.js\";\nimport { createMidiChannel } from \"./engine_methods/create_midi_channel.js\";\nimport { FILTER_SMOOTHING_FACTOR } from \"./engine_components/lowpass_filter.js\";\nimport { getEvent, messageTypes } from \"../../midi/midi_message.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { interpolationTypes } from \"./engine_components/enums.js\";\nimport { DEFAULT_SYNTH_OPTIONS } from \"./synth_processor_options.js\";\nimport { fillWithDefaults } from \"../../utils/fill_with_defaults.js\";\nimport { isSystemXG } from \"../../utils/xg_hacks.js\";\n\n\n/**\n * @typedef {\"gm\"|\"gm2\"|\"gs\"|\"xg\"} SynthSystem\n */\n\n/**\n * main_processor.js\n * purpose: the core synthesis engine\n */\n\n\n/**\n * @typedef {Object} NoteOnCallback\n * @property {number} midiNote - The MIDI note number.\n * @property {number} channel - The MIDI channel number.\n * @property {number} velocity - The velocity of the note.\n */\n\n/**\n * @typedef {Object} NoteOffCallback\n * @property {number} midiNote - The MIDI note number.\n * @property {number} channel - The MIDI channel number.\n */\n\n/**\n * @typedef {Object} DrumChangeCallback\n * @property {number} channel - The MIDI channel number.\n * @property {boolean} isDrumChannel - Indicates if the channel is a drum channel.\n */\n\n/**\n * @typedef {Object} ProgramChangeCallback\n * @property {number} channel - The MIDI channel number.\n * @property {number} program - The program number.\n * @property {number} bank - The bank number.\n */\n\n/**\n * @typedef {Object} ControllerChangeCallback\n * @property {number} channel - The MIDI channel number.\n * @property {number} controllerNumber - The controller number.\n * @property {number} controllerValue - The value of the controller.\n */\n\n/**\n * @typedef {Object} MuteChannelCallback\n * @property {number} channel - The MIDI channel number.\n * @property {boolean} isMuted - Indicates if the channel is muted.\n */\n\n/**\n * @typedef {Object} PresetListChangeCallbackSingle\n * @property {string} presetName - The name of the preset.\n * @property {number} bank - The bank number.\n * @property {number} program - The program number.\n */\n\n/**\n * @typedef {PresetListChangeCallbackSingle[]} PresetListChangeCallback - A list of preset objects.\n */\n\n/**\n * @typedef {Object} SynthDisplayCallback\n * @property {Uint8Array} displayData - The data to display.\n * @property {synthDisplayTypes} displayType - The type of display.\n */\n\n/**\n * @typedef {Object} PitchWheelCallback\n * @property {number} channel - The MIDI channel number.\n * @property {number} MSB - The most significant byte of the pitch-wheel value.\n * @property {number} LSB - The least significant byte of the pitch-wheel value.\n */\n\n/**\n * @typedef {Object} ChannelPressureCallback\n * @property {number} channel - The MIDI channel number.\n * @property {number} pressure - The pressure value.\n */\n\n/**\n * @typedef {Error} SoundfontErrorCallback - The error message for soundfont errors.\n */\n\n/**\n * @typedef {\n *     NoteOnCallback |\n *     NoteOffCallback |\n *     DrumChangeCallback |\n *     ProgramChangeCallback |\n *     ControllerChangeCallback |\n *     MuteChannelCallback |\n *     PresetListChangeCallback |\n *     PitchWheelCallback |\n *     SoundfontErrorCallback |\n *     ChannelPressureCallback |\n *     SynthDisplayCallback |\n *     undefined\n * } EventCallbackData\n */\n\n/**\n * @typedef {\n * \"noteon\"|\n * \"noteoff\"|\n * \"pitchwheel\"|\n * \"controllerchange\"|\n * \"programchange\"|\n * \"channelpressure\"|\n * \"polypressure\" |\n * \"drumchange\"|\n * \"stopall\"|\n * \"newchannel\"|\n * \"mutechannel\"|\n * \"presetlistchange\"|\n * \"allcontrollerreset\"|\n * \"soundfonterror\"|\n * \"synthdisplay\"} EventTypes\n */\n\n\n/**\n * @typedef {Object} SynthMethodOptions\n * @property {number} time - the audio context time when the event should execute, in seconds.\n */\n\n/**\n * @type {SynthMethodOptions}\n */\nconst DEFAULT_SYNTH_METHOD_OPTIONS = {\n    time: 0\n};\n\n// if the note is released faster than that, it forced to last that long\n// this is used mostly for drum channels, where a lot of midis like to send instant note off after a note on\nexport const MIN_NOTE_LENGTH = 0.03;\n// this sounds way nicer for an instant hi-hat cutoff\nexport const MIN_EXCLUSIVE_LENGTH = 0.07;\n\nexport const SYNTHESIZER_GAIN = 1.0;\n\n\n// the core synthesis engine of spessasynth.\nclass SpessaSynthProcessor\n{\n    \n    /**\n     * Manages sound banks.\n     * @type {SoundFontManager}\n     */\n    soundfontManager = new SoundFontManager(this.updatePresetList.bind(this));\n    \n    /**\n     * Cached voices for all presets for this synthesizer.\n     * Nesting goes like this:\n     * this.cachedVoices[bankNumber][programNumber][midiNote][velocity] = a list of voices for that.\n     * @type {Voice[][][][][]}\n     */\n    cachedVoices = [];\n    \n    /**\n     * Synth's device id: -1 means all\n     * @type {number}\n     */\n    deviceID = ALL_CHANNELS_OR_DIFFERENT_ACTION;\n    \n    /**\n     * Synth's event queue from the main thread\n     * @type {{callback: function(), time: number}[]}\n     */\n    eventQueue = [];\n    \n    /**\n     * Interpolation type used\n     * @type {interpolationTypes}\n     */\n    interpolationType = interpolationTypes.fourthOrder;\n    \n    /**\n     * Global transposition in semitones\n     * @type {number}\n     */\n    transposition = 0;\n    \n    /**\n     * this.tunings[program][key] = tuning\n     * @type {MTSProgramTuning[]}\n     */\n    tunings = [];\n    \n    /**\n     * The volume gain, set by user\n     * @type {number}\n     */\n    masterGain = SYNTHESIZER_GAIN;\n    \n    /**\n     * The volume gain, set by MIDI sysEx\n     * @type {number}\n     */\n    midiVolume = 1;\n    \n    /**\n     * Reverb linear gain\n     * @type {number}\n     */\n    reverbGain = 1;\n    /**\n     * Chorus linear gain\n     * @type {number}\n     */\n    chorusGain = 1;\n    \n    /**\n     * Set via system exclusive\n     * @type {number}\n     */\n    reverbSend = 1;\n    /**\n     * Set via system exclusive\n     * @type {number}\n     */\n    chorusSend = 1;\n    \n    /**\n     * Maximum number of voices allowed at once\n     * @type {number}\n     */\n    voiceCap = VOICE_CAP;\n    \n    /**\n     * (-1 to 1)\n     * @type {number}\n     */\n    pan = 0.0;\n    /**\n     * the pan of the left channel\n     * @type {number}\n     */\n    panLeft = 0.5;\n    \n    /**\n     * the pan of the right channel\n     * @type {number}\n     */\n    panRight = 0.5;\n    \n    /**\n     * forces note killing instead of releasing\n     * @type {boolean}\n     */\n    highPerformanceMode = false;\n    \n    /**\n     * Handlese custom key overrides: velocity and preset\n     * @type {KeyModifierManager}\n     */\n    keyModifierManager = new KeyModifierManager();\n    \n    /**\n     * contains all the channels with their voices on the processor size\n     * @type {MidiAudioChannel[]}\n     */\n    midiAudioChannels = [];\n    \n    /**\n     * Controls the bank selection & SysEx\n     * @type {SynthSystem}\n     */\n    system = DEFAULT_SYNTH_MODE;\n    /**\n     * Current total voices amount\n     * @type {number}\n     */\n    totalVoicesAmount = 0;\n    \n    /**\n     * Synth's default (reset) preset\n     * @type {BasicPreset}\n     */\n    defaultPreset;\n    \n    /**\n     * Synth's default (reset) drum preset\n     * @type {BasicPreset}\n     */\n    drumPreset;\n    \n    /**\n     * Controls if the processor is fully initialized\n     * @type {Promise<boolean>}\n     */\n    processorInitialized = stbvorbis.isInitialized;\n    \n    /**\n     * Current audio time\n     * @type {number}\n     */\n    currentSynthTime = 0;\n    \n    /**\n     * in hertz\n     * @type {number}\n     */\n    sampleRate;\n    \n    /**\n     * Sample time in seconds\n     * @type {number}\n     */\n    sampleTime;\n    \n    /**\n     * are the chorus and reverb effects enabled?\n     * @type {boolean}\n     */\n    effectsEnabled;\n    \n    \n    /**\n     * for applying the snapshot after an override sound bank too\n     * @type {SynthesizerSnapshot}\n     * @private\n     */\n    _snapshot;\n    \n    /**\n     * Calls when an event occurs.\n     * @type {function}\n     * @param {EventTypes} eventType - the event type.\n     * @param {EventCallbackData} eventData - the event data.\n     */\n    onEventCall;\n    \n    /**\n     * Calls when a channel property is changed.\n     * @type {function}\n     * @param {ChannelProperty} property - the updated property.\n     * @param {number} channelNumber - the channel number of the said property.\n     */\n    onChannelPropertyChange;\n    \n    /**\n     * Calls when a master parameter is changed.\n     * @type {function}\n     * @param {masterParameterType} parameter - the parameter type\n     * @param {number|string} value - the new value.\n     */\n    onMasterParameterChange;\n    \n    \n    /**\n     * Creates a new synthesizer engine.\n     * @param sampleRate {number} - sample rate, in Hertz.\n     * @param options {SynthProcessorOptions} - the processor's options.\n     */\n    constructor(sampleRate,\n                options = DEFAULT_SYNTH_OPTIONS)\n    {\n        options = fillWithDefaults(options, DEFAULT_SYNTH_OPTIONS);\n        /**\n         * Midi output count\n         * @type {number}\n         */\n        this.midiOutputsCount = options.midiChannels;\n        this.effectsEnabled = options.effectsEnabled;\n        this.enableEventSystem = options.enableEventSystem;\n        this.currentSynthTime = options.initialTime;\n        this.sampleTime = 1 / sampleRate;\n        this.sampleRate = sampleRate;\n        \n        // these smoothing factors were tested on 44,100 Hz, adjust them to target sample rate here\n        this.volumeEnvelopeSmoothingFactor = VOLUME_ENVELOPE_SMOOTHING_FACTOR * (44100 / sampleRate);\n        this.panSmoothingFactor = PAN_SMOOTHING_FACTOR * (44100 / sampleRate);\n        this.filterSmoothingFactor = FILTER_SMOOTHING_FACTOR * (44100 / sampleRate);\n        \n        \n        for (let i = 0; i < 128; i++)\n        {\n            this.tunings.push([]);\n        }\n        \n        for (let i = 0; i < this.midiOutputsCount; i++)\n        {\n            this.createMidiChannel(false);\n        }\n        this.processorInitialized.then(() =>\n        {\n            SpessaSynthInfo(\"%cSpessaSynth is ready!\", consoleColors.recognized);\n        });\n    }\n    \n    /**\n     * @returns {number}\n     */\n    get currentGain()\n    {\n        return this.masterGain * this.midiVolume;\n    }\n    \n    getDefaultPresets()\n    {\n        // override this to XG, to set the default preset to NOT be XG drums!\n        const sys = this.system;\n        this.system = \"xg\";\n        this.defaultPreset = this.getPreset(0, 0);\n        this.system = sys;\n        this.drumPreset = this.getPreset(128, 0);\n    }\n    \n    /**\n     * @param value {SynthSystem}\n     */\n    setSystem(value)\n    {\n        this.system = value;\n        this?.onMasterParameterChange?.(masterParameterType.midiSystem, this.system);\n    }\n    \n    /**\n     * @param bank {number}\n     * @param program {number}\n     * @param midiNote {number}\n     * @param velocity {number}\n     * @returns {Voice[]|undefined}\n     */\n    getCachedVoice(bank, program, midiNote, velocity)\n    {\n        return this.cachedVoices?.[bank]?.[program]?.[midiNote]?.[velocity];\n    }\n    \n    /**\n     * @param bank {number}\n     * @param program {number}\n     * @param midiNote {number}\n     * @param velocity {number}\n     * @param voices {Voice[]}\n     */\n    setCachedVoice(bank, program, midiNote, velocity, voices)\n    {\n        // make sure that it exists\n        if (!this.cachedVoices[bank])\n        {\n            this.cachedVoices[bank] = [];\n        }\n        if (!this.cachedVoices[bank][program])\n        {\n            this.cachedVoices[bank][program] = [];\n        }\n        if (!this.cachedVoices[bank][program][midiNote])\n        {\n            this.cachedVoices[bank][program][midiNote] = [];\n        }\n        \n        // cache\n        this.cachedVoices[bank][program][midiNote][velocity] = voices;\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Renders float32 audio data to stereo outputs; buffer size of 128 is recommended\n     * All float arrays must have the same length\n     * @param outputs {Float32Array[]} output stereo channels (L, R)\n     * @param reverb {Float32Array[]} reverb stereo channels (L, R)\n     * @param chorus {Float32Array[]} chorus stereo channels (L, R)\n     * @param startIndex {number} start offset of the passed arrays, rendering starts at this index, defaults to 0\n     * @param sampleCount {number} the length of the rendered buffer, defaults to float32array length - startOffset\n     */\n    renderAudio(outputs,\n                reverb,\n                chorus,\n                startIndex = 0,\n                sampleCount = 0\n    )\n    {\n        this.renderAudioSplit(reverb, chorus, Array(16).fill(outputs), startIndex, sampleCount);\n    }\n    \n    /**\n     * Renders the float32 audio data of each channel; buffer size of 128 is recommended\n     * All float arrays must have the same length\n     * @param reverbChannels {Float32Array[]} reverb stereo channels (L, R)\n     * @param chorusChannels {Float32Array[]} chorus stereo channels (L, R)\n     * @param separateChannels {Float32Array[][]} a total of 16 stereo pairs (L, R) for each MIDI channel\n     * @param startIndex {number} start offset of the passed arrays, rendering starts at this index, defaults to 0\n     * @param sampleCount {number} the length of the rendered buffer, defaults to float32array length - startOffset\n     */\n    renderAudioSplit(reverbChannels,\n                     chorusChannels,\n                     separateChannels,\n                     startIndex = 0,\n                     sampleCount = 0\n    )\n    {\n        // process event queue\n        const time = this.currentSynthTime;\n        while (this.eventQueue[0]?.time <= time)\n        {\n            this.eventQueue.shift().callback();\n        }\n        const revL = reverbChannels[0];\n        const revR = reverbChannels[1];\n        const chrL = chorusChannels[0];\n        const chrR = chorusChannels[1];\n        \n        // validate\n        startIndex = Math.max(startIndex, 0);\n        const quantumSize = sampleCount || separateChannels[0][0].length - startIndex;\n        \n        // for every channel\n        this.totalVoicesAmount = 0;\n        this.midiAudioChannels.forEach((channel, index) =>\n        {\n            if (channel.voices.length < 1 || channel.isMuted)\n            {\n                // there's nothing to do!\n                return;\n            }\n            let voiceCount = channel.voices.length;\n            const ch = index % 16;\n            \n            // render to the appropriate output\n            channel.renderAudio(\n                separateChannels[ch][0], separateChannels[ch][1],\n                revL, revR,\n                chrL, chrR,\n                startIndex, quantumSize\n            );\n            \n            this.totalVoicesAmount += channel.voices.length;\n            // if voice count changed, update voice amount\n            if (channel.voices.length !== voiceCount)\n            {\n                channel.sendChannelProperty();\n            }\n        });\n        \n        // advance the time appropriately\n        this.currentSynthTime += quantumSize * this.sampleTime;\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    destroySynthProcessor()\n    {\n        this.midiAudioChannels.forEach(c =>\n        {\n            delete c.midiControllers;\n            delete c.voices;\n            delete c.sustainedVoices;\n            delete c.lockedControllers;\n            delete c.preset;\n            delete c.customControllers;\n        });\n        delete this.cachedVoices;\n        delete this.midiAudioChannels;\n        this.soundfontManager.destroyManager();\n        delete this.soundfontManager;\n    }\n    \n    /**\n     * @param channel {number}\n     * @param controllerNumber {number}\n     * @param controllerValue {number}\n     * @param force {boolean}\n     */\n    controllerChange(channel, controllerNumber, controllerValue, force = false)\n    {\n        this.midiAudioChannels[channel].controllerChange(controllerNumber, controllerValue, force);\n    }\n    \n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     * @param velocity {number}\n     */\n    noteOn(channel, midiNote, velocity)\n    {\n        this.midiAudioChannels[channel].noteOn(midiNote, velocity);\n    }\n    \n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     */\n    noteOff(channel, midiNote)\n    {\n        this.midiAudioChannels[channel].noteOff(midiNote);\n    }\n    \n    /**\n     * @param channel {number}\n     * @param midiNote {number}\n     * @param pressure {number}\n     */\n    polyPressure(channel, midiNote, pressure)\n    {\n        this.midiAudioChannels[channel].polyPressure(midiNote, pressure);\n    }\n    \n    /**\n     * @param channel {number}\n     * @param pressure {number}\n     */\n    channelPressure(channel, pressure)\n    {\n        this.midiAudioChannels[channel].channelPressure(pressure);\n    }\n    \n    /**\n     * @param channel {number}\n     * @param MSB {number}\n     * @param LSB {number}\n     */\n    pitchWheel(channel, MSB, LSB)\n    {\n        this.midiAudioChannels[channel].pitchWheel(MSB, LSB);\n    }\n    \n    /**\n     * @param channel {number}\n     * @param programNumber {number}\n     */\n    programChange(channel, programNumber)\n    {\n        this.midiAudioChannels[channel].programChange(programNumber);\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Processes a MIDI message\n     * @param message {Uint8Array} - the message to process\n     * @param channelOffset {number} - channel offset for the message\n     * @param force {boolean} cool stuff\n     * @param options {SynthMethodOptions} - additional options for scheduling the message\n     */\n    processMessage(message, channelOffset = 0, force = false, options = DEFAULT_SYNTH_METHOD_OPTIONS)\n    {\n        const call = () =>\n        {\n            const statusByteData = getEvent(message[0]);\n            \n            const channel = statusByteData.channel + channelOffset;\n            // process the event\n            switch (statusByteData.status)\n            {\n                case messageTypes.noteOn:\n                    const velocity = message[2];\n                    if (velocity > 0)\n                    {\n                        this.noteOn(channel, message[1], velocity);\n                    }\n                    else\n                    {\n                        this.noteOff(channel, message[1]);\n                    }\n                    break;\n                \n                case messageTypes.noteOff:\n                    if (force)\n                    {\n                        this.midiAudioChannels[channel].killNote(message[1]);\n                    }\n                    else\n                    {\n                        this.noteOff(channel, message[1]);\n                    }\n                    break;\n                \n                case messageTypes.pitchBend:\n                    this.pitchWheel(channel, message[2], message[1]);\n                    break;\n                \n                case messageTypes.controllerChange:\n                    this.controllerChange(channel, message[1], message[2], force);\n                    break;\n                \n                case messageTypes.programChange:\n                    this.programChange(channel, message[1]);\n                    break;\n                \n                case messageTypes.polyPressure:\n                    this.polyPressure(channel, message[0], message[1]);\n                    break;\n                \n                case messageTypes.channelPressure:\n                    this.channelPressure(channel, message[1]);\n                    break;\n                \n                case messageTypes.systemExclusive:\n                    this.systemExclusive(new IndexedByteArray(message.slice(1)), channelOffset);\n                    break;\n                \n                case messageTypes.reset:\n                    this.stopAllChannels(true);\n                    this.resetAllControllers();\n                    break;\n                \n                default:\n                    break;\n            }\n        };\n        \n        const time = options.time;\n        if (time > this.currentSynthTime)\n        {\n            this.eventQueue.push({\n                callback: call.bind(this),\n                time: time\n            });\n            this.eventQueue.sort((e1, e2) => e1.time - e2.time);\n        }\n        else\n        {\n            call();\n        }\n    }\n    \n    /**\n     * @param volume {number} 0 to 1\n     */\n    setMIDIVolume(volume)\n    {\n        // GM2 specification, section 4.1: volume is squared.\n        // though, according to my own testing, Math.E seems like a better choice\n        this.midiVolume = Math.pow(volume, Math.E);\n        this.setMasterParameter(masterParameterType.masterPan, this.pan);\n    }\n    \n    /**\n     * Calls synth event\n     * @param eventName {EventTypes} the event name\n     * @param eventData {EventCallbackData}\n     * @this {SpessaSynthProcessor}\n     */\n    callEvent(eventName, eventData)\n    {\n        this?.onEventCall?.(eventName, eventData);\n    }\n    \n    clearCache()\n    {\n        this.cachedVoices = [];\n    }\n    \n    /**\n     * @param program {number}\n     * @param bank {number}\n     * @returns {BasicPreset}\n     */\n    getPreset(bank, program)\n    {\n        return this.soundfontManager.getPreset(bank, program, isSystemXG(this.system)).preset;\n    }\n}\n\n// include other methods\n// voice related\nSpessaSynthProcessor.prototype.voiceKilling = voiceKilling;\nSpessaSynthProcessor.prototype.getVoicesForPreset = getVoicesForPreset;\nSpessaSynthProcessor.prototype.getVoices = getVoices;\n\n// system-exclusive related\nSpessaSynthProcessor.prototype.systemExclusive = systemExclusive;\n\n// channel related\nSpessaSynthProcessor.prototype.stopAllChannels = stopAllChannels;\nSpessaSynthProcessor.prototype.createMidiChannel = createMidiChannel;\nSpessaSynthProcessor.prototype.resetAllControllers = resetAllControllers;\n\n// master parameter related\nSpessaSynthProcessor.prototype.setMasterParameter = setMasterParameter;\n\n// tuning related\nSpessaSynthProcessor.prototype.transposeAllChannels = transposeAllChannels;\nSpessaSynthProcessor.prototype.setMasterTuning = setMasterTuning;\n\n// program related\nSpessaSynthProcessor.prototype.clearEmbeddedBank = clearEmbeddedBank;\nSpessaSynthProcessor.prototype.setEmbeddedSoundFont = setEmbeddedSoundFont;\nSpessaSynthProcessor.prototype.updatePresetList = updatePresetList;\n\n// snapshot related\nSpessaSynthProcessor.prototype.applySynthesizerSnapshot = applySynthesizerSnapshot;\n\nexport { SpessaSynthProcessor };", "/**\n * Reads as Big endian\n * @param dataArray {IndexedByteArray}\n * @param bytesAmount {number}\n * @returns {number}\n */\nexport function readBytesAsUintBigEndian(dataArray, bytesAmount)\n{\n    let out = 0;\n    for (let i = 8 * (bytesAmount - 1); i >= 0; i -= 8)\n    {\n        out |= (dataArray[dataArray.currentIndex++] << i);\n    }\n    return out >>> 0;\n}\n\n/**\n * @param number {number}\n * @param bytesAmount {number}\n * @returns {number[]}\n */\nexport function writeBytesAsUintBigEndian(number, bytesAmount)\n{\n    const bytes = new Array(bytesAmount).fill(0);\n    for (let i = bytesAmount - 1; i >= 0; i--)\n    {\n        bytes[i] = number & 0xFF;\n        number >>= 8;\n    }\n    \n    return bytes;\n}", "import { getEvent, messageTypes } from \"../midi/midi_message.js\";\nimport { consoleColors } from \"../utils/other.js\";\nimport { SpessaSynthWarn } from \"../utils/loggin.js\";\nimport { readBytesAsUintBigEndian } from \"../utils/byte_functions/big_endian.js\";\n\n/**\n * Processes a single event\n * @param event {MIDIMessage}\n * @param trackIndex {number}\n * @this {SpessaSynthSequencer}\n * @private\n */\nexport function _processEvent(event, trackIndex)\n{\n    if (this.sendMIDIMessages)\n    {\n        if (event.messageStatusByte >= 0x80)\n        {\n            this.sendMIDIMessage([event.messageStatusByte, ...event.messageData]);\n            return;\n        }\n    }\n    const statusByteData = getEvent(event.messageStatusByte);\n    const offset = this.midiPortChannelOffsets[this.midiPorts[trackIndex]] || 0;\n    statusByteData.channel += offset;\n    // process the event\n    switch (statusByteData.status)\n    {\n        case messageTypes.noteOn:\n            const velocity = event.messageData[1];\n            if (velocity > 0)\n            {\n                this.synth.noteOn(statusByteData.channel, event.messageData[0], velocity);\n                this.playingNotes.push({\n                    midiNote: event.messageData[0],\n                    channel: statusByteData.channel,\n                    velocity: velocity\n                });\n            }\n            else\n            {\n                this.synth.noteOff(statusByteData.channel, event.messageData[0]);\n                const toDelete = this.playingNotes.findIndex(n =>\n                    n.midiNote === event.messageData[0] && n.channel === statusByteData.channel);\n                if (toDelete !== -1)\n                {\n                    this.playingNotes.splice(toDelete, 1);\n                }\n            }\n            break;\n        \n        case messageTypes.noteOff:\n            this.synth.noteOff(statusByteData.channel, event.messageData[0]);\n            const toDelete = this.playingNotes.findIndex(n =>\n                n.midiNote === event.messageData[0] && n.channel === statusByteData.channel);\n            if (toDelete !== -1)\n            {\n                this.playingNotes.splice(toDelete, 1);\n            }\n            break;\n        \n        case messageTypes.pitchBend:\n            this.synth.pitchWheel(statusByteData.channel, event.messageData[1], event.messageData[0]);\n            break;\n        \n        case messageTypes.controllerChange:\n            // empty tracks cannot cc change\n            if (this.midiData.isMultiPort && this.midiData.usedChannelsOnTrack[trackIndex].size === 0)\n            {\n                return;\n            }\n            this.synth.controllerChange(statusByteData.channel, event.messageData[0], event.messageData[1]);\n            break;\n        \n        case messageTypes.programChange:\n            // empty tracks cannot program change\n            if (this.midiData.isMultiPort && this.midiData.usedChannelsOnTrack[trackIndex].size === 0)\n            {\n                return;\n            }\n            this.synth.programChange(statusByteData.channel, event.messageData[0]);\n            break;\n        \n        case messageTypes.polyPressure:\n            this.synth.polyPressure(statusByteData.channel, event.messageData[0], event.messageData[1]);\n            break;\n        \n        case messageTypes.channelPressure:\n            this.synth.channelPressure(statusByteData.channel, event.messageData[0]);\n            break;\n        \n        case messageTypes.systemExclusive:\n            this.synth.systemExclusive(event.messageData, offset);\n            break;\n        \n        case messageTypes.setTempo:\n            event.messageData.currentIndex = 0;\n            let tempoBPM = 60000000 / readBytesAsUintBigEndian(event.messageData, 3);\n            this.oneTickToSeconds = 60 / (tempoBPM * this.midiData.timeDivision);\n            if (this.oneTickToSeconds === 0)\n            {\n                this.oneTickToSeconds = 60 / (120 * this.midiData.timeDivision);\n                SpessaSynthWarn(\"invalid tempo! falling back to 120 BPM\");\n                tempoBPM = 120;\n            }\n            break;\n        \n        // recognized but ignored\n        case messageTypes.timeSignature:\n        case messageTypes.endOfTrack:\n        case messageTypes.midiChannelPrefix:\n        case messageTypes.songPosition:\n        case messageTypes.activeSensing:\n        case messageTypes.keySignature:\n        case messageTypes.sequenceNumber:\n        case messageTypes.sequenceSpecific:\n        case messageTypes.text:\n        case messageTypes.lyric:\n        case messageTypes.copyright:\n        case messageTypes.trackName:\n        case messageTypes.marker:\n        case messageTypes.cuePoint:\n        case messageTypes.instrumentName:\n        case messageTypes.programName:\n            break;\n        \n        \n        case messageTypes.midiPort:\n            this.assignMIDIPort(trackIndex, event.messageData[0]);\n            break;\n        \n        case messageTypes.reset:\n            this.synth.stopAllChannels();\n            this.synth.resetAllControllers();\n            break;\n        \n        default:\n            SpessaSynthWarn(\n                `%cUnrecognized Event: %c${event.messageStatusByte}%c status byte: %c${Object.keys(\n                    messageTypes).find(k => messageTypes[k] === statusByteData.status)}`,\n                consoleColors.warn,\n                consoleColors.unrecognized,\n                consoleColors.warn,\n                consoleColors.value\n            );\n            break;\n    }\n    if (statusByteData.status >= 0 && statusByteData.status < 0x80)\n    {\n        this?.onMetaEvent?.(event, trackIndex);\n    }\n}\n\n/**\n * Adds 16 channels to the synth\n * @this {SpessaSynthSequencer}\n * @private\n */\nexport function _addNewMidiPort()\n{\n    for (let i = 0; i < 16; i++)\n    {\n        this.synth.createMidiChannel(true);\n    }\n}", "/**\n * Processes a single tick\n * @this {SpessaSynthSequencer}\n */\nexport function processTick()\n{\n    if (!this.isActive)\n    {\n        return;\n    }\n    let current = this.currentTime;\n    while (this.playedTime < current)\n    {\n        // find the next event\n        let trackIndex = this._findFirstEventIndex();\n        let event = this.tracks[trackIndex][this.eventIndex[trackIndex]];\n        this._processEvent(event, trackIndex);\n        \n        this.eventIndex[trackIndex]++;\n        \n        // find the next event\n        trackIndex = this._findFirstEventIndex();\n        if (this.tracks[trackIndex].length <= this.eventIndex[trackIndex])\n        {\n            // the song has ended\n            if (this.loop)\n            {\n                this.setTimeTicks(this.midiData.loop.start);\n                return;\n            }\n            this.eventIndex[trackIndex]--;\n            this.pause(true);\n            if (this.songs.length > 1)\n            {\n                this.nextSong();\n            }\n            return;\n        }\n        let eventNext = this.tracks[trackIndex][this.eventIndex[trackIndex]];\n        this.playedTime += this.oneTickToSeconds * (eventNext.ticks - event.ticks);\n        \n        const canLoop = this.loop && (this.loopCount > 0 || this.loopCount === -1);\n        \n        // if we reached loop.end\n        if ((this.midiData.loop.end <= event.ticks) && canLoop)\n        {\n            // loop\n            if (this.loopCount !== Infinity)\n            {\n                this.loopCount--;\n                this?.onLoopCountChange?.(this.loopCount);\n            }\n            this.setTimeTicks(this.midiData.loop.start);\n            return;\n        }\n        // if the song has ended\n        else if (current >= this.duration)\n        {\n            if (canLoop)\n            {\n                // loop\n                if (this.loopCount !== Infinity)\n                {\n                    this.loopCount--;\n                    this?.onLoopCountChange?.(this.loopCount);\n                }\n                this.setTimeTicks(this.midiData.loop.start);\n                return;\n            }\n            // stop the playback\n            this.eventIndex[trackIndex]--;\n            this.pause(true);\n            if (this.songs.length > 1)\n            {\n                this.nextSong();\n            }\n            return;\n        }\n    }\n}\n\n\n/**\n * @returns {number} the index of the first to the current played time\n * @this {SpessaSynthSequencer}\n */\nexport function _findFirstEventIndex()\n{\n    let index = 0;\n    let ticks = Infinity;\n    this.tracks.forEach((track, i) =>\n    {\n        if (this.eventIndex[i] >= track.length)\n        {\n            return;\n        }\n        if (track[this.eventIndex[i]].ticks < ticks)\n        {\n            index = i;\n            ticks = track[this.eventIndex[i]].ticks;\n        }\n    });\n    return index;\n}", "import { IndexedByteArray } from \"../utils/indexed_array.js\";\n\n/**\n * This is the base type for MIDI files. It contains all the \"metadata\" and information.\n * It extends to:\n * - BasicMIDI, which contains the actual track data of the MIDI file. Essentially the MIDI file itself.\n * - MIDIData, which contains all properties that MIDI does, except for tracks and the embedded soundfont.\n * MIDIData is the \"shell\" of the file which is available on the main thread at all times, containing the metadata.\n */\nclass MIDISequenceData\n{\n    /**\n     * The time division of the sequence, representing the number of ticks per beat.\n     * @type {number}\n     */\n    timeDivision = 0;\n    \n    /**\n     * The duration of the sequence, in seconds.\n     * @type {number}\n     */\n    duration = 0;\n    \n    /**\n     * The tempo changes in the sequence, ordered from the last change to the first.\n     * Each change is represented by an object with a tick position and a tempo value in beats per minute.\n     * @type {{ticks: number, tempo: number}[]}\n     */\n    tempoChanges = [{ ticks: 0, tempo: 120 }];\n    \n    /**\n     * A string containing the copyright information for the MIDI sequence if detected.\n     * @type {string}\n     */\n    copyright = \"\";\n    \n    /**\n     * The number of tracks in the MIDI sequence.\n     * @type {number}\n     */\n    tracksAmount = 0;\n    \n    /**\n     * The track names in the MIDI file, an empty string if not set.\n     * @type {string[]}\n     */\n    trackNames = [];\n    \n    /**\n     * An array containing the lyrics of the sequence, stored as binary chunks (Uint8Array).\n     * @type {Uint8Array[]}\n     */\n    lyrics = [];\n    \n    /**\n     * An array of tick positions where lyrics events occur in the sequence.\n     * @type {number[]}\n     */\n    lyricsTicks = [];\n    \n    /**\n     * The tick position of the first note-on event in the MIDI sequence.\n     * @type {number}\n     */\n    firstNoteOn = 0;\n    \n    /**\n     * The MIDI key range used in the sequence, represented by a minimum and maximum note value.\n     * @type {{min: number, max: number}}\n     */\n    keyRange = { min: 0, max: 127 };\n    \n    /**\n     * The tick position of the last voice event (such as note-on, note-off, or control change) in the sequence.\n     * @type {number}\n     */\n    lastVoiceEventTick = 0;\n    \n    /**\n     * An array of MIDI port numbers used by each track in the sequence.\n     * @type {number[]}\n     */\n    midiPorts = [0];\n    \n    /**\n     * An array of channel offsets for each MIDI port, using the SpessaSynth method.\n     * @type {number[]}\n     */\n    midiPortChannelOffsets = [0];\n    \n    /**\n     * A list of sets, where each set contains the MIDI channels used by each track in the sequence.\n     * @type {Set<number>[]}\n     */\n    usedChannelsOnTrack = [];\n    \n    /**\n     * The loop points (in ticks) of the sequence, including both start and end points.\n     * @type {{start: number, end: number}}\n     */\n    loop = { start: 0, end: 0 };\n    \n    /**\n     * The name of the MIDI sequence.\n     * @type {string}\n     */\n    midiName = \"\";\n    \n    /**\n     * A boolean indicating if the sequence's name is the same as the file name.\n     * @type {boolean}\n     */\n    midiNameUsesFileName = false;\n    \n    /**\n     * The file name of the MIDI sequence, if provided during parsing.\n     * @type {string}\n     */\n    fileName = \"\";\n    \n    /**\n     * The raw, encoded MIDI name, represented as a Uint8Array.\n     * Useful when the MIDI file uses a different code page.\n     * @type {Uint8Array}\n     */\n    rawMidiName;\n    \n    /**\n     * The format of the MIDI file, which can be 0, 1, or 2, indicating the type of the MIDI file.\n     * @type {number}\n     */\n    format = 0;\n    \n    /**\n     * The RMID (Resource-Interchangeable MIDI) info data, if the file is RMID formatted.\n     * Otherwise, this field is undefined.\n     * Chunk type (e.g. \"INAM\"): Chunk data as a binary array.\n     * @type {Record<string, IndexedByteArray>}\n     */\n    RMIDInfo = {};\n    \n    /**\n     * The bank offset used for RMID files.\n     * @type {number}\n     */\n    bankOffset = 0;\n    \n    /**\n     * If the MIDI file is a Soft Karaoke file (.kar), this flag is set to true.\n     * https://www.mixagesoftware.com/en/midikit/help/HTML/karaoke_formats.html\n     * @type {boolean}\n     */\n    isKaraokeFile = false;\n    \n    /**\n     * Indicates if this file is a Multi-Port MIDI file.\n     * @type {boolean}\n     */\n    isMultiPort = false;\n    \n    /**\n     * Converts ticks to time in seconds\n     * @param ticks {number} time in MIDI ticks\n     * @returns {number} time in seconds\n     */\n    MIDIticksToSeconds(ticks)\n    {\n        let totalSeconds = 0;\n        \n        while (ticks > 0)\n        {\n            // tempo changes are reversed, so the first element is the last tempo change\n            // and the last element is the first tempo change\n            // (always at tick 0 and tempo 120)\n            // find the last tempo change that has occurred\n            let tempo = this.tempoChanges.find(v => v.ticks < ticks);\n            \n            // calculate the difference and tempo time\n            let timeSinceLastTempo = ticks - tempo.ticks;\n            totalSeconds += (timeSinceLastTempo * 60) / (tempo.tempo * this.timeDivision);\n            ticks -= timeSinceLastTempo;\n        }\n        \n        return totalSeconds;\n    }\n    \n    /**\n     * INTERNAL USE ONLY!\n     * @param sequence {MIDISequenceData}\n     * @protected\n     */\n    _copyFromSequence(sequence)\n    {\n        // properties can be assigned\n        this.midiName = sequence.midiName;\n        this.midiNameUsesFileName = sequence.midiNameUsesFileName;\n        this.fileName = sequence.fileName;\n        this.timeDivision = sequence.timeDivision;\n        this.duration = sequence.duration;\n        this.copyright = sequence.copyright;\n        this.tracksAmount = sequence.tracksAmount;\n        this.firstNoteOn = sequence.firstNoteOn;\n        this.lastVoiceEventTick = sequence.lastVoiceEventTick;\n        this.format = sequence.format;\n        this.bankOffset = sequence.bankOffset;\n        this.isKaraokeFile = sequence.isKaraokeFile;\n        this.isMultiPort = sequence.isMultiPort;\n        \n        // copying arrays\n        this.tempoChanges = [...sequence.tempoChanges];\n        this.lyrics = sequence.lyrics.map(arr => new Uint8Array(arr));\n        this.lyricsTicks = [...sequence.lyricsTicks];\n        this.midiPorts = [...sequence.midiPorts];\n        this.trackNames = [...sequence.trackNames];\n        this.midiPortChannelOffsets = [...sequence.midiPortChannelOffsets];\n        this.usedChannelsOnTrack = sequence.usedChannelsOnTrack.map(set => new Set(set));\n        this.rawMidiName = sequence.rawMidiName ? new Uint8Array(sequence.rawMidiName) : undefined;\n        \n        // copying objects\n        this.loop = { ...sequence.loop };\n        this.keyRange = { ...sequence.keyRange };\n        this.RMIDInfo = {};\n        for (const [key, value] of Object.entries(sequence.RMIDInfo))\n        {\n            this.RMIDInfo[key] = new IndexedByteArray(value);\n        }\n    }\n}\n\nexport { MIDISequenceData };", "/**\n * Reads VLQ From a MIDI byte array\n * @param MIDIbyteArray {IndexedByteArray}\n * @returns {number}\n */\nexport function readVariableLengthQuantity(MIDIbyteArray)\n{\n    let out = 0;\n    while (MIDIbyteArray)\n    {\n        const byte = MIDIbyteArray[MIDIbyteArray.currentIndex++];\n        // extract the first 7 bytes\n        out = (out << 7) | (byte & 127);\n        \n        // if the last byte isn't 1, stop reading\n        if ((byte >> 7) !== 1)\n        {\n            break;\n        }\n    }\n    return out;\n}\n\n/**\n * Write a VLQ from a number to a byte array\n * @param number {number}\n * @returns {number[]}\n */\nexport function writeVariableLengthQuantity(number)\n{\n    // Add the first byte\n    let bytes = [number & 127];\n    number >>= 7;\n    \n    // Continue processing the remaining bytes\n    while (number > 0)\n    {\n        bytes.unshift((number & 127) | 128);\n        number >>= 7;\n    }\n    return bytes;\n}", "import { messageTypes } from \"../midi_message.js\";\nimport { writeVariableLengthQuantity } from \"../../utils/byte_functions/variable_length_quantity.js\";\nimport { writeBytesAsUintBigEndian } from \"../../utils/byte_functions/big_endian.js\";\n\n/**\n * Exports the midi as a standard MIDI file\n * @this {BasicMIDI}\n */\nexport function writeMIDI()\n{\n    const midi = this;\n    if (!midi.tracks)\n    {\n        throw new Error(\"MIDI has no tracks!\");\n    }\n    /**\n     * @type {Uint8Array[]}\n     */\n    const binaryTrackData = [];\n    for (const track of midi.tracks)\n    {\n        const binaryTrack = [];\n        let currentTick = 0;\n        let runningByte = undefined;\n        for (const event of track)\n        {\n            // Ticks stored in MIDI are absolute, but SMF wants relative. Convert them here.\n            const deltaTicks = event.ticks - currentTick;\n            /**\n             * @type {number[]}\n             */\n            let messageData;\n            // determine the message\n            if (event.messageStatusByte <= messageTypes.sequenceSpecific)\n            {\n                // this is a meta-message\n                // syntax is FF<type><length><data>\n                messageData = [0xff, event.messageStatusByte, ...writeVariableLengthQuantity(event.messageData.length), ...event.messageData];\n                // RP-001:\n                // Sysex events and meta-events cancel any running status which was in effect.\n                runningByte = undefined;\n            }\n            else if (event.messageStatusByte === messageTypes.systemExclusive)\n            {\n                // this is a system exclusive message\n                // syntax is F0<length><data>\n                messageData = [0xf0, ...writeVariableLengthQuantity(event.messageData.length), ...event.messageData];\n                // RP-001:\n                // Sysex events and meta-events cancel any running status which was in effect.\n                runningByte = undefined;\n            }\n            else\n            {\n                // this is a midi message\n                messageData = [];\n                if (runningByte !== event.messageStatusByte)\n                {\n                    // Running byte was not the byte we want. Add the byte here.\n                    runningByte = event.messageStatusByte;\n                    // add the status byte to the midi\n                    messageData.push(event.messageStatusByte);\n                }\n                // add the data\n                messageData.push(...event.messageData);\n            }\n            // write VLQ\n            binaryTrack.push(...writeVariableLengthQuantity(deltaTicks));\n            // write the message\n            binaryTrack.push(...messageData);\n            currentTick += deltaTicks;\n        }\n        binaryTrackData.push(new Uint8Array(binaryTrack));\n    }\n    \n    /**\n     * @param text {string}\n     * @param arr {number[]}\n     */\n    function writeText(text, arr)\n    {\n        for (let i = 0; i < text.length; i++)\n        {\n            arr.push(text.charCodeAt(i));\n        }\n    }\n    \n    // write the file\n    const binaryData = [];\n    // write header\n    writeText(\"MThd\", binaryData); // MThd\n    binaryData.push(...writeBytesAsUintBigEndian(6, 4)); // length\n    binaryData.push(0, midi.format); // format\n    binaryData.push(...writeBytesAsUintBigEndian(midi.tracksAmount, 2)); // num tracks\n    binaryData.push(...writeBytesAsUintBigEndian(midi.timeDivision, 2)); // time division\n    \n    // write tracks\n    for (const track of binaryTrackData)\n    {\n        // write track header\n        writeText(\"MTrk\", binaryData); // MTrk\n        binaryData.push(...writeBytesAsUintBigEndian(track.length, 4)); // length\n        binaryData.push(...track); // write data\n    }\n    return new Uint8Array(binaryData);\n}", "/**\n * @param e {MIDIMessage}\n * @returns boolean\n */\nexport function isXGOn(e)\n{\n    return e.messageData[0] === 0x43 && // Yamaha\n        e.messageData[2] === 0x4C &&    // XG ON\n        e.messageData[5] === 0x7E &&\n        e.messageData[6] === 0x00;\n}\n\n/**\n * @param e {MIDIMessage}\n * @returns boolean\n */\nexport function isGSDrumsOn(e)\n{\n    return e.messageData[0] === 0x41 &&     // roland\n        e.messageData[2] === 0x42 &&        // GS\n        e.messageData[3] === 0x12 &&        // GS\n        e.messageData[4] === 0x40 &&        // system parameter\n        (e.messageData[5] & 0x10) !== 0 &&  // part parameter\n        e.messageData[6] === 0x15;          // drum pars\n}\n\n/**\n * @param e {MIDIMessage}\n * @returns boolean\n */\nexport function isGSOn(e)\n{\n    return e.messageData[0] === 0x41  // roland\n        && e.messageData[2] === 0x42  // GS\n        && e.messageData[6] === 0x7F; // Mode set\n}\n\n/**\n * @param e {MIDIMessage}\n * @returns boolean\n */\nexport function isGMOn(e)\n{\n    return e.messageData[0] === 0x7E  // non realtime\n        && e.messageData[2] === 0x09  // gm system\n        && e.messageData[3] === 0x01; // gm1\n}\n\n/**\n * @param e {MIDIMessage}\n * @returns boolean\n */\nexport function isGM2On(e)\n{\n    return e.messageData[0] === 0x7E  // non realtime\n        && e.messageData[2] === 0x09  // gm system\n        && e.messageData[3] === 0x03; // gm2\n}", "import { messageTypes, midiControllers, MIDIMessage } from \"../midi_message.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\n\nimport { customControllers } from \"../../synthetizer/audio_engine/engine_components/controller_tables.js\";\nimport { DEFAULT_PERCUSSION } from \"../../synthetizer/synth_constants.js\";\nimport { isGM2On, isGMOn, isGSOn, isXGOn } from \"../../utils/sysex_detector.js\";\nimport { isSystemXG, isXGDrums, XG_SFX_VOICE } from \"../../utils/xg_hacks.js\";\n\n/**\n * @param ticks {number}\n * @returns {MIDIMessage}\n */\nexport function getGsOn(ticks)\n{\n    return new MIDIMessage(\n        ticks,\n        messageTypes.systemExclusive,\n        new IndexedByteArray([\n            0x41, // Roland\n            0x10, // Device ID (defaults to 16 on roland)\n            0x42, // GS\n            0x12, // Command ID (DT1) (whatever that means...)\n            0x40, // System parameter - Address\n            0x00, // Global parameter -  Address\n            0x7F, // GS Change - Address\n            0x00, // turn on - Data\n            0x41, // checksum\n            0xF7 // end of exclusive\n        ])\n    );\n}\n\n/**\n * @param channel {number}\n * @param cc {number}\n * @param value {number}\n * @param ticks {number}\n * @returns {MIDIMessage}\n */\nfunction getControllerChange(channel, cc, value, ticks)\n{\n    return new MIDIMessage(\n        ticks,\n        messageTypes.controllerChange | (channel % 16),\n        new IndexedByteArray([cc, value])\n    );\n}\n\n/**\n * @param channel {number}\n * @param ticks {number}\n * @returns {MIDIMessage}\n */\nfunction getDrumChange(channel, ticks)\n{\n    const chanAddress = 0x10 | [1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15][channel % 16];\n    // excluding manufacturerID DeviceID and ModelID (and F7)\n    const sysexData = [\n        0x41, // Roland\n        0x10, // Device ID (defaults to 16 on roland)\n        0x42, // GS\n        0x12, // Command ID (DT1) (whatever that means...)\n        0x40, // System parameter           }\n        chanAddress, // Channel parameter   } Address\n        0x15, // Drum change                }\n        0x01 // Is Drums                    } Data\n    ];\n    // calculate checksum\n    // https://cdn.roland.com/assets/media/pdf/F-20_MIDI_Imple_e01_W.pdf section 4\n    const sum = 0x40 + chanAddress + 0x15 + 0x01;\n    const checksum = 128 - (sum % 128);\n    // add system exclusive to enable drums\n    return new MIDIMessage(\n        ticks,\n        messageTypes.systemExclusive,\n        new IndexedByteArray([\n            ...sysexData,\n            checksum,\n            0xF7\n        ])\n    );\n}\n\n/**\n * @typedef {Object} DesiredProgramChange\n * @property {number} channel - The channel number.\n * @property {number} program - The program number.\n * @property {number} bank - The bank number.\n * @property {boolean} isDrum - Indicates if the channel is a drum channel.\n * If it is, then the bank number is ignored.\n */\n\n/**\n * @typedef {Object} DesiredControllerChange\n * @property {number} channel - The channel number.\n * @property {number} controllerNumber - The MIDI controller number.\n * @property {number} controllerValue - The new controller value.\n */\n\n/**\n * @typedef {Object} DesiredChanneltranspose\n * @property {number} channel - The channel number.\n * @property {number} keyShift - The number of semitones to transpose.\n * Note that this can use floating point numbers,\n * which will be used to fine-tune the pitch in cents using RPN.\n */\n\n\n/**\n * Allows easy editing of the file by removing channels, changing programs,\n * changing controllers and transposing channels. Note that this modifies the MIDI in-place.\n *\n * @this {BasicMIDI}\n * @param {DesiredProgramChange[]} desiredProgramChanges - The programs to set on given channels.\n * @param {DesiredControllerChange[]} desiredControllerChanges - The controllers to set on given channels.\n * @param {number[]} desiredChannelsToClear - The channels to remove from the sequence.\n * @param {DesiredChanneltranspose[]} desiredChannelsToTranspose - The channels to transpose.\n */\nexport function modifyMIDI(\n    desiredProgramChanges = [],\n    desiredControllerChanges = [],\n    desiredChannelsToClear = [],\n    desiredChannelsToTranspose = []\n)\n{\n    const midi = this;\n    SpessaSynthGroupCollapsed(\"%cApplying changes to the MIDI file...\", consoleColors.info);\n    \n    SpessaSynthInfo(\"Desired program changes:\", desiredProgramChanges);\n    SpessaSynthInfo(\"Desired CC changes:\", desiredControllerChanges);\n    SpessaSynthInfo(\"Desired channels to clear:\", desiredChannelsToClear);\n    SpessaSynthInfo(\"Desired channels to transpose:\", desiredChannelsToTranspose);\n    \n    /**\n     * @type {Set<number>}\n     */\n    const channelsToChangeProgram = new Set();\n    desiredProgramChanges.forEach(c =>\n    {\n        channelsToChangeProgram.add(c.channel);\n    });\n    \n    \n    // go through all events one by one\n    let system = \"gs\";\n    let addedGs = false;\n    /**\n     * indexes for tracks\n     * @type {number[]}\n     */\n    const eventIndexes = Array(midi.tracks.length).fill(0);\n    let remainingTracks = midi.tracks.length;\n    \n    function findFirstEventIndex()\n    {\n        let index = 0;\n        let ticks = Infinity;\n        midi.tracks.forEach((track, i) =>\n        {\n            if (eventIndexes[i] >= track.length)\n            {\n                return;\n            }\n            if (track[eventIndexes[i]].ticks < ticks)\n            {\n                index = i;\n                ticks = track[eventIndexes[i]].ticks;\n            }\n        });\n        return index;\n    }\n    \n    // it copies midiPorts everywhere else, but here 0 works so DO NOT CHANGE!\n    /**\n     * midi port number for the corresponding track\n     * @type {number[]}\n     */\n    const midiPorts = midi.midiPorts.slice();\n    /**\n     * midi port: channel offset\n     * @type {Record<number, number>}\n     */\n    const midiPortChannelOffsets = {};\n    let midiPortChannelOffset = 0;\n    \n    function assignMIDIPort(trackNum, port)\n    {\n        // do not assign ports to empty tracks\n        if (midi.usedChannelsOnTrack[trackNum].size === 0)\n        {\n            return;\n        }\n        \n        // assign new 16 channels if the port is not occupied yet\n        if (midiPortChannelOffset === 0)\n        {\n            midiPortChannelOffset += 16;\n            midiPortChannelOffsets[port] = 0;\n        }\n        \n        if (midiPortChannelOffsets[port] === undefined)\n        {\n            midiPortChannelOffsets[port] = midiPortChannelOffset;\n            midiPortChannelOffset += 16;\n        }\n        \n        midiPorts[trackNum] = port;\n    }\n    \n    // assign port offsets\n    midi.midiPorts.forEach((port, trackIndex) =>\n    {\n        assignMIDIPort(trackIndex, port);\n    });\n    \n    const channelsAmount = midiPortChannelOffset;\n    /**\n     * Tracks if the channel already had its first note on\n     * @type {boolean[]}\n     */\n    const isFirstNoteOn = Array(channelsAmount).fill(true);\n    \n    /**\n     * MIDI key transpose\n     * @type {number[]}\n     */\n    const coarseTranspose = Array(channelsAmount).fill(0);\n    /**\n     * RPN fine transpose\n     * @type {number[]}\n     */\n    const fineTranspose = Array(channelsAmount).fill(0);\n    desiredChannelsToTranspose.forEach(transpose =>\n    {\n        const coarse = Math.trunc(transpose.keyShift);\n        const fine = transpose.keyShift - coarse;\n        coarseTranspose[transpose.channel] = coarse;\n        fineTranspose[transpose.channel] = fine;\n    });\n    \n    while (remainingTracks > 0)\n    {\n        let trackNum = findFirstEventIndex();\n        const track = midi.tracks[trackNum];\n        if (eventIndexes[trackNum] >= track.length)\n        {\n            remainingTracks--;\n            continue;\n        }\n        const index = eventIndexes[trackNum]++;\n        const e = track[index];\n        \n        const deleteThisEvent = () =>\n        {\n            track.splice(index, 1);\n            eventIndexes[trackNum]--;\n        };\n        \n        /**\n         * @param e {MIDIMessage}\n         * @param offset{number}\n         */\n        const addEventBefore = (e, offset = 0) =>\n        {\n            track.splice(index + offset, 0, e);\n            eventIndexes[trackNum]++;\n        };\n        \n        \n        let portOffset = midiPortChannelOffsets[midiPorts[trackNum]] || 0;\n        if (e.messageStatusByte === messageTypes.midiPort)\n        {\n            assignMIDIPort(trackNum, e.messageData[0]);\n            continue;\n        }\n        // don't clear meta\n        if (e.messageStatusByte <= messageTypes.sequenceSpecific && e.messageStatusByte >= messageTypes.sequenceNumber)\n        {\n            continue;\n        }\n        const status = e.messageStatusByte & 0xF0;\n        const midiChannel = e.messageStatusByte & 0xF;\n        const channel = midiChannel + portOffset;\n        // clear channel?\n        if (desiredChannelsToClear.indexOf(channel) !== -1)\n        {\n            deleteThisEvent();\n            continue;\n        }\n        switch (status)\n        {\n            case messageTypes.noteOn:\n                // is it first?\n                if (isFirstNoteOn[channel])\n                {\n                    isFirstNoteOn[channel] = false;\n                    // all right, so this is the first note on\n                    // first: controllers\n                    // because FSMP does not like program changes after cc changes in embedded midis\n                    // and since we use splice,\n                    // controllers get added first, then programs before them\n                    // now add controllers\n                    desiredControllerChanges.filter(c => c.channel === channel).forEach(change =>\n                    {\n                        const ccChange = getControllerChange(\n                            midiChannel,\n                            change.controllerNumber,\n                            change.controllerValue,\n                            e.ticks\n                        );\n                        addEventBefore(ccChange);\n                    });\n                    const fineTune = fineTranspose[channel];\n                    \n                    if (fineTune !== 0)\n                    {\n                        // add rpn\n                        // 64 is the center, 96 = 50 cents up\n                        const centsCoarse = (fineTune * 64) + 64;\n                        const rpnCoarse = getControllerChange(midiChannel, midiControllers.RPNMsb, 0, e.ticks);\n                        const rpnFine = getControllerChange(midiChannel, midiControllers.RPNLsb, 1, e.ticks);\n                        const dataEntryCoarse = getControllerChange(\n                            channel,\n                            midiControllers.dataEntryMsb,\n                            centsCoarse,\n                            e.ticks\n                        );\n                        const dataEntryFine = getControllerChange(\n                            midiChannel,\n                            midiControllers.lsbForControl6DataEntry,\n                            0,\n                            e.ticks\n                        );\n                        addEventBefore(dataEntryFine);\n                        addEventBefore(dataEntryCoarse);\n                        addEventBefore(rpnFine);\n                        addEventBefore(rpnCoarse);\n                        \n                    }\n                    \n                    if (channelsToChangeProgram.has(channel))\n                    {\n                        const change = desiredProgramChanges.find(c => c.channel === channel);\n                        let desiredBank = Math.max(0, Math.min(change.bank, 127));\n                        const desiredProgram = change.program;\n                        SpessaSynthInfo(\n                            `%cSetting %c${change.channel}%c to %c${desiredBank}:${desiredProgram}%c. Track num: %c${trackNum}`,\n                            consoleColors.info,\n                            consoleColors.recognized,\n                            consoleColors.info,\n                            consoleColors.recognized,\n                            consoleColors.info,\n                            consoleColors.recognized\n                        );\n                        \n                        // note: this is in reverse.\n                        // the output event order is: drums -> lsb -> msb -> program change\n                        \n                        // add program change\n                        const programChange = new MIDIMessage(\n                            e.ticks,\n                            messageTypes.programChange | midiChannel,\n                            new IndexedByteArray([\n                                desiredProgram\n                            ])\n                        );\n                        addEventBefore(programChange);\n                        \n                        const addBank = (isLSB, v) =>\n                        {\n                            const bankChange = getControllerChange(\n                                midiChannel,\n                                isLSB ? midiControllers.lsbForControl0BankSelect : midiControllers.bankSelect,\n                                v,\n                                e.ticks\n                            );\n                            addEventBefore(bankChange);\n                        };\n                        \n                        // on xg, add lsb\n                        if (isSystemXG(system))\n                        {\n                            // xg drums: msb can be 120, 126 or 127\n                            if (change.isDrum)\n                            {\n                                SpessaSynthInfo(\n                                    `%cAdding XG Drum change on track %c${trackNum}`,\n                                    consoleColors.recognized,\n                                    consoleColors.value\n                                );\n                                addBank(false, isXGDrums(desiredBank) ? desiredBank : 127);\n                                addBank(true, 0);\n                            }\n                            else\n                            {\n                                // sfx voice is set via MSB\n                                if (desiredBank === XG_SFX_VOICE)\n                                {\n                                    addBank(false, XG_SFX_VOICE);\n                                    addBank(true, 0);\n                                }\n                                else\n                                {\n                                    // add variation as LSB\n                                    addBank(false, 0);\n                                    addBank(true, desiredBank);\n                                }\n                            }\n                        }\n                        else\n                        {\n                            // add just msb\n                            addBank(false, desiredBank);\n                            \n                            if (change.isDrum && midiChannel !== DEFAULT_PERCUSSION)\n                            {\n                                // add gs drum change\n                                SpessaSynthInfo(\n                                    `%cAdding GS Drum change on track %c${trackNum}`,\n                                    consoleColors.recognized,\n                                    consoleColors.value\n                                );\n                                addEventBefore(getDrumChange(midiChannel, e.ticks));\n                            }\n                        }\n                    }\n                }\n                // transpose key (for zero it won't change anyway)\n                e.messageData[0] += coarseTranspose[channel];\n                break;\n            \n            case messageTypes.noteOff:\n                e.messageData[0] += coarseTranspose[channel];\n                break;\n            \n            case messageTypes.programChange:\n                // do we delete it?\n                if (channelsToChangeProgram.has(channel))\n                {\n                    // this channel has program change. BEGONE!\n                    deleteThisEvent();\n                    continue;\n                }\n                break;\n            \n            case messageTypes.controllerChange:\n                const ccNum = e.messageData[0];\n                const changes = desiredControllerChanges.find(c => c.channel === channel && ccNum === c.controllerNumber);\n                if (changes !== undefined)\n                {\n                    // this controller is locked, BEGONE CHANGE!\n                    deleteThisEvent();\n                    continue;\n                }\n                // bank maybe?\n                if (ccNum === midiControllers.bankSelect || ccNum === midiControllers.lsbForControl0BankSelect)\n                {\n                    if (channelsToChangeProgram.has(channel))\n                    {\n                        // BEGONE!\n                        deleteThisEvent();\n                        continue;\n                    }\n                }\n                break;\n            \n            case messageTypes.systemExclusive:\n                // check for xg on\n                if (isXGOn(e))\n                {\n                    SpessaSynthInfo(\"%cXG system on detected\", consoleColors.info);\n                    system = \"xg\";\n                    addedGs = true; // flag as true so gs won't get added\n                }\n                else\n                    // check for xg program change\n                if (\n                    e.messageData[0] === 0x43 // yamaha\n                    && e.messageData[2] === 0x4C // XG\n                    && e.messageData[3] === 0x08 // part parameter\n                    && e.messageData[5] === 0x03 // program change\n                )\n                {\n                    // do we delete it?\n                    if (channelsToChangeProgram.has(e.messageData[4] + portOffset))\n                    {\n                        // this channel has program change. BEGONE!\n                        deleteThisEvent();\n                    }\n                }\n                else\n                    // check for GS on\n                if (isGSOn(e))\n                {\n                    // that's a GS on, we're done here\n                    addedGs = true;\n                    SpessaSynthInfo(\n                        \"%cGS on detected!\",\n                        consoleColors.recognized\n                    );\n                    break;\n                }\n                else\n                    // check for GM/2 on\n                if (isGMOn(e) || isGM2On(e))\n                {\n                    // that's a GM1 system change, remove it!\n                    SpessaSynthInfo(\n                        \"%cGM/2 on detected, removing!\",\n                        consoleColors.info\n                    );\n                    deleteThisEvent();\n                    addedGs = false;\n                }\n        }\n    }\n    // check for gs\n    if (!addedGs && desiredProgramChanges.length > 0)\n    {\n        // gs is not on, add it on the first track at index 0 (or 1 if track name is first)\n        let index = 0;\n        if (midi.tracks[0][0].messageStatusByte === messageTypes.trackName)\n        {\n            index++;\n        }\n        midi.tracks[0].splice(index, 0, getGsOn(0));\n        SpessaSynthInfo(\"%cGS on not detected. Adding it.\", consoleColors.info);\n    }\n    this.flush();\n    SpessaSynthGroupEnd();\n}\n\n/**\n * Modifies the sequence according to the locked presets and controllers in the given snapshot\n * @this {BasicMIDI}\n * @param snapshot {SynthesizerSnapshot}\n */\nexport function applySnapshotToMIDI(snapshot)\n{\n    /**\n     * @type {{\n     *     channel: number,\n     *     keyShift: number\n     * }[]}\n     */\n    const channelsToTranspose = [];\n    /**\n     * @type {number[]}\n     */\n    const channelsToClear = [];\n    /**\n     * @type {{\n     *     channel: number,\n     *     program: number,\n     *     bank: number,\n     *     isDrum: boolean\n     * }[]}\n     */\n    const programChanges = [];\n    /**\n     *\n     * @type {{\n     *     channel: number,\n     *     controllerNumber: number,\n     *     controllerValue: number\n     * }[]}\n     */\n    const controllerChanges = [];\n    snapshot.channelSnapshots.forEach((channel, channelNumber) =>\n    {\n        if (channel.isMuted)\n        {\n            channelsToClear.push(channelNumber);\n            return;\n        }\n        const transposeFloat = channel.channelTransposeKeyShift + channel.customControllers[customControllers.channelTransposeFine] / 100;\n        if (transposeFloat !== 0)\n        {\n            channelsToTranspose.push({\n                channel: channelNumber,\n                keyShift: transposeFloat\n            });\n        }\n        if (channel.lockPreset)\n        {\n            programChanges.push({\n                channel: channelNumber,\n                program: channel.program,\n                bank: channel.bank,\n                isDrum: channel.drumChannel\n            });\n        }\n        // check for locked controllers and change them appropriately\n        channel.lockedControllers.forEach((l, ccNumber) =>\n        {\n            if (!l || ccNumber > 127 || ccNumber === midiControllers.bankSelect)\n            {\n                return;\n            }\n            const targetValue = channel.midiControllers[ccNumber] >> 7; // channel controllers are stored as 14 bit values\n            controllerChanges.push({\n                channel: channelNumber,\n                controllerNumber: ccNumber,\n                controllerValue: targetValue\n            });\n        });\n    });\n    this.modifyMIDI(programChanges, controllerChanges, channelsToClear, channelsToTranspose);\n}", "import { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { writeRIFFChunkParts, writeRIFFChunkRaw } from \"../../soundfont/basic_soundfont/riff_chunk.js\";\nimport { getStringBytes } from \"../../utils/byte_functions/string.js\";\nimport { messageTypes, midiControllers, MIDIMessage } from \"../midi_message.js\";\nimport { getGsOn } from \"./midi_editor.js\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { writeLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { DEFAULT_PERCUSSION } from \"../../synthetizer/synth_constants.js\";\nimport { chooseBank, isSystemXG, parseBankSelect } from \"../../utils/xg_hacks.js\";\nimport { isGM2On, isGMOn, isGSDrumsOn, isGSOn, isXGOn } from \"../../utils/sysex_detector.js\";\n\n/**\n * @enum {string}\n */\nexport const RMIDINFOChunks = {\n    name: \"INAM\",\n    album: \"IPRD\",\n    album2: \"IALB\",\n    artist: \"IART\",\n    genre: \"IGNR\",\n    picture: \"IPIC\",\n    copyright: \"ICOP\",\n    creationDate: \"ICRD\",\n    comment: \"ICMT\",\n    engineer: \"IENG\",\n    software: \"ISFT\",\n    encoding: \"IENC\",\n    midiEncoding: \"MENC\",\n    bankOffset: \"DBNK\"\n};\n\nconst FORCED_ENCODING = \"utf-8\";\nconst DEFAULT_COPYRIGHT = \"Created using SpessaSynth\";\n\n/**\n * @typedef {Object} RMIDMetadata\n * @property {string} name - the name of the file\n * @property {string} engineer - the engineer who worked on the file\n * @property {string} artist - the artist\n * @property {string} album - the album\n * @property {string} genre - the genre of the song\n * @property {ArrayBuffer} picture - the image for the file (album cover)\n * @property {string} comment - the coment of the file\n * @property {string} creationDate - the creation date of the file\n * @property {string} copyright - the copyright of the file\n * @property {string} midiEncoding - the encoding of the inner MIDI file\n */\n\n/**\n * Writes an RMIDI file. Note that this method modifies the MIDI file in-place.\n * @this {BasicMIDI}\n * @param soundfontBinary {Uint8Array}\n * @param soundfont {BasicSoundBank}\n * @param bankOffset {number} the bank offset for RMIDI\n * @param encoding {string} the encoding of the RMIDI info chunk\n * @param metadata {Partial<RMIDMetadata>} the metadata of the file. Optional. If provided, the encoding is forced to utf-8/\n * @param correctBankOffset {boolean}\n * @returns {IndexedByteArray}\n */\nexport function writeRMIDI(\n    soundfontBinary,\n    soundfont,\n    bankOffset = 0,\n    encoding = \"Shift_JIS\",\n    metadata = {},\n    correctBankOffset = true\n)\n{\n    const mid = this;\n    SpessaSynthGroup(\"%cWriting the RMIDI File...\", consoleColors.info);\n    SpessaSynthInfo(\n        `%cConfiguration: Bank offset: %c${bankOffset}%c, encoding: %c${encoding}`,\n        consoleColors.info,\n        consoleColors.value,\n        consoleColors.info,\n        consoleColors.value\n    );\n    SpessaSynthInfo(\"metadata\", metadata);\n    SpessaSynthInfo(\"Initial bank offset\", mid.bankOffset);\n    if (correctBankOffset)\n    {\n        // Add the offset to the bank.\n        // See https://github.com/spessasus/sf2-rmidi-specification#readme\n        // also fix presets that don't exist\n        // since midi player6 doesn't seem to default to 0 when non-existent...\n        let system = \"gm\";\n        /**\n         * The unwanted system messages such as gm/gm2 on\n         * @type {{tNum: number, e: MIDIMessage}[]}\n         */\n        let unwantedSystems = [];\n        /**\n         * indexes for tracks\n         * @type {number[]}\n         */\n        const eventIndexes = Array(mid.tracks.length).fill(0);\n        let remainingTracks = mid.tracks.length;\n        \n        function findFirstEventIndex()\n        {\n            let index = 0;\n            let ticks = Infinity;\n            mid.tracks.forEach((track, i) =>\n            {\n                if (eventIndexes[i] >= track.length)\n                {\n                    return;\n                }\n                if (track[eventIndexes[i]].ticks < ticks)\n                {\n                    index = i;\n                    ticks = track[eventIndexes[i]].ticks;\n                }\n            });\n            return index;\n        }\n        \n        // it copies midiPorts everywhere else, but here 0 works so DO NOT CHANGE!\n        const ports = Array(mid.tracks.length).fill(0);\n        const channelsAmount = 16 + mid.midiPortChannelOffsets.reduce((max, cur) => cur > max ? cur : max);\n        /**\n         * @type {{\n         *     program: number,\n         *     drums: boolean,\n         *     lastBank: MIDIMessage,\n         *     lastBankLSB: MIDIMessage,\n         *     hasBankSelect: boolean\n         * }[]}\n         */\n        const channelsInfo = [];\n        for (let i = 0; i < channelsAmount; i++)\n        {\n            channelsInfo.push({\n                program: 0,\n                drums: i % 16 === DEFAULT_PERCUSSION, // drums appear on 9 every 16 channels,\n                lastBank: undefined,\n                lastBankLSB: undefined,\n                hasBankSelect: false\n            });\n        }\n        while (remainingTracks > 0)\n        {\n            let trackNum = findFirstEventIndex();\n            const track = mid.tracks[trackNum];\n            if (eventIndexes[trackNum] >= track.length)\n            {\n                remainingTracks--;\n                continue;\n            }\n            const e = track[eventIndexes[trackNum]];\n            eventIndexes[trackNum]++;\n            \n            let portOffset = mid.midiPortChannelOffsets[ports[trackNum]];\n            if (e.messageStatusByte === messageTypes.midiPort)\n            {\n                ports[trackNum] = e.messageData[0];\n                continue;\n            }\n            const status = e.messageStatusByte & 0xF0;\n            if (\n                status !== messageTypes.controllerChange &&\n                status !== messageTypes.programChange &&\n                status !== messageTypes.systemExclusive\n            )\n            {\n                continue;\n            }\n            \n            if (status === messageTypes.systemExclusive)\n            {\n                // check for drum sysex\n                if (!isGSDrumsOn(e))\n                {\n                    // check for XG\n                    if (isXGOn(e))\n                    {\n                        system = \"xg\";\n                    }\n                    else if (isGSOn(e))\n                    {\n                        system = \"gs\";\n                    }\n                    else if (isGMOn(e))\n                    {\n                        // we do not want gm1\n                        system = \"gm\";\n                        unwantedSystems.push({\n                            tNum: trackNum,\n                            e: e\n                        });\n                    }\n                    else if (isGM2On(e))\n                    {\n                        system = \"gm2\";\n                    }\n                    continue;\n                }\n                const sysexChannel = [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15][e.messageData[5] & 0x0F] + portOffset;\n                channelsInfo[sysexChannel].drums = !!(e.messageData[7] > 0 && e.messageData[5] >> 4);\n                continue;\n            }\n            \n            // program change\n            const chNum = (e.messageStatusByte & 0xF) + portOffset;\n            /**\n             * @type {{program: number, drums: boolean, lastBank: MIDIMessage, lastBankLSB: MIDIMessage, hasBankSelect: boolean}}\n             */\n            const channel = channelsInfo[chNum];\n            if (status === messageTypes.programChange)\n            {\n                const isXG = isSystemXG(system);\n                // check if the preset for this program exists\n                const initialProgram = e.messageData[0];\n                if (channel.drums)\n                {\n                    if (soundfont.presets.findIndex(p => p.program === initialProgram && p.isDrumPreset(\n                        isXG,\n                        true\n                    )) === -1)\n                    {\n                        // doesn't exist. pick any preset that has bank 128.\n                        e.messageData[0] = soundfont.presets.find(p => p.isDrumPreset(isXG))?.program || 0;\n                        SpessaSynthInfo(\n                            `%cNo drum preset %c${initialProgram}%c. Channel %c${chNum}%c. Changing program to ${e.messageData[0]}.`,\n                            consoleColors.info,\n                            consoleColors.unrecognized,\n                            consoleColors.info,\n                            consoleColors.recognized,\n                            consoleColors.info\n                        );\n                    }\n                }\n                else\n                {\n                    if (soundfont.presets.findIndex(p => p.program === initialProgram && !p.isDrumPreset(isXG)) === -1)\n                    {\n                        // doesn't exist. pick any preset that does not have bank 128.\n                        e.messageData[0] = soundfont.presets.find(p => !p.isDrumPreset(isXG))?.program || 0;\n                        SpessaSynthInfo(\n                            `%cNo preset %c${initialProgram}%c. Channel %c${chNum}%c. Changing program to ${e.messageData[0]}.`,\n                            consoleColors.info,\n                            consoleColors.unrecognized,\n                            consoleColors.info,\n                            consoleColors.recognized,\n                            consoleColors.info\n                        );\n                    }\n                }\n                channel.program = e.messageData[0];\n                // check if this preset exists for program and bank\n                const realBank = Math.max(0, channel.lastBank?.messageData[1] - mid.bankOffset); // make sure to take the previous bank offset into account\n                const bankLSB = (channel?.lastBankLSB?.messageData[1] - mid.bankOffset) || 0;\n                if (channel.lastBank === undefined)\n                {\n                    continue;\n                }\n                // adjust bank for XG\n                let bank = chooseBank(realBank, bankLSB, channel.drums, isXG);\n                if (soundfont.presets.findIndex(p => p.bank === bank && p.program === e.messageData[0]) === -1)\n                {\n                    // no preset with this bank. find this program with any bank\n                    const targetBank = (soundfont.presets.find(p => p.program === e.messageData[0])?.bank + bankOffset) || bankOffset;\n                    channel.lastBank.messageData[1] = targetBank;\n                    if (channel?.lastBankLSB?.messageData)\n                    {\n                        channel.lastBankLSB.messageData[1] = targetBank;\n                    }\n                    SpessaSynthInfo(\n                        `%cNo preset %c${bank}:${e.messageData[0]}%c. Channel %c${chNum}%c. Changing bank to ${targetBank}.`,\n                        consoleColors.info,\n                        consoleColors.unrecognized,\n                        consoleColors.info,\n                        consoleColors.recognized,\n                        consoleColors.info\n                    );\n                }\n                else\n                {\n                    // There is a preset with this bank. Add offset. For drums add the normal offset.\n                    let drumBank = bank;\n                    if (isSystemXG(system) && bank === 128)\n                    {\n                        bank = 127;\n                    }\n                    const newBank = (bank === 128 ? 128 : drumBank) + bankOffset;\n                    channel.lastBank.messageData[1] = newBank;\n                    if (channel?.lastBankLSB?.messageData && !channel.drums)\n                    {\n                        channel.lastBankLSB.messageData[1] = channel.lastBankLSB.messageData[1] - mid.bankOffset + bankOffset;\n                    }\n                    SpessaSynthInfo(\n                        `%cPreset %c${bank}:${e.messageData[0]}%c exists. Channel %c${chNum}%c.  Changing bank to ${newBank}.`,\n                        consoleColors.info,\n                        consoleColors.recognized,\n                        consoleColors.info,\n                        consoleColors.recognized,\n                        consoleColors.info\n                    );\n                }\n                continue;\n            }\n            \n            // controller change\n            // we only care about bank-selects\n            const isLSB = e.messageData[0] === midiControllers.lsbForControl0BankSelect;\n            if (e.messageData[0] !== midiControllers.bankSelect && !isLSB)\n            {\n                continue;\n            }\n            // bank select\n            channel.hasBankSelect = true;\n            const bankNumber = e.messageData[1];\n            // interpret\n            const intepretation = parseBankSelect(\n                channel?.lastBank?.messageData[1] || 0,\n                bankNumber,\n                system,\n                isLSB,\n                channel.drums,\n                chNum\n            );\n            if (intepretation.drumsStatus === 2)\n            {\n                channel.drums = true;\n            }\n            else if (intepretation.drumsStatus === 1)\n            {\n                channel.drums = false;\n            }\n            if (isLSB)\n            {\n                channel.lastBankLSB = e;\n            }\n            else\n            {\n                channel.lastBank = e;\n            }\n        }\n        \n        // add missing bank selects\n        // add all bank selects that are missing for this track\n        channelsInfo.forEach((has, ch) =>\n        {\n            if (has.hasBankSelect === true)\n            {\n                return;\n            }\n            // find the first program change (for the given channel)\n            const midiChannel = ch % 16;\n            const status = messageTypes.programChange | midiChannel;\n            // find track with this channel being used\n            const portOffset = Math.floor(ch / 16) * 16;\n            const port = mid.midiPortChannelOffsets.indexOf(portOffset);\n            const track = mid.tracks.find((t, tNum) => mid.midiPorts[tNum] === port && mid.usedChannelsOnTrack[tNum].has(\n                midiChannel));\n            if (track === undefined)\n            {\n                // this channel is not used at all\n                return;\n            }\n            let indexToAdd = track.findIndex(e => e.messageStatusByte === status);\n            if (indexToAdd === -1)\n            {\n                // no program change...\n                // add programs if they are missing from the track\n                // (need them to activate bank 1 for the embedded sfont)\n                const programIndex = track.findIndex(e => (e.messageStatusByte > 0x80 && e.messageStatusByte < 0xF0) && (e.messageStatusByte & 0xF) === midiChannel);\n                if (programIndex === -1)\n                {\n                    // no voices??? skip\n                    return;\n                }\n                const programTicks = track[programIndex].ticks;\n                const targetProgram = soundfont.getPreset(0, 0).program;\n                track.splice(programIndex, 0, new MIDIMessage(\n                    programTicks,\n                    messageTypes.programChange | midiChannel,\n                    new IndexedByteArray([targetProgram])\n                ));\n                indexToAdd = programIndex;\n            }\n            SpessaSynthInfo(\n                `%cAdding bank select for %c${ch}`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n            const ticks = track[indexToAdd].ticks;\n            const targetBank = (soundfont.getPreset(\n                0,\n                has.program,\n                isSystemXG(system)\n            )?.bank + bankOffset) || bankOffset;\n            track.splice(indexToAdd, 0, new MIDIMessage(\n                ticks,\n                messageTypes.controllerChange | midiChannel,\n                new IndexedByteArray([midiControllers.bankSelect, targetBank])\n            ));\n        });\n        \n        // make sure to put xg if gm\n        if (system !== \"gs\" && !isSystemXG(system))\n        {\n            for (const m of unwantedSystems)\n            {\n                mid.tracks[m.tNum].splice(mid.tracks[m.tNum].indexOf(m.e), 1);\n            }\n            let index = 0;\n            if (mid.tracks[0][0].messageStatusByte === messageTypes.trackName)\n            {\n                index++;\n            }\n            mid.tracks[0].splice(index, 0, getGsOn(0));\n        }\n    }\n    const newMid = new IndexedByteArray(mid.writeMIDI().buffer);\n    \n    // info data for RMID\n    /**\n     * @type {Uint8Array[]}\n     */\n    const infoContent = [];\n    const encoder = new TextEncoder();\n    // software (SpessaSynth)\n    infoContent.push(\n        writeRIFFChunkRaw(RMIDINFOChunks.software, encoder.encode(\"SpessaSynth\"), true)\n    );\n    // name\n    if (metadata.name !== undefined)\n    {\n        \n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.name, encoder.encode(metadata.name), true)\n        );\n        encoding = FORCED_ENCODING;\n    }\n    else\n    {\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.name, mid.rawMidiName, true)\n        );\n    }\n    // creation date\n    if (metadata.creationDate !== undefined)\n    {\n        encoding = FORCED_ENCODING;\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.creationDate, encoder.encode(metadata.creationDate), true)\n        );\n    }\n    else\n    {\n        const today = new Date().toLocaleString(undefined, {\n            weekday: \"long\",\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\"\n        });\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.creationDate, getStringBytes(today, true), true)\n        );\n    }\n    // comment\n    if (metadata.comment !== undefined)\n    {\n        encoding = FORCED_ENCODING;\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.comment, encoder.encode(metadata.comment))\n        );\n    }\n    // engineer\n    if (metadata.engineer !== undefined)\n    {\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.engineer, encoder.encode(metadata.engineer), true)\n        );\n    }\n    // album\n    if (metadata.album !== undefined)\n    {\n        // note that there are two album chunks: IPRD and IALB\n        encoding = FORCED_ENCODING;\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.album, encoder.encode(metadata.album), true)\n        );\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.album2, encoder.encode(metadata.album), true)\n        );\n    }\n    // artist\n    if (metadata.artist !== undefined)\n    {\n        encoding = FORCED_ENCODING;\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.artist, encoder.encode(metadata.artist), true)\n        );\n    }\n    // genre\n    if (metadata.genre !== undefined)\n    {\n        encoding = FORCED_ENCODING;\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.genre, encoder.encode(metadata.genre), true)\n        );\n    }\n    // picture\n    if (metadata.picture !== undefined)\n    {\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.picture, new Uint8Array(metadata.picture))\n        );\n    }\n    // copyright\n    if (metadata.copyright !== undefined)\n    {\n        encoding = FORCED_ENCODING;\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.copyright, encoder.encode(metadata.copyright), true)\n        );\n    }\n    else\n    {\n        // use midi copyright if possible\n        const copyright = mid.copyright.length > 0 ? mid.copyright : DEFAULT_COPYRIGHT;\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.copyright, getStringBytes(copyright, true))\n        );\n    }\n    \n    // bank offset\n    const DBNK = new IndexedByteArray(2);\n    writeLittleEndian(DBNK, bankOffset, 2);\n    infoContent.push(writeRIFFChunkRaw(RMIDINFOChunks.bankOffset, DBNK));\n    // midi encoding\n    if (metadata.midiEncoding !== undefined)\n    {\n        infoContent.push(\n            writeRIFFChunkRaw(RMIDINFOChunks.midiEncoding, encoder.encode(metadata.midiEncoding))\n        );\n        encoding = FORCED_ENCODING;\n    }\n    // encoding\n    infoContent.push(writeRIFFChunkRaw(RMIDINFOChunks.encoding, getStringBytes(encoding, true)));\n    \n    // combine and write out\n    SpessaSynthInfo(\"%cFinished!\", consoleColors.info);\n    SpessaSynthGroupEnd();\n    return writeRIFFChunkParts(\n        \"RIFF\",\n        [\n            getStringBytes(\"RMID\"),\n            writeRIFFChunkRaw(\n                \"data\",\n                newMid\n            ),\n            writeRIFFChunkParts(\n                \"INFO\",\n                infoContent,\n                true\n            ),\n            soundfontBinary\n        ]\n    );\n}", "import { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { messageTypes, midiControllers } from \"../midi_message.js\";\nimport { DEFAULT_PERCUSSION } from \"../../synthetizer/synth_constants.js\";\nimport { chooseBank, isSystemXG, parseBankSelect } from \"../../utils/xg_hacks.js\";\nimport { isGSDrumsOn, isXGOn } from \"../../utils/sysex_detector.js\";\nimport { SoundFontManager } from \"../../synthetizer/audio_engine/engine_components/soundfont_manager.js\";\n\n/**\n * Gets the used programs and keys for this MIDI file with a given sound bank\n * @this {BasicMIDI}\n * @param soundfont {SoundFontManager|BasicSoundBank} - the sound bank\n * @returns {Record<string, Set<string>>} Record<bank:program, Set<key-velocity>>\n */\nexport function getUsedProgramsAndKeys(soundfont)\n{\n    const mid = this;\n    SpessaSynthGroupCollapsed(\n        \"%cSearching for all used programs and keys...\",\n        consoleColors.info\n    );\n    // Find every bank:program combo and every key:velocity for each. Make sure to care about ports and drums\n    const channelsAmount = 16 + mid.midiPortChannelOffsets.reduce((max, cur) => cur > max ? cur : max);\n    /**\n     * @type {{program: number, bank: number, bankLSB: number, drums: boolean, string: string, actualBank: number}[]}\n     */\n    const channelPresets = [];\n    for (let i = 0; i < channelsAmount; i++)\n    {\n        const bank = i % 16 === DEFAULT_PERCUSSION ? 128 : 0;\n        channelPresets.push({\n            program: 0,\n            bank: bank,\n            bankLSB: 0,\n            actualBank: bank,\n            drums: i % 16 === DEFAULT_PERCUSSION, // drums appear on 9 every 16 channels,\n            string: `${bank}:0`\n        });\n    }\n    \n    // check for xg\n    let system = \"gs\";\n    \n    function updateString(ch)\n    {\n        const bank = chooseBank(ch.bank, ch.bankLSB, ch.drums, isSystemXG(system));\n        // check if this exists in the soundfont\n        let existsBank, existsProgram;\n        if (soundfont instanceof SoundFontManager)\n        {\n            /**\n             * @type {{preset: BasicPreset, bankOffset: number}}\n             */\n            let exists = soundfont.getPreset(bank, ch.program, isSystemXG(system));\n            existsBank = exists.preset.bank + exists.bankOffset;\n            existsProgram = exists.preset.program;\n        }\n        else\n        {\n            /**\n             * @type {BasicPreset}\n             */\n            let exists = soundfont.getPreset(bank, ch.program, isSystemXG(system));\n            existsBank = exists.bank;\n            existsProgram = exists.program;\n        }\n        ch.actualBank = existsBank;\n        ch.program = existsProgram;\n        ch.string = ch.actualBank + \":\" + ch.program;\n        if (!usedProgramsAndKeys[ch.string])\n        {\n            SpessaSynthInfo(\n                `%cDetected a new preset: %c${ch.string}`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n            usedProgramsAndKeys[ch.string] = new Set();\n        }\n    }\n    \n    /**\n     * find all programs used and key-velocity combos in them\n     * bank:program each has a set of midiNote-velocity\n     * @type {Record<string, Set<string>>}\n     */\n    const usedProgramsAndKeys = {};\n    \n    /**\n     * indexes for tracks\n     * @type {number[]}\n     */\n    const eventIndexes = Array(mid.tracks.length).fill(0);\n    let remainingTracks = mid.tracks.length;\n    \n    function findFirstEventIndex()\n    {\n        let index = 0;\n        let ticks = Infinity;\n        mid.tracks.forEach((track, i) =>\n        {\n            if (eventIndexes[i] >= track.length)\n            {\n                return;\n            }\n            if (track[eventIndexes[i]].ticks < ticks)\n            {\n                index = i;\n                ticks = track[eventIndexes[i]].ticks;\n            }\n        });\n        return index;\n    }\n    \n    const ports = mid.midiPorts.slice();\n    // initialize\n    channelPresets.forEach(c =>\n    {\n        updateString(c);\n    });\n    while (remainingTracks > 0)\n    {\n        let trackNum = findFirstEventIndex();\n        const track = mid.tracks[trackNum];\n        if (eventIndexes[trackNum] >= track.length)\n        {\n            remainingTracks--;\n            continue;\n        }\n        const event = track[eventIndexes[trackNum]];\n        eventIndexes[trackNum]++;\n        \n        if (event.messageStatusByte === messageTypes.midiPort)\n        {\n            ports[trackNum] = event.messageData[0];\n            continue;\n        }\n        const status = event.messageStatusByte & 0xF0;\n        if (\n            status !== messageTypes.noteOn &&\n            status !== messageTypes.controllerChange &&\n            status !== messageTypes.programChange &&\n            status !== messageTypes.systemExclusive\n        )\n        {\n            continue;\n        }\n        const channel = (event.messageStatusByte & 0xF) + mid.midiPortChannelOffsets[ports[trackNum]] || 0;\n        let ch = channelPresets[channel];\n        switch (status)\n        {\n            case messageTypes.programChange:\n                ch.program = event.messageData[0];\n                updateString(ch);\n                break;\n            \n            case messageTypes.controllerChange:\n                const isLSB = event.messageData[0] === midiControllers.lsbForControl0BankSelect;\n                if (event.messageData[0] !== midiControllers.bankSelect && !isLSB)\n                {\n                    // we only care about bank select\n                    continue;\n                }\n                if (system === \"gs\" && ch.drums)\n                {\n                    // gs drums get changed via sysex, ignore here\n                    continue;\n                }\n                const bank = event.messageData[1];\n                if (isLSB)\n                {\n                    ch.bankLSB = bank;\n                }\n                else\n                {\n                    ch.bank = bank;\n                }\n                // interpret the bank\n                const intepretation = parseBankSelect(\n                    ch.bank,\n                    bank,\n                    system,\n                    isLSB,\n                    ch.drums,\n                    channel\n                );\n                switch (intepretation.drumsStatus)\n                {\n                    case 0:\n                        // no change\n                        break;\n                    \n                    case 1:\n                        // drums changed to off\n                        // drum change is a program change\n                        ch.drums = false;\n                        updateString(ch);\n                        break;\n                    \n                    case 2:\n                        // drums changed to on\n                        // drum change is a program change\n                        ch.drums = true;\n                        updateString(ch);\n                        break;\n                }\n                // do not update the data, bank change doesn't change the preset\n                break;\n            \n            case messageTypes.noteOn:\n                if (event.messageData[1] === 0)\n                {\n                    // that's a note off\n                    continue;\n                }\n                usedProgramsAndKeys[ch.string].add(`${event.messageData[0]}-${event.messageData[1]}`);\n                break;\n            \n            case messageTypes.systemExclusive:\n                // check for drum sysex\n                if (!isGSDrumsOn(event))\n                {\n                    // check for XG\n                    if (isXGOn(event))\n                    {\n                        system = \"xg\";\n                        SpessaSynthInfo(\n                            \"%cXG on detected!\",\n                            consoleColors.recognized\n                        );\n                    }\n                    continue;\n                }\n                const sysexChannel = [9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15][event.messageData[5] & 0x0F] + mid.midiPortChannelOffsets[ports[trackNum]];\n                const isDrum = !!(event.messageData[7] > 0 && event.messageData[5] >> 4);\n                ch = channelPresets[sysexChannel];\n                ch.drums = isDrum;\n                updateString(ch);\n                break;\n            \n        }\n    }\n    for (const key of Object.keys(usedProgramsAndKeys))\n    {\n        if (usedProgramsAndKeys[key].size === 0)\n        {\n            SpessaSynthInfo(\n                `%cDetected change but no keys for %c${key}`,\n                consoleColors.info,\n                consoleColors.value\n            );\n            delete usedProgramsAndKeys[key];\n        }\n    }\n    SpessaSynthGroupEnd();\n    return usedProgramsAndKeys;\n}", "import { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { readBytesAsUintBigEndian } from \"../../utils/byte_functions/big_endian.js\";\nimport { DEFAULT_PERCUSSION } from \"../../synthetizer/synth_constants.js\";\n\n/**\n * Calculates all note times in seconds.\n * @this {BasicMIDI}\n * @param minDrumLength {number} the shortest a drum note (channel 10) can be, in seconds.\n * @returns {{\n *          midiNote: number,\n *          start: number,\n *          length: number,\n *          velocity: number,\n *      }[][]} an array of 16 channels, each channel containing its notes,\n *      with their key number, velocity, absolute start time and length in seconds.\n */\nexport function getNoteTimes(minDrumLength = 0)\n{\n    \n    /**\n     * gets tempo from the midi message\n     * @param event {MIDIMessage}\n     * @return {number} the tempo in bpm\n     */\n    function getTempo(event)\n    {\n        // simulate IndexedByteArray\n        event.messageData = new IndexedByteArray(event.messageData.buffer);\n        event.messageData.currentIndex = 0;\n        return 60000000 / readBytesAsUintBigEndian(event.messageData, 3);\n    }\n    \n    /**\n     * an array of 16 arrays (channels)\n     * @type {{\n     *          midiNote: number,\n     *          start: number,\n     *          length: number,\n     *          velocity: number,\n     *      }[][]}\n     */\n    const noteTimes = [];\n    // flatten and sort by ticks\n    const trackData = this.tracks;\n    let events = trackData.flat();\n    events.sort((e1, e2) => e1.ticks - e2.ticks);\n    \n    for (let i = 0; i < 16; i++)\n    {\n        noteTimes.push([]);\n    }\n    let elapsedTime = 0;\n    let oneTickToSeconds = 60 / (120 * this.timeDivision);\n    let eventIndex = 0;\n    let unfinished = 0;\n    /**\n     * @type {{\n     *          midiNote: number,\n     *          start: number,\n     *          length: number,\n     *          velocity: number,\n     *      }[][]}\n     */\n    const unfinishedNotes = [];\n    for (let i = 0; i < 16; i++)\n    {\n        unfinishedNotes.push([]);\n    }\n    const noteOff = (midiNote, channel) =>\n    {\n        const noteIndex = unfinishedNotes[channel].findIndex(n => n.midiNote === midiNote);\n        const note = unfinishedNotes[channel][noteIndex];\n        if (note)\n        {\n            const time = elapsedTime - note.start;\n            note.length = time;\n            if (channel === DEFAULT_PERCUSSION)\n            {\n                note.length = time < minDrumLength ? minDrumLength : time;\n            }\n            // delete from unfinished\n            unfinishedNotes[channel].splice(noteIndex, 1);\n        }\n        unfinished--;\n    };\n    while (eventIndex < events.length)\n    {\n        const event = events[eventIndex];\n        \n        const status = event.messageStatusByte >> 4;\n        const channel = event.messageStatusByte & 0x0F;\n        \n        // note off\n        if (status === 0x8)\n        {\n            noteOff(event.messageData[0], channel);\n        }\n        // note on\n        else if (status === 0x9)\n        {\n            if (event.messageData[1] === 0)\n            {\n                // never mind, its note off\n                noteOff(event.messageData[0], channel);\n            }\n            else\n            {\n                // stop previous\n                noteOff(event.messageData[0], channel);\n                const noteTime = {\n                    midiNote: event.messageData[0],\n                    start: elapsedTime,\n                    length: -1,\n                    velocity: event.messageData[1] / 127\n                };\n                noteTimes[channel].push(noteTime);\n                unfinishedNotes[channel].push(noteTime);\n                unfinished++;\n                \n            }\n        }\n        // set tempo\n        else if (event.messageStatusByte === 0x51)\n        {\n            oneTickToSeconds = 60 / (getTempo(event) * this.timeDivision);\n        }\n        \n        if (++eventIndex >= events.length)\n        {\n            break;\n        }\n        \n        elapsedTime += oneTickToSeconds * (events[eventIndex].ticks - event.ticks);\n    }\n    \n    // finish the unfinished notes\n    if (unfinished > 0)\n    {\n        // for every channel, for every note that is unfinished (has -1 length)\n        unfinishedNotes.forEach((channelNotes, channel) =>\n        {\n            channelNotes.forEach(note =>\n            {\n                const time = elapsedTime - note.start;\n                note.length = time;\n                if (channel === DEFAULT_PERCUSSION)\n                {\n                    note.length = time < minDrumLength ? minDrumLength : time;\n                }\n            });\n        });\n    }\n    return noteTimes;\n}", "// noinspection JSUnusedGlobalSymbols\n\nimport { MIDISequenceData } from \"./midi_sequence.js\";\nimport { getStringBytes, readBytesAsString } from \"../utils/byte_functions/string.js\";\nimport { messageTypes, MIDIMessage } from \"./midi_message.js\";\nimport { readBytesAsUintBigEndian } from \"../utils/byte_functions/big_endian.js\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../utils/loggin.js\";\nimport { consoleColors, formatTitle, sanitizeKarLyrics } from \"../utils/other.js\";\nimport { writeMIDI } from \"./midi_tools/midi_writer.js\";\nimport { applySnapshotToMIDI, modifyMIDI } from \"./midi_tools/midi_editor.js\";\nimport { writeRMIDI } from \"./midi_tools/rmidi_writer.js\";\nimport { getUsedProgramsAndKeys } from \"./midi_tools/used_keys_loaded.js\";\nimport { IndexedByteArray } from \"../utils/indexed_array.js\";\nimport { getNoteTimes } from \"./midi_tools/get_note_times.js\";\n\n/**\n * BasicMIDI is the base of a complete MIDI file, used by the sequencer internally.\n * BasicMIDI is not available on the main thread, as it contains the actual track data which can be large.\n * It can be accessed by calling getMIDI() on the Sequencer.\n */\nclass BasicMIDI extends MIDISequenceData\n{\n    \n    /**\n     * The embedded soundfont in the MIDI file, represented as an ArrayBuffer, if available.\n     * @type {ArrayBuffer|undefined}\n     */\n    embeddedSoundFont = undefined;\n    \n    /**\n     * The actual track data of the MIDI file, represented as an array of tracks.\n     * Tracks are arrays of MIDIMessage objects.\n     * @type {MIDIMessage[][]}\n     */\n    tracks = [];\n    \n    /**\n     * If the MIDI file is a DLS RMIDI file.\n     * @type {boolean}\n     */\n    isDLSRMIDI = false;\n    \n    /**\n     * Copies a MIDI (tracks are shallowly copied!)\n     * @param mid {BasicMIDI}\n     * @returns {BasicMIDI}\n     */\n    static copyFrom(mid)\n    {\n        const m = new BasicMIDI();\n        m._copyFromSequence(mid);\n        \n        m.isDLSRMIDI = mid.isDLSRMIDI;\n        m.embeddedSoundFont = mid?.embeddedSoundFont ? mid.embeddedSoundFont : undefined; // Shallow copy\n        m.tracks = mid.tracks.map(track => [...track]); // Shallow copy of each track array\n        return m;\n    }\n    \n    /**\n     * Copies a MIDI with deep copy\n     * @param mid {BasicMIDI}\n     * @returns {BasicMIDI}\n     */\n    static copyFromDeep(mid)\n    {\n        const m = new BasicMIDI();\n        m._copyFromSequence(mid);\n        m.isDLSRMIDI = mid.isDLSRMIDI;\n        m.embeddedSoundFont = mid.embeddedSoundFont ? mid.embeddedSoundFont.slice(0) : undefined; // Deep copy\n        m.tracks = mid.tracks.map(track => track.map(event => new MIDIMessage(\n            event.ticks,\n            event.messageStatusByte,\n            event.messageData\n        ))); // Deep copy\n        return m;\n    }\n    \n    /**\n     * Parses internal MIDI values\n     * @protected\n     */\n    _parseInternal()\n    {\n        SpessaSynthGroup(\n            \"%cInterpreting MIDI events...\",\n            consoleColors.info\n        );\n        /**\n         * For karaoke files, text events starting with @T are considered titles,\n         * usually the first one is the title, and the latter is things such as \"sequenced by\" etc.\n         * @type {boolean}\n         */\n        let karaokeHasTitle = false;\n        \n        this.keyRange = { max: 0, min: 127 };\n        \n        /**\n         * Will be joined with \"\\n\" to form the final string\n         * @type {string[]}\n         */\n        let copyrightComponents = [];\n        let copyrightDetected = false;\n        if (typeof this.RMIDInfo[\"ICOP\"] !== \"undefined\")\n        {\n            // if RMIDI has copyright info, don't try to detect one.\n            copyrightDetected = true;\n        }\n        \n        \n        let nameDetected = false;\n        if (typeof this.RMIDInfo[\"INAM\"] !== \"undefined\")\n        {\n            // same as with copyright\n            nameDetected = true;\n        }\n        \n        // loop tracking\n        let loopStart = null;\n        let loopEnd = null;\n        \n        for (let i = 0; i < this.tracks.length; i++)\n        {\n            /**\n             * @type {MIDIMessage[]}\n             */\n            const track = this.tracks[i];\n            const usedChannels = new Set();\n            let trackHasVoiceMessages = false;\n            \n            for (const e of track)\n            {\n                // check if it's a voice message\n                if (e.messageStatusByte >= 0x80 && e.messageStatusByte < 0xF0)\n                {\n                    trackHasVoiceMessages = true;\n                    // voice messages are 7-bit always\n                    for (let j = 0; j < e.messageData.length; j++)\n                    {\n                        e.messageData[j] = Math.min(127, e.messageData[j]);\n                    }\n                    // last voice event tick\n                    if (e.ticks > this.lastVoiceEventTick)\n                    {\n                        this.lastVoiceEventTick = e.ticks;\n                    }\n                    \n                    // interpret the voice message\n                    switch (e.messageStatusByte & 0xF0)\n                    {\n                        // cc change: loop points\n                        case messageTypes.controllerChange:\n                            switch (e.messageData[0])\n                            {\n                                case 2:\n                                case 116:\n                                    loopStart = e.ticks;\n                                    break;\n                                \n                                case 4:\n                                case 117:\n                                    if (loopEnd === null)\n                                    {\n                                        loopEnd = e.ticks;\n                                    }\n                                    else\n                                    {\n                                        // this controller has occurred more than once;\n                                        // this means\n                                        // that it doesn't indicate the loop\n                                        loopEnd = 0;\n                                    }\n                                    break;\n                                \n                                case 0:\n                                    // check RMID\n                                    if (this.isDLSRMIDI && e.messageData[1] !== 0 && e.messageData[1] !== 127)\n                                    {\n                                        SpessaSynthInfo(\n                                            \"%cDLS RMIDI with offset 1 detected!\",\n                                            consoleColors.recognized\n                                        );\n                                        this.bankOffset = 1;\n                                    }\n                            }\n                            break;\n                        \n                        // note on: used notes tracking and key range\n                        case messageTypes.noteOn:\n                            usedChannels.add(e.messageStatusByte & 0x0F);\n                            const note = e.messageData[0];\n                            this.keyRange.min = Math.min(this.keyRange.min, note);\n                            this.keyRange.max = Math.max(this.keyRange.max, note);\n                            break;\n                    }\n                }\n                e.messageData.currentIndex = 0;\n                const eventText = readBytesAsString(e.messageData, e.messageData.length);\n                e.messageData.currentIndex = 0;\n                // interpret the message\n                switch (e.messageStatusByte)\n                {\n                    case messageTypes.setTempo:\n                        // add the tempo change\n                        e.messageData.currentIndex = 0;\n                        this.tempoChanges.push({\n                            ticks: e.ticks,\n                            tempo: 60000000 / readBytesAsUintBigEndian(e.messageData, 3)\n                        });\n                        e.messageData.currentIndex = 0;\n                        break;\n                    \n                    case messageTypes.marker:\n                        // check for loop markers\n                        const text = eventText.trim().toLowerCase();\n                        switch (text)\n                        {\n                            default:\n                                break;\n                            \n                            case \"start\":\n                            case \"loopstart\":\n                                loopStart = e.ticks;\n                                break;\n                            \n                            case \"loopend\":\n                                loopEnd = e.ticks;\n                        }\n                        e.messageData.currentIndex = 0;\n                        break;\n                    \n                    case messageTypes.copyright:\n                        if (!copyrightDetected)\n                        {\n                            e.messageData.currentIndex = 0;\n                            copyrightComponents.push(readBytesAsString(\n                                e.messageData,\n                                e.messageData.length,\n                                false\n                            ));\n                            e.messageData.currentIndex = 0;\n                        }\n                        break;\n                    \n                    case messageTypes.lyric:\n                        // note here: .kar files sometimes just use...\n                        // lyrics instead of text because why not (of course)\n                        // perform the same check for @KMIDI KARAOKE FILE\n                        if (eventText.trim().startsWith(\"@KMIDI KARAOKE FILE\"))\n                        {\n                            this.isKaraokeFile = true;\n                            SpessaSynthInfo(\"%cKaraoke MIDI detected!\", consoleColors.recognized);\n                        }\n                        \n                        if (this.isKaraokeFile)\n                        {\n                            // replace the type of the message with text\n                            e.messageStatusByte = messageTypes.text;\n                        }\n                        else\n                        {\n                            // add lyrics like a regular midi file\n                            this.lyrics.push(e.messageData);\n                            this.lyricsTicks.push(e.ticks);\n                            break;\n                        }\n                    \n                    // kar: treat the same as text\n                    // fallthrough\n                    case messageTypes.text:\n                        // possibly Soft Karaoke MIDI file\n                        // it has a text event at the start of the file\n                        // \"@KMIDI KARAOKE FILE\"\n                        const checkedText = eventText.trim();\n                        if (checkedText.startsWith(\"@KMIDI KARAOKE FILE\"))\n                        {\n                            this.isKaraokeFile = true;\n                            \n                            SpessaSynthInfo(\"%cKaraoke MIDI detected!\", consoleColors.recognized);\n                        }\n                        else if (this.isKaraokeFile)\n                        {\n                            // check for @T (title)\n                            // or @A because it is a title too sometimes?\n                            // IDK it's strange\n                            if (checkedText.startsWith(\"@T\") || checkedText.startsWith(\"@A\"))\n                            {\n                                if (!karaokeHasTitle)\n                                {\n                                    this.midiName = checkedText.substring(2).trim();\n                                    karaokeHasTitle = true;\n                                    nameDetected = true;\n                                    // encode to rawMidiName\n                                    this.rawMidiName = getStringBytes(this.midiName);\n                                }\n                                else\n                                {\n                                    // append to copyright\n                                    copyrightComponents.push(checkedText.substring(2).trim());\n                                }\n                            }\n                            else if (checkedText[0] !== \"@\")\n                            {\n                                // non @: the lyrics\n                                this.lyrics.push(sanitizeKarLyrics(e.messageData));\n                                this.lyricsTicks.push(e.ticks);\n                            }\n                        }\n                        break;\n                    \n                    case messageTypes.trackName:\n                        break;\n                }\n            }\n            // add used channels\n            this.usedChannelsOnTrack.push(usedChannels);\n            \n            // track name\n            this.trackNames[i] = \"\";\n            const trackName = track.find(e => e.messageStatusByte === messageTypes.trackName);\n            if (trackName)\n            {\n                trackName.messageData.currentIndex = 0;\n                const name = readBytesAsString(trackName.messageData, trackName.messageData.length);\n                this.trackNames[i] = name;\n                // If the track has no voice messages, its \"track name\" event (if it has any)\n                // is some metadata.\n                // Add it to copyright\n                if (!trackHasVoiceMessages)\n                {\n                    copyrightComponents.push(name);\n                }\n            }\n        }\n        \n        // reverse the tempo changes\n        this.tempoChanges.reverse();\n        \n        SpessaSynthInfo(\n            `%cCorrecting loops, ports and detecting notes...`,\n            consoleColors.info\n        );\n        \n        const firstNoteOns = [];\n        for (const t of this.tracks)\n        {\n            const firstNoteOn = t.find(e => (e.messageStatusByte & 0xF0) === messageTypes.noteOn);\n            if (firstNoteOn)\n            {\n                firstNoteOns.push(firstNoteOn.ticks);\n            }\n        }\n        this.firstNoteOn = Math.min(...firstNoteOns);\n        \n        SpessaSynthInfo(\n            `%cFirst note-on detected at: %c${this.firstNoteOn}%c ticks!`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        \n        \n        if (loopStart !== null && loopEnd === null)\n        {\n            // not a loop\n            loopStart = this.firstNoteOn;\n            loopEnd = this.lastVoiceEventTick;\n        }\n        else\n        {\n            if (loopStart === null)\n            {\n                loopStart = this.firstNoteOn;\n            }\n            \n            if (loopEnd === null || loopEnd === 0)\n            {\n                loopEnd = this.lastVoiceEventTick;\n            }\n        }\n        \n        /**\n         *\n         * @type {{start: number, end: number}}\n         */\n        this.loop = { start: loopStart, end: loopEnd };\n        \n        SpessaSynthInfo(\n            `%cLoop points: start: %c${this.loop.start}%c end: %c${this.loop.end}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n        \n        // determine ports\n        let portOffset = 0;\n        this.midiPorts = [];\n        this.midiPortChannelOffsets = [];\n        for (let trackNum = 0; trackNum < this.tracks.length; trackNum++)\n        {\n            this.midiPorts.push(-1);\n            if (this.usedChannelsOnTrack[trackNum].size === 0)\n            {\n                continue;\n            }\n            for (const e of this.tracks[trackNum])\n            {\n                if (e.messageStatusByte !== messageTypes.midiPort)\n                {\n                    continue;\n                }\n                const port = e.messageData[0];\n                this.midiPorts[trackNum] = port;\n                if (this.midiPortChannelOffsets[port] === undefined)\n                {\n                    this.midiPortChannelOffsets[port] = portOffset;\n                    portOffset += 16;\n                }\n            }\n        }\n        \n        // fix empty port channel offsets (do a copy to turn empty slots into undefined so the map goes over them)\n        this.midiPortChannelOffsets = [...this.midiPortChannelOffsets].map(o => o ?? 0);\n        \n        // fix midi ports:\n        // midi tracks without ports will have a value of -1\n        // if all ports have a value of -1, set it to 0,\n        // otherwise take the first midi port and replace all -1 with it,\n        // why would we do this?\n        // some midis (for some reason) specify all channels to port 1 or else,\n        // but leave the conductor track with no port pref.\n        // this spessasynth to reserve the first 16 channels for the conductor track\n        // (which doesn't play anything) and use the additional 16 for the actual ports.\n        let defaultPort = Infinity;\n        for (let port of this.midiPorts)\n        {\n            if (port !== -1)\n            {\n                if (defaultPort > port)\n                {\n                    defaultPort = port;\n                }\n            }\n        }\n        if (defaultPort === Infinity)\n        {\n            defaultPort = 0;\n        }\n        this.midiPorts = this.midiPorts.map(port => port === -1 || port === undefined ? defaultPort : port);\n        // add fake port if empty\n        if (this.midiPortChannelOffsets.length === 0)\n        {\n            this.midiPortChannelOffsets = [0];\n        }\n        if (this.midiPortChannelOffsets.length < 2)\n        {\n            SpessaSynthInfo(`%cNo additional MIDI Ports detected.`, consoleColors.info);\n        }\n        else\n        {\n            this.isMultiPort = true;\n            SpessaSynthInfo(`%cMIDI Ports detected!`, consoleColors.recognized);\n        }\n        \n        // midi name\n        if (!nameDetected)\n        {\n            if (this.tracks.length > 1)\n            {\n                // if more than 1 track and the first track has no notes,\n                // just find the first trackName in the first track.\n                if (\n                    this.tracks[0].find(\n                        message => message.messageStatusByte >= messageTypes.noteOn\n                            &&\n                            message.messageStatusByte < messageTypes.polyPressure\n                    ) === undefined\n                )\n                {\n                    \n                    let name = this.tracks[0].find(message => message.messageStatusByte === messageTypes.trackName);\n                    if (name)\n                    {\n                        this.rawMidiName = name.messageData;\n                        name.messageData.currentIndex = 0;\n                        this.midiName = readBytesAsString(name.messageData, name.messageData.length, false);\n                    }\n                }\n            }\n            else\n            {\n                // if only 1 track, find the first \"track name\" event\n                let name = this.tracks[0].find(message => message.messageStatusByte === messageTypes.trackName);\n                if (name)\n                {\n                    this.rawMidiName = name.messageData;\n                    name.messageData.currentIndex = 0;\n                    this.midiName = readBytesAsString(name.messageData, name.messageData.length, false);\n                }\n            }\n        }\n        \n        if (!copyrightDetected)\n        {\n            this.copyright = copyrightComponents\n                // trim and group newlines into one\n                .map(c => c.trim().replace(/(\\r?\\n)+/g, \"\\n\"))\n                // remove empty strings\n                .filter(c => c.length > 0)\n                // join with newlines\n                .join(\"\\n\") || \"\";\n        }\n        \n        this.midiName = this.midiName.trim();\n        this.midiNameUsesFileName = false;\n        // if midiName is \"\", use the file name\n        if (this.midiName.length === 0)\n        {\n            SpessaSynthInfo(\n                `%cNo name detected. Using the alt name!`,\n                consoleColors.info\n            );\n            this.midiName = formatTitle(this.fileName);\n            this.midiNameUsesFileName = true;\n            // encode it too\n            this.rawMidiName = new Uint8Array(this.midiName.length);\n            for (let i = 0; i < this.midiName.length; i++)\n            {\n                this.rawMidiName[i] = this.midiName.charCodeAt(i);\n            }\n        }\n        else\n        {\n            SpessaSynthInfo(\n                `%cMIDI Name detected! %c\"${this.midiName}\"`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n        }\n        \n        // if the first event is not at 0 ticks, add a track name\n        // https://github.com/spessasus/SpessaSynth/issues/145\n        if (!this.tracks.some(t => t[0].ticks === 0))\n        {\n            const track = this.tracks[0];\n            // can copy\n            track.unshift(new MIDIMessage(\n                0,\n                messageTypes.trackName,\n                new IndexedByteArray(this.rawMidiName.buffer)\n            ));\n        }\n        \n        \n        /**\n         * The total playback time, in seconds\n         * @type {number}\n         */\n        this.duration = this.MIDIticksToSeconds(this.lastVoiceEventTick);\n        \n        SpessaSynthInfo(\"%cSuccess!\", consoleColors.recognized);\n        SpessaSynthGroupEnd();\n    }\n    \n    /**\n     * Updates all internal values\n     */\n    flush()\n    {\n        \n        for (const t of this.tracks)\n        {\n            // sort the track by ticks\n            t.sort((e1, e2) => e1.ticks - e2.ticks);\n        }\n        this._parseInternal();\n    }\n}\n\nBasicMIDI.prototype.writeMIDI = writeMIDI;\nBasicMIDI.prototype.modifyMIDI = modifyMIDI;\nBasicMIDI.prototype.applySnapshotToMIDI = applySnapshotToMIDI;\nBasicMIDI.prototype.writeRMIDI = writeRMIDI;\nBasicMIDI.prototype.getUsedProgramsAndKeys = getUsedProgramsAndKeys;\nBasicMIDI.prototype.getNoteTimes = getNoteTimes;\n\nexport { BasicMIDI };", "import { consoleColors, formatTime } from \"../utils/other.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo, SpessaSynthWarn } from \"../utils/loggin.js\";\nimport { BasicMIDI } from \"../midi/basic_midi.js\";\n\n/**\n * @param trackNum {number}\n * @param port {number}\n * @this {SpessaSynthSequencer}\n */\nexport function assignMIDIPort(trackNum, port)\n{\n    // do not assign ports to empty tracks\n    if (this.midiData.usedChannelsOnTrack[trackNum].size === 0)\n    {\n        return;\n    }\n    \n    // assign new 16 channels if the port is not occupied yet\n    if (this.midiPortChannelOffset === 0)\n    {\n        this.midiPortChannelOffset += 16;\n        this.midiPortChannelOffsets[port] = 0;\n    }\n    \n    if (this.midiPortChannelOffsets[port] === undefined)\n    {\n        if (this.synth.midiAudioChannels.length < this.midiPortChannelOffset + 15)\n        {\n            this._addNewMidiPort();\n        }\n        this.midiPortChannelOffsets[port] = this.midiPortChannelOffset;\n        this.midiPortChannelOffset += 16;\n    }\n    \n    this.midiPorts[trackNum] = port;\n}\n\n/**\n * Loads a new sequence\n * @param parsedMidi {BasicMIDI}\n * @param autoPlay {boolean}\n * @this {SpessaSynthSequencer}\n * @private\n */\nexport function loadNewSequence(parsedMidi, autoPlay = true)\n{\n    this.stop();\n    if (!parsedMidi.tracks)\n    {\n        throw new Error(\"This MIDI has no tracks!\");\n    }\n    \n    this.oneTickToSeconds = 60 / (120 * parsedMidi.timeDivision);\n    \n    /**\n     * @type {BasicMIDI}\n     */\n    this.midiData = parsedMidi;\n    \n    // clear old embedded bank if exists\n    this.synth.clearEmbeddedBank();\n    \n    // check for embedded soundfont\n    if (this.midiData.embeddedSoundFont !== undefined)\n    {\n        SpessaSynthInfo(\"%cEmbedded soundfont detected! Using it.\", consoleColors.recognized);\n        this.synth.setEmbeddedSoundFont(this.midiData.embeddedSoundFont, this.midiData.bankOffset);\n    }\n    \n    SpessaSynthGroupCollapsed(\"%cPreloading samples...\", consoleColors.info);\n    // smart preloading: load only samples used in the midi!\n    const used = this.midiData.getUsedProgramsAndKeys(this.synth.soundfontManager);\n    for (const [programBank, combos] of Object.entries(used))\n    {\n        const [bank, program] = programBank.split(\":\").map(Number);\n        const preset = this.synth.getPreset(bank, program);\n        SpessaSynthInfo(\n            `%cPreloading used samples on %c${preset.presetName}%c...`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        for (const combo of combos)\n        {\n            const [midiNote, velocity] = combo.split(\"-\").map(Number);\n            this.synth.getVoicesForPreset(preset, bank, program, midiNote, velocity, midiNote);\n        }\n    }\n    SpessaSynthGroupEnd();\n    \n    /**\n     * the midi track data\n     * @type {MIDIMessage[][]}\n     */\n    this.tracks = this.midiData.tracks;\n    \n    // copy over the port data\n    this.midiPorts = this.midiData.midiPorts.slice();\n    \n    // clear last port data\n    this.midiPortChannelOffset = 0;\n    this.midiPortChannelOffsets = {};\n    // assign port offsets\n    this.midiData.midiPorts.forEach((port, trackIndex) =>\n    {\n        this.assignMIDIPort(trackIndex, port);\n    });\n    \n    /**\n     * Same as \"audio.duration\" property (seconds)\n     * @type {number}\n     */\n    this.duration = this.midiData.duration;\n    this.firstNoteTime = this.midiData.MIDIticksToSeconds(this.midiData.firstNoteOn);\n    SpessaSynthInfo(`%cTotal song time: ${formatTime(Math.ceil(this.duration)).time}`, consoleColors.recognized);\n    this?.onSongChange?.(this.songIndex, autoPlay);\n    \n    if (this.duration <= 1)\n    {\n        SpessaSynthWarn(\n            `%cVery short song: (${formatTime(Math.round(this.duration)).time}). Disabling loop!`,\n            consoleColors.warn\n        );\n        this.loop = false;\n    }\n    if (autoPlay)\n    {\n        this.play(true);\n    }\n    else\n    {\n        // this shall not play: play to the first note and then wait\n        const targetTime = this.skipToFirstNoteOn ? this.midiData.firstNoteOn - 1 : 0;\n        this.setTimeTicks(targetTime);\n        this.pause();\n    }\n}\n\n/**\n * @param midiBuffers {BasicMIDI[]}\n * @param autoPlay {boolean}\n * @this {SpessaSynthSequencer}\n */\nexport function loadNewSongList(midiBuffers, autoPlay = true)\n{\n    /**\n     * parse the MIDIs (only the array buffers, MIDI is unchanged)\n     * @type {BasicMIDI[]}\n     */\n    this.songs = midiBuffers;\n    if (this.songs.length < 1)\n    {\n        return;\n    }\n    this.songIndex = 0;\n    if (this.songs.length > 1)\n    {\n        this.loop = false;\n    }\n    this.shuffleSongIndexes();\n    this?.onSongListChange?.(this.songs);\n    this.loadCurrentSong(autoPlay);\n}\n\n/**\n * @this {SpessaSynthSequencer}\n */\nexport function nextSong()\n{\n    if (this.songs.length === 1)\n    {\n        this.currentTime = 0;\n        return;\n    }\n    this.songIndex++;\n    this.songIndex %= this.songs.length;\n    this.loadCurrentSong();\n}\n\n/**\n * @this {SpessaSynthSequencer}\n */\nexport function previousSong()\n{\n    if (this.songs.length === 1)\n    {\n        this.currentTime = 0;\n        return;\n    }\n    this.songIndex--;\n    if (this.songIndex < 0)\n    {\n        this.songIndex = this.songs.length - 1;\n    }\n    this.loadCurrentSong();\n}", "import { getEvent, messageTypes, midiControllers } from \"../midi/midi_message.js\";\nimport { resetArray } from \"../synthetizer/audio_engine/engine_components/controller_tables.js\";\nimport { nonResetableCCs } from \"../synthetizer/audio_engine/engine_methods/controller_control/reset_controllers.js\";\n\n\n// an array with preset default values\nconst defaultControllerArray = resetArray.slice(0, 128);\n\n/**\n * plays from start to the target time, excluding note messages (to get the synth to the correct state)\n * @private\n * @param time {number} in seconds\n * @param ticks {number} optional MIDI ticks, when given is used instead of time\n * @returns {boolean} true if the midi file is not finished\n * @this {SpessaSynthSequencer}\n */\nexport function _playTo(time, ticks = undefined)\n{\n    this.oneTickToSeconds = 60 / (120 * this.midiData.timeDivision);\n    // reset\n    this.synth.resetAllControllers();\n    this.sendMIDIReset();\n    this._resetTimers();\n    \n    const channelsToSave = this.synth.midiAudioChannels.length;\n    /**\n     * save pitch bends here and send them only after\n     * @type {number[]}\n     */\n    const pitchBends = Array(channelsToSave).fill(8192);\n    \n    /**\n     * Save programs here and send them only after\n     * @type {{program: number, bank: number, actualBank: number}[]}\n     */\n    const programs = [];\n    for (let i = 0; i < channelsToSave; i++)\n    {\n        programs.push({\n            program: -1,\n            bank: 0,\n            actualBank: 0\n        });\n    }\n    \n    const isCCNonSkippable = controllerNumber => (\n        controllerNumber === midiControllers.dataDecrement ||\n        controllerNumber === midiControllers.dataIncrement ||\n        controllerNumber === midiControllers.dataEntryMsb ||\n        controllerNumber === midiControllers.dataDecrement ||\n        controllerNumber === midiControllers.lsbForControl6DataEntry ||\n        controllerNumber === midiControllers.RPNLsb ||\n        controllerNumber === midiControllers.RPNMsb ||\n        controllerNumber === midiControllers.NRPNLsb ||\n        controllerNumber === midiControllers.NRPNMsb ||\n        controllerNumber === midiControllers.bankSelect ||\n        controllerNumber === midiControllers.lsbForControl0BankSelect ||\n        controllerNumber === midiControllers.resetAllControllers\n    );\n    \n    /**\n     * Save controllers here and send them only after\n     * @type {number[][]}\n     */\n    const savedControllers = [];\n    for (let i = 0; i < channelsToSave; i++)\n    {\n        savedControllers.push(Array.from(defaultControllerArray));\n    }\n    \n    /**\n     * RP-15 compliant reset\n     * https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp15.pdf\n     * @param chan {number}\n     */\n    function resetAllControlllers(chan)\n    {\n        // reset pitch bend\n        pitchBends[chan] = 8192;\n        if (savedControllers?.[chan] === undefined)\n        {\n            return;\n        }\n        for (let i = 0; i < defaultControllerArray.length; i++)\n        {\n            if (!nonResetableCCs.has(i))\n            {\n                savedControllers[chan][i] = defaultControllerArray[i];\n            }\n        }\n    }\n    \n    while (true)\n    {\n        // find the next event\n        let trackIndex = this._findFirstEventIndex();\n        let event = this.tracks[trackIndex][this.eventIndex[trackIndex]];\n        if (ticks !== undefined)\n        {\n            if (event.ticks >= ticks)\n            {\n                break;\n            }\n        }\n        else\n        {\n            if (this.playedTime >= time)\n            {\n                break;\n            }\n        }\n        \n        // skip note ons\n        const info = getEvent(event.messageStatusByte);\n        // Keep in mind midi ports to determine the channel!\n        const channel = info.channel + (this.midiPortChannelOffsets[this.midiPorts[trackIndex]] || 0);\n        switch (info.status)\n        {\n            // skip note messages\n            case messageTypes.noteOn:\n                // track portamento control as last note\n                if (savedControllers[channel] === undefined)\n                {\n                    savedControllers[channel] = Array.from(defaultControllerArray);\n                }\n                savedControllers[channel][midiControllers.portamentoControl] = event.messageData[0];\n                break;\n            \n            case messageTypes.noteOff:\n                break;\n            \n            // skip pitch bend\n            case messageTypes.pitchBend:\n                pitchBends[channel] = event.messageData[1] << 7 | event.messageData[0];\n                break;\n            \n            case messageTypes.programChange:\n                // empty tracks cannot program change\n                if (this.midiData.isMultiPort && this.midiData.usedChannelsOnTrack[trackIndex].size === 0)\n                {\n                    break;\n                }\n                const p = programs[channel];\n                p.program = event.messageData[0];\n                p.actualBank = p.bank;\n                break;\n            \n            case messageTypes.controllerChange:\n                // empty tracks cannot controller change\n                if (this.midiData.isMultiPort && this.midiData.usedChannelsOnTrack[trackIndex].size === 0)\n                {\n                    break;\n                }\n                // do not skip data entries\n                const controllerNumber = event.messageData[0];\n                if (isCCNonSkippable(controllerNumber))\n                {\n                    let ccV = event.messageData[1];\n                    if (controllerNumber === midiControllers.bankSelect)\n                    {\n                        // add the bank to be saved\n                        programs[channel].bank = ccV;\n                        break;\n                    }\n                    else if (controllerNumber === midiControllers.resetAllControllers)\n                    {\n                        resetAllControlllers(channel);\n                    }\n                    if (this.sendMIDIMessages)\n                    {\n                        this.sendMIDICC(channel, controllerNumber, ccV);\n                    }\n                    else\n                    {\n                        this.synth.controllerChange(channel, controllerNumber, ccV);\n                    }\n                }\n                else\n                {\n                    if (savedControllers[channel] === undefined)\n                    {\n                        savedControllers[channel] = Array.from(defaultControllerArray);\n                    }\n                    savedControllers[channel][controllerNumber] = event.messageData[1];\n                }\n                break;\n            \n            default:\n                this._processEvent(event, trackIndex);\n                break;\n        }\n        \n        this.eventIndex[trackIndex]++;\n        // find the next event\n        trackIndex = this._findFirstEventIndex();\n        let nextEvent = this.tracks[trackIndex][this.eventIndex[trackIndex]];\n        if (nextEvent === undefined)\n        {\n            this.stop();\n            return false;\n        }\n        this.playedTime += this.oneTickToSeconds * (nextEvent.ticks - event.ticks);\n    }\n    \n    // restoring saved controllers\n    if (this.sendMIDIMessages)\n    {\n        for (let channelNumber = 0; channelNumber < channelsToSave; channelNumber++)\n        {\n            // restore pitch bends\n            if (pitchBends[channelNumber] !== undefined)\n            {\n                this.sendMIDIPitchWheel(\n                    channelNumber,\n                    pitchBends[channelNumber] >> 7,\n                    pitchBends[channelNumber] & 0x7F\n                );\n            }\n            if (savedControllers[channelNumber] !== undefined)\n            {\n                // every controller that has changed\n                savedControllers[channelNumber].forEach((value, index) =>\n                {\n                    if (value !== defaultControllerArray[index] && !isCCNonSkippable(\n                        index))\n                    {\n                        this.sendMIDICC(channelNumber, index, value);\n                    }\n                });\n            }\n            // restore programs\n            if (programs[channelNumber].program >= 0 && programs[channelNumber].actualBank >= 0)\n            {\n                const bank = programs[channelNumber].actualBank;\n                this.sendMIDICC(channelNumber, midiControllers.bankSelect, bank);\n                this.sendMIDIProgramChange(channelNumber, programs[channelNumber].program);\n            }\n        }\n    }\n    else\n    {\n        // for all synth channels\n        for (let channelNumber = 0; channelNumber < channelsToSave; channelNumber++)\n        {\n            // restore pitch bends\n            if (pitchBends[channelNumber] !== undefined)\n            {\n                this.synth.pitchWheel(channelNumber, pitchBends[channelNumber] >> 7, pitchBends[channelNumber] & 0x7F);\n            }\n            if (savedControllers[channelNumber] !== undefined)\n            {\n                // every controller that has changed\n                savedControllers[channelNumber].forEach((value, index) =>\n                {\n                    if (value !== defaultControllerArray[index] && !isCCNonSkippable(\n                        index))\n                    {\n                        this.synth.controllerChange(\n                            channelNumber,\n                            index,\n                            value\n                        );\n                    }\n                });\n            }\n            // restore programs\n            if (programs[channelNumber].actualBank >= 0)\n            {\n                const p = programs[channelNumber];\n                if (p.program !== -1)\n                {\n                    // a program change has occurred, apply the actual bank when program change was executed\n                    this.synth.controllerChange(channelNumber, midiControllers.bankSelect, p.actualBank);\n                    this.synth.programChange(channelNumber, p.program);\n                }\n                else\n                {\n                    // no program change, apply the current bank select\n                    this.synth.controllerChange(channelNumber, midiControllers.bankSelect, p.bank);\n                }\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * Starts the playback\n * @param resetTime {boolean} If true, time is set to 0 s\n * @this {SpessaSynthSequencer}\n */\nexport function play(resetTime = false)\n{\n    if (this.midiData === undefined)\n    {\n        return;\n    }\n    \n    // reset the time if necessary\n    if (resetTime)\n    {\n        this.pausedTime = undefined;\n        this.currentTime = 0;\n        return;\n    }\n    \n    if (this.currentTime >= this.duration)\n    {\n        this.pausedTime = undefined;\n        this.currentTime = 0;\n        return;\n    }\n    \n    // unpause if paused\n    if (this.paused)\n    {\n        // adjust the start time\n        this._recalculateStartTime(this.pausedTime);\n        this.pausedTime = undefined;\n    }\n    if (!this.sendMIDIMessages)\n    {\n        this.playingNotes.forEach(n =>\n        {\n            this.synth.noteOn(n.channel, n.midiNote, n.velocity);\n        });\n    }\n    this.setProcessHandler();\n}\n\n/**\n * @this {SpessaSynthSequencer}\n * @param ticks {number}\n */\nexport function setTimeTicks(ticks)\n{\n    if (!this.midiData)\n    {\n        return;\n    }\n    this.stop();\n    this.playingNotes = [];\n    this.pausedTime = undefined;\n    this?.onTimeChange?.(this.midiData.MIDIticksToSeconds(ticks));\n    const isNotFinished = this._playTo(0, ticks);\n    this._recalculateStartTime(this.playedTime);\n    if (!isNotFinished)\n    {\n        return;\n    }\n    this.play();\n}\n\n/**\n * @param time\n * @private\n * @this {SpessaSynthSequencer}\n */\nexport function _recalculateStartTime(time)\n{\n    this.absoluteStartTime = this.synth.currentSynthTime - time / this._playbackRate;\n}", "import { messageTypes, midiControllers } from \"../midi/midi_message.js\";\n\nimport { MIDI_CHANNEL_COUNT } from \"../synthetizer/synth_constants.js\";\n\n/**\n * @param message {number[]}\n * @this {SpessaSynthSequencer}\n */\nexport function sendMIDIMessage(message)\n{\n    if (!this.sendMIDIMessages)\n    {\n        return;\n    }\n    this?.onMIDIMessage?.(message);\n}\n\n/**\n * @this {SpessaSynthSequencer}\n * @param channel {number}\n * @param type {number}\n * @param value {number}\n */\nexport function sendMIDICC(channel, type, value)\n{\n    channel %= 16;\n    if (!this.sendMIDIMessages)\n    {\n        return;\n    }\n    this.sendMIDIMessage([messageTypes.controllerChange | channel, type, value]);\n}\n\n/**\n * @this {SpessaSynthSequencer}\n * @param channel {number}\n * @param program {number}\n */\nexport function sendMIDIProgramChange(channel, program)\n{\n    channel %= 16;\n    if (!this.sendMIDIMessages)\n    {\n        return;\n    }\n    this.sendMIDIMessage([messageTypes.programChange | channel, program]);\n}\n\n/**\n * Sets the pitch of the given channel\n * @this {SpessaSynthSequencer}\n * @param channel {number} usually 0-15: the channel to change pitch\n * @param MSB {number} SECOND byte of the MIDI pitchWheel message\n * @param LSB {number} FIRST byte of the MIDI pitchWheel message\n */\nexport function sendMIDIPitchWheel(channel, MSB, LSB)\n{\n    channel %= 16;\n    if (!this.sendMIDIMessages)\n    {\n        return;\n    }\n    this.sendMIDIMessage([messageTypes.pitchBend | channel, LSB, MSB]);\n}\n\n/**\n * @this {SpessaSynthSequencer}\n */\nexport function sendMIDIReset()\n{\n    if (!this.sendMIDIMessages)\n    {\n        return;\n    }\n    this.sendMIDIMessage([messageTypes.reset]);\n    for (let ch = 0; ch < MIDI_CHANNEL_COUNT; ch++)\n    {\n        this.sendMIDIMessage([messageTypes.controllerChange | ch, midiControllers.allSoundOff, 0]);\n        this.sendMIDIMessage([messageTypes.controllerChange | ch, midiControllers.resetAllControllers, 0]);\n    }\n}", "import { _addNewMidiPort, _processEvent } from \"./process_event.js\";\nimport { _findFirstEventIndex, processTick } from \"./process_tick.js\";\nimport { assignMIDIPort, loadNewSequence, loadNewSongList, nextSong, previousSong } from \"./song_control.js\";\nimport { _playTo, _recalculateStartTime, play, setTimeTicks } from \"./play.js\";\nimport { messageTypes, midiControllers } from \"../midi/midi_message.js\";\nimport { sendMIDICC, sendMIDIMessage, sendMIDIPitchWheel, sendMIDIProgramChange, sendMIDIReset } from \"./events.js\";\nimport { SpessaSynthWarn } from \"../utils/loggin.js\";\n\nimport { MIDI_CHANNEL_COUNT } from \"../synthetizer/synth_constants.js\";\n\nclass SpessaSynthSequencer\n{\n    /**\n     * All the sequencer's songs\n     * @type {BasicMIDI[]}\n     */\n    songs = [];\n    \n    /**\n     * Current song index\n     * @type {number}\n     */\n    songIndex = 0;\n    \n    /**\n     * shuffled song indexes\n     * @type {number[]}\n     */\n    shuffledSongIndexes = [];\n    \n    /**\n     * the synth to use\n     * @type {SpessaSynthProcessor}\n     */\n    synth;\n    \n    /**\n     * if the sequencer is active\n     * @type {boolean}\n     */\n    isActive = false;\n    \n    /**\n     * If the event should instead be sent back to the main thread instead of synth\n     * @type {boolean}\n     */\n    sendMIDIMessages = false;\n    \n    /**\n     * sequencer's loop count\n     * @type {number}\n     */\n    loopCount = Infinity;\n    \n    /**\n     * event's number in this.events\n     * @type {number[]}\n     */\n    eventIndex = [];\n    \n    /**\n     * tracks the time that has already been played\n     * @type {number}\n     */\n    playedTime = 0;\n    \n    /**\n     * The (relative) time when the sequencer was paused. If it's not paused, then it's undefined.\n     * @type {number}\n     */\n    pausedTime = undefined;\n    \n    /**\n     * Absolute playback startTime, bases on the synth's time\n     * @type {number}\n     */\n    absoluteStartTime = 0;\n    /**\n     * Currently playing notes (for pausing and resuming)\n     * @type {{\n     *     midiNote: number,\n     *     channel: number,\n     *     velocity: number\n     * }[]}\n     */\n    playingNotes = [];\n    \n    /**\n     * controls if the sequencer loops (defaults to true)\n     * @type {boolean}\n     */\n    loop = true;\n    \n    /**\n     * controls if the songs are ordered randomly\n     * @type {boolean}\n     */\n    shuffleMode = false;\n    \n    /**\n     * the current track data\n     * @type {BasicMIDI}\n     */\n    midiData = undefined;\n    \n    /**\n     * midi port number for the corresponding track\n     * @type {number[]}\n     */\n    midiPorts = [];\n    midiPortChannelOffset = 0;\n    /**\n     * stored as:\n     * Record<midi port, channel offset>\n     * @type {Record<number, number>}\n     */\n    midiPortChannelOffsets = {};\n    \n    /**\n     * @type {boolean}\n     */\n    skipToFirstNoteOn = true;\n    \n    /**\n     * If true, seq will stay paused when seeking or changing the playback rate\n     * @type {boolean}\n     */\n    preservePlaybackState = false;\n    \n    /**\n     * Called on a MIDI message if sending MIDI messages is enabled\n     * @type {function(message: number[])}\n     */\n    onMIDIMessage;\n    \n    /**\n     * Called when the time changes\n     * @type {function(newTime: number)}\n     */\n    onTimeChange;\n    \n    /**\n     * Calls when sequencer stops the playback\n     * @type {function(isFinished: boolean)}\n     */\n    onPlaybackStop;\n    \n    /**\n     * Calls after the songs have been processed but before the playback begins\n     * @type {function(newSongList: BasicMIDI[])}\n     */\n    onSongListChange;\n    \n    /**\n     * Calls when the song is changed (for example, in a playlist)\n     * @type {function(songIndex: number, autoPlay: boolean)}\n     */\n    onSongChange;\n    \n    /**\n     * Calls when a meta-event occurs\n     * @type {function(e: MIDIMessage, trackIndex: number)}\n     */\n    onMetaEvent;\n    \n    /**\n     * Calls when the loop count changes (usually decreases)\n     * @type {function(count: number)}\n     */\n    onLoopCountChange;\n    \n    /**\n     * @param spessasynthProcessor {SpessaSynthProcessor}\n     */\n    constructor(spessasynthProcessor)\n    {\n        this.synth = spessasynthProcessor;\n        this.absoluteStartTime = this.synth.currentSynthTime;\n    }\n    \n    /**\n     * Controls the playback's rate\n     * @type {number}\n     * @private\n     */\n    _playbackRate = 1;\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * @param value {number}\n     */\n    set playbackRate(value)\n    {\n        const time = this.currentTime;\n        this._playbackRate = value;\n        this.currentTime = time;\n    }\n    \n    get currentTime()\n    {\n        // return the paused time if it's set to something other than undefined\n        if (this.pausedTime !== undefined)\n        {\n            return this.pausedTime;\n        }\n        \n        return (this.synth.currentSynthTime - this.absoluteStartTime) * this._playbackRate;\n    }\n    \n    set currentTime(time)\n    {\n        if (!this.midiData)\n        {\n            return;\n        }\n        if (time > this.duration || time < 0)\n        {\n            // time is 0\n            if (this.skipToFirstNoteOn)\n            {\n                this.setTimeTicks(this.midiData.firstNoteOn - 1);\n            }\n            else\n            {\n                this.setTimeTicks(0);\n            }\n            return;\n        }\n        if (this.skipToFirstNoteOn)\n        {\n            if (time < this.firstNoteTime)\n            {\n                this.setTimeTicks(this.midiData.firstNoteOn - 1);\n                return;\n            }\n        }\n        this.stop();\n        this.playingNotes = [];\n        const wasPaused = this.paused && this.preservePlaybackState;\n        this.pausedTime = undefined;\n        this?.onTimeChange?.(time);\n        if (this.midiData.duration === 0)\n        {\n            SpessaSynthWarn(\"No duration!\");\n            this?.onPlaybackStop?.(true);\n            return;\n        }\n        this._playTo(time);\n        this._recalculateStartTime(time);\n        if (wasPaused)\n        {\n            this.pause();\n        }\n        else\n        {\n            this.play();\n        }\n    }\n    \n    /**\n     * true if paused, false if playing or stopped\n     * @returns {boolean}\n     */\n    get paused()\n    {\n        return this.pausedTime !== undefined;\n    }\n    \n    /**\n     * Pauses the playback\n     * @param isFinished {boolean}\n     */\n    pause(isFinished = false)\n    {\n        if (this.paused)\n        {\n            SpessaSynthWarn(\"Already paused\");\n            return;\n        }\n        this.pausedTime = this.currentTime;\n        this.stop();\n        this?.onPlaybackStop?.(isFinished);\n    }\n    \n    /**\n     * Stops the playback\n     */\n    stop()\n    {\n        this.clearProcessHandler();\n        // disable sustain\n        for (let i = 0; i < 16; i++)\n        {\n            this.synth.controllerChange(i, midiControllers.sustainPedal, 0);\n        }\n        this.synth.stopAllChannels();\n        if (this.sendMIDIMessages)\n        {\n            for (let note of this.playingNotes)\n            {\n                this.sendMIDIMessage([messageTypes.noteOff | (note.channel % 16), note.midiNote]);\n            }\n            for (let c = 0; c < MIDI_CHANNEL_COUNT; c++)\n            {\n                this.sendMIDICC(c, midiControllers.allNotesOff, 0);\n            }\n        }\n    }\n    \n    loadCurrentSong(autoPlay = true)\n    {\n        let index = this.songIndex;\n        if (this.shuffleMode)\n        {\n            index = this.shuffledSongIndexes[this.songIndex];\n        }\n        this.loadNewSequence(this.songs[index], autoPlay);\n    }\n    \n    _resetTimers()\n    {\n        this.playedTime = 0;\n        this.eventIndex = Array(this.tracks.length).fill(0);\n    }\n    \n    setProcessHandler()\n    {\n        this.isActive = true;\n    }\n    \n    clearProcessHandler()\n    {\n        this.isActive = false;\n    }\n    \n    shuffleSongIndexes()\n    {\n        const indexes = this.songs.map((_, i) => i);\n        this.shuffledSongIndexes = [];\n        while (indexes.length > 0)\n        {\n            const index = indexes[Math.floor(Math.random() * indexes.length)];\n            this.shuffledSongIndexes.push(index);\n            indexes.splice(indexes.indexOf(index), 1);\n        }\n    }\n}\n\n// Web MIDI sending\nSpessaSynthSequencer.prototype.sendMIDIMessage = sendMIDIMessage;\nSpessaSynthSequencer.prototype.sendMIDIReset = sendMIDIReset;\nSpessaSynthSequencer.prototype.sendMIDICC = sendMIDICC;\nSpessaSynthSequencer.prototype.sendMIDIProgramChange = sendMIDIProgramChange;\nSpessaSynthSequencer.prototype.sendMIDIPitchWheel = sendMIDIPitchWheel;\nSpessaSynthSequencer.prototype.assignMIDIPort = assignMIDIPort;\n\nSpessaSynthSequencer.prototype._processEvent = _processEvent;\nSpessaSynthSequencer.prototype._addNewMidiPort = _addNewMidiPort;\nSpessaSynthSequencer.prototype.processTick = processTick;\nSpessaSynthSequencer.prototype._findFirstEventIndex = _findFirstEventIndex;\n\nSpessaSynthSequencer.prototype.loadNewSequence = loadNewSequence;\nSpessaSynthSequencer.prototype.loadNewSongList = loadNewSongList;\nSpessaSynthSequencer.prototype.nextSong = nextSong;\nSpessaSynthSequencer.prototype.previousSong = previousSong;\n\nSpessaSynthSequencer.prototype.play = play;\nSpessaSynthSequencer.prototype._playTo = _playTo;\nSpessaSynthSequencer.prototype.setTimeTicks = setTimeTicks;\nSpessaSynthSequencer.prototype._recalculateStartTime = _recalculateStartTime;\n\nexport { SpessaSynthSequencer };", "let tr;(()=>{var l=Uint8Array,T=Uint16Array,ur=Int32Array,W=new l([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),X=new l([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),wr=new l([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Y=function(r,a){for(var e=new T(31),f=0;f<31;++f)e[f]=a+=1<<r[f-1];for(var v=new ur(e[30]),f=1;f<30;++f)for(var g=e[f];g<e[f+1];++g)v[g]=g-e[f]<<5|f;return{b:e,r:v}},Z=Y(W,2),$=Z.b,cr=Z.r;$[28]=258,cr[258]=28;var j=Y(X,0),hr=j.b,Fr=j.r,_=new T(32768);for(i=0;i<32768;++i)c=(i&43690)>>1|(i&21845)<<1,c=(c&52428)>>2|(c&13107)<<2,c=(c&61680)>>4|(c&3855)<<4,_[i]=((c&65280)>>8|(c&255)<<8)>>1;var c,i,A=function(r,a,e){for(var f=r.length,v=0,g=new T(a);v<f;++v)r[v]&&++g[r[v]-1];var k=new T(a);for(v=1;v<a;++v)k[v]=k[v-1]+g[v-1]<<1;var b;if(e){b=new T(1<<a);var m=15-a;for(v=0;v<f;++v)if(r[v])for(var U=v<<4|r[v],x=a-r[v],n=k[r[v]-1]++<<x,o=n|(1<<x)-1;n<=o;++n)b[_[n]>>m]=U}else for(b=new T(f),v=0;v<f;++v)r[v]&&(b[v]=_[k[r[v]-1]++]>>15-r[v]);return b},M=new l(288);for(i=0;i<144;++i)M[i]=8;var i;for(i=144;i<256;++i)M[i]=9;var i;for(i=256;i<280;++i)M[i]=7;var i;for(i=280;i<288;++i)M[i]=8;var i,L=new l(32);for(i=0;i<32;++i)L[i]=5;var i,gr=A(M,9,1),br=A(L,5,1),q=function(r){for(var a=r[0],e=1;e<r.length;++e)r[e]>a&&(a=r[e]);return a},u=function(r,a,e){var f=a/8|0;return(r[f]|r[f+1]<<8)>>(a&7)&e},C=function(r,a){var e=a/8|0;return(r[e]|r[e+1]<<8|r[e+2]<<16)>>(a&7)},kr=function(r){return(r+7)/8|0},xr=function(r,a,e){return(a==null||a<0)&&(a=0),(e==null||e>r.length)&&(e=r.length),new l(r.subarray(a,e))},yr=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],h=function(r,a,e){var f=new Error(a||yr[r]);if(f.code=r,Error.captureStackTrace&&Error.captureStackTrace(f,h),!e)throw f;return f},Sr=function(r,a,e,f){var v=r.length,g=f?f.length:0;if(!v||a.f&&!a.l)return e||new l(0);var k=!e,b=k||a.i!=2,m=a.i;k&&(e=new l(v*3));var U=function(fr){var or=e.length;if(fr>or){var lr=new l(Math.max(or*2,fr));lr.set(e),e=lr}},x=a.f||0,n=a.p||0,o=a.b||0,S=a.l,I=a.d,z=a.m,D=a.n,G=v*8;do{if(!S){x=u(r,n,1);var H=u(r,n+1,3);if(n+=3,H)if(H==1)S=gr,I=br,z=9,D=5;else if(H==2){var N=u(r,n,31)+257,s=u(r,n+10,15)+4,d=N+u(r,n+5,31)+1;n+=14;for(var F=new l(d),P=new l(19),t=0;t<s;++t)P[wr[t]]=u(r,n+t*3,7);n+=s*3;for(var rr=q(P),Ar=(1<<rr)-1,Mr=A(P,rr,1),t=0;t<d;){var ar=Mr[u(r,n,Ar)];n+=ar&15;var w=ar>>4;if(w<16)F[t++]=w;else{var E=0,O=0;for(w==16?(O=3+u(r,n,3),n+=2,E=F[t-1]):w==17?(O=3+u(r,n,7),n+=3):w==18&&(O=11+u(r,n,127),n+=7);O--;)F[t++]=E}}var er=F.subarray(0,N),y=F.subarray(N);z=q(er),D=q(y),S=A(er,z,1),I=A(y,D,1)}else h(1);else{var w=kr(n)+4,J=r[w-4]|r[w-3]<<8,K=w+J;if(K>v){m&&h(0);break}b&&U(o+J),e.set(r.subarray(w,K),o),a.b=o+=J,a.p=n=K*8,a.f=x;continue}if(n>G){m&&h(0);break}}b&&U(o+131072);for(var Ur=(1<<z)-1,zr=(1<<D)-1,Q=n;;Q=n){var E=S[C(r,n)&Ur],p=E>>4;if(n+=E&15,n>G){m&&h(0);break}if(E||h(2),p<256)e[o++]=p;else if(p==256){Q=n,S=null;break}else{var nr=p-254;if(p>264){var t=p-257,B=W[t];nr=u(r,n,(1<<B)-1)+$[t],n+=B}var R=I[C(r,n)&zr],V=R>>4;R||h(3),n+=R&15;var y=hr[V];if(V>3){var B=X[V];y+=C(r,n)&(1<<B)-1,n+=B}if(n>G){m&&h(0);break}b&&U(o+131072);var vr=o+nr;if(o<y){var ir=g-y,Dr=Math.min(y,vr);for(ir+o<0&&h(3);o<Dr;++o)e[o]=f[ir+o]}for(;o<vr;++o)e[o]=e[o-y]}}a.l=S,a.p=Q,a.b=o,a.f=x,S&&(x=1,a.m=z,a.d=I,a.n=D)}while(!x);return o!=e.length&&k?xr(e,0,o):e.subarray(0,o)},Tr=new l(0);function mr(r,a){return Sr(r,{i:2},a&&a.out,a&&a.dictionary)}var Er=typeof TextDecoder<\"u\"&&new TextDecoder,pr=0;try{Er.decode(Tr,{stream:!0}),pr=1}catch{}tr=mr})();export{tr as inflateSync};\n", "import { readBytesAsString } from \"../utils/byte_functions/string.js\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo, SpessaSynthWarn } from \"../utils/loggin.js\";\nimport { consoleColors } from \"../utils/other.js\";\nimport { readBytesAsUintBigEndian } from \"../utils/byte_functions/big_endian.js\";\nimport { readVariableLengthQuantity } from \"../utils/byte_functions/variable_length_quantity.js\";\nimport { RMIDINFOChunks } from \"./midi_tools/rmidi_writer.js\";\nimport { inflateSync } from \"../externals/fflate/fflate.min.js\";\nimport { IndexedByteArray } from \"../utils/indexed_array.js\";\n\n/**\n * @enum {number}\n */\nconst metadataTypes = {\n    XMFFileType: 0,\n    nodeName: 1,\n    nodeIDNumber: 2,\n    resourceFormat: 3,\n    filenameOnDisk: 4,\n    filenameExtensionOnDisk: 5,\n    macOSFileTypeAndCreator: 6,\n    mimeType: 7,\n    title: 8,\n    copyrightNotice: 9,\n    comment: 10,\n    autoStart: 11,                 // Node Name of the FileNode containing the SMF image to autostart when the XMF file loads\n    preload: 12,                   // Used to preload specific SMF and DLS file images.\n    contentDescription: 13,        // RP-42a (https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp42.pdf)\n    ID3Metadata: 14                // RP-47 (https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp47.pdf)\n};\n\n/**\n * @enum {number}\n */\nconst referenceTypeIds = {\n    inLineResource: 1,\n    inFileResource: 2,\n    inFileNode: 3,\n    externalFile: 4,\n    externalXMF: 5,\n    XMFFileURIandNodeID: 6\n};\n\n/**\n * @enum {number}\n */\nconst resourceFormatIDs = {\n    StandardMIDIFile: 0,\n    StandardMIDIFileType1: 1,\n    DLS1: 2,\n    DLS2: 3,\n    DLS22: 4,\n    mobileDLS: 5\n};\n\n/**\n * @enum {number}\n */\nconst formatTypeIDs = {\n    standard: 0,\n    MMA: 1,\n    registered: 2,\n    nonRegistered: 3\n};\n\n\n/**\n * @enum {number}\n */\nconst unpackerIDs = {\n    none: 0,\n    MMAUnpacker: 1,\n    registered: 2,\n    nonRegistered: 3\n};\n\nclass XMFNode\n{\n    /**\n     * @type {number}\n     */\n    length;\n    /**\n     * 0 means it's a file node\n     * @type {number}\n     */\n    itemCount;\n    /**\n     * @type {number}\n     */\n    metadataLength;\n    \n    /**\n     * @type {Record<string, any>}\n     */\n    metadata = {};\n    \n    /**\n     * @type {IndexedByteArray}\n     */\n    nodeData;\n    \n    /**\n     * @type {XMFNode[]}\n     */\n    innerNodes = [];\n    \n    packedContent = false;\n    \n    nodeUnpackers = [];\n    \n    \n    /**\n     * @type {\"StandardMIDIFile\"|\n     * \"StandardMIDIFileType1\"|\n     * \"DLS1\"|\n     * \"DLS2\"|\n     * \"DLS22\"|\n     * \"mobileDLS\"|\n     * \"unknown\"|\"folder\"}\n     */\n    resourceFormat = \"unknown\";\n    \n    /**\n     * @param binaryData {IndexedByteArray}\n     */\n    constructor(binaryData)\n    {\n        let nodeStartIndex = binaryData.currentIndex;\n        this.length = readVariableLengthQuantity(binaryData);\n        this.itemCount = readVariableLengthQuantity(binaryData);\n        // header length\n        const headerLength = readVariableLengthQuantity(binaryData);\n        const readBytes = binaryData.currentIndex - nodeStartIndex;\n        \n        const remainingHeader = headerLength - readBytes;\n        const headerData = binaryData.slice(\n            binaryData.currentIndex,\n            binaryData.currentIndex + remainingHeader\n        );\n        binaryData.currentIndex += remainingHeader;\n        \n        this.metadataLength = readVariableLengthQuantity(headerData);\n        \n        const metadataChunk = headerData.slice(\n            headerData.currentIndex,\n            headerData.currentIndex + this.metadataLength\n        );\n        headerData.currentIndex += this.metadataLength;\n        \n        /**\n         * @type {metadataTypes|string|number}\n         */\n        let fieldSpecifier;\n        let key;\n        while (metadataChunk.currentIndex < metadataChunk.length)\n        {\n            const firstSpecifierByte = metadataChunk[metadataChunk.currentIndex];\n            if (firstSpecifierByte === 0)\n            {\n                metadataChunk.currentIndex++;\n                fieldSpecifier = readVariableLengthQuantity(metadataChunk);\n                if (Object.values(metadataTypes).indexOf(fieldSpecifier) === -1)\n                {\n                    SpessaSynthWarn(`Unknown field specifier: ${fieldSpecifier}`);\n                    key = `unknown_${fieldSpecifier}`;\n                }\n                else\n                {\n                    key = Object.keys(metadataTypes).find(k => metadataTypes[k] === fieldSpecifier);\n                }\n            }\n            else\n            {\n                // this is the length of string\n                const stringLength = readVariableLengthQuantity(metadataChunk);\n                fieldSpecifier = readBytesAsString(metadataChunk, stringLength);\n                key = fieldSpecifier;\n            }\n            \n            const numberOfVersions = readVariableLengthQuantity(metadataChunk);\n            if (numberOfVersions === 0)\n            {\n                const dataLength = readVariableLengthQuantity(metadataChunk);\n                const contentsChunk = metadataChunk.slice(\n                    metadataChunk.currentIndex,\n                    metadataChunk.currentIndex + dataLength\n                );\n                metadataChunk.currentIndex += dataLength;\n                const formatID = readVariableLengthQuantity(contentsChunk);\n                // text only\n                if (formatID < 4)\n                {\n                    this.metadata[key] = readBytesAsString(contentsChunk, dataLength - 1);\n                }\n                else\n                {\n                    this.metadata[key] = contentsChunk.slice(contentsChunk.currentIndex);\n                }\n            }\n            else\n            {\n                // throw new Error (\"International content is not supported.\");\n                // Skip the number of versions\n                SpessaSynthWarn(`International content: ${numberOfVersions}`);\n                // Length in bytes\n                // Skip the whole thing!\n                metadataChunk.currentIndex += readVariableLengthQuantity(metadataChunk);\n            }\n        }\n        \n        const unpackersStart = headerData.currentIndex;\n        const unpackersLength = readVariableLengthQuantity(headerData);\n        const unpackersData = headerData.slice(headerData.currentIndex, unpackersStart + unpackersLength);\n        headerData.currentIndex = unpackersStart + unpackersLength;\n        if (unpackersLength > 0)\n        {\n            this.packedContent = true;\n            while (unpackersData.currentIndex < unpackersLength)\n            {\n                const unpacker = {};\n                unpacker.id = readVariableLengthQuantity(unpackersData);\n                switch (unpacker.id)\n                {\n                    case unpackerIDs.nonRegistered:\n                    case unpackerIDs.registered:\n                        SpessaSynthGroupEnd();\n                        throw new Error(`Unsupported unpacker ID: ${unpacker.id}`);\n                    \n                    default:\n                        SpessaSynthGroupEnd();\n                        throw new Error(`Unknown unpacker ID: ${unpacker.id}`);\n                    \n                    case unpackerIDs.none:\n                        unpacker.standardID = readVariableLengthQuantity(unpackersData);\n                        break;\n                    \n                    case unpackerIDs.MMAUnpacker:\n                        let manufacturerID = unpackersData[unpackersData.currentIndex++];\n                        // one or three byte form, depending on if the first byte is zero\n                        if (manufacturerID === 0)\n                        {\n                            manufacturerID <<= 8;\n                            manufacturerID |= unpackersData[unpackersData.currentIndex++];\n                            manufacturerID <<= 8;\n                            manufacturerID |= unpackersData[unpackersData.currentIndex++];\n                        }\n                        const manufacturerInternalID = readVariableLengthQuantity(unpackersData);\n                        unpacker.manufacturerID = manufacturerID;\n                        unpacker.manufacturerInternalID = manufacturerInternalID;\n                        break;\n                }\n                unpacker.decodedSize = readVariableLengthQuantity(unpackersData);\n                this.nodeUnpackers.push(unpacker);\n            }\n        }\n        binaryData.currentIndex = nodeStartIndex + headerLength;\n        /**\n         * @type {referenceTypeIds|number}\n         */\n        this.referenceTypeID = readVariableLengthQuantity(binaryData);\n        this.nodeData = binaryData.slice(binaryData.currentIndex, nodeStartIndex + this.length);\n        binaryData.currentIndex = nodeStartIndex + this.length;\n        switch (this.referenceTypeID)\n        {\n            case referenceTypeIds.inLineResource:\n                break;\n            \n            case referenceTypeIds.externalXMF:\n            case referenceTypeIds.inFileNode:\n            case referenceTypeIds.XMFFileURIandNodeID:\n            case referenceTypeIds.externalFile:\n            case referenceTypeIds.inFileResource:\n                SpessaSynthGroupEnd();\n                throw new Error(`Unsupported reference type: ${this.referenceTypeID}`);\n            \n            default:\n                SpessaSynthGroupEnd();\n                throw new Error(`Unknown reference type: ${this.referenceTypeID}`);\n        }\n        \n        // read the data\n        if (this.isFile)\n        {\n            if (this.packedContent)\n            {\n                const compressed = this.nodeData.slice(2, this.nodeData.length);\n                SpessaSynthInfo(\n                    `%cPacked content. Attemting to deflate. Target size: %c${this.nodeUnpackers[0].decodedSize}`,\n                    consoleColors.warn,\n                    consoleColors.value\n                );\n                try\n                {\n                    this.nodeData = new IndexedByteArray(inflateSync(compressed).buffer);\n                }\n                catch (e)\n                {\n                    SpessaSynthGroupEnd();\n                    throw new Error(`Error unpacking XMF file contents: ${e.message}.`);\n                }\n            }\n            /**\n             * interpret the content\n             * @type {number[]}\n             */\n            const resourceFormat = this.metadata[\"resourceFormat\"];\n            if (resourceFormat === undefined)\n            {\n                SpessaSynthWarn(\"No resource format for this file node!\");\n            }\n            else\n            {\n                const formatTypeID = resourceFormat[0];\n                if (formatTypeID !== formatTypeIDs.standard)\n                {\n                    SpessaSynthWarn(`Non-standard formatTypeID: ${resourceFormat}`);\n                    this.resourceFormat = resourceFormat.toString();\n                }\n                const resourceFormatID = resourceFormat[1];\n                if (Object.values(resourceFormatIDs).indexOf(resourceFormatID) === -1)\n                {\n                    SpessaSynthWarn(`Unrecognized resource format: ${resourceFormatID}`);\n                }\n                else\n                {\n                    this.resourceFormat = Object.keys(resourceFormatIDs)\n                        .find(k => resourceFormatIDs[k] === resourceFormatID);\n                }\n            }\n        }\n        else\n        {\n            // folder node\n            this.resourceFormat = \"folder\";\n            while (this.nodeData.currentIndex < this.nodeData.length)\n            {\n                const nodeStartIndex = this.nodeData.currentIndex;\n                const nodeLength = readVariableLengthQuantity(this.nodeData);\n                const nodeData = this.nodeData.slice(nodeStartIndex, nodeStartIndex + nodeLength);\n                this.nodeData.currentIndex = nodeStartIndex + nodeLength;\n                this.innerNodes.push(new XMFNode(nodeData));\n            }\n        }\n    }\n    \n    get isFile()\n    {\n        return this.itemCount === 0;\n    }\n}\n\n/**\n * @param midi {BasicMIDI}\n * @param binaryData {IndexedByteArray}\n * @returns {IndexedByteArray} the file byte array\n */\nexport function loadXMF(midi, binaryData)\n{\n    midi.bankOffset = 0;\n    // https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/xmf-v1a.pdf\n    // https://wiki.multimedia.cx/index.php?title=Extensible_Music_Format_(XMF)\n    const sanityCheck = readBytesAsString(binaryData, 4);\n    if (sanityCheck !== \"XMF_\")\n    {\n        SpessaSynthGroupEnd();\n        throw new SyntaxError(`Invalid XMF Header! Expected \"_XMF\", got \"${sanityCheck}\"`);\n    }\n    \n    SpessaSynthGroup(\"%cParsing XMF file...\", consoleColors.info);\n    const version = readBytesAsString(binaryData, 4);\n    SpessaSynthInfo(\n        `%cXMF version: %c${version}`,\n        consoleColors.info, consoleColors.recognized\n    );\n    // https://amei.or.jp/midistandardcommittee/Recommended_Practice/e/rp43.pdf\n    // version 2.00 has additional bytes\n    if (version === \"2.00\")\n    {\n        const fileTypeId = readBytesAsUintBigEndian(binaryData, 4);\n        const fileTypeRevisionId = readBytesAsUintBigEndian(binaryData, 4);\n        SpessaSynthInfo(\n            `%cFile Type ID: %c${fileTypeId}%c, File Type Revision ID: %c${fileTypeRevisionId}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n    }\n    \n    // file length\n    readVariableLengthQuantity(binaryData);\n    \n    const metadataTableLength = readVariableLengthQuantity(binaryData);\n    // skip metadata\n    binaryData.currentIndex += metadataTableLength;\n    \n    // skip to tree root\n    binaryData.currentIndex = readVariableLengthQuantity(binaryData);\n    const rootNode = new XMFNode(binaryData);\n    /**\n     * @type {IndexedByteArray}\n     */\n    let midiArray;\n    /**\n     * find the stuff we care about\n     * @param node {XMFNode}\n     */\n    const searchNode = node =>\n    {\n        const checkMeta = (xmf, rmid) =>\n        {\n            if (node.metadata[xmf] !== undefined && typeof node.metadata[xmf] === \"string\")\n            {\n                midi.RMIDInfo[rmid] = node.metadata[xmf];\n            }\n        };\n        // meta\n        checkMeta(\"nodeName\", RMIDINFOChunks.name);\n        checkMeta(\"title\", RMIDINFOChunks.name);\n        checkMeta(\"copyrightNotice\", RMIDINFOChunks.copyright);\n        checkMeta(\"comment\", RMIDINFOChunks.comment);\n        if (node.isFile)\n        {\n            switch (node.resourceFormat)\n            {\n                default:\n                    return;\n                case \"DLS1\":\n                case \"DLS2\":\n                case \"DLS22\":\n                case \"mobileDLS\":\n                    SpessaSynthInfo(\"%cFound embedded DLS!\", consoleColors.recognized);\n                    midi.embeddedSoundFont = node.nodeData.buffer;\n                    break;\n                \n                case \"StandardMIDIFile\":\n                case \"StandardMIDIFileType1\":\n                    SpessaSynthInfo(\"%cFound embedded MIDI!\", consoleColors.recognized);\n                    midiArray = node.nodeData;\n                    break;\n            }\n        }\n        else\n        {\n            for (const n of node.innerNodes)\n            {\n                searchNode(n);\n            }\n        }\n    };\n    searchNode(rootNode);\n    SpessaSynthGroupEnd();\n    return midiArray;\n}", "import { dataBytesAmount, getChannel, MIDIMessage } from \"./midi_message.js\";\nimport { IndexedByteArray } from \"../utils/indexed_array.js\";\nimport { consoleColors } from \"../utils/other.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo, SpessaSynthWarn } from \"../utils/loggin.js\";\nimport { readRIFFChunk } from \"../soundfont/basic_soundfont/riff_chunk.js\";\nimport { readVariableLengthQuantity } from \"../utils/byte_functions/variable_length_quantity.js\";\nimport { readBytesAsUintBigEndian } from \"../utils/byte_functions/big_endian.js\";\nimport { readBytesAsString } from \"../utils/byte_functions/string.js\";\nimport { readLittleEndian } from \"../utils/byte_functions/little_endian.js\";\nimport { RMIDINFOChunks } from \"./midi_tools/rmidi_writer.js\";\nimport { BasicMIDI } from \"./basic_midi.js\";\nimport { loadXMF } from \"./xmf_loader.js\";\n\n/**\n * midi_loader.js\n * purpose:\n * parses a midi file for the seqyencer,\n * including things like marker or CC 2/4 loop detection, copyright detection, etc.\n */\n\n/**\n * The MIDI class is a MIDI file parser that reads a MIDI file and extracts all the necessary information from it.\n * Supported formats are .mid and .rmi files.\n */\nclass MIDI extends BasicMIDI\n{\n    /**\n     * Parses a given midi file\n     * @param arrayBuffer {ArrayBuffer}\n     * @param fileName {string} optional, replaces the decoded title if empty\n     */\n    constructor(arrayBuffer, fileName = \"\")\n    {\n        super();\n        SpessaSynthGroupCollapsed(`%cParsing MIDI File...`, consoleColors.info);\n        this.fileName = fileName;\n        const binaryData = new IndexedByteArray(arrayBuffer);\n        let fileByteArray;\n        \n        // check for rmid\n        const initialString = readBytesAsString(binaryData, 4);\n        binaryData.currentIndex -= 4;\n        if (initialString === \"RIFF\")\n        {\n            // possibly an RMID file (https://github.com/spessasus/sf2-rmidi-specification#readme)\n            // skip size\n            binaryData.currentIndex += 8;\n            const rmid = readBytesAsString(binaryData, 4, false);\n            if (rmid !== \"RMID\")\n            {\n                SpessaSynthGroupEnd();\n                throw new SyntaxError(`Invalid RMIDI Header! Expected \"RMID\", got \"${rmid}\"`);\n            }\n            const riff = readRIFFChunk(binaryData);\n            if (riff.header !== \"data\")\n            {\n                SpessaSynthGroupEnd();\n                throw new SyntaxError(`Invalid RMIDI Chunk header! Expected \"data\", got \"${rmid}\"`);\n            }\n            // this is a rmid, load the midi into an array for parsing\n            fileByteArray = riff.chunkData;\n            \n            // keep loading chunks until we get the \"SFBK\" header\n            while (binaryData.currentIndex <= binaryData.length)\n            {\n                const startIndex = binaryData.currentIndex;\n                const currentChunk = readRIFFChunk(binaryData, true);\n                if (currentChunk.header === \"RIFF\")\n                {\n                    const type = readBytesAsString(currentChunk.chunkData, 4).toLowerCase();\n                    if (type === \"sfbk\" || type === \"sfpk\" || type === \"dls \")\n                    {\n                        SpessaSynthInfo(\"%cFound embedded soundfont!\", consoleColors.recognized);\n                        this.embeddedSoundFont = binaryData.slice(startIndex, startIndex + currentChunk.size).buffer;\n                    }\n                    else\n                    {\n                        SpessaSynthWarn(`Unknown RIFF chunk: \"${type}\"`);\n                    }\n                    if (type === \"dls \")\n                    {\n                        // Assume bank offset of 0 by default. If we find any bank selects, then the offset is 1.\n                        this.isDLSRMIDI = true;\n                    }\n                }\n                else if (currentChunk.header === \"LIST\")\n                {\n                    const type = readBytesAsString(currentChunk.chunkData, 4);\n                    if (type === \"INFO\")\n                    {\n                        SpessaSynthInfo(\"%cFound RMIDI INFO chunk!\", consoleColors.recognized);\n                        this.RMIDInfo = {};\n                        while (currentChunk.chunkData.currentIndex <= currentChunk.size)\n                        {\n                            const infoChunk = readRIFFChunk(currentChunk.chunkData, true);\n                            this.RMIDInfo[infoChunk.header] = infoChunk.chunkData;\n                        }\n                        if (this.RMIDInfo[\"ICOP\"])\n                        {\n                            // special case, overwrites the copyright components array\n                            this.copyright = readBytesAsString(\n                                this.RMIDInfo[\"ICOP\"],\n                                this.RMIDInfo[\"ICOP\"].length,\n                                false\n                            ).replaceAll(\"\\n\", \" \");\n                        }\n                        if (this.RMIDInfo[\"INAM\"])\n                        {\n                            this.rawMidiName = this.RMIDInfo[RMIDINFOChunks.name];\n                            this.midiName = readBytesAsString(\n                                /** @type {IndexedByteArray}*/this.rawMidiName,\n                                this.rawMidiName.length,\n                                false\n                            ).replaceAll(\"\\n\", \" \");\n                        }\n                        // these can be used interchangeably\n                        if (this.RMIDInfo[\"IALB\"] && !this.RMIDInfo[\"IPRD\"])\n                        {\n                            this.RMIDInfo[\"IPRD\"] = this.RMIDInfo[\"IALB\"];\n                        }\n                        if (this.RMIDInfo[\"IPRD\"] && !this.RMIDInfo[\"IALB\"])\n                        {\n                            this.RMIDInfo[\"IALB\"] = this.RMIDInfo[\"IPRD\"];\n                        }\n                        this.bankOffset = 1; // defaults to 1\n                        if (this.RMIDInfo[RMIDINFOChunks.bankOffset])\n                        {\n                            this.bankOffset = readLittleEndian(this.RMIDInfo[RMIDINFOChunks.bankOffset], 2);\n                        }\n                    }\n                }\n            }\n            \n            if (this.isDLSRMIDI)\n            {\n                // Assume bank offset of 0 by default. If we find any bank selects, then the offset is 1.\n                this.bankOffset = 0;\n            }\n            \n            // if no embedded bank, assume 0\n            if (this.embeddedSoundFont === undefined)\n            {\n                this.bankOffset = 0;\n            }\n        }\n        else if (initialString === \"XMF_\")\n        {\n            // XMF file\n            fileByteArray = loadXMF(this, binaryData);\n        }\n        else\n        {\n            fileByteArray = binaryData;\n        }\n        const headerChunk = this._readMIDIChunk(fileByteArray);\n        if (headerChunk.type !== \"MThd\")\n        {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(`Invalid MIDI Header! Expected \"MThd\", got \"${headerChunk.type}\"`);\n        }\n        \n        if (headerChunk.size !== 6)\n        {\n            SpessaSynthGroupEnd();\n            throw new RangeError(`Invalid MIDI header chunk size! Expected 6, got ${headerChunk.size}`);\n        }\n        \n        // format\n        this.format = readBytesAsUintBigEndian(headerChunk.data, 2);\n        // tracks count\n        this.tracksAmount = readBytesAsUintBigEndian(headerChunk.data, 2);\n        // time division\n        this.timeDivision = readBytesAsUintBigEndian(headerChunk.data, 2);\n        // read all the tracks\n        for (let i = 0; i < this.tracksAmount; i++)\n        {\n            /**\n             * @type {MIDIMessage[]}\n             */\n            const track = [];\n            const trackChunk = this._readMIDIChunk(fileByteArray);\n            \n            if (trackChunk.type !== \"MTrk\")\n            {\n                SpessaSynthGroupEnd();\n                throw new SyntaxError(`Invalid track header! Expected \"MTrk\" got \"${trackChunk.type}\"`);\n            }\n            \n            \n            /**\n             * MIDI running byte\n             * @type {number}\n             */\n            let runningByte = undefined;\n            \n            let totalTicks = 0;\n            // format 2 plays sequentially\n            if (this.format === 2 && i > 0)\n            {\n                totalTicks += this.tracks[i - 1][this.tracks[i - 1].length - 1].ticks;\n            }\n            // loop until we reach the end of track\n            while (trackChunk.data.currentIndex < trackChunk.size)\n            {\n                totalTicks += readVariableLengthQuantity(trackChunk.data);\n                \n                // check if the status byte is valid (IE. larger than 127)\n                const statusByteCheck = trackChunk.data[trackChunk.data.currentIndex];\n                \n                let statusByte;\n                // if we have a running byte and the status byte isn't valid\n                if (runningByte !== undefined && statusByteCheck < 0x80)\n                {\n                    statusByte = runningByte;\n                }\n                else\n                { // noinspection PointlessBooleanExpressionJS\n                    if (runningByte === undefined && statusByteCheck < 0x80)\n                    {\n                        // if we don't have a running byte and the status byte isn't valid, it's an error.\n                        SpessaSynthGroupEnd();\n                        throw new SyntaxError(`Unexpected byte with no running byte. (${statusByteCheck})`);\n                    }\n                    else\n                    {\n                        // if the status byte is valid, use that\n                        statusByte = trackChunk.data[trackChunk.data.currentIndex++];\n                    }\n                }\n                const statusByteChannel = getChannel(statusByte);\n                \n                let eventDataLength;\n                \n                // determine the message's length;\n                switch (statusByteChannel)\n                {\n                    case -1:\n                        // system common/realtime (no length)\n                        eventDataLength = 0;\n                        break;\n                    \n                    case -2:\n                        // meta (the next is the actual status byte)\n                        statusByte = trackChunk.data[trackChunk.data.currentIndex++];\n                        eventDataLength = readVariableLengthQuantity(trackChunk.data);\n                        break;\n                    \n                    case -3:\n                        // sysex\n                        eventDataLength = readVariableLengthQuantity(trackChunk.data);\n                        break;\n                    \n                    default:\n                        // voice message\n                        // gets the midi message length\n                        eventDataLength = dataBytesAmount[statusByte >> 4];\n                        // save the status byte\n                        runningByte = statusByte;\n                        break;\n                }\n                \n                // put the event data into the array\n                const eventData = new IndexedByteArray(eventDataLength);\n                eventData.set(trackChunk.data.slice(\n                    trackChunk.data.currentIndex,\n                    trackChunk.data.currentIndex + eventDataLength\n                ), 0);\n                const event = new MIDIMessage(totalTicks, statusByte, eventData);\n                track.push(event);\n                // advance the track chunk\n                trackChunk.data.currentIndex += eventDataLength;\n            }\n            this.tracks.push(track);\n            \n            SpessaSynthInfo(\n                `%cParsed %c${this.tracks.length}%c / %c${this.tracksAmount}`,\n                consoleColors.info,\n                consoleColors.value,\n                consoleColors.info,\n                consoleColors.value\n            );\n        }\n        \n        SpessaSynthInfo(\n            `%cAll tracks parsed correctly!`,\n            consoleColors.recognized\n        );\n        // parse the events\n        this._parseInternal();\n        SpessaSynthGroupEnd();\n        SpessaSynthInfo(\n            `%cMIDI file parsed. Total tick time: %c${this.lastVoiceEventTick}%c, total seconds time: %c${this.duration}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n    }\n    \n    /**\n     * @param fileByteArray {IndexedByteArray}\n     * @returns {{type: string, size: number, data: IndexedByteArray}}\n     * @private\n     */\n    _readMIDIChunk(fileByteArray)\n    {\n        const chunk = {};\n        // type\n        chunk.type = readBytesAsString(fileByteArray, 4);\n        // size\n        chunk.size = readBytesAsUintBigEndian(fileByteArray, 4);\n        // data\n        chunk.data = new IndexedByteArray(chunk.size);\n        const dataSlice = fileByteArray.slice(fileByteArray.currentIndex, fileByteArray.currentIndex + chunk.size);\n        chunk.data.set(dataSlice, 0);\n        fileByteArray.currentIndex += chunk.size;\n        return chunk;\n    }\n}\n\nexport { MIDI };", "// noinspection JSUnusedGlobalSymbols\n\nimport { SpessaSynthProcessor } from \"./src/synthetizer/audio_engine/main_processor.js\";\nimport { SpessaSynthSequencer } from \"./src/sequencer/sequencer_engine.js\";\nimport {\n    ALL_CHANNELS_OR_DIFFERENT_ACTION,\n    DEFAULT_PERCUSSION,\n    DEFAULT_SYNTH_MODE,\n    MIDI_CHANNEL_COUNT,\n    VOICE_CAP\n} from \"./src/synthetizer/synth_constants.js\";\nimport {\n    channelConfiguration,\n    NON_CC_INDEX_OFFSET\n} from \"./src/synthetizer/audio_engine/engine_components/controller_tables.js\";\nimport { KeyModifier } from \"./src/synthetizer/audio_engine/engine_components/key_modifier_manager.js\";\nimport {\n    masterParameterType\n} from \"./src/synthetizer/audio_engine/engine_methods/controller_control/master_parameters.js\";\nimport { SynthesizerSnapshot } from \"./src/synthetizer/audio_engine/snapshot/synthesizer_snapshot.js\";\nimport { ChannelSnapshot } from \"./src/synthetizer/audio_engine/snapshot/channel_snapshot.js\";\n\nimport { BasicSoundBank } from \"./src/soundfont/basic_soundfont/basic_soundbank.js\";\nimport { BasicSample, CreatedSample, sampleTypes } from \"./src/soundfont/basic_soundfont/basic_sample.js\";\nimport { BasicPresetZone } from \"./src/soundfont/basic_soundfont/basic_preset_zone.js\";\nimport { BasicInstrument } from \"./src/soundfont/basic_soundfont/basic_instrument.js\";\nimport { BasicPreset } from \"./src/soundfont/basic_soundfont/basic_preset.js\";\nimport { Generator } from \"./src/soundfont/basic_soundfont/generator.js\";\nimport { Modulator, modulatorCurveTypes, modulatorSources } from \"./src/soundfont/basic_soundfont/modulator.js\";\nimport { BasicZone } from \"./src/soundfont/basic_soundfont/basic_zone.js\";\nimport { BasicGlobalZone } from \"./src/soundfont/basic_soundfont/basic_global_zone.js\";\nimport { loadSoundFont } from \"./src/soundfont/load_soundfont.js\";\n\nimport { MIDI } from \"./src/midi/midi_loader.js\";\nimport { BasicMIDI } from \"./src/midi/basic_midi.js\";\nimport { MIDISequenceData } from \"./src/midi/midi_sequence.js\";\nimport { MIDIBuilder } from \"./src/midi/midi_builder.js\";\nimport { messageTypes, midiControllers, MIDIMessage } from \"./src/midi/midi_message.js\";\nimport { interpolationTypes, synthDisplayTypes } from \"./src/synthetizer/audio_engine/engine_components/enums.js\";\nimport { RMIDINFOChunks } from \"./src/midi/midi_tools/rmidi_writer.js\";\nimport { IndexedByteArray } from \"./src/utils/indexed_array.js\";\nimport { audioToWav } from \"./src/utils/buffer_to_wav.js\";\nimport {\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo,\n    SpessaSynthLogging,\n    SpessaSynthWarn\n} from \"./src/utils/loggin.js\";\nimport { readBytesAsUintBigEndian } from \"./src/utils/byte_functions/big_endian.js\";\nimport { readLittleEndian } from \"./src/utils/byte_functions/little_endian.js\";\nimport { readBytesAsString } from \"./src/utils/byte_functions/string.js\";\nimport { readVariableLengthQuantity } from \"./src/utils/byte_functions/variable_length_quantity.js\";\nimport { consoleColors } from \"./src/utils/other.js\";\nimport { inflateSync } from \"./src/externals/fflate/fflate.min.js\";\nimport { DLSDestinations } from \"./src/soundfont/dls/dls_destinations.js\";\nimport { DLSSources } from \"./src/soundfont/dls/dls_sources.js\";\nimport { generatorTypes } from \"./src/soundfont/basic_soundfont/generator_types.js\";\nimport { BasicInstrumentZone } from \"./src/soundfont/basic_soundfont/basic_instrument_zone.js\";\n// you shouldn't use these...\nconst SpessaSynthCoreUtils = {\n    consoleColors,\n    SpessaSynthInfo,\n    SpessaSynthWarn,\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    readBytesAsUintBigEndian,\n    readLittleEndian,\n    readBytesAsString,\n    readVariableLengthQuantity,\n    inflateSync\n};\n\n// see All-NPN-Exports.md in the wiki\nexport {\n    // synth and seq\n    SpessaSynthSequencer,\n    SpessaSynthProcessor,\n    SynthesizerSnapshot,\n    ChannelSnapshot,\n    KeyModifier,\n    \n    masterParameterType,\n    channelConfiguration,\n    interpolationTypes,\n    synthDisplayTypes,\n    DEFAULT_PERCUSSION,\n    VOICE_CAP,\n    ALL_CHANNELS_OR_DIFFERENT_ACTION,\n    NON_CC_INDEX_OFFSET,\n    DEFAULT_SYNTH_MODE,\n    MIDI_CHANNEL_COUNT,\n    \n    // sound banks\n    loadSoundFont,\n    Generator,\n    Modulator,\n    BasicZone,\n    BasicGlobalZone,\n    BasicSample,\n    CreatedSample,\n    BasicInstrumentZone,\n    BasicInstrument,\n    BasicPreset,\n    BasicPresetZone,\n    BasicSoundBank,\n    \n    modulatorSources,\n    modulatorCurveTypes,\n    generatorTypes,\n    DLSSources,\n    DLSDestinations,\n    sampleTypes,\n    \n    \n    // MIDI\n    MIDI,\n    MIDISequenceData,\n    BasicMIDI,\n    MIDIBuilder,\n    MIDIMessage,\n    \n    RMIDINFOChunks,\n    midiControllers,\n    messageTypes,\n    \n    // utils\n    IndexedByteArray,\n    audioToWav,\n    SpessaSynthLogging,\n    SpessaSynthCoreUtils\n};", "import { SynthesizerSnapshot } from \"spessasynth_core\";\n\n// shamelessly copied from spessasynth_lib (I'm the author of it, so I can >:)\n\n/**\n * @enum {number}\n * // NOTE: Every message needs a channel number (if not relevant or all, set to -1)\n * @property {number} midiMessage                - 0  -> [messageData<Uint8Array>, channelOffset<number>, force<boolean>, options<SynthMethodOptions>]\n * @property {number} sampleRate                 - 1  -> [rate<number>, currentTime<number>]\n * @property {number} initialSoundBank           - 2  -> bank<ArrayBuffer>\n * @property {number} renderAudio                - 3  -> {sampleRate: number, separateChannels: boolean, loopCount: number, additionalTime: number}\n * @property {number} exportSoundFont            - 4  -> {compress:boolean, trim: boolean: quality: number}\n * @property {number} exportMIDI                 - 5  -> (no data)\n * @property {number} exportRMI                  - 6  -> {compress: boolean, quality: number, adjust: boolean, metadata: Partial<RMIDIMetadata>} or no data for recommended settings\n * @property {number} ccReset                    - 7  -> (no data) note: if channel is -1 then reset all channels\n * @property {number} setChannelVibrato          - 8  -> {frequencyHz: number, depthCents: number, delaySeconds: number} note: if channel is -1 then stop all channels note 2: if rate is -1, it means locking\n * @property {number} soundFontManager           - 9  -> [messageType<WorkerSoundfontManagerMessageType> messageData<any>] note: refer to sfman_message.js\n * @property {number} stopAll                    - 10 -> force<number> (0 false, 1 true) note: if channel is -1 then stop all channels\n * @property {number} killNotes                  - 11 -> amount<number>\n * @property {number} muteChannel                - 12 -> isMuted<boolean>\n * @property {number} addNewChannel              - 13 -> (no data)\n * @property {number} customCcChange             - 14 -> [ccNumber<number>, ccValue<number>]\n * @property {number} debugMessage               - 15 -> (no data)\n * @property {number} setMasterParameter         - 17 -> [parameter<masterParameterType>, value<number>]\n * @property {number} setDrums                   - 18 -> isDrums<boolean>\n * @property {number} transpose                  - 19 -> [semitones<number>, force<boolean>] note: if channel is -1 then transpose all channels\n * @property {number} highPerformanceMode        - 20 -> isOn<boolean>\n * @property {number} lockController             - 21 -> [controllerNumber<number>, isLocked<boolean>]\n * @property {number} sequencerSpecific          - 22 -> [messageType<seqMessageType> messageData<any>] note: refer to sequencer_message.js\n * @property {number} requestSynthesizerSnapshot - 23 -> (no data)\n * @property {number} setLogLevel                - 24 -> [enableInfo<boolean>, enableWarning<boolean>, enableGroup<boolean>, enableTable<boolean>]\n * @property {number} keyModifier                - 25 -> [messageType<workerKeyModifierMessageType> messageData<any>]\n * @property {number} setEffectsGain             - 26 -> [reverbGain<number>, chorusGain<number>]\n */\nexport const workerMessageType = {\n    midiMessage: 0,\n    sampleRate: 1,\n    initialSoundBank: 2,\n    renderAudio: 3,\n    exportSoundBank: 4,\n    exportMIDI: 5,\n    exportRMI: 6,\n    ccReset: 7,\n    setChannelVibrato: 8,\n    soundFontManager: 9,\n    stopAll: 10,\n    killNotes: 11,\n    muteChannel: 12,\n    addNewChannel: 13,\n    customCcChange: 14,\n    debugMessage: 15,\n    setMasterParameter: 17,\n    setDrums: 18,\n    transpose: 19,\n    highPerformanceMode: 20,\n    lockController: 21,\n    sequencerSpecific: 22,\n    requestSynthesizerSnapshot: 23,\n    setLogLevel: 24,\n    keyModifierManager: 25,\n    setEffectsGain: 26\n};\n\n\n/**\n * @typedef {{\n *     channelNumber: number|undefined\n *     messageType: (workerMessageType|number),\n *     messageData: (\n *     boolean|\n *     (number|Uint8Array|object)[]\n *     |undefined\n *     |boolean[]\n *     |boolean\n *     |Voice[]\n *     |number\n *     |{rate: number, depth: number, delay: number}\n *     |ArrayBuffer\n *     |{messageType: seqMessageType, messageData: any}\n *     |{messageType: workerKeyModifierMessageType, messageData: any}\n *     |Uint8Array\n *     |{sampleRate: number, separateChannels: boolean, loopCount: number, additionalTime: number}\n *     |{trim: boolean, compress: boolean, quality: number, isSf2: boolean}\n *     |{compress: boolean, quality: number, adjust: boolean, metadata: Partial<RMIDIMetadata>}\n *     )\n * }} WorkerMessage\n */\n\n\n/**\n * @typedef {Object} WorkerReturnMessage\n * @property {returnMessageType} messageType - the message's type\n * @property {{\n *     eventName: string,\n *     eventData: any\n * }|ChannelProperty\n * |{presetName: string, bank: number, program: number}[]\n * |string\n * |{messageType: SpessaSynthSequencerReturnMessageType, messageData: any}\n * |SynthesizerSnapshot\n * |number\n * |AudioChunks\n * |[WorkerSoundfontManagerMessageType, any]} messageData - the message's data\n *\n * 0 - channel property change      -> [channel<number>, property<ChannelProperty>, currentTime<number>] see message_sending.js line 29\n * 1 - event call                   -> {eventName<string>, eventData:<the event's data>}\n * 2 - master parameter change      -> [parameter<masterParameterType>, value<string|number>]\n * 3 - sequencer specific           -> [messageType<SpessaSynthSequencerReturnMessageType> messageData<any>] note: refer to sequencer_message.js\n * 4 - synthesizer snapshot         -> snapshot<SynthesizerSnapshot> note: refer to synthesizer_snapshot.js\n * 5 - isFullyInitialized           -> (no data)\n * 6 - soundfontError               -> errorMessage<string>\n * 7 - renderingProgress            -> progress<number>\n * 8 - exportedData                 -> Float32Array[] or {url: string, fileName: string} for files\n */\n\n/**\n * @enum {number}\n */\nexport const returnMessageType = {\n    channelPropertyChange: 0,\n    eventCall: 1,\n    masterParameterChange: 2,\n    sequencerSpecific: 3,\n    synthesizerSnapshot: 4,\n    isFullyInitialized: 5,\n    soundfontError: 6,\n    renderingProgress: 7,\n    exportedData: 8\n};\n\n\nexport const SongChangeType = {\n    backwards: 0,   // no additional data\n    forwards: 1,    // no additional data\n    shuffleOn: 2,   // no additional data\n    shuffleOff: 3,  // no additional data\n    index: 4        // songIndex<number>\n};\n\n/**\n * @enum {number}\n * @property {number} loadNewSongList          - 0 -> [...song<MIDI>]\n * @property {number} pause                    - 1 -> isFinished<boolean>\n * @property {number} stop                     - 2 -> (no data)\n * @property {number} play                     - 3 -> resetTime<boolean>\n * @property {number} setTime                  - 4 -> time<number>\n * @property {number} changeMIDIMessageSending - 5 -> sendMIDIMessages<boolean>\n * @property {number} setPlaybackRate          - 6 -> playbackRate<number>\n * @property {number} setLoop                  - 7 -> [loop<boolean>, count<number>]\n * @property {number} changeSong               - 8 -> [changeType<SongChangeType>, data<number>]\n * @property {number} getMIDI                  - 9 -> (no data)\n * @property {number} setSkipToFirstNote       -10 -> skipToFirstNoteOn<boolean>\n * @property {number} setPreservePlaybackState -11 -> preservePlaybackState<boolean>\n */\nexport const seqMessageType = {\n    loadNewSongList: 0,\n    pause: 1,\n    stop: 2,\n    play: 3,\n    setTime: 4,\n    changeMIDIMessageSending: 5,\n    setPlaybackRate: 6,\n    setLoop: 7,\n    changeSong: 8,\n    getMIDI: 9,\n    setSkipToFirstNote: 10,\n    setPreservePlaybackState: 11\n};\n\n/**\n *\n * @enum {number}\n */\nexport const SpessaSynthSequencerReturnMessageType = {\n    midiEvent: 0,               // [...midiEventBytes<number>]\n    songChange: 1,              // [songIndex<number>, isAutoPlayed<boolean>]\n    timeChange: 2,              // newTime<number>\n    pause: 3,                   // no data\n    getMIDI: 4,                 // midiData<MIDI>\n    midiError: 5,               // errorMSG<string>\n    metaEvent: 6,               // [event<MIDIMessage>, trackNum<number>]\n    loopCountChange: 7,         // newLoopCount<number>\n    songListChange: 8          // songListData<MIDIData[]>\n};\n\n/**\n * @enum {number}\n */\nexport const WorkerSoundfontManagerMessageType = {\n    reloadSoundFont: 0,      // buffer<ArrayBuffer>\n    addNewSoundFont: 2,      // [buffer<ArrayBuffer>, id<string>, bankOffset<number>]\n    deleteSoundFont: 3,      // id<string>\n    rearrangeSoundFonts: 4   // newOrder<string[]> // where string is the id\n};\n\n\n/**\n * @enum {number}\n */\nexport const workerKeyModifierMessageType = {\n    addMapping: 0,    // [channel<number>, midiNote<number>, mapping<KeyModifier>]\n    deleteMapping: 1, // [channel<number>, midiNote<number>]\n    clearMappings: 2 // <no data>\n};\n\n", "import { BasicMIDI, MIDISequenceData } from \"spessasynth_core\";\n\nexport class MIDIData extends MIDISequenceData\n{\n    \n    /**\n     * A boolean indicating if the MIDI file contains an embedded soundfont.\n     * If the embedded soundfont is undefined, this will be false.\n     * @type {boolean}\n     */\n    isEmbedded = false;\n    \n    /**\n     * Constructor that copies data from a BasicMIDI instance.\n     * @param {BasicMIDI} midi - The BasicMIDI instance to copy data from.\n     */\n    constructor(midi)\n    {\n        super();\n        this._copyFromSequence(midi);\n        \n        // keep so it doesn't break IPIC\n        if (midi[\"isEmbedded\"])\n        {\n            this.isEmbedded = midi[\"isEmbedded\"];\n            return this;\n        }\n        \n        // Set isEmbedded based on the presence of an embeddedSoundFont\n        this.isEmbedded = midi.embeddedSoundFont !== undefined;\n    }\n}", "export const EXTRA_BANK_ID = \"spessasynth-extra-bank\";", "import { BasicSoundBank, SpessaSynthProcessor, SpessaSynthSequencer, SynthesizerSnapshot } from \"spessasynth_core\";\nimport { EXTRA_BANK_ID } from \"../../extra_bank_id.js\";\n\nconst RENDER_BLOCKS_PER_PROGRESS = 64;\nconst BLOCK_SIZE = 128;\n\n/**\n * @param extraBank {BasicSoundBank|null}\n * @param extraBankOffset {number}\n * @param sampleRate {number}\n * @param separateChannels {boolean}\n * @param loopCount {number}\n * @param additionalTime {number}\n * @param progressCallback {(p: number) => void}\n * @returns {Promise<AudioChunks>}\n * @this {WorkerSynthEngine}\n */\nexport async function renderAudio(\n    extraBank,\n    extraBankOffset,\n    sampleRate,\n    separateChannels,\n    loopCount,\n    additionalTime,\n    progressCallback\n)\n{\n    const synthEngine = this.synthEngine;\n    const seqEngine = this.seqEngine;\n    const soundBank = this.soundBank;\n    const playing = !this.seqEngine.paused;\n    this.stopAudioLoop();\n    // load MIDI\n    const parsedMid = seqEngine.midiData;\n    const playbackRate = seqEngine._playbackRate;\n    // calculate times\n    const loopStartAbsolute = parsedMid.MIDIticksToSeconds(parsedMid.loop.start) / playbackRate;\n    const loopEndAbsolute = parsedMid.MIDIticksToSeconds(parsedMid.loop.end) / playbackRate;\n    let loopDuration = loopEndAbsolute - loopStartAbsolute;\n    const duration = parsedMid.duration / playbackRate + additionalTime + loopDuration * loopCount;\n    let sampleDuration = sampleRate * duration;\n    \n    const synth = new SpessaSynthProcessor(sampleRate, {\n        enableEventSystem: false\n    });\n    \n    // load font\n    synth.soundfontManager.reloadManager(soundBank);\n    if (extraBank)\n    {\n        synth.soundfontManager.addNewSoundFont(extraBank, EXTRA_BANK_ID, extraBankOffset);\n        synth.soundfontManager.rearrangeSoundFonts([EXTRA_BANK_ID, \"main\"]);\n    }\n    // apply snapshot\n    const snapshot = SynthesizerSnapshot.createSynthesizerSnapshot(synthEngine);\n    SynthesizerSnapshot.applySnapshot(synth, snapshot);\n    \n    const seq = new SpessaSynthSequencer(synth);\n    seq.loopCount = loopCount;\n    seq.playbackRate = playbackRate;\n    if (!loopCount)\n    {\n        seq.loop = false;\n    }\n    seq.loadNewSongList([parsedMid]);\n    // reverb, chorus\n    const reverb = [new Float32Array(sampleDuration), new Float32Array(sampleDuration)];\n    const chorus = [new Float32Array(sampleDuration), new Float32Array(sampleDuration)];\n    const out = [reverb, chorus];\n    const sampleDurationNoLastQuantum = sampleDuration - BLOCK_SIZE;\n    if (separateChannels)\n    {\n        /**\n         * @type {AudioChunks}\n         */\n        const dry = [];\n        for (let i = 0; i < 16; i++)\n        {\n            const d = [new Float32Array(sampleDuration), new Float32Array(sampleDuration)];\n            dry.push(d);\n            out.push(d);\n        }\n        let index = 0;\n        while (true)\n        {\n            for (let i = 0; i < RENDER_BLOCKS_PER_PROGRESS; i++)\n            {\n                if (index >= sampleDurationNoLastQuantum)\n                {\n                    seq.processTick();\n                    synth.renderAudioSplit(reverb, chorus, dry, index, sampleDuration - index);\n                    this.startAudioLoop();\n                    return out;\n                }\n                seq.processTick();\n                synth.renderAudioSplit(reverb, chorus, dry, index, BLOCK_SIZE);\n                index += BLOCK_SIZE;\n            }\n            progressCallback(index / sampleDuration);\n        }\n    }\n    else\n    {\n        const dry = [new Float32Array(sampleDuration), new Float32Array(sampleDuration)];\n        out.push(dry);\n        let index = 0;\n        while (true)\n        {\n            for (let i = 0; i < RENDER_BLOCKS_PER_PROGRESS; i++)\n            {\n                if (index >= sampleDurationNoLastQuantum)\n                {\n                    seq.processTick();\n                    synth.renderAudio(dry, reverb, chorus, index, sampleDuration - index);\n                    this.startAudioLoop();\n                    if (playing)\n                    {\n                        this.resumeSeq();\n                    }\n                    return out;\n                }\n                seq.processTick();\n                synth.renderAudio(dry, reverb, chorus, index, BLOCK_SIZE);\n                index += BLOCK_SIZE;\n            }\n            progressCallback(index / sampleDuration);\n        }\n    }\n}", "import { BasicMIDI, BasicSoundBank, SynthesizerSnapshot } from \"spessasynth_core\";\nimport { returnMessageType } from \"./worker_message.js\";\n\n/**\n * @param isSf2 {boolean}\n * @param trim {boolean}\n * @param compress {boolean}\n * @param quality {number}\n * @this {WorkerSynthEngine}\n * @returns {Promise<{fileName: string, url: string}>}\n */\nexport async function exportSoundBank(isSf2, trim, compress, quality)\n{\n    const playing = !this.seqEngine.paused;\n    this.stopAudioLoop();\n    const sf = new BasicSoundBank({\n        presets: this.soundBank.presets,\n        info: this.soundBank.soundFontInfo\n    });\n    if (trim)\n    {\n        const snapshot = SynthesizerSnapshot.createSynthesizerSnapshot(this.synthEngine);\n        const mid = BasicMIDI.copyFromDeep(this.seqEngine.midiData);\n        mid.applySnapshotToMIDI(snapshot);\n        sf.trimSoundBank(mid);\n    }\n    let url, fileName;\n    if (isSf2)\n    {\n        const compressionFunction = (await import(\"../../../../../externals/encode_vorbis.js\")).encodeVorbis;\n        /**\n         * @param data {Float32Array}\n         * @param rate {number}\n         * @returns {Promise<Uint8Array>}\n         */\n        const compressReal = async (data, rate) => compressionFunction([data], rate, quality);\n        const bin = await sf.write({\n            compress: compress,\n            compressionFunction: compressReal,\n            progressFunction: (_, i, total) => this.postSyn(returnMessageType.renderingProgress, i / total)\n        });\n        let extension = sf.soundFontInfo[\"ifil\"].split(\".\")[0] === \"3\" ? \"sf3\" : \"sf2\";\n        fileName = `${sf.soundFontInfo[\"INAM\"] || \"unnamed\"}.${extension}`;\n        \n        const blob = new Blob([bin.buffer], { type: \"audio/soundfont\" });\n        url = URL.createObjectURL(blob);\n    }\n    else\n    {\n        const bin = await sf.writeDLS({\n            progressFunction: (_, i, total) => this.postSyn(returnMessageType.renderingProgress, i / total)\n        });\n        fileName = `${sf.soundFontInfo[\"INAM\"] || \"unnamed\"}.dls`;\n        const blob = new Blob([bin.buffer], { type: \"audio/dls\" });\n        url = URL.createObjectURL(blob);\n        \n    }\n    \n    if (playing)\n    {\n        this.resumeSeq();\n    }\n    this.startAudioLoop();\n    \n    return {\n        fileName,\n        url\n    };\n}", "import { BasicMIDI, SynthesizerSnapshot } from \"spessasynth_core\";\n\n/**\n * @this {WorkerSynthEngine}\n * @returns {{fileName: string, url: string}}\n */\nexport function exportMIDI()\n{\n    const mid = BasicMIDI.copyFromDeep(this.seqEngine.midiData);\n    try\n    {\n        mid.applySnapshotToMIDI(SynthesizerSnapshot.createSynthesizerSnapshot(this.synthEngine));\n    }\n    catch (e)\n    {\n        console.warn(\"Failed to modify MIDI:\", e);\n    }\n    // export modified midi and write out\n    const file = mid.writeMIDI();\n    const blob = new Blob([file], { type: \"audio/mid\" });\n    const url = URL.createObjectURL(blob);\n    return {\n        url,\n        // will take the decoded data from seqUI\n        fileName: \"unnamed.mid\"\n    };\n}", "import { BasicMIDI, BasicSoundBank, loadSoundFont, SynthesizerSnapshot } from \"spessasynth_core\";\nimport { returnMessageType } from \"./worker_message.js\";\n\n/**\n * @typedef {Object} RMIDIMetadata\n * @prop {number} bankOffset\n * @prop {string} songTitle\n * @prop {string} album\n * @prop {string} artist\n * @prop {string} comment\n * @prop {string} genre\n * @prop {string} encoding\n * @prop {ArrayBuffer} picture\n */\n\n/**\n * @param compress {boolean}\n * @param quality {number}\n * @param metadata {Partial<RMIDIMetadata>}\n * @param adjust {boolean}\n * @this {WorkerSynthEngine}\n * @returns {promise<{fileName: string, url: string}>}\n */\nexport async function exportRMIDI(compress, quality, metadata, adjust)\n{\n    const playing = !this.seqEngine.paused;\n    this.stopAudioLoop();\n    const mid = BasicMIDI.copyFromDeep(this.seqEngine.midiData);\n    // pick a bank:\n    // if midi has an embedded bank, use that\n    // if we have an extra bank, use that\n    // otherwise pick the normal bank\n    const fontBuffer = mid.embeddedSoundFont || this.extraSoundBank || this.soundBank;\n    try\n    {\n        mid.applySnapshotToMIDI(SynthesizerSnapshot.createSynthesizerSnapshot(this.synthEngine));\n    }\n    catch (e)\n    {\n        console.warn(\"Failed to modify MIDI:\", e);\n    }\n    \n    /**\n     * @type {BasicSoundBank}\n     */\n    const font = fontBuffer instanceof ArrayBuffer ? loadSoundFont(fontBuffer) : fontBuffer;\n    \n    if (adjust)\n    {\n        font.trimSoundBank(mid);\n    }\n    \n    // write soundfont\n    const compressionFunction = (await import(\"../../../../../externals/encode_vorbis.js\")).encodeVorbis;\n    /**\n     * @param data {Float32Array}\n     * @param rate {number}\n     * @returns {Promise<Uint8Array>}\n     */\n    const compressReal = async (data, rate) => compressionFunction([data], rate, quality);\n    const soundFontBinary = await font.write({\n        compress: compress,\n        compressionFunction: compressReal,\n        progressFunction: (_, i, total) => this.postSyn(returnMessageType.renderingProgress, i / total)\n    });\n    \n    let pictureBuffer = metadata?.picture;\n    if (!pictureBuffer && mid.RMIDInfo?.[\"IPIC\"] !== undefined)\n    {\n        pictureBuffer = mid.RMIDInfo?.[\"IPIC\"].buffer;\n    }\n    \n    const todayISO8601 = (new Date()).toISOString().split(\"T\")[0];\n    \n    // export modified midi and write out\n    const file = mid.writeRMIDI(\n        soundFontBinary,\n        font,\n        metadata?.bankOffset || 0,\n        metadata?.encoding || \"UTF-8\",\n        {\n            name: metadata?.songTitle,\n            comment: metadata?.comment,\n            engineer: font?.soundFontInfo[\"IENG\"],\n            picture: pictureBuffer,\n            album: metadata?.album,\n            artist: metadata?.artist,\n            genre: metadata?.genre,\n            midiEncoding: metadata?.encoding,\n            creationDate: todayISO8601\n        },\n        adjust\n    );\n    const blob = new Blob([file], { type: \"audio/mid\" });\n    const url = URL.createObjectURL(blob);\n    if (playing)\n    {\n        this.resumeSeq();\n    }\n    this.startAudioLoop();\n    return {\n        url,\n        fileName: `${metadata?.songTitle || \"unnamed_song\"}.rmi`\n    };\n}", "import {\n    ALL_CHANNELS_OR_DIFFERENT_ACTION,\n    BasicMIDI,\n    BasicSoundBank,\n    loadSoundFont,\n    masterParameterType,\n    MIDI,\n    SpessaSynthCoreUtils as util,\n    SpessaSynthLogging,\n    SpessaSynthProcessor,\n    SpessaSynthSequencer,\n    SynthesizerSnapshot\n} from \"spessasynth_core\";\nimport {\n    returnMessageType,\n    seqMessageType,\n    SongChangeType,\n    SpessaSynthSequencerReturnMessageType,\n    workerKeyModifierMessageType,\n    workerMessageType,\n    WorkerSoundfontManagerMessageType\n} from \"./worker_message.js\";\nimport { MIDIData } from \"./midi_data.js\";\nimport { renderAudio } from \"./render_audio.js\";\nimport { EXTRA_BANK_ID } from \"../../extra_bank_id.js\";\nimport { exportSoundBank } from \"./export_sf.js\";\nimport { exportMIDI } from \"./export_midi.js\";\nimport { exportRMIDI } from \"./export_rmidi.js\";\n\n\nconst BLOCK_SIZE = 128;\nconst MAX_CHUNKS_QUEUED = 40; // 16 * 128 = 2,048\n\n/*\nThis file emulates the worklet_processor.js from spessasynth_lib. However, it also provides an offline rendering method to avoid copying the SF file array buffer, as these can be LARGE.\nThe main thread controller is replaced with CustomSynth, however, the Sequencer is left as-is, and its messages are interpreted here.\n */\n\nclass WorkerSynthEngine\n{\n    /**\n     * @type {SpessaSynthProcessor|undefined}\n     */\n    synthEngine = undefined;\n    \n    /**\n     * @type {SpessaSynthSequencer|undefined}\n     */\n    seqEngine = undefined;\n    \n    /**\n     * @type {undefined|BasicSoundBank}\n     */\n    soundBank = undefined;\n    \n    /**\n     * the mesage port to the playback audio worklet\n     * @type {undefined|MessagePort}\n     */\n    workletPort = undefined;\n    \n    // set as nothing to render, the worklet will set to the required number\n    toRender = 0;\n    \n    loopOn = true;\n    \n    /**\n     * @type {null|BasicSoundBank}\n     */\n    extraSoundBank = null;\n    /**\n     * @type {number}\n     */\n    extraSoundBankOffset = 0;\n    \n    checkExtraSoundBank()\n    {\n        this.extraSoundBank = null;\n        this.extraSoundBankOffset = 0;\n        this.synthEngine.soundfontManager.soundfontList.forEach(l =>\n        {\n            if (l.id === EXTRA_BANK_ID)\n            {\n                this.extraSoundBank = l.soundfont;\n                this.extraSoundBankOffset = l.bankOffset;\n            }\n        });\n    }\n    \n    /**\n     * @param t {returnMessageType}\n     * @param d {any}\n     * @param transferable {Transferable[]?}\n     */\n    postSyn(t, d, transferable = [])\n    {\n        // noinspection JSCheckFunctionSignatures\n        postMessage({\n            messageType: t,\n            messageData: d\n        }, transferable);\n    };\n    \n    handleWorkletMessage(e)\n    {\n        this.toRender = Math.max(0, MAX_CHUNKS_QUEUED - e.data);\n        \n        \n    }\n    \n    // we are using intervals to wait for the chunk to finish rendering, we don't want to schedule another before this one is done!\n    renderLoop()\n    {\n        if (this.toRender < 1)\n        {\n            // post an empty message (request enqueued chunk count update)\n            this.workletPort.postMessage(undefined);\n            setTimeout(this.renderLoop.bind(this));\n            return;\n        }\n        for (; this.toRender > 0; this.toRender--)\n        {\n            // data is encoded into a single f32 array as follows\n            // revL, revR\n            // chrL, chrR,\n            // dry1L, dry1R\n            // dryNL, dryNR\n            // dry16L, dry16R\n            // to improve performance\n            \n            const byteStep = BLOCK_SIZE * Float32Array.BYTES_PER_ELEMENT;\n            const data = new Float32Array(BLOCK_SIZE * 36);\n            let byteOffset = 0;\n            const revR = new Float32Array(data.buffer, byteOffset, BLOCK_SIZE);\n            byteOffset += byteStep;\n            const revL = new Float32Array(data.buffer, byteOffset, BLOCK_SIZE);\n            const rev = [revL, revR];\n            byteOffset += byteStep;\n            const chrL = new Float32Array(data.buffer, byteOffset, BLOCK_SIZE);\n            byteOffset += byteStep;\n            const chrR = new Float32Array(data.buffer, byteOffset, BLOCK_SIZE);\n            const chr = [chrL, chrR];\n            /**\n             * @type {AudioChunks}\n             */\n            const dry = [];\n            for (let i = 0; i < 16; i++)\n            {\n                byteOffset += byteStep;\n                const dryL = new Float32Array(data.buffer, byteOffset, BLOCK_SIZE);\n                byteOffset += byteStep;\n                const dryR = new Float32Array(data.buffer, byteOffset, BLOCK_SIZE);\n                dry.push([dryL, dryR]);\n            }\n            \n            this.seqEngine.processTick();\n            this.synthEngine.renderAudioSplit(rev, chr, dry);\n            this.workletPort.postMessage(data, [data.buffer]);\n        }\n        this.toRender = 0;\n        if (this.loopOn)\n        {\n            setTimeout(this.renderLoop.bind(this));\n        }\n    };\n    \n    startAudioLoop()\n    {\n        this.loopOn = true;\n        this.renderLoop();\n    }\n    \n    stopAudioLoop()\n    {\n        this.synthEngine.stopAllChannels(true);\n        this.seqEngine.pause();\n        this.loopOn = false;\n    }\n    \n    syncTime()\n    {\n        this.synthEngine.midiAudioChannels[0].sendChannelProperty();\n    }\n    \n    resumeSeq()\n    {\n        this.syncTime();\n        this.seqEngine.currentTime -= 0.001;\n    }\n    \n    async initSynthEngine(sampleRate, initialTime)\n    {\n        this.synthEngine = new SpessaSynthProcessor(sampleRate, {\n            initialTime\n        });\n        this.seqEngine = new SpessaSynthSequencer(this.synthEngine);\n        this.synthEngine.onEventCall = (t, d) =>\n        {\n            this.postSyn(returnMessageType.eventCall, {\n                eventName: t,\n                eventData: d\n            });\n        };\n        this.synthEngine.onChannelPropertyChange = (p, n) => this.postSyn(\n            returnMessageType.channelPropertyChange,\n            [n, p, this.synthEngine.currentSynthTime]\n        );\n        this.synthEngine.onMasterParameterChange = (t, v) => this.postSyn(\n            returnMessageType.masterParameterChange,\n            [t, v]\n        );\n        await this.synthEngine.processorInitialized;\n        \n        \n        const postSeq = (type, data) =>\n        {\n            postMessage({\n                messageType: returnMessageType.sequencerSpecific,\n                messageData: {\n                    messageType: type,\n                    messageData: data\n                }\n            });\n        };\n        // sequencer events\n        this.seqEngine.onMIDIMessage = m =>\n        {\n            postSeq(SpessaSynthSequencerReturnMessageType.midiEvent, m);\n        };\n        this.seqEngine.onTimeChange = t =>\n        {\n            postSeq(SpessaSynthSequencerReturnMessageType.timeChange, t);\n        };\n        this.seqEngine.onPlaybackStop = p =>\n        {\n            postSeq(SpessaSynthSequencerReturnMessageType.pause, p);\n        };\n        this.seqEngine.onSongChange = (i, a) =>\n        {\n            postSeq(SpessaSynthSequencerReturnMessageType.songChange, [i, a, this.seqEngine.currentTime]);\n        };\n        this.seqEngine.onMetaEvent = (e, i) =>\n        {\n            postSeq(SpessaSynthSequencerReturnMessageType.metaEvent, [e, i]);\n        };\n        this.seqEngine.onLoopCountChange = c =>\n        {\n            postSeq(SpessaSynthSequencerReturnMessageType.loopCountChange, c);\n        };\n        this.seqEngine.onSongListChange = l =>\n        {\n            const midiDataList = l.map(s => new MIDIData(s));\n            postMessage({\n                messageType: returnMessageType.sequencerSpecific,\n                messageData: {\n                    messageType: SpessaSynthSequencerReturnMessageType.songListChange,\n                    messageData: midiDataList\n                }\n            });\n        };\n        \n        // initial queue\n        this.startAudioLoop();\n    }\n    \n    /**\n     * @param e {MessageEvent}\n     * @returns {Promise<void>}\n     */\n    async handleMainThreadMessage(e)\n    {\n        if (e.ports[0])\n        {\n            const port = e.ports[0];\n            this.workletPort = port;\n            port.onmessage = this.handleWorkletMessage.bind(this);\n        }\n        /**\n         * @type {WorkerMessage}\n         */\n        const msg = e.data;\n        const data = msg.messageData;\n        const channel = msg.channelNumber;\n        \n        let channelObject;\n        if (channel >= 0)\n        {\n            channelObject = this.synthEngine.midiAudioChannels[channel];\n            if (channelObject === undefined)\n            {\n                util.SpessaSynthWarn(`Trying to access channel ${channel} which does not exist... ignoring!`);\n                return;\n            }\n        }\n        \n        const seq = this.seqEngine;\n        switch (msg.messageType)\n        {\n            case workerMessageType.sampleRate:\n                await this.initSynthEngine(...data);\n                break;\n            \n            case workerMessageType.initialSoundBank:\n                this.soundBank = loadSoundFont(data);\n                this.synthEngine.soundfontManager.addNewSoundFont(this.soundBank, \"main\", 0);\n                break;\n            \n            case workerMessageType.midiMessage:\n                this.synthEngine.processMessage(...data);\n                break;\n            \n            case workerMessageType.customCcChange:\n                // custom controller change\n                channelObject.setCustomController(data[0], data[1]);\n                break;\n            \n            case workerMessageType.ccReset:\n                if (channel === ALL_CHANNELS_OR_DIFFERENT_ACTION)\n                {\n                    this.synthEngine.resetAllControllers();\n                }\n                else\n                {\n                    channelObject.resetControllers();\n                }\n                break;\n            \n            case workerMessageType.setChannelVibrato:\n                if (channel === ALL_CHANNELS_OR_DIFFERENT_ACTION)\n                {\n                    for (let i = 0; i < this.synthEngine.midiAudioChannels.length; i++)\n                    {\n                        const chan = this.synthEngine.midiAudioChannels[i];\n                        if (data.rate === ALL_CHANNELS_OR_DIFFERENT_ACTION)\n                        {\n                            chan.disableAndLockGSNRPN();\n                        }\n                        else\n                        {\n                            chan.setVibrato(data.depth, data.rate, data.delay);\n                        }\n                    }\n                }\n                else if (data.rate === ALL_CHANNELS_OR_DIFFERENT_ACTION)\n                {\n                    channelObject.disableAndLockGSNRPN();\n                }\n                else\n                {\n                    channelObject.setVibrato(data.depth, data.rate, data.delay);\n                }\n                break;\n            \n            case workerMessageType.stopAll:\n                if (channel === ALL_CHANNELS_OR_DIFFERENT_ACTION)\n                {\n                    this.synthEngine.stopAllChannels(data === 1);\n                }\n                else\n                {\n                    channelObject.stopAllNotes(data === 1);\n                }\n                break;\n            \n            case workerMessageType.killNotes:\n                this.synthEngine.voiceKilling(data);\n                break;\n            \n            case workerMessageType.muteChannel:\n                channelObject.muteChannel(data);\n                break;\n            \n            case workerMessageType.addNewChannel:\n                this.synthEngine.createMidiChannel(true);\n                break;\n            \n            case workerMessageType.debugMessage:\n                console.debug(this.synthEngine);\n                break;\n            \n            case workerMessageType.setMasterParameter:\n                /**\n                 * @type {masterParameterType}\n                 */\n                const type = data[0];\n                const value = data[1];\n                this.synthEngine.setMasterParameter(type, value);\n                break;\n            \n            case workerMessageType.setDrums:\n                channelObject.setDrums(data);\n                break;\n            \n            case workerMessageType.transpose:\n                if (channel === ALL_CHANNELS_OR_DIFFERENT_ACTION)\n                {\n                    this.synthEngine.transposeAllChannels(data[0], data[1]);\n                }\n                else\n                {\n                    channelObject.transposeChannel(data[0], data[1]);\n                }\n                break;\n            \n            case workerMessageType.highPerformanceMode:\n                this.synthEngine.highPerformanceMode = data;\n                break;\n            \n            case workerMessageType.lockController:\n                if (data[0] === ALL_CHANNELS_OR_DIFFERENT_ACTION)\n                {\n                    channelObject.setPresetLock(data[1]);\n                }\n                else\n                {\n                    channelObject.lockedControllers[data[0]] = data[1];\n                }\n                break;\n            \n            case workerMessageType.sequencerSpecific:\n                const messageData = data.messageData;\n                const messageType = data.messageType;\n                switch (messageType)\n                {\n                    default:\n                        break;\n                    \n                    case seqMessageType.loadNewSongList:\n                        try\n                        {\n                            /**\n                             * @type {(BasicMIDI|{binary: ArrayBuffer, altName: string})[]}\n                             */\n                            const sList = messageData[0];\n                            const songMap = sList.map(s =>\n                            {\n                                if (s.duration)\n                                {\n                                    return s;\n                                }\n                                return new MIDI(s.binary, s.altName);\n                            });\n                            seq.loadNewSongList(songMap, messageData[1]);\n                        }\n                        catch (e)\n                        {\n                            console.error(e);\n                            postMessage({\n                                messageType: returnMessageType.sequencerSpecific,\n                                messageData: {\n                                    messageType: SpessaSynthSequencerReturnMessageType.midiError,\n                                    messageData: e\n                                }\n                            });\n                        }\n                        break;\n                    \n                    case seqMessageType.pause:\n                        seq.pause();\n                        break;\n                    \n                    case seqMessageType.play:\n                        seq.play(messageData);\n                        this.syncTime();\n                        break;\n                    \n                    case seqMessageType.stop:\n                        seq.stop();\n                        break;\n                    \n                    case seqMessageType.setTime:\n                        seq.currentTime = messageData;\n                        break;\n                    \n                    case seqMessageType.changeMIDIMessageSending:\n                        seq.sendMIDIMessages = messageData;\n                        break;\n                    \n                    case seqMessageType.setPlaybackRate:\n                        seq.playbackRate = messageData;\n                        break;\n                    \n                    case seqMessageType.setLoop:\n                        const [loop, count] = messageData;\n                        seq.loop = loop;\n                        if (count === ALL_CHANNELS_OR_DIFFERENT_ACTION)\n                        {\n                            seq.loopCount = Infinity;\n                        }\n                        else\n                        {\n                            seq.loopCount = count;\n                        }\n                        break;\n                    \n                    case seqMessageType.changeSong:\n                        switch (messageData[0])\n                        {\n                            case SongChangeType.forwards:\n                                seq.nextSong();\n                                break;\n                            \n                            case SongChangeType.backwards:\n                                seq.previousSong();\n                                break;\n                            \n                            case SongChangeType.shuffleOff:\n                                seq.shuffleMode = false;\n                                seq.songIndex = seq.shuffledSongIndexes[seq.songIndex];\n                                break;\n                            \n                            case SongChangeType.shuffleOn:\n                                seq.shuffleMode = true;\n                                seq.shuffleSongIndexes();\n                                seq.songIndex = 0;\n                                seq.loadCurrentSong();\n                                break;\n                            \n                            case SongChangeType.index:\n                                seq.songIndex = messageData[1];\n                                seq.loadCurrentSong();\n                                break;\n                        }\n                        break;\n                    \n                    case seqMessageType.getMIDI:\n                        postMessage({\n                            messageType: returnMessageType.sequencerSpecific,\n                            messageData: {\n                                messageType: SpessaSynthSequencerReturnMessageType.getMIDI,\n                                messageData: seq.midiData\n                            }\n                        });\n                        break;\n                    \n                    case seqMessageType.setSkipToFirstNote:\n                        seq.skipToFirstNoteOn = messageData;\n                        break;\n                    \n                    case seqMessageType.setPreservePlaybackState:\n                        seq.preservePlaybackState = messageData;\n                }\n                this.syncTime();\n                break;\n            \n            case workerMessageType.soundFontManager:\n                try\n                {\n                    const sfManager = this.synthEngine.soundfontManager;\n                    const type = data[0];\n                    const messageData = data[1];\n                    switch (type)\n                    {\n                        case WorkerSoundfontManagerMessageType.addNewSoundFont:\n                            this.soundBank = loadSoundFont(messageData[0]);\n                            sfManager.addNewSoundFont(this.soundBank, messageData[1], messageData[2]);\n                            postMessage({\n                                messageType: returnMessageType.isFullyInitialized,\n                                messageData: undefined\n                            });\n                            break;\n                        \n                        case WorkerSoundfontManagerMessageType.deleteSoundFont:\n                            sfManager.deleteSoundFont(messageData);\n                            break;\n                        \n                        case WorkerSoundfontManagerMessageType.rearrangeSoundFonts:\n                            sfManager.rearrangeSoundFonts(messageData);\n                        \n                    }\n                    this.checkExtraSoundBank();\n                }\n                catch (e)\n                {\n                    postMessage({\n                        messageType: returnMessageType.soundfontError,\n                        messageData: e\n                    });\n                }\n                this.syncTime();\n                break;\n            \n            case workerMessageType.keyModifierManager:\n                /**\n                 * @type {workerKeyModifierMessageType}\n                 */\n                const keyMessageType = data[0];\n                const man = this.synthEngine.keyModifierManager;\n                const keyMessageData = data[1];\n                switch (keyMessageType)\n                {\n                    default:\n                        return;\n                    \n                    case workerKeyModifierMessageType.addMapping:\n                        man.addMapping(...keyMessageData);\n                        break;\n                    \n                    case workerKeyModifierMessageType.clearMappings:\n                        man.clearMappings();\n                        break;\n                    \n                    case workerKeyModifierMessageType.deleteMapping:\n                        man.deleteMapping(...keyMessageData);\n                }\n                break;\n            \n            case workerMessageType.requestSynthesizerSnapshot:\n                const snapshot = SynthesizerSnapshot.createSynthesizerSnapshot(this.synthEngine);\n                postMessage({\n                    messageType: returnMessageType.synthesizerSnapshot,\n                    messageData: snapshot\n                });\n                break;\n            \n            case workerMessageType.setLogLevel:\n                SpessaSynthLogging(data[0], data[1], data[2], data[3]);\n                break;\n            \n            case workerMessageType.setEffectsGain:\n                this.synthEngine.reverbGain = data[0];\n                this.synthEngine.chorusGain = data[1];\n                break;\n            \n            case workerMessageType.renderAudio:\n                const rendered = await this.renderAudio(\n                    this.extraSoundBank,\n                    this.extraSoundBankOffset,\n                    data.sampleRate,\n                    data.separateChannels,\n                    data.loopCount,\n                    data.additionalTime,\n                    (p) => this.postSyn(returnMessageType.renderingProgress, p)\n                );\n                const transfer = [];\n                rendered.forEach(r => r.forEach(arr => transfer.push(arr.buffer)));\n                postMessage({\n                    messageType: returnMessageType.exportedData,\n                    messageData: rendered\n                }, transfer);\n                break;\n            \n            case workerMessageType.exportSoundBank:\n            {\n                const exported = await this.exportSoundBank(\n                    data.isSf2,\n                    data.trim,\n                    data.compress,\n                    data.quality\n                );\n                this.postSyn(returnMessageType.exportedData, exported);\n            }\n                break;\n            \n            case workerMessageType.exportMIDI:\n            {\n                const exported = this.exportMIDI();\n                this.postSyn(returnMessageType.exportedData, exported);\n            }\n                break;\n            \n            case workerMessageType.exportRMI:\n            {\n                if (data === undefined)\n                {\n                    // recommended settings\n                    this.postSyn(returnMessageType.exportedData, this.getRecommendedRMIDISettings());\n                }\n                else\n                {\n                    const exported = await this.exportRMIDI(\n                        data.compress,\n                        data.quality,\n                        data.metadata,\n                        data.adjust\n                    );\n                    this.postSyn(returnMessageType.exportedData, exported);\n                }\n            }\n                break;\n            \n            default:\n                util.SpessaSynthWarn(\"Unrecognized event:\", data);\n                break;\n        }\n    }\n    \n    \n    /**\n     * @returns {{compress: boolean, adjust: boolean}}\n     */\n    getRecommendedRMIDISettings()\n    {\n        const mid = this.seqEngine.midiData;\n        // pick a bank:\n        // if midi has an embedded bank, use that\n        // if we have an extra bank, use that\n        // otherwise pick the normal bank\n        const fontBuffer = mid.embeddedSoundFont || this.extraSoundBank || this.soundBank;\n        \n        return {\n            compress: true,\n            adjust: fontBuffer === this.soundBank\n        };\n    }\n}\n\nWorkerSynthEngine.prototype.renderAudio = renderAudio;\nWorkerSynthEngine.prototype.exportSoundBank = exportSoundBank;\nWorkerSynthEngine.prototype.exportMIDI = exportMIDI;\nWorkerSynthEngine.prototype.exportRMIDI = exportRMIDI;\n\nconst worker = new WorkerSynthEngine();\nonmessage = worker.handleMainThreadMessage.bind(worker);\n\n\n"],
  "mappings": "yCAAA,IAAIA,GAAc,GACdC,GAAc,GACdC,GAAe,GACfC,GAAe,GASZ,SAASC,GAAmBC,EAAYC,EAAYC,EAAaC,EACxE,CACIR,GAAcK,EACdJ,GAAcK,EACdJ,GAAeK,EACfJ,GAAeK,CACnB,CAKO,SAASC,KAAmBC,EACnC,CACQV,IAEA,QAAQ,KAAK,GAAGU,CAAO,CAE/B,CAKO,SAASC,KAAmBD,EACnC,CACQT,IAEA,QAAQ,KAAK,GAAGS,CAAO,CAE/B,CAKO,SAASE,MAAoBF,EACpC,CACQR,IAEA,QAAQ,MAAM,GAAGQ,CAAO,CAEhC,CAKO,SAASG,MAA6BH,EAC7C,CACQR,IAEA,QAAQ,eAAe,GAAGQ,CAAO,CAEzC,CAEO,SAASI,GAChB,CACQZ,IAEA,QAAQ,SAAS,CAEzB,CC5DO,SAASa,GAAWC,EAC3B,CACIA,EAAe,KAAK,MAAMA,CAAY,EACtC,IAAIC,EAAU,KAAK,MAAMD,EAAe,EAAE,EACtCE,EAAU,KAAK,MAAMF,EAAgBC,EAAU,EAAG,EACtD,MAAO,CACH,QAAWA,EACX,QAAWC,EACX,KAAQ,GAAGD,EAAQ,SAAS,EAAE,SAAS,EAAG,GAAG,CAAC,IAAIC,EAAQ,SAAS,EAAE,SAAS,EAAG,GAAG,CAAC,EACzF,CACJ,CAMO,SAASC,GAAYC,EAC5B,CACI,OAAOA,EACF,KAAK,EACL,WAAW,OAAQ,EAAE,EACrB,WAAW,OAAQ,EAAE,EACrB,WAAW,OAAQ,EAAE,EACrB,WAAW,OAAQ,EAAE,EACrB,WAAW,QAAS,EAAE,EACtB,WAAW,IAAK,GAAG,EACnB,KAAK,CACd,CAOO,SAASC,GAAiBC,EACjC,CACI,IAAIC,EAAY,GAEhB,QAASC,EAAI,EAAGA,EAAIF,EAAI,OAAQE,IAChC,CACI,IAAMC,EAAMH,EAAIE,CAAC,EAAE,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,EAAE,YAAY,EAC7DD,GAAaE,EACbF,GAAa,GACjB,CAEA,OAAOA,CACX,CAMO,SAASG,GAAkBC,EAClC,CAQI,IAAMC,EAAY,CAAC,EACnB,QAASC,KAAQF,GAETE,IAAS,IAAMA,IAAS,MAExBA,EAAO,IAEXD,EAAU,KAAKC,CAAI,EAEvB,OAAO,IAAI,WAAWD,CAAS,CACnC,CAEO,IAAME,EAAgB,CACzB,KAAM,iBACN,aAAc,cACd,KAAM,eACN,WAAY,cACZ,MAAO,yCACX,ECpFA,SAASC,GAAYC,EAASC,EAC9B,CACI,IAAIC,EAAW,EACf,OAAIF,EAAQ,cAGRE,GAAY,GAEZD,EAAM,cAGNC,GAAY,GAGhBA,GAAYD,EAAM,SAAW,GAE7BC,GAAYD,EAAM,eAAe,MAC7BA,EAAM,cAENC,GAAY,GAEhBA,GAAYD,EAAM,eAAe,qBAAuB,GACjDC,CACX,CAMO,SAASC,GAAaC,EAC7B,CACI,IAAIC,EAAY,CAAC,EACjB,QAAWL,KAAW,KAAK,kBAEvB,QAAWC,KAASD,EAAQ,OAExB,GAAI,CAACC,EAAM,SACX,CACI,IAAMC,EAAWH,GAAYC,EAASC,CAAK,EAC3CI,EAAU,KAAK,CAAE,QAAAL,EAAS,MAAAC,EAAO,SAAAC,CAAS,CAAC,CAC/C,CAKRG,EAAU,KAAK,CAACC,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EAChD,IAAMC,EAAiBH,EAAU,MAAM,EAAGD,CAAM,EAEhD,OAAW,CAAE,QAAAJ,EAAS,MAAAC,CAAM,IAAKO,EACjC,CACI,IAAMC,EAAQT,EAAQ,OAAO,QAAQC,CAAK,EACtCQ,EAAQ,IAERT,EAAQ,OAAO,OAAOS,EAAO,CAAC,CAEtC,CACJ,CC1CO,IAAMC,GAAqB,KAI3B,IAAMC,GAAyB,6BAA6B,KAAK,OAAO,CAAC,GAEnEC,GAAqC,MCzB3C,IAAIC,GAAmBA,KAAT,OAAmBA,GAAU,CAAC,EAAMC,GAAQ,GAAGC,GAAYF,GAAU,cAAc,IAAI,QAAQG,GAAGD,GAAYC,CAAC,EAAE,IAAIC,GAAK,SAASD,EAAE,CAAC,IAAIE,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAE,oEAAoEC,EAAE,GAAGC,EAAE,EAAEX,EAAEA,EAAE,QAAQ,sBAAsB,EAAE,EAAE,GAAGK,EAAEI,EAAE,QAAQT,EAAE,OAAOW,GAAG,CAAC,EAAEL,EAAEG,EAAE,QAAQT,EAAE,OAAOW,GAAG,CAAC,EAAEJ,EAAEE,EAAE,QAAQT,EAAE,OAAOW,GAAG,CAAC,EAAEH,EAAEC,EAAE,QAAQT,EAAE,OAAOW,GAAG,CAAC,EAAET,EAAEG,GAAG,EAAEC,GAAG,EAAEH,GAAG,GAAGG,IAAI,EAAEC,GAAG,EAAEH,GAAG,EAAEG,IAAI,EAAEC,EAAEE,GAAG,OAAO,aAAaR,CAAC,EAAOK,IAAL,KAASG,GAAG,OAAO,aAAaP,CAAC,GAAQK,IAAL,KAASE,GAAG,OAAO,aAAaN,CAAC,SAASO,EAAEX,EAAE,QAAQ,OAAOU,CAAC,GAAG,UAAU,CAAC,IAAIV,EAAEE,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAWA,IAAT,OAAWA,EAAE,CAAC,EAAEA,EAAE,WAAW,WAAW,KAAKtB,GAAK,0m1FAA0m1F,EAAE,SAASD,EAAE,CAAC,OAAOA,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,IAAIuB,EAAWA,IAAT,OAAWA,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAE,IAAIxB,KAAKuB,EAAEA,EAAE,eAAevB,CAAC,IAAIwB,EAAExB,CAAC,EAAEuB,EAAEvB,CAAC,GAAGuB,EAAE,UAAU,CAAC,EAAEA,EAAE,YAAY,iBAAiBA,EAAE,KAAK,SAASvB,EAAEE,EAAE,CAAC,MAAMA,CAAC,EAAEqB,EAAE,OAAO,CAAC,EAAEA,EAAE,QAAQ,CAAC,EAAE,IAAIE,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,GAAE,GAAGH,EAAY,OAAO,QAAjB,SAAwBC,EAAc,OAAO,eAAnB,WAAiCC,EAAY,OAAO,SAAjB,UAAsC,OAAOE,IAAnB,YAA4B,CAACJ,GAAG,CAACC,EAAEE,GAAE,CAACH,GAAG,CAACE,GAAG,CAACD,EAAE,IAAII,GAAE,GAAG,SAASC,GAAE/B,EAAE,CAAC,OAAOuB,EAAE,WAAWA,EAAE,WAAWvB,EAAE8B,EAAC,EAAEA,GAAE9B,CAAC,CAAC2B,GAAGG,GAAE,UAAU,IAAIP,EAAE,KAAK,SAAWnB,EAAEC,EAAE,CAAC,IAAIC,EAAE,OAAOJ,IAAIA,EAAE,QAAWC,IAAIA,EAAE,QAAWC,EAAED,EAAE,UAAUC,CAAC,EAAEE,EAAEJ,EAAE,aAAaE,CAAC,EAAEC,EAAEC,EAAEA,EAAE,SAAS,CAAC,EAAEiB,EAAE,WAAW,SAAWrB,EAAE,CAAC,IAAIC,EAAEoB,EAAE,KAAKrB,EAAE,EAAE,EAAE,OAAOC,EAAE,SAASA,EAAE,IAAI,WAAWA,CAAC,GAAG6B,GAAE7B,EAAE,MAAM,EAAEA,CAAC,EAAE,QAAQ,KAAK,OAAO,IAAIoB,EAAE,YAAY,QAAQ,KAAK,CAAC,EAAE,QAAQ,MAAM,GAAG,GAAGA,EAAE,UAAU,QAAQ,KAAK,MAAM,CAAC,EAAe,OAAO,OAApB,IAA6C,QAAQ,GAAG,oBAAoB,SAASvB,EAAE,CAAC,GAAG,EAAEA,aAAaiC,IAAI,MAAMjC,CAAC,CAAC,EAAE,QAAQ,GAAG,qBAAqB,SAASA,EAAEE,EAAE,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC,EAAEqB,EAAE,KAAK,SAASvB,EAAE,CAAC,QAAQ,KAAKA,CAAC,CAAC,EAAEuB,EAAE,QAAQ,UAAU,CAAC,MAAM,4BAA4B,GAAGK,IAAgB,OAAO,KAApB,MAA2BL,EAAE,KAAK,SAAWrB,EAAE,CAAC,OAAO,KAAKA,CAAC,CAAC,GAAGqB,EAAE,WAAW,SAAWrB,EAAE,CAAC,IAAIC,EAAE,OAAkB,OAAO,YAAnB,WAA8B,IAAI,WAAW,WAAWD,CAAC,CAAC,GAAG8B,GAAY,OAAO7B,EAAE,KAAKD,EAAE,QAAQ,IAAlC,QAAoC,EAAEC,EAAE,EAAe,OAAO,WAApB,IAA+BoB,EAAE,UAAU,WAAwB,OAAO,UAApB,MAAgCA,EAAE,UAAU,WAAuB,OAAO,MAAnB,aAA0BA,EAAE,KAAK,SAASvB,EAAE,CAAC,KAAKA,CAAC,CAAC,KAAKyB,GAAGC,KAAKD,EAAE,SAAS,gBAAgBK,GAAE,SAAS,cAAc,KAAKA,GAAE,KAAK,SAAS,KAAKA,GAAMA,GAAE,QAAQ,OAAO,IAArB,EAAuBA,GAAE,MAAM,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,GAAG,EAAE,IAAI,GAAGP,EAAE,KAAK,SAAWrB,EAAE,CAAC,IAAIC,EAAE,IAAI,eAAe,OAAOA,EAAE,KAAK,MAAMD,EAAE,EAAE,EAAEC,EAAE,KAAK,IAAI,EAAEA,EAAE,YAAY,EAAEuB,IAAIH,EAAE,WAAW,SAAWrB,EAAE,CAAC,IAAIC,EAAE,IAAI,eAAe,OAAOA,EAAE,KAAK,MAAMD,EAAE,EAAE,EAAEC,EAAE,aAAa,cAAcA,EAAE,KAAK,IAAI,EAAE,IAAI,WAAWA,EAAE,QAAQ,CAAC,GAAGoB,EAAE,UAAU,SAAWrB,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAE,IAAI,eAAeA,EAAE,KAAK,MAAMH,EAAE,EAAE,EAAEG,EAAE,aAAa,cAAcA,EAAE,OAAO,UAAY,CAAC,GAAQA,EAAE,QAAP,KAAkBA,EAAE,QAAL,GAAaA,EAAE,SAAS,CAACF,EAAEE,EAAE,QAAQ,EAAE,MAAM,CAACD,EAAE,CAAC,EAAEC,EAAE,QAAQD,EAAEC,EAAE,KAAK,IAAI,CAAC,EAAEkB,EAAE,eAAe,SAASvB,EAAE,CAAC,SAAS,MAAMA,CAAC,GAAG,IAAIkC,GAAEX,EAAE,QAAqB,OAAO,QAApB,IAA4B,QAAQ,IAAI,KAAK,OAAO,EAAe,OAAO,MAApB,IAA0B,MAAM,MAAMY,GAAEZ,EAAE,WAAwB,OAAO,SAApB,IAA6B,SAAsB,OAAO,QAApB,KAA6B,QAAQ,KAAK,KAAK,OAAO,GAAGW,IAAG,IAAIlC,KAAKwB,EAAEA,EAAE,eAAexB,CAAC,IAAIuB,EAAEvB,CAAC,EAAEwB,EAAExB,CAAC,GAAG,SAASoC,EAAEpC,EAAE,CAAC,IAAIE,EAAEY,EAAE,OAAOA,EAAEA,EAAEd,EAAE,GAAG,IAAIE,CAAC,CAAC,SAASmC,EAAErC,EAAE,CAAC,IAAIE,EAAEO,EAAEW,GAAG,CAAC,EAAEjB,EAAED,EAAEF,EAAE,GAAG,IAAI,OAAOS,EAAEW,GAAG,CAAC,EAAEjB,EAAEA,GAAGmC,IAAI,CAACC,GAAG,GAAI9B,EAAEW,GAAG,CAAC,EAAElB,EAAE,GAAGA,CAAC,CAAC,SAASsC,EAAExC,EAAEE,EAAE,CAAC,OAAOA,IAAIA,EAAE,IAAIF,EAAE,KAAK,KAAKA,EAAEE,CAAC,EAAEA,CAAC,CAAC,SAASuC,EAAEzC,EAAE,CAAC,OAAOA,EAAE,CAAC,IAAI,KAAK,IAAI,KAAK,MAAO,GAAE,IAAI,MAAM,MAAO,GAAE,IAAI,MAAM,IAAI,QAAQ,MAAO,GAAE,IAAI,MAAM,IAAI,SAAS,MAAO,GAAE,QAAQ,GAASA,EAAEA,EAAE,OAAO,CAAC,IAAlB,IAAoB,MAAO,GAAE,GAASA,EAAE,CAAC,IAAT,IAAW,MAAO,GAAE,IAAIE,EAAE,SAASF,EAAE,OAAO,CAAC,CAAC,EAAE,OAAOgC,GAAE9B,EAAE,GAAG,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,SAASwC,EAAE1C,EAAE,CAAC0C,EAAE,QAAQA,EAAE,MAAM,CAAC,GAAGA,EAAE,MAAM1C,CAAC,IAAI0C,EAAE,MAAM1C,CAAC,EAAE,EAAEmC,GAAEnC,CAAC,EAAE,CAACwB,EAAE,OAAO,IAAImB,GAAE,CAAC,UAAU,SAAS3C,EAAEE,EAAE,CAAC,OAAOF,EAAEE,CAAC,EAAE,SAAS,UAAU,CAAC,CAAC,EAAE0C,GAAE,CAAC,EAAE,SAASC,GAAE7C,EAAEE,EAAE,CAAC,QAAQC,EAAE,EAAEC,EAAED,EAAEC,EAAED,EAAE,EAAEC,IAAI,GAAG,CAACwC,GAAExC,CAAC,EAAE,OAAOwC,GAAExC,CAAC,EAAEJ,EAAE,EAAEI,EAAE,KAAK,gGAAgG,CAAC,SAAS0C,GAAE9C,EAAE,CAAC4C,GAAE5C,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI+C,GAAE,CAAC,EAAE,SAASC,GAAEhD,EAAEE,EAAE,CAAC,GAAGF,EAAE,CAACgC,GAAE9B,CAAC,EAAE6C,GAAE7C,CAAC,IAAI6C,GAAE7C,CAAC,EAAE,CAAC,GAAG,IAAIC,EAAE4C,GAAE7C,CAAC,EAAE,OAAOC,EAAEH,CAAC,IAAQE,EAAE,SAAN,EAAaC,EAAEH,CAAC,EAAE,UAAY,CAAC,OAAOiD,GAAE/C,EAAEF,CAAC,CAAC,EAAME,EAAE,SAAN,EAAaC,EAAEH,CAAC,EAAE,SAAWI,EAAE,CAAC,OAAO6C,GAAE/C,EAAEF,EAAE,CAACI,CAAC,CAAC,CAAC,EAAED,EAAEH,CAAC,EAAE,UAAY,CAAC,OAAOiD,GAAE/C,EAAEF,EAAE,MAAM,UAAU,MAAM,KAAK,SAAS,CAAC,CAAC,GAAGG,EAAEH,CAAC,CAAC,CAAC,CAAC,SAASkD,GAAElD,EAAEE,EAAEC,EAAE,CAAC,OAAOA,EAAE,EAAEH,IAAI,GAAG,WAAW,EAAEE,IAAI,GAAG,EAAEF,IAAI,GAAG,WAAW,EAAE,EAAEE,EAAE,CAAC,SAAS+C,GAAEjD,EAAEE,EAAEC,EAAE,CAAC,OAAOA,GAAGA,EAAE,OAAOoB,EAAE,WAAWvB,CAAC,EAAE,MAAM,KAAK,CAACE,CAAC,EAAE,OAAOC,CAAC,CAAC,EAAEoB,EAAE,WAAWvB,CAAC,EAAE,KAAK,KAAKE,CAAC,CAAC,CAAC,IAAIiD,GAAE,EAAEC,GAAE,EAAE,SAASpB,GAAEhC,EAAEE,EAAE,CAACF,GAAGqD,GAAG,qBAAqBnD,CAAC,CAAC,CAAC,SAASoD,GAAEtD,EAAE,CAAC,IAAIE,EAAEqB,EAAE,IAAIvB,CAAC,EAAE,OAAOgC,GAAE9B,EAAE,gCAAgCF,EAAE,4BAA4B,EAAEE,CAAC,CAAC,IAAIqD,GAAE,CAAC,UAAU,UAAU,CAACC,GAAG,CAAC,EAAE,aAAa,UAAU,CAACC,GAAG,CAAC,EAAE,SAAS,SAASzD,EAAE,CAAC,IAAIE,EAAEC,EAAEC,EAAEsD,GAAG1D,EAAE,MAAM,EAAE,OAAOE,EAAEF,EAAEG,EAAEC,EAAEC,EAAE,IAAIH,EAAEC,CAAC,EAAEC,CAAC,EAAE,UAAU,SAASJ,EAAE,CAAC,IAAIE,EAAE,EAAE,GAASF,GAAN,MAAaA,IAAJ,EAAM,CAAC,IAAIG,GAAGH,EAAE,QAAQ,GAAG,EAAEE,EAAEwD,GAAGvD,CAAC,EAAEwD,GAAG3D,EAAEE,EAAEC,CAAC,CAAC,CAAC,OAAOD,CAAC,CAAC,EAAE0D,GAAE,CAAC,OAAOL,GAAE,UAAU,MAAMA,GAAE,QAAQ,EAAE,SAASM,GAAE7D,EAAEE,EAAEC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,GAAEgD,GAAEtD,CAAC,EAAEO,GAAE,CAAC,EAAEC,EAAE,EAAE,GAAGJ,EAAE,QAAQK,GAAE,EAAEA,GAAEL,EAAE,OAAOK,KAAI,CAAC,IAAIC,GAAEkD,GAAEzD,EAAEM,EAAC,CAAC,EAAEC,IAAOF,IAAJ,IAAQA,EAAEgD,GAAG,GAAGjD,GAAEE,EAAC,EAAEC,GAAEN,EAAEK,EAAC,CAAC,GAAGF,GAAEE,EAAC,EAAEL,EAAEK,EAAC,CAAC,CAAC,IAAIE,GAAEC,GAAEN,GAAE,MAAM,KAAKC,EAAC,EAAE,OAAOK,IAAGD,GAAEC,GAAaV,IAAX,SAAa4D,GAAGnD,EAAC,EAAcT,IAAZ,UAAc,EAAQS,GAAGA,IAAOH,IAAJ,GAAOiD,GAAGjD,CAAC,EAAEI,EAAC,CAAC,SAASmD,GAAE/D,EAAEE,EAAEC,EAAEC,EAAE,CAAC,QAAcD,EAAEA,GAAG,MAAM,OAAOA,EAAE,OAAO,CAAC,IAAnC,MAAuCA,EAAE,OAAOA,EAAE,CAAC,IAAI,KAAK,IAAI,KAAKE,EAAEL,GAAG,CAAC,EAAEE,EAAE,MAAM,IAAI,MAAMK,EAAEP,GAAG,CAAC,EAAEE,EAAE,MAAM,IAAI,MAAMO,EAAET,GAAG,CAAC,EAAEE,EAAE,MAAM,IAAI,MAAM,QAAQ,CAACA,IAAI,EAAE,CAAC8D,GAAG,WAAW9D,CAAC,GAAG,EAAE,WAAW,GAAG,EAAE+D,GAAG,CAACC,GAAG,WAAW,UAAU,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC,CAACC,IAAI,WAAW,EAAE,CAAC,CAAC,aAAa,IAAI,UAAU,IAAI,EAAE,CAAE,EAAE1D,EAAET,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAES,EAAET,EAAE,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAE,MAAM,IAAI,QAAQW,EAAEX,GAAG,CAAC,EAAEE,EAAE,MAAM,IAAI,SAASU,EAAEZ,GAAG,CAAC,EAAEE,EAAE,MAAM,QAAQmD,GAAG,8BAA8BlD,CAAC,CAAC,CAAC,CAAC,SAASiE,GAAEpE,EAAEE,EAAEC,EAAE,CAAC,QAAcD,EAAEA,GAAG,MAAM,OAAOA,EAAE,OAAO,CAAC,IAAnC,MAAuCA,EAAE,OAAOA,EAAE,CAAC,IAAI,KAAK,IAAI,KAAK,OAAOG,EAAEL,GAAG,CAAC,EAAE,IAAI,MAAM,OAAOO,EAAEP,GAAG,CAAC,EAAE,IAAI,MAAM,IAAI,MAAM,OAAOS,EAAET,GAAG,CAAC,EAAE,IAAI,QAAQ,OAAOW,EAAEX,GAAG,CAAC,EAAE,IAAI,SAAS,OAAOY,EAAEZ,GAAG,CAAC,EAAE,QAAQqD,GAAG,8BAA8BnD,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,SAASmE,GAAGrE,EAAEE,EAAEC,EAAEC,EAAE,CAAW,OAAOJ,GAAjB,UAAoBQ,GAAE,GAAGE,GAAEV,IAAIQ,GAAE,GAAGE,GAAEV,EAAE,QAAQ,IAAIO,EAAY,OAAOL,GAAjB,SAAmBA,EAAE,KAAK,GAAGS,EAAKR,GAAH,EAAKC,EAAE,CAAa,OAAOkE,IAAnB,WAAsBA,GAAGlC,EAAEsB,GAAGtB,EAAEC,CAAE,EAAWlC,IAAT,OAAW,EAAEA,CAAC,EAAE,KAAK,IAAIO,GAAEH,EAAE,EAAEL,EAAE,MAAM,CAAC,EAAEM,GAAE,CAAC,IAAIJ,EAAEO,EAAEqB,IAAG,EAAErB,IAAI,CAAC,EAAEC,GAAED,GAAG,GAAGD,IAAGN,EAAEQ,GAAER,GAAG,EAAEK,EAAEL,GAAG,CAAC,EAAE,EAAE,IAAIQ,GAAED,EAAED,GAAEN,EAAEQ,IAAGP,EAAED,KAAK,CAAC,EAAE,EAAE,OAAOO,CAAC,CAAC,GAAUJ,IAAP,KAAS,OAAOP,EAAE,UAAUA,EAAE,MAAMM,EAAE,IAAIN,EAAEW,CAAC,EAAEL,EAAE,IAAI,IAAI,WAAWN,CAAC,EAAEW,CAAC,EAAEA,EAAE,QAAQH,GAAEE,GAAEC,EAAEC,GAAEC,GAAEC,GAAEC,GAAEC,GAAE,EAAEA,GAAEN,IAAG,CAAC,IAAIO,GAAEjB,EAAEgB,EAAC,EAAE,IAAQH,GAAEN,GAAGL,EAAEc,EAAC,KAAb,EAAgB,CAACA,KAAI,QAAQ,CAAQH,IAAP,QAAWA,GAAE,OAAOkD,GAAEpD,EAAEK,GAAEC,GAAEJ,EAAC,EAAEE,KAAIF,KAAIC,GAAE2B,EAAE5B,EAAC,EAAEE,GAAEF,IAAGG,IAAGF,EAAC,CAAC,OAAOH,CAAC,CAAC,SAAS4D,GAAGvE,EAAE,CAAC,OAAOe,EAAEyD,GAAGF,GAAGtE,CAAC,EAAEqC,EAAErC,CAAC,EAAEoC,EAAEpC,CAAC,CAAC,CAAC,SAAS8D,GAAG9D,EAAEE,EAAE,CAAC,GAAOA,IAAJ,GAAO,CAACF,EAAE,MAAM,GAAG,QAAQG,EAAEC,EAAEC,EAAEE,GAAE,EAAEC,GAAE,EAAED,IAAGH,EAAEE,EAAEN,EAAEQ,IAAG,CAAC,GAAMJ,GAAH,GAAMF,KAAKM,KAAI,CAACN,GAAGM,IAAGN,IAAI,CAACA,IAAIA,EAAEM,IAAG,IAAIC,EAAE,GAAG,GAAGF,GAAE,IAAI,CAAC,KAAKL,EAAE,GAAGG,EAAE,OAAO,aAAa,MAAM,OAAOC,EAAE,SAASN,EAAEA,EAAE,KAAK,IAAIE,EAAE,IAAI,CAAC,CAAC,EAAEO,EAAEA,EAAEA,EAAEJ,EAAEA,EAAEL,GAAG,KAAKE,GAAG,KAAK,OAAOO,CAAC,CAAC,OAAON,EAAEH,EAAE,SAAWE,GAAEC,GAAE,CAAC,QAAQC,GAAED,GAAED,GAAEE,EAAC,GAAG,EAAEA,GAAE,GAAGA,GAAED,GAAE,IAAID,GAAE,UAAUuE,GAAG,OAAOA,GAAG,OAAOvE,GAAE,SAASC,GAAEC,EAAC,CAAC,EAAE,QAAQC,GAAEC,GAAEC,GAAEC,GAAEC,GAAEC,GAAEC,GAAE,KAAK,CAAC,GAAG,EAAEN,GAAEH,GAAEC,IAAG,GAAG,OAAOQ,GAAE,GAAG,EAAE,IAAIN,IAAG,CAACM,IAAG,OAAO,aAAaN,EAAC,EAAE,QAAQ,CAAC,GAAGC,GAAE,GAAGJ,GAAEC,IAAG,GAAG,IAAIE,KAAI,IAAI,CAACM,IAAG,OAAO,cAAc,GAAGN,KAAI,EAAEC,EAAC,EAAE,QAAQ,CAAC,GAAGC,GAAE,GAAGL,GAAEC,IAAG,GAAG,IAAIE,KAAI,IAAIA,IAAG,GAAGA,KAAI,GAAGC,IAAG,EAAEC,IAAGC,GAAE,GAAGN,GAAEC,IAAG,GAAG,IAAIE,KAAI,IAAIA,IAAG,EAAEA,KAAI,GAAGC,IAAG,GAAGC,IAAG,EAAEC,IAAGC,GAAE,GAAGP,GAAEC,IAAG,EAAEE,IAAG,IAAIA,KAAI,KAAK,EAAEA,KAAI,GAAGC,IAAG,GAAGC,IAAG,GAAGC,IAAG,EAAEC,IAAG,EAAEJ,KAAI,GAAGC,IAAG,GAAGC,IAAG,GAAGC,IAAG,GAAGC,IAAG,GAAGC,GAAE,GAAGR,GAAEC,IAAG,KAAKE,GAAE,MAAMM,IAAG,OAAO,aAAaN,EAAC,MAAM,CAAC,IAAIO,GAAEP,GAAE,MAAMM,IAAG,OAAO,aAAa,MAAMC,IAAG,GAAG,MAAM,KAAKA,EAAC,CAAC,CAAC,CAAC,EAAEN,EAAEH,CAAC,CAAC,CAAC,SAASuE,GAAG1E,EAAE,CAAC,QAAQE,EAAE,KAAK,CAAC,IAAIC,EAAEE,EAAEL,KAAK,CAAC,EAAE,GAAG,CAACG,EAAE,OAAOD,EAAEA,GAAG,OAAO,aAAaC,CAAC,CAAC,CAAC,CAAC,SAASwE,GAAG3E,EAAEE,EAAE,CAAC,OAAO,SAAWA,EAAEC,EAAEC,GAAE,CAAC,QAAQE,GAAE,EAAEA,GAAEJ,EAAE,OAAO,EAAEI,GAAED,EAAEF,KAAK,CAAC,EAAED,EAAE,WAAWI,EAAC,EAAEF,KAAIC,EAAEF,GAAG,CAAC,EAAE,EAAE,EAAEH,EAAEE,EAAE,EAAE,CAAC,CAAC,IAAIuE,GAAgB,OAAO,YAApB,IAAgC,IAAI,YAAY,MAAM,EAAE,OAAO,SAASG,GAAG5E,EAAEE,EAAEC,EAAEC,EAAE,CAAC,GAAG,EAAEA,EAAE,GAAG,MAAO,GAAE,QAAQC,EAAEF,EAAEG,GAAEH,EAAEC,EAAE,EAAEG,GAAE,EAAEA,GAAEP,EAAE,OAAO,EAAEO,GAAE,CAAC,IAAIC,EAAER,EAAE,WAAWO,EAAC,EAAE,GAAGC,GAAG,OAAOA,GAAG,QAAQA,EAAE,QAAQ,KAAKA,IAAI,IAAI,KAAKR,EAAE,WAAW,EAAEO,EAAC,GAAGC,GAAG,IAAI,CAAC,GAAGL,GAAGG,GAAE,MAAMJ,EAAEC,GAAG,EAAEK,CAAC,SAASA,GAAG,KAAK,CAAC,GAAGL,EAAE,GAAGG,GAAE,MAAMJ,EAAEC,GAAG,EAAE,IAAIK,GAAG,EAAEN,EAAEC,GAAG,EAAE,IAAI,GAAGK,CAAC,SAASA,GAAG,MAAM,CAAC,GAAGL,EAAE,GAAGG,GAAE,MAAMJ,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,EAAE,GAAGN,EAAEC,GAAG,EAAE,IAAI,GAAGK,CAAC,SAASA,GAAG,QAAQ,CAAC,GAAGL,EAAE,GAAGG,GAAE,MAAMJ,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,EAAE,GAAGN,EAAEC,GAAG,EAAE,IAAI,GAAGK,CAAC,SAASA,GAAG,SAAS,CAAC,GAAGL,EAAE,GAAGG,GAAE,MAAMJ,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,EAAE,GAAGN,EAAEC,GAAG,EAAE,IAAI,GAAGK,CAAC,KAAK,CAAC,GAAGL,EAAE,GAAGG,GAAE,MAAMJ,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,GAAG,GAAGN,EAAEC,GAAG,EAAE,IAAIK,GAAG,EAAE,GAAGN,EAAEC,GAAG,EAAE,IAAI,GAAGK,CAAC,CAAC,CAAC,OAAON,EAAEC,CAAC,EAAE,EAAEA,EAAEE,CAAC,CAAC,SAASsD,GAAG3D,EAAEE,EAAEC,EAAE,CAAC,OAAOyE,GAAG5E,EAAEM,EAAEJ,EAAEC,CAAC,CAAC,CAAC,SAAS0E,GAAG7E,EAAE,CAAC,QAAQE,EAAE,EAAEC,EAAE,EAAEA,EAAEH,EAAE,OAAO,EAAEG,EAAE,CAAC,IAAIC,EAAEJ,EAAE,WAAWG,CAAC,EAAEC,GAAG,OAAOA,GAAG,QAAQA,EAAE,QAAQ,KAAKA,IAAI,IAAI,KAAKJ,EAAE,WAAW,EAAEG,CAAC,GAAGC,GAAG,IAAI,EAAEF,EAAEE,GAAG,KAAKF,GAAG,EAAEE,GAAG,MAAMF,GAAG,EAAEE,GAAG,QAAQF,GAAG,EAAEE,GAAG,SAASF,GAAG,EAAEA,GAAG,CAAC,CAAC,OAAOA,CAAC,CAAC,IAAI4E,GAAgB,OAAO,YAApB,IAAgC,IAAI,YAAY,UAAU,EAAE,OAAO,SAASC,GAAG/E,EAAE,CAAC,QAAQE,EAAEF,EAAEG,EAAED,GAAG,EAAEK,EAAEJ,CAAC,GAAG,EAAEA,EAAE,IAAID,EAAEC,GAAG,GAAGH,EAAE,IAAI8E,GAAG,OAAOA,GAAG,OAAOxE,EAAE,SAASN,EAAEE,CAAC,CAAC,EAAE,QAAQE,EAAE,EAAEC,EAAE,KAAK,CAAC,IAAIG,GAAED,EAAEP,EAAE,EAAEI,GAAG,CAAC,EAAE,GAAMI,IAAH,EAAK,OAAOH,EAAE,EAAED,EAAEC,GAAG,OAAO,aAAaG,EAAC,CAAC,CAAC,CAAC,SAASwE,GAAGhF,EAAEE,EAAEC,EAAE,CAAC,GAAYA,IAAT,SAAaA,EAAE,YAAYA,EAAE,EAAE,MAAO,GAAE,QAAQC,EAAEF,EAAEG,GAAGF,GAAG,GAAG,EAAEH,EAAE,OAAOG,EAAE,EAAEH,EAAE,OAAOM,GAAE,EAAEA,GAAED,EAAE,EAAEC,GAAE,CAAC,IAAIE,GAAER,EAAE,WAAWM,EAAC,EAAEC,EAAEL,GAAG,CAAC,EAAEM,GAAEN,GAAG,CAAC,CAAC,OAAOK,EAAEL,GAAG,CAAC,EAAE,EAAEA,EAAEE,CAAC,CAAC,SAAS6E,GAAGjF,EAAE,CAAC,MAAO,GAAEA,EAAE,MAAM,CAAC,SAASkF,GAAGlF,EAAE,CAAC,QAAQE,EAAE,EAAEC,EAAE,KAAK,CAAC,IAAIC,EAAEK,EAAET,EAAE,EAAEE,GAAG,CAAC,EAAE,GAAME,GAAH,EAAK,OAAOD,EAAE,GAAG,EAAED,EAAEE,GAAG,MAAM,CAAC,IAAIC,EAAED,EAAE,MAAMD,GAAG,OAAO,aAAa,MAAME,GAAG,GAAG,MAAM,KAAKA,CAAC,CAAC,MAAMF,GAAG,OAAO,aAAaC,CAAC,CAAC,CAAC,CAAC,SAAS+E,GAAGnF,EAAEE,EAAEC,EAAE,CAAC,GAAYA,IAAT,SAAaA,EAAE,YAAYA,EAAE,EAAE,MAAO,GAAE,QAAQC,EAAEF,EAAEG,EAAED,EAAED,EAAE,EAAEG,GAAE,EAAEA,GAAEN,EAAE,OAAO,EAAEM,GAAE,CAAC,IAAIC,GAAEP,EAAE,WAAWM,EAAC,EAAE,GAAGC,IAAG,OAAOA,IAAG,QAAQA,GAAE,QAAQ,KAAKA,KAAI,IAAI,KAAKP,EAAE,WAAW,EAAEM,EAAC,GAAGG,EAAEP,GAAG,CAAC,EAAEK,IAAGL,GAAG,GAAG,EAAEG,EAAE,KAAK,CAAC,OAAOI,EAAEP,GAAG,CAAC,EAAE,EAAEA,EAAEE,CAAC,CAAC,SAASgF,GAAGpF,EAAE,CAAC,QAAQE,EAAE,EAAEC,EAAE,EAAEA,EAAEH,EAAE,OAAO,EAAEG,EAAE,CAAC,IAAIC,EAAEJ,EAAE,WAAWG,CAAC,EAAEC,GAAG,OAAOA,GAAG,OAAO,EAAED,EAAED,GAAG,CAAC,CAAC,OAAOA,CAAC,CAAC,SAASmF,GAAGrF,EAAE,CAAC,IAAIE,EAAE2E,GAAG7E,CAAC,EAAE,EAAEG,EAAEmE,GAAGpE,CAAC,EAAE,OAAOC,GAAGyE,GAAG5E,EAAEK,EAAEF,EAAED,CAAC,EAAEC,CAAC,CAAC,SAASmF,GAAGtF,EAAE,CAAC,IAAIE,EAAE2E,GAAG7E,CAAC,EAAE,EAAEG,EAAEuD,GAAGxD,CAAC,EAAE,OAAO0E,GAAG5E,EAAEK,EAAEF,EAAED,CAAC,EAAEC,CAAC,CAAC,SAASoF,GAAGvF,EAAE,CAAC,OAAOA,CAAC,CAAC,SAASwF,IAAI,CAAC,IAAIxF,EAAEE,EAAE,UAAY,CAAC,IAAIA,EAAE,MAAM,EAAE,GAAG,CAACA,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,MAAM,CAAC,CAAC,OAAOC,EAAE,CAACD,EAAEC,CAAC,CAAC,GAAG,CAACD,EAAE,MAAM,MAAM,4BAA4B,CAAC,OAAOA,EAAE,MAAM,SAAS,CAAC,EAAE,EAAE,OAAOqB,EAAE,kBAAkBrB,GAAG;AAAA,EAAKqB,EAAE,gBAAgB,IAAIvB,EAAEE,GAAG,QAAQ,eAAe,SAASF,EAAE,CAAC,IAAIE,EAAEC,EAAED,EAAEF,EAAE,OAAOA,IAAIG,EAAEH,EAAEA,EAAE,KAAKG,EAAE,GAAG,CAAC,CAAC,CAAC,SAASsF,GAAGzF,EAAEE,EAAE,CAAC,OAAOF,EAAEE,EAAE,IAAIF,GAAGE,EAAEF,EAAEE,GAAGF,CAAC,CAAC,SAAS0F,GAAG1F,EAAE,CAACuB,EAAE,OAAOnB,EAAEJ,CAAC,CAAC,SAAS2F,IAAI,CAACpE,EAAE,MAAMlB,EAAE,IAAI,UAAUD,CAAC,EAAEmB,EAAE,OAAOhB,EAAE,IAAI,WAAWH,CAAC,EAAEmB,EAAE,OAAOd,EAAE,IAAI,WAAWL,CAAC,EAAEmB,EAAE,OAAOjB,EAAE,IAAI,WAAWF,CAAC,EAAEmB,EAAE,QAAQf,EAAE,IAAI,YAAYJ,CAAC,EAAEmB,EAAE,QAAQb,EAAE,IAAI,YAAYN,CAAC,EAAEmB,EAAE,QAAQZ,EAAE,IAAI,aAAaP,CAAC,EAAEmB,EAAE,QAAQX,EAAE,IAAI,aAAaR,CAAC,CAAC,CAAC,SAASmC,IAAI,CAAC,IAAIvC,EAAEuB,EAAE,UAAU,MAAM,SAASrB,EAAE,WAAWF,EAAE,GAAGS,EAAEW,GAAG,CAAC,EAAElB,EAAE,MAAM,GAAG,IAAIC,EAAEmC,GAAG,IAAIA,GAAG,KAAK,IAAIA,GAAG,QAAQ,EAAEA,GAAG7B,EAAEW,GAAG,CAAC,GAAGkB,GAAGA,IAAI,UAAUmD,GAAG,EAAEnD,GAAGtC,CAAC,EAAE,KAAK,IAAIyF,IAAI,EAAEnD,GAAG,YAAY,EAAEtC,CAAC,EAAEE,CAAC,EAAE,IAAIE,EAAEmB,EAAE,cAAce,EAAE,EAAE,OAAOlC,GAAGA,EAAE,YAAYkC,IAAIoD,GAAGtF,CAAC,EAAEuF,GAAG,EAAE,KAAKrD,GAAGnC,EAAE,GAAG,CAACU,EAAEC,EAAEE,EAAEC,EAAEC,EAAEC,EAAEC,EAAE,EAAEL,EAAE,GAAGQ,EAAE,gBAAgBA,EAAE,cAAc,SAASvB,EAAE,CAAC,GAAG,CAAC,GAAG,YAAY,SAASE,EAAE,YAAY,SAASE,EAAEJ,CAAC,MAAM,CAAC,IAAIE,EAAEC,EAAEE,EAAEH,EAAE,IAAI,YAAYF,CAAC,EAAE,IAAI,UAAUE,CAAC,EAAE,IAAIC,CAAC,CAAC,CAAC,MAAS,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAACyF,GAAG1F,CAAC,GAAGA,CAAC,GAAG,GAAG,EAAEmB,EAAE,SAAS,UAAU,KAAK,KAAK,OAAO,yBAAyB,YAAY,UAAU,YAAY,EAAE,GAAG,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,MAAU,CAACA,EAAE,SAASrB,EAAE,CAAC,OAAOA,EAAE,UAAU,CAAC,CAAC,IAAI6F,GAAGtE,EAAE,aAAa,QAAQe,GAAGf,EAAE,cAAc,SAAS,SAASuE,IAAI,CAAC,OAAOxD,EAAE,CAAC,SAASyD,GAAG/F,EAAE,CAAC,KAAKA,EAAE,OAAO,GAAG,CAAC,IAAIE,EAAEF,EAAE,MAAM,EAAE,GAAe,OAAOE,GAAnB,WAAqB,CAACA,EAAE,EAAE,QAAQ,CAAC,IAAIC,EAAED,EAAE,KAAe,OAAOC,GAAjB,SAA4BD,EAAE,MAAX,OAAeqB,EAAE,UAAUpB,CAAC,EAAEoB,EAAE,WAAWpB,EAAED,EAAE,GAAG,EAAEC,EAAWD,EAAE,MAAX,OAAe,KAAKA,EAAE,GAAG,CAAC,CAAC,CAACoC,GAAGuD,IAAI1D,GAAE,uDAAuDG,GAAG,kBAAkBuD,GAAG,GAAG,EAAEtE,EAAE,OAAOnB,EAAEmB,EAAE,QAAkB,OAAO,aAAjB,UAA0C,OAAO,YAAY,QAA/B,YAAuCA,EAAE,WAAW,IAAI,YAAY,OAAO,CAAC,QAAQe,GAAG,KAAK,CAAC,EAAElC,EAAEmB,EAAE,WAAW,QAAQnB,EAAE,IAAI,YAAYkC,EAAE,EAAEf,EAAE,OAAOnB,GAAGuF,GAAG,EAAE,IAAIK,GAAG,CAAC,EAAEC,GAAG,CAAC,EAAEC,GAAG,CAAC,EAAEC,GAAG,CAAC,EAAEC,GAAG,CAAC,EAAE5B,GAAG,GAAG6B,GAAG,GAAG,SAASC,GAAGtG,EAAE,CAACgG,GAAG,QAAQhG,CAAC,CAAC,CAAC,SAASuG,GAAGvG,EAAE,CAACiG,GAAG,QAAQjG,CAAC,CAAC,CAAC,SAASwG,GAAGxG,EAAE,CAACkG,GAAG,QAAQlG,CAAC,CAAC,CAAC,SAASyG,GAAGzG,EAAE,CAACmG,GAAG,QAAQnG,CAAC,CAAC,CAAC,SAAS0G,GAAG1G,EAAE,CAACoG,GAAG,QAAQpG,CAAC,CAAC,CAAC,SAAS2G,GAAG3G,EAAEE,EAAEC,EAAE,CAAC,IAAIC,EAAEE,EAAEoC,EAAE,yFAAyF,EAAEvC,IAAIC,EAAEC,EAAEC,EAAEJ,EAAE2E,GAAG7E,CAAC,CAAC,GAAG2D,GAAG3D,EAAEE,EAAE,GAAG,EAAEC,IAAIE,EAAEC,CAAC,EAAEF,EAAE,CAAC,SAASwG,GAAG5G,EAAEE,EAAEC,EAAE,CAAC,OAAOH,GAAG,EAAEA,EAAEE,GAAG,GAAG,EAAE,KAAK,IAAI,GAAGA,EAAE,CAAC,EAAEF,EAAE,KAAK,IAAI,EAAEE,CAAC,EAAEF,CAAC,CAAC,SAAS6G,GAAG7G,EAAEE,EAAEC,EAAE,CAAC,GAAGH,GAAG,EAAE,OAAOA,EAAE,IAAII,EAAEF,GAAG,GAAG,KAAK,IAAI,GAAGA,EAAE,CAAC,EAAE,KAAK,IAAI,EAAEA,EAAE,CAAC,EAAE,OAAOF,GAAGI,IAAIF,GAAG,IAAIF,EAAEI,KAAKJ,EAAE,GAAGI,EAAEJ,GAAGA,CAAC,CAAC,IAAIgE,GAAG,KAAK,IAAIG,GAAG,KAAK,KAAKD,GAAG,KAAK,MAAMD,GAAG,KAAK,IAAI6C,GAAG,EAAEC,GAAG,KAAKC,GAAG,KAAK,SAASC,GAAGjH,EAAE,CAAC,OAAOA,CAAC,CAACuB,EAAE,gBAAgB,CAAC,EAAEA,EAAE,gBAAgB,CAAC,EAAE,IAAI2F,GAAG,wCAAwC,SAASC,GAAGnH,EAAE,CAAC,OAAO,OAAO,UAAU,WAAWA,EAAE,WAAWkH,EAAE,EAAMlH,EAAE,QAAQkH,EAAE,IAAhB,CAAiB,EAAE,UAAY,CAAC,IAAIhH,EAAE,YAAYC,EAAE,YAAYC,EAAE,mBAAmB+G,GAAGjH,CAAC,IAAIA,EAAE6B,GAAE7B,CAAC,GAAGiH,GAAGhH,CAAC,IAAIA,EAAE4B,GAAE5B,CAAC,GAAGgH,GAAG/G,CAAC,IAAIA,EAAE2B,GAAE3B,CAAC,GAAG,IAAIC,EAAE,CAAC,OAAO,KAAK,IAAI,KAAK,SAASsC,GAAE,OAAOpB,CAAC,EAAEjB,GAAE,KAAK,SAASC,GAAEP,GAAE,CAAC,OAAOA,EAAC,CAAC,SAASQ,GAAG,CAAC,GAAG,CAAC,GAAGe,EAAE,WAAW,OAAO,IAAI,WAAWA,EAAE,UAAU,EAAE,GAAGA,EAAE,WAAW,OAAOA,EAAE,WAAWpB,CAAC,EAAE,KAAK,iDAAiD,OAAOH,GAAE,CAACqD,GAAGrD,EAAC,CAAC,CAAC,CAACuB,EAAE,WAAWA,EAAE,IAAI,IAAId,GAAEc,EAAE,cAAcb,GAAE,SAASV,GAAE,CAACA,GAAEyF,GAAGzF,GAAEuB,EAAE,UAAU,MAAM,QAAQ,EAAE,IAAIrB,GAAEqB,EAAE,OAAO,WAAW,GAAGA,EAAE,UAAU,GAAG,CAAC,IAAIpB,GAAEoB,EAAE,WAAW,MAAMvB,GAAEE,IAAG,KAAK,EAAE,OAAQC,KAAL,GAAcoB,EAAE,OAAOA,EAAE,WAAW,OAAc,IAAI,MAAS,CAAC,OAAO,IAAI,CAAC,EAAEA,EAAE,cAAc,SAASvB,GAAE,CAAC,OAAgBW,KAAV,QAAYF,GAAET,EAAC,EAAEU,GAAEV,EAAC,CAAC,EAAE,IAAIW,GAAE,GAAGY,EAAE,IAAI,SAASvB,GAAEE,GAAEE,GAAE,CAAC,IAAIG,GAAE,GAAG,EAAEL,GAAEK,GAAEL,IAAG,MAAM,CAAC,IAAIO,GAAEC,GAAEa,EAAE,cAAuBb,KAAT,SAAaA,GAAE,MAAM,IAAIC,GAAEY,EAAE,iBAA2B,OAAO,aAAjB,UAA0C,OAAO,YAAY,OAA/B,WAA8CZ,KAAT,OAAWT,GAAE,MAAM,IAAI,YAAY,MAAM,CAAC,QAAQQ,GAAE,QAAQC,GAAE,QAAQ,SAAS,CAAC,EAAET,GAAE,MAAM,IAAI,YAAY,MAAM,CAAC,QAAQQ,GAAE,QAAQ,SAAS,CAAC,EAAER,GAAE,MAAM,MAAMQ,EAAC,EAAEa,EAAE,UAAUrB,GAAE,KAAK,CAAC,OAAOA,GAAE,aAAaA,GAAE,WAAWqB,EAAE,aAAarB,GAAE,YAAYA,GAAE,UAAU,GAAGO,GAAE,SAAWP,GAAEE,GAAEG,GAAE,CAAC,GAAa,OAAO,aAAjB,SAA6B,OAAO4B,GAAE,iCAAiC,EAAE,GAAG,GAAG,EAAEZ,EAAE,sBAAsB,YAAY,QAAQ,OAAOY,GAAE,8BAA8B,EAAE,GAAG,SAAS1B,GAAET,GAAEE,GAAE,CAAC,IAAII,GAAEN,GAAE,SAAS,OAAO,CAAC,IAAIG,GAAEC,GAAEC,GAAEF,GAAEG,GAAE,OAAOF,GAAEmB,EAAE,OAAOpB,GAAE,WAAWC,GAAE,YAAY+B,GAAE,4GAA4G,EAAE9B,GAAE,IAAI,UAAUD,EAAC,EAAE,IAAI,UAAUD,EAAC,EAAE,IAAIE,EAAC,EAAEqF,GAAGvF,EAAC,EAAEwF,GAAG,CAAC,CAACpE,EAAE,IAAIjB,GAAEiB,EAAE,UAAU,GAAG,SAAWrB,GAAE,CAAC,GAAG4G,KAAKvF,EAAE,wBAAwBA,EAAE,uBAAuBuF,EAAE,EAAKA,IAAH,IAAeC,KAAP,OAAY,cAAcA,EAAE,EAAEA,GAAG,MAAMC,IAAI,CAAC,IAAI7G,GAAE6G,GAAGA,GAAG,KAAK7G,GAAE,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAqF,GAApFC,GAAE,OAAOmB,EAAE,WAAWlB,EAAE,OAAO,CAAC,IAAI,IAAI,SAAS,GAAG,EAAEA,EAAE,aAAa,EAAE,KAAKA,EAAE,IAAID,GAAM0G,KAAKvF,EAAE,wBAAwBA,EAAE,uBAAuBuF,EAAE,EAAGvF,EAAE,gBAAgB,GAAG,CAAC,OAAOA,EAAE,gBAAgBlB,EAAEI,EAAC,CAAC,OAAOC,GAAE,CAAC,OAAOyB,GAAE,sDAAsDzB,EAAC,EAAE,EAAE,CAAC,SAASC,GAAEX,GAAE,CAACS,GAAET,GAAE,SAASA,GAAE,MAAM,CAAC,CAAC,SAASY,GAAEZ,GAAE,EAAE,CAACuB,EAAE,aAAaE,GAAGC,IAAgB,OAAO,OAAnB,WAAyB,MAAMvB,EAAE,CAAC,YAAY,aAAa,CAAC,EAAE,KAAK,SAASH,GAAE,CAAC,GAAG,CAACA,GAAE,GAAG,KAAK,uCAAuCG,EAAE,IAAI,OAAOH,GAAE,YAAY,CAAC,CAAC,EAAE,MAAM,UAAU,CAAC,OAAOQ,EAAE,CAAC,CAAC,EAAE,IAAI,QAAQ,SAASR,GAAEE,GAAE,CAACF,GAAEQ,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,SAASR,GAAE,CAAC,OAAO,YAAY,YAAYA,GAAEK,CAAC,CAAC,CAAC,EAAE,KAAKL,EAAC,EAAE,MAAM,SAASA,GAAE,CAACmC,GAAE,0CAA0CnC,EAAC,EAAEqD,GAAGrD,EAAC,CAAC,CAAC,CAAC,CAAC,OAAOuB,EAAE,YAAwB,OAAO,YAAY,sBAA/B,YAAqD4F,GAAGhH,CAAC,GAAe,OAAO,OAAnB,WAAyBS,GAAED,EAAC,EAAE,YAAY,qBAAqB,MAAMR,EAAE,CAAC,YAAY,aAAa,CAAC,EAAEE,CAAC,EAAE,KAAKM,EAAC,EAAE,MAAM,SAASX,GAAE,CAACmC,GAAE,kCAAkCnC,EAAC,EAAEmC,GAAE,2CAA2C,EAAEvB,GAAED,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEX,GAAEE,GAAEE,EAAC,EAAE4B,GAAEvB,GAAE,+BAA+B,EAAEA,EAAC,EAAEc,EAAE,GAAG,GAAE,EAAET,GAAGD,EAAE,MAAM,KAAKoF,GAAG,KAAK,EAAE1E,EAAE,YAAYV,EAAEU,EAAE,YAAY,KAAK,IAAI6F,GAAGtG,EAAE,SAASuG,GAAGrH,EAAE,CAACK,EAAE+G,EAAE,EAAE/G,EAAEL,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,CAAC,CAAC,SAASsH,GAAGtH,EAAE,CAACK,EAAE+G,EAAE,EAAE/G,EAAEL,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,EAAEK,EAAE+G,GAAG,CAAC,EAAE/G,EAAEL,EAAE,CAAC,CAAC,CAAC,SAASuH,GAAGvH,EAAEE,EAAEC,EAAE,CAAC,IAAIC,EAAED,EAAE,EAAEA,EAAE0E,GAAG7E,CAAC,EAAE,EAAEK,EAAE,MAAMD,CAAC,EAAEE,GAAEsE,GAAG5E,EAAEK,EAAE,EAAEA,EAAE,MAAM,EAAE,OAAOH,IAAIG,EAAE,OAAOC,IAAGD,CAAC,CAAC,SAASmH,GAAGxH,EAAE,CAAC,QAAQE,EAAE,CAAC,EAAEC,EAAE,EAAEA,EAAEH,EAAE,OAAOG,IAAI,CAAC,IAAIC,EAAEJ,EAAEG,CAAC,EAAEC,EAAE,MAAMA,GAAG,KAAKF,EAAE,KAAK,OAAO,aAAaE,CAAC,CAAC,CAAC,CAAC,OAAOF,EAAE,KAAK,EAAE,CAAC,CAACY,GAAG,GAAGM,EAAEgB,EAAE,CAAC,EAAElB,GAAGF,EAAEC,EAAEuB,EAAE1B,CAAC,GAAG+E,GAAG1E,EAAEqB,EAAEtB,CAAC,EAAET,EAAEW,GAAG,CAAC,EAAED,EAAEJ,EAAE,GAAGQ,EAAE,cAAc,EAAEA,EAAE,iBAAiB,EAAEA,EAAE,aAAa,CAAC,EAAEA,EAAE,cAAc,CAAC,MAAM8B,GAAG,OAAOrB,GAAE,cAAcO,GAAG,eAAeuD,GAAG,wBAAwB,UAAY,CAACzC,GAAG,kHAAkHf,GAAG,oMAAoM,CAAC,EAAE,WAAW,SAAWpC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAEmD,GAAG,EAAE,GAAG,CAAC,OAAOjC,EAAE,YAAYrB,EAAEC,EAAEC,CAAC,CAAC,OAAOE,GAAE,CAAC,GAAGmD,GAAGpD,CAAC,EAAY,OAAOC,IAAjB,UAAgCA,KAAZ,UAAc,MAAMA,GAAEiB,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,eAAe,SAAWrB,EAAEC,EAAEC,EAAEC,EAAE,CAACgD,GAAG,qBAAqBS,GAAG5D,CAAC,EAAE,SAAS,CAACC,EAAE2D,GAAG3D,CAAC,EAAE,mBAAmBC,EAAEC,EAAEyD,GAAGzD,CAAC,EAAE,kBAAmB,CAAC,CAAC,EAAE,YAAY,SAAWH,EAAE,CAAC,OAAOqB,EAAE,oBAAoBd,EAAEc,EAAE,kBAAkB,GAAG,CAAC,EAAErB,GAAGA,CAAC,EAAE,OAAO,UAAY,CAACqB,EAAE,MAAM,CAAC,EAAE,uBAAuB,SAAWrB,EAAEC,EAAEC,EAAE,CAAC,OAAOE,EAAE,IAAIA,EAAE,SAASH,EAAEA,EAAEC,CAAC,EAAEF,CAAC,EAAEA,CAAC,EAAE,gBAAgBgE,GAAG,eAAe9C,EAAE,cAAcgG,GAAG,MAAMjE,GAAE,SAASlC,EAAE,UAAUC,CAAC,EAAE,IAAIuG,GAAGlG,EAAE,IAAIA,EAAE,aAAaA,EAAE,cAAcnB,CAAC,EAAEmB,EAAE,IAAIkG,GAAGlG,EAAE,kBAAkB,UAAU,CAAC,OAAOA,EAAE,IAAI,kBAAkB,MAAM,KAAK,SAAS,CAAC,EAAE,IAAIqE,GAAGrE,EAAE,2BAA2B,UAAU,CAAC,OAAOA,EAAE,IAAI,2BAA2B,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,MAAM,UAAU,CAAC,OAAOA,EAAE,IAAI,MAAM,MAAM,KAAK,SAAS,CAAC,EAAE,IAAI+C,GAAG/C,EAAE,QAAQ,UAAU,CAAC,OAAOA,EAAE,IAAI,QAAQ,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,QAAQ,UAAU,CAAC,OAAOA,EAAE,IAAI,QAAQ,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,QAAQ,UAAU,CAAC,OAAOA,EAAE,IAAI,QAAQ,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,MAAM,UAAU,CAAC,OAAOA,EAAE,IAAI,MAAM,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,wBAAwB,UAAU,CAAC,OAAOA,EAAE,IAAI,wBAAwB,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,qBAAqB,UAAU,CAAC,OAAOA,EAAE,IAAI,qBAAqB,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,sBAAsB,UAAU,CAAC,OAAOA,EAAE,IAAI,sBAAsB,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,oBAAoB,UAAU,CAAC,OAAOA,EAAE,IAAI,oBAAoB,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,2BAA2B,UAAU,CAAC,OAAOA,EAAE,IAAI,2BAA2B,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,oBAAoB,UAAU,CAAC,OAAOA,EAAE,IAAI,oBAAoB,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,YAAY,UAAU,CAAC,OAAOA,EAAE,IAAI,YAAY,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,YAAY,UAAU,CAAC,OAAOA,EAAE,IAAI,YAAY,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,YAAY,UAAU,CAAC,OAAOA,EAAE,IAAI,YAAY,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,SAAS,UAAU,CAAC,OAAOA,EAAE,IAAI,SAAS,MAAM,KAAK,SAAS,CAAC,EAAE,IAAImC,GAAGnC,EAAE,WAAW,UAAU,CAAC,OAAOA,EAAE,IAAI,WAAW,MAAM,KAAK,SAAS,CAAC,EAAEkC,GAAGlC,EAAE,aAAa,UAAU,CAAC,OAAOA,EAAE,IAAI,aAAa,MAAM,KAAK,SAAS,CAAC,EAAEiC,GAAGjC,EAAE,UAAU,UAAU,CAAC,OAAOA,EAAE,IAAI,UAAU,MAAM,KAAK,SAAS,CAAC,EAAE,SAASU,GAAGjC,EAAE,CAAC,KAAK,KAAK,aAAa,KAAK,QAAQ,gCAAgCA,EAAE,IAAI,KAAK,OAAOA,CAAC,CAAC,SAAS0H,GAAG1H,EAAE,CAAIA,EAAEA,GAAGuB,EAAE,UAAU,EAAEuF,GAAG,KAAI,UAAY,CAAC,GAAGvF,EAAE,OAAO,IAAgB,OAAOA,EAAE,QAArB,aAA8BA,EAAE,OAAO,CAACA,EAAE,MAAM,GAAGA,EAAE,OAAO,QAAQ+E,GAAG/E,EAAE,OAAO,MAAM,CAAC,EAAEwE,GAAGC,EAAE,CAAC,EAAE,EAAE,EAAEc,GAAG,KAAKvF,EAAE,YAAYA,EAAE,WAAWA,EAAE,UAAU,YAAY,EAAE,WAAW,UAAU,CAAC,WAAW,UAAU,CAACA,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAErB,EAAE,CAAC,EAAE,CAAC,GAAGA,EAAE,KAAI,SAASA,GAAG,CAAC,CAACqB,EAAE,YAAYA,EAAE,UAAU,GAAG4B,KAAIqB,KAAKA,GAAG,GAAGuB,GAAGE,EAAE,GAAGF,GAAGG,EAAE,EAAE3E,EAAE,sBAAsBA,EAAE,qBAAqB,EAAE,UAAY,CAAC,GAAGA,EAAE,QAAQ,IAAgB,OAAOA,EAAE,SAArB,aAA+BA,EAAE,QAAQ,CAACA,EAAE,OAAO,GAAGA,EAAE,QAAQ,QAAQmF,GAAGnF,EAAE,QAAQ,MAAM,CAAC,EAAEwE,GAAGK,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,SAASuB,GAAG3H,EAAEE,EAAE,EAAE,CAACA,GAAG,CAACqB,EAAE,eAAmBvB,IAAJ,KAASuB,EAAE,gBAAgB4B,GAAE,GAAGC,GAAEpD,EAAEiB,EAAEK,EAAEyE,GAAGI,EAAE,EAAEE,GAAG,GAAG9E,EAAE,QAAQA,EAAE,OAAOvB,CAAC,GAAGuB,EAAE,KAAKvB,EAAE,IAAIiC,GAAGjC,CAAC,CAAC,EAAE,CAAC,SAASqD,GAAGrD,EAAE,CAAC,MAAMuB,EAAE,SAASA,EAAE,QAAQvB,CAAC,EAAWA,IAAT,QAAYkC,GAAElC,CAAC,EAAEmC,GAAEnC,CAAC,EAAEA,EAAE,KAAK,UAAUA,CAAC,GAAGA,EAAE,GAAGmD,GAAE,GAAGC,GAAE,EAAE,SAASpD,EAAE,8CAA8C,CAAC,GAAGuB,EAAE,YAAY,UAAU,CAAC,OAAOA,EAAE,IAAI,YAAY,MAAM,KAAK,SAAS,CAAC,EAAEA,EAAE,IAAIkG,GAAGlG,EAAE,MAAMsC,GAAEtC,EAAE,MAAM,SAAWrB,EAAEC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,IAAGF,EAAEA,GAAG,CAAC,GAAG,MAAM,SAASJ,GAAE,CAAC,OAAiBA,KAAX,QAAY,CAAC,EAAE,OAAiBG,IAAX,UAAcG,IAAG,CAACD,EAAEiD,GAAEpD,CAAC,EAAE,UAAU,CAAC,OAAO2D,GAAE3D,EAAEC,EAAEC,EAAE,UAAUC,CAAC,CAAC,CAAC,EAAE4B,GAAG,UAAU,MAAM,EAAEA,GAAG,UAAU,YAAYA,GAAG+E,GAAG,SAAShH,GAAG,CAACuB,EAAE,WAAWmG,GAAG,EAAEnG,EAAE,YAAYyF,GAAGhH,EAAE,EAAEuB,EAAE,IAAImG,GAAGnG,EAAE,MAAM8B,GAAG9B,EAAE,QAAQ,IAAgB,OAAOA,EAAE,SAArB,aAA+BA,EAAE,QAAQ,CAACA,EAAE,OAAO,GAAGA,EAAE,QAAQ,OAAO,GAAGA,EAAE,QAAQ,IAAI,EAAE,EAAEA,EAAE,cAAc,GAAGmG,GAAG,EAAEnG,EAAE,qBAAqB,IAAI,CAACzB,GAAQ,GAAGC,GAAY,CAAC,EAAEF,GAAU,OAAO,SAASG,EAAE,CAAC,OAAO,SAAWE,EAAE,CAAC,GAAG,CAACJ,GAAQ,MAAM,MAAM,wEAAwE,EAAE,IAAIK,EAAE,CAAC,EAAE,SAASC,EAAEJ,GAAE,CAAC,OAAO,IAAI,WAAWuB,EAAE,OAAO,OAAOvB,GAAE,CAAC,EAAE,CAAC,CAAC,CAAC,SAASK,GAAEL,GAAEE,GAAE,CAAC,IAAIC,GAAE,IAAI,YAAYD,GAAE,aAAa,iBAAiB,EAAEE,GAAE,IAAI,aAAaD,EAAC,EAAE,OAAOC,GAAE,IAAI,IAAI,aAAamB,EAAE,OAAO,OAAOvB,GAAEE,EAAC,CAAC,EAAEE,EAAC,CAACD,EAAE,KAAKoB,EAAE,MAAM,qBAAqB,SAAS,CAAC,CAAC,EAAEpB,EAAE,MAAMoB,EAAE,MAAM,sBAAsB,OAAO,CAAC,QAAQ,CAAC,EAAEpB,EAAE,SAASoB,EAAE,MAAM,yBAAyB,SAAS,CAAC,QAAQ,CAAC,EAAEpB,EAAE,WAAWoB,EAAE,MAAM,4BAA4B,SAAS,CAAC,QAAQ,CAAC,EAAEpB,EAAE,OAAOoB,EAAE,MAAM,uBAAuB,SAAS,CAAC,SAAS,SAAS,SAAS,SAAS,QAAQ,CAAC,EAAE,IAAIjB,GAAEC,EAAEC,GAAEC,GAAEC,GAAEP,EAAE,KAAK,EAAEQ,IAAGL,GAAEJ,EAAEK,EAAEL,EAAE,WAAWM,GAAEe,EAAE,QAAQhB,CAAC,GAAGE,GAAE,IAAI,WAAWc,EAAE,OAAO,OAAOf,GAAED,CAAC,GAAG,IAAI,IAAI,WAAWD,GAAE,EAAEC,CAAC,CAAC,EAAEE,IAAGG,GAAEW,EAAE,QAAQ,CAAC,EAAEV,GAAEU,EAAE,QAAQ,CAAC,EAAET,GAAEX,EAAE,OAAOO,GAAEC,GAAE,WAAWA,GAAE,WAAWC,GAAEC,EAAC,EAAE,GAAGU,EAAE,MAAMZ,GAAE,UAAU,EAAEG,GAAE,EAAE,MAAMX,EAAE,MAAMO,EAAC,EAAEa,EAAE,MAAMX,EAAC,EAAE,MAAM,4BAA4BE,EAAC,EAAE,QAAQC,GAAEZ,EAAE,SAASO,EAAC,EAAEM,GAAE,MAAMD,EAAC,EAAEE,GAAE,IAAI,WAAWM,EAAE,QAAQ,OAAOnB,EAAEQ,EAAC,EAAEG,EAAC,EAAEG,GAAE,EAAEA,GAAEH,GAAEG,KAAIF,GAAEE,EAAC,EAAEb,GAAEY,GAAEC,EAAC,EAAEJ,EAAC,EAAES,EAAE,MAAMN,GAAEC,EAAC,CAAC,EAAE,IAAIC,GAAEhB,EAAE,WAAWO,EAAC,EAAE,OAAOP,EAAE,MAAMO,EAAC,EAAEa,EAAE,MAAMnB,EAAEQ,EAAC,CAAC,EAAEW,EAAE,MAAMX,EAAC,EAAE,CAAC,KAAKI,GAAE,WAAWG,GAAE,IAAI,GAAG,MAAM,IAAI,CAAC,EAAEnB,CAAC,CAAC,CAAC,GAAE,ECSlv+G,IAAM4H,GAAsB,IAAI,aAAa,KAA+B,EAC5E,QAASC,EAAI,EAAGA,EAAID,GAAoB,OAAQC,IAChD,CACI,IAAMC,EAAY,MAAeD,EACjCD,GAAoBC,CAAC,EAAI,KAAK,IAAI,EAAGC,EAAY,IAAI,CACzD,CAOO,SAASC,GAAmBD,EACnC,CACI,OAAIA,GAAa,OAEN,EAEJF,GAAoBE,EAAY,MAAY,CACvD,CAGA,IAAME,GAAe,KACfC,GAAe,MACfC,GAA0B,IAAI,aAAaD,GAAeD,GAAe,CAAC,EAChF,QAASH,EAAI,EAAGA,EAAIK,GAAwB,OAAQL,IACpD,CACI,IAAMM,EAAgBH,GAAeH,EACrCK,GAAwBL,CAAC,EAAI,IAAM,KAAK,IAAI,GAAIM,EAAgB,MAAQ,IAAI,CAChF,CAOO,SAASC,GAAaC,EAC7B,CACI,OAAIA,EAAQL,IAAgBK,EAAQJ,GAEzB,IAAM,KAAK,IAAI,GAAII,EAAQ,MAAQ,IAAI,EAE3CH,GAAwB,CAAC,CAAEG,EAASL,EAAY,CAC3D,CAGA,IAAMM,GAAe,MACfC,GAAe,KACfC,GAAqB,IAAI,cAAcD,GAAeD,IAAgB,IAAM,CAAC,EACnF,QAAST,EAAI,EAAGA,EAAIW,GAAmB,OAAQX,IAC/C,CACI,IAAMY,GAAYH,GAAe,IAAMT,GAAK,IAC5CW,GAAmBX,CAAC,EAAI,KAAK,IAAI,GAAI,CAACY,EAAW,EAAE,CACvD,CAOO,SAASC,GAAyBD,EACzC,CACI,OAAOD,GAAmB,KAAK,OAAOC,EAAWH,IAAgB,GAAG,CAAC,CACzE,CCrEO,IAAMK,EAAiB,CAC1B,QAAS,GACT,iBAAkB,EAClB,cAAe,EACf,qBAAsB,EACtB,mBAAoB,EACpB,uBAAwB,EACxB,cAAe,EACf,cAAe,EACf,cAAe,EACf,gBAAiB,EACjB,eAAgB,EAChB,iBAAkB,GAClB,iBAAkB,GAClB,qBAAsB,GACtB,eAAgB,GAChB,QAAS,GACT,kBAAmB,GACnB,kBAAmB,GACnB,IAAK,GACL,QAAS,GACT,QAAS,GACT,QAAS,GACT,YAAa,GACb,WAAY,GACZ,YAAa,GACb,WAAY,GACZ,YAAa,GACb,aAAc,GACd,WAAY,GACZ,YAAa,GACb,cAAe,GACf,cAAe,GACf,mBAAoB,GACpB,oBAAqB,GACrB,YAAa,GACb,aAAc,GACd,WAAY,GACZ,YAAa,GACb,cAAe,GACf,cAAe,GACf,mBAAoB,GACpB,oBAAqB,GACrB,WAAY,GACZ,UAAW,GACX,SAAU,GACV,SAAU,GACV,2BAA4B,GAC5B,OAAQ,GACR,SAAU,GACV,mBAAoB,GACpB,UAAW,GACX,yBAA0B,GAC1B,WAAY,GACZ,SAAU,GACV,SAAU,GACV,YAAa,GACb,UAAW,GACX,YAAa,GACb,eAAgB,GAChB,kBAAmB,GACnB,QAAS,GACT,QAAS,GAGT,eAAgB,GAChB,iBAAkB,EACtB,EACaC,GAAoB,OAAO,KAAKD,CAAc,EAAE,OAChDE,GAAgB,KAAK,IAAI,GAAG,OAAO,OAAOF,CAAc,CAAC,EAKhEG,EAAkB,CAAC,EAEzBA,EAAgBH,EAAe,gBAAgB,EAAI,CAAE,IAAK,EAAG,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EACzFG,EAAgBH,EAAe,aAAa,EAAI,CAAE,IAAK,OAAQ,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EAC3FG,EAAgBH,EAAe,oBAAoB,EAAI,CAAE,IAAK,OAAQ,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EAClGG,EAAgBH,EAAe,kBAAkB,EAAI,CAAE,IAAK,OAAQ,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EAChGG,EAAgBH,EAAe,sBAAsB,EAAI,CAAE,IAAK,EAAG,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EAG/FG,EAAgBH,EAAe,aAAa,EAAI,CAAE,IAAK,MAAQ,IAAK,KAAO,IAAK,EAAG,KAAM,CAAE,EAC3FG,EAAgBH,EAAe,aAAa,EAAI,CAAE,IAAK,MAAQ,IAAK,KAAO,IAAK,EAAG,KAAM,CAAE,EAC3FG,EAAgBH,EAAe,aAAa,EAAI,CAAE,IAAK,MAAQ,IAAK,KAAO,IAAK,EAAG,KAAM,CAAE,EAG3FG,EAAgBH,EAAe,eAAe,EAAI,CAAE,IAAK,KAAM,IAAK,MAAO,IAAK,MAAO,KAAM,CAAE,EAC/FG,EAAgBH,EAAe,cAAc,EAAI,CAAE,IAAK,EAAG,IAAK,IAAK,IAAK,EAAG,KAAM,CAAE,EACrFG,EAAgBH,EAAe,gBAAgB,EAAI,CAAE,IAAK,MAAQ,IAAK,KAAO,IAAK,EAAG,KAAM,CAAE,EAC9FG,EAAgBH,EAAe,gBAAgB,EAAI,CAAE,IAAK,MAAQ,IAAK,KAAO,IAAK,EAAG,KAAM,CAAE,EAC9FG,EAAgBH,EAAe,gBAAgB,EAAI,CAAE,IAAK,MAAQ,IAAK,KAAO,IAAK,EAAG,KAAM,CAAE,EAE9FG,EAAgBH,EAAe,oBAAoB,EAAI,CAAE,IAAK,OAAQ,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EAElGG,EAAgBH,EAAe,cAAc,EAAI,CAAE,IAAK,KAAM,IAAK,IAAK,IAAK,EAAG,KAAM,CAAE,EACxFG,EAAgBH,EAAe,cAAc,EAAI,CAAE,IAAK,KAAM,IAAK,IAAK,IAAK,EAAG,KAAM,CAAE,EAGxFG,EAAgBH,EAAe,iBAAiB,EAAI,CAAE,IAAK,EAAG,IAAK,IAAM,IAAK,EAAG,KAAM,CAAE,EACzFG,EAAgBH,EAAe,iBAAiB,EAAI,CAAE,IAAK,EAAG,IAAK,IAAM,IAAK,EAAG,KAAM,CAAE,EACzFG,EAAgBH,EAAe,GAAG,EAAI,CAAE,IAAK,KAAM,IAAK,IAAK,IAAK,EAAG,KAAM,CAAE,EAG7EG,EAAgBH,EAAe,WAAW,EAAI,CAAE,IAAK,MAAQ,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAC7FG,EAAgBH,EAAe,UAAU,EAAI,CAAE,IAAK,MAAQ,IAAK,KAAM,IAAK,EAAG,KAAM,CAAE,EACvFG,EAAgBH,EAAe,WAAW,EAAI,CAAE,IAAK,MAAQ,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAC7FG,EAAgBH,EAAe,UAAU,EAAI,CAAE,IAAK,MAAQ,IAAK,KAAM,IAAK,EAAG,KAAM,CAAE,EAGvFG,EAAgBH,EAAe,WAAW,EAAI,CAAE,IAAK,OAAQ,IAAK,IAAM,IAAK,OAAQ,KAAM,CAAE,EAE7FG,EAAgBH,EAAe,YAAY,EAAI,CAAE,IAAK,OAAQ,IAAK,IAAM,IAAK,OAAQ,KAAM,CAAE,EAC9FG,EAAgBH,EAAe,UAAU,EAAI,CAAE,IAAK,MAAQ,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAC5FG,EAAgBH,EAAe,WAAW,EAAI,CAAE,IAAK,MAAQ,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAC7FG,EAAgBH,EAAe,aAAa,EAAI,CAAE,IAAK,EAAG,IAAK,IAAM,IAAK,EAAG,KAAM,CAAE,EACrFG,EAAgBH,EAAe,aAAa,EAAI,CAAE,IAAK,MAAO,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAE9FG,EAAgBH,EAAe,kBAAkB,EAAI,CAAE,IAAK,MAAO,IAAK,KAAM,IAAK,EAAG,KAAM,CAAE,EAC9FG,EAAgBH,EAAe,mBAAmB,EAAI,CAAE,IAAK,MAAO,IAAK,KAAM,IAAK,EAAG,KAAM,CAAE,EAG/FG,EAAgBH,EAAe,WAAW,EAAI,CAAE,IAAK,MAAQ,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAC7FG,EAAgBH,EAAe,YAAY,EAAI,CAAE,IAAK,MAAQ,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAC9FG,EAAgBH,EAAe,UAAU,EAAI,CAAE,IAAK,MAAQ,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAC5FG,EAAgBH,EAAe,WAAW,EAAI,CAAE,IAAK,MAAQ,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAC7FG,EAAgBH,EAAe,aAAa,EAAI,CAAE,IAAK,EAAG,IAAK,KAAM,IAAK,EAAG,KAAM,CAAE,EACrFG,EAAgBH,EAAe,aAAa,EAAI,CAAE,IAAK,MAAO,IAAK,IAAM,IAAK,MAAQ,KAAM,CAAE,EAE9FG,EAAgBH,EAAe,kBAAkB,EAAI,CAAE,IAAK,MAAO,IAAK,KAAM,IAAK,EAAG,KAAM,CAAE,EAC9FG,EAAgBH,EAAe,mBAAmB,EAAI,CAAE,IAAK,MAAO,IAAK,KAAM,IAAK,EAAG,KAAM,CAAE,EAE/FG,EAAgBH,EAAe,0BAA0B,EAAI,CAAE,IAAK,OAAQ,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EACxGG,EAAgBH,EAAe,MAAM,EAAI,CAAE,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,KAAM,CAAE,EAC/EG,EAAgBH,EAAe,QAAQ,EAAI,CAAE,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,KAAM,CAAE,EAEjFG,EAAgBH,EAAe,kBAAkB,EAAI,CAAE,IAAK,EAAG,IAAK,KAAM,IAAK,EAAG,KAAM,CAAE,EAE1FG,EAAgBH,EAAe,wBAAwB,EAAI,CAAE,IAAK,OAAQ,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EAEtGG,EAAgBH,EAAe,UAAU,EAAI,CAAE,IAAK,KAAM,IAAK,IAAK,IAAK,EAAG,KAAM,CAAE,EACpFG,EAAgBH,EAAe,QAAQ,EAAI,CAAE,IAAK,OAAQ,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EACtFG,EAAgBH,EAAe,WAAW,EAAI,CAAE,IAAK,EAAG,IAAK,KAAM,IAAK,IAAK,KAAM,CAAE,EACrFG,EAAgBH,EAAe,cAAc,EAAI,CAAE,IAAK,EAAG,IAAK,MAAO,IAAK,EAAG,KAAM,CAAE,EACvFG,EAAgBH,EAAe,iBAAiB,EAAI,CAAE,IAAK,GAAO,IAAK,IAAK,IAAK,GAAI,KAAM,CAAE,EAC7FG,EAAgBH,EAAe,WAAW,EAAI,CAAE,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,KAAM,CAAE,EC3IzE,IAAMI,GAAmC,IAE1CC,GAAa,IACbC,GAAuB,GAEvBC,GAAyB,MAYlBC,GAAN,MAAMC,CACb,CAKI,kBAAoB,EAKpB,WAKA,qBAAuBJ,GAKvB,MAAQ,EAKR,eAAiBA,GAKjB,wBAA0B,EAK1B,mBAAqB,EAKrB,eAAiB,EAKjB,cAAgB,EAKhB,gBAAkB,EAKlB,YAAc,EAKd,sBAAwB,EAKxB,kBAAoB,EAKpB,kBAAoB,EAKpB,SAAW,EAKX,UAAY,EAKZ,QAAU,EAKV,SAAW,EAMX,YAAYK,EAAYC,EACxB,CACI,KAAK,WAAaD,EAOlB,KAAK,sBAAwBC,EAAe,IAAML,EACtD,CAMA,OAAO,aAAaM,EACpB,CACIA,EAAM,eAAe,wBAA0BA,EAAM,eAAe,kBACpEA,EAAM,eAAe,mBAAqBC,GAAyBD,EAAM,eAAe,oBAAoB,EAC5GH,EAAe,YAAYG,CAAK,CACpC,CAMA,OAAO,YAAYA,EACnB,CACI,IAAME,EAAMF,EAAM,eACZG,EAAqBC,GAEhB,KAAK,IAAI,EAAG,KAAK,MAAMC,GAAmBD,CAAE,EAAIF,EAAI,UAAU,CAAC,EAG1EA,EAAI,kBAAoB,KAAK,IACzB,EACA,KAAK,IAAIF,EAAM,oBAAoBM,EAAe,kBAAkB,EAAG,IAAI,CAC/E,EAAI,GACJJ,EAAI,sBAAwBD,GAAyBC,EAAI,iBAAiB,EAC1EA,EAAI,kBAAoB,KAAK,IAAIT,GAAYO,EAAM,oBAAoBM,EAAe,aAAa,EAAI,EAAE,EACzG,IAAMC,EAAY,KAAK,IAAId,GAAYS,EAAI,iBAAiB,EAG5DA,EAAI,eAAiBC,EAAmBH,EAAM,oBAAoBM,EAAe,YAAY,CAAC,EAK9F,IAAME,EAAaR,EAAM,oBAAoBM,EAAe,WAAW,EACjEG,GAAkB,GAAKT,EAAM,WAAaA,EAAM,oBAAoBM,EAAe,mBAAmB,EACtGI,EAAWH,EAAYd,GAC7BS,EAAI,cAAgBC,EAAmBK,EAAaC,CAAc,EAAIC,EAEtER,EAAI,gBAAkBC,EAAmBH,EAAM,oBAAoBM,EAAe,aAAa,CAAC,EAGhGJ,EAAI,SAAWC,EAAmBH,EAAM,oBAAoBM,EAAe,WAAW,CAAC,EACvFJ,EAAI,UAAYA,EAAI,eAAiBA,EAAI,SAGzC,IAAMS,GAAiB,GAAKX,EAAM,WAAaA,EAAM,oBAAoBM,EAAe,kBAAkB,EAe1G,GAdAJ,EAAI,QAAUC,EAAmBH,EAAM,oBAAoBM,EAAe,UAAU,EAC1EK,CAAa,EACjBT,EAAI,UAEVA,EAAI,SAAWA,EAAI,cAAgBA,EAAI,QAGnCA,EAAI,QAAU,GAAKA,EAAI,YAAc,IAGrCA,EAAI,MAAQ,GAIZF,EAAM,YACV,CAGI,IAAMO,EAAY,KAAK,IAAI,EAAG,KAAK,IAAId,GAAYS,EAAI,iBAAiB,CAAC,EACnEQ,EAAWH,EAAYd,GAG7B,OAFAS,EAAI,cAAgBC,EAAmBK,EAAaC,CAAc,EAAIC,EAE9DR,EAAI,MACZ,CACI,IAAK,GACDA,EAAI,eAAiBT,GACrB,MAEJ,IAAK,GAKD,IAAImB,EAAU,GAAMV,EAAI,UAAYA,EAAI,yBAA2BA,EAAI,eAGvEA,EAAI,eAAiB,GAAK,KAAK,MAAMU,CAAO,EAAI,GAChD,MAEJ,IAAK,GACDV,EAAI,eAAiB,EACrB,MAEJ,IAAK,GACDA,EAAI,gBAAkB,GAAKA,EAAI,SAAWA,EAAI,yBAA2BA,EAAI,eAAiBK,EAC9F,MAEJ,IAAK,GACDL,EAAI,eAAiBK,EACrB,KACR,CACAL,EAAI,eAAiB,KAAK,IAAI,EAAG,KAAK,IAAIA,EAAI,eAAgBT,EAAU,CAAC,EACrES,EAAI,gBAAkBR,KAEtBM,EAAM,SAAW,IAErBE,EAAI,mBAAqBD,GAAyBC,EAAI,cAAc,EAKpE,IAAMW,GAAmBpB,GAAaS,EAAI,gBAAkBT,GAC5DS,EAAI,iBAAmBW,CAE3B,CACJ,CAUA,OAAO,MAAMb,EAAOc,EAAaC,EAAgBC,EACjD,CACI,IAAMd,EAAMF,EAAM,eACdiB,EAAgBF,EAAiB,GAE/BG,EAAuBF,EAG7B,GAAIhB,EAAM,YACV,CACI,IAAImB,EAAiBjB,EAAI,kBAAoBA,EAAI,wBACjD,GAAIiB,GAAkBjB,EAAI,gBAC1B,CACI,QAASkB,EAAI,EAAGA,EAAIN,EAAY,OAAQM,IAEpCN,EAAYM,CAAC,EAAI,EAErBpB,EAAM,SAAW,GACjB,MACJ,CACA,IAAIqB,EAAe5B,GAAaS,EAAI,eACpC,QAASkB,EAAI,EAAGA,EAAIN,EAAY,OAAQM,IACxC,CAEIlB,EAAI,cAAgBA,EAAI,sBAAwBA,EAAI,aAAegB,EACnE,IAAII,EAAMH,EAAiBjB,EAAI,gBAAmBmB,EAAenB,EAAI,eACrEA,EAAI,mBAAqBA,EAAI,YAAcD,GAAyBqB,EAAKL,CAAa,EACtFH,EAAYM,CAAC,GAAKlB,EAAI,mBACtBA,EAAI,oBACJiB,GACJ,CAEIjB,EAAI,oBAAsBP,KAE1BK,EAAM,SAAW,IAErB,MACJ,CAEA,IAAIuB,EAAe,EACnB,OAAQrB,EAAI,MACZ,CACI,IAAK,GAED,KAAOA,EAAI,kBAAoBA,EAAI,UAM/B,GAJAA,EAAI,qBAAuBT,GAC3BqB,EAAYS,CAAY,EAAI,EAE5BrB,EAAI,oBACA,EAAEqB,GAAgBT,EAAY,OAE9B,OAGRZ,EAAI,QAGR,IAAK,GAED,KAAOA,EAAI,kBAAoBA,EAAI,WACnC,CAEIA,EAAI,cAAgBA,EAAI,sBAAwBA,EAAI,aAAegB,EAGnE,IAAIM,EAAoB,GAAKtB,EAAI,UAAYA,EAAI,mBAAqBA,EAAI,eAO1E,GANAY,EAAYS,CAAY,GAAKC,EAAoBtB,EAAI,YAAcD,GAC/DgB,CAAa,EAEjBf,EAAI,qBAAuB,EAE3BA,EAAI,oBACA,EAAEqB,GAAgBT,EAAY,OAE9B,MAER,CACAZ,EAAI,QAGR,IAAK,GAED,KAAOA,EAAI,kBAAoBA,EAAI,SAS/B,GANAA,EAAI,cAAgBA,EAAI,sBAAwBA,EAAI,aAAegB,EAEnEJ,EAAYS,CAAY,GAAKrB,EAAI,YAAcD,GAAyBgB,CAAa,EACrFf,EAAI,qBAAuB,EAE3BA,EAAI,oBACA,EAAEqB,GAAgBT,EAAY,OAE9B,OAGRZ,EAAI,QAGR,IAAK,GAED,KAAOA,EAAI,kBAAoBA,EAAI,UAS/B,GANAA,EAAI,cAAgBA,EAAI,sBAAwBA,EAAI,aAAegB,EAEnEhB,EAAI,sBAAwB,GAAKA,EAAI,SAAWA,EAAI,mBAAqBA,EAAI,eAAiBA,EAAI,kBAClGY,EAAYS,CAAY,GAAKrB,EAAI,YAAcD,GAAyBC,EAAI,qBAAuBe,CAAa,EAEhHf,EAAI,oBACA,EAAEqB,GAAgBT,EAAY,OAE9B,OAGRZ,EAAI,QAGR,IAAK,GAMD,IALIA,EAAI,uBAAyBA,EAAI,mBAAqBR,KAEtDM,EAAM,SAAW,MAWjB,GALAE,EAAI,cAAgBA,EAAI,sBAAwBA,EAAI,aAAegB,EAEnEJ,EAAYS,CAAY,GAAKrB,EAAI,YAAcD,GAAyBC,EAAI,kBAAoBe,CAAa,EAC7Gf,EAAI,qBAAuBA,EAAI,kBAC/BA,EAAI,oBACA,EAAEqB,GAAgBT,EAAY,OAE9B,MAGhB,CACJ,CACJ,EC5YO,IAAMW,EAAN,cAA+B,UACtC,CAKI,aAAe,EAMf,YAAYC,EACZ,CACI,MAAMA,CAAI,CACd,CAOA,MAAMC,EAAOC,EACb,CACI,IAAMC,EAAoC,MAAM,MAAMF,EAAOC,CAAG,EAChE,OAAAC,EAAE,aAAe,EACVA,CACX,CACJ,EC1BO,IAAMC,GAAN,KACP,CAKI,MAMA,kBAMA,YAOA,YAAYC,EAAOC,EAAMC,EACzB,CACI,KAAK,MAAQF,EACb,KAAK,kBAAoBC,EACzB,KAAK,YAAcC,CACvB,CACJ,EAOO,SAASC,GAAWC,EAC3B,CACI,IAAMC,EAAYD,EAAa,IACzBE,EAAUF,EAAa,GAEzBG,EAAgBD,EAEpB,OAAQD,EACR,CAEI,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACD,MAEJ,IAAK,KACD,OAAQC,EACR,CACI,IAAK,GACDC,EAAgB,GAChB,MAEJ,IAAK,GACL,IAAK,GACL,IAAK,GACL,IAAK,GACL,IAAK,GACL,IAAK,GACL,IAAK,GACL,IAAK,GACL,IAAK,GACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACDA,EAAgB,GAChB,MAEJ,IAAK,IACDA,EAAgB,GAChB,KACR,CACA,MAEJ,QACIA,EAAgB,EACxB,CAEA,OAAOA,CACX,CAGO,IAAMC,EAAe,CACxB,QAAS,IACT,OAAQ,IACR,aAAc,IACd,iBAAkB,IAClB,cAAe,IACf,gBAAiB,IACjB,UAAW,IACX,gBAAiB,IACjB,SAAU,IACV,aAAc,IACd,WAAY,IACZ,YAAa,IACb,MAAO,IACP,MAAO,IACP,SAAU,IACV,KAAM,IACN,cAAe,IACf,MAAO,IACP,eAAgB,EAChB,KAAM,EACN,UAAW,EACX,UAAW,EACX,eAAgB,EAChB,MAAO,EACP,OAAQ,EACR,SAAU,EACV,YAAa,EACb,kBAAmB,GACnB,SAAU,GACV,WAAY,GACZ,SAAU,GACV,YAAa,GACb,cAAe,GACf,aAAc,GACd,iBAAkB,GACtB,EAQO,SAASC,GAASL,EACzB,CACI,IAAMM,EAASN,EAAa,IACtBE,EAAUF,EAAa,GAEzBO,EAAe,GACfC,EAAcR,EAElB,OAAIM,GAAU,KAAQA,GAAU,MAE5BC,EAAeL,EACfM,EAAcF,GAGX,CACH,OAAQE,EACR,QAASD,CACb,CACJ,CAMO,IAAME,EAAkB,CAC3B,WAAY,EACZ,gBAAiB,EACjB,iBAAkB,EAClB,eAAgB,EAChB,eAAgB,EAChB,aAAc,EACd,WAAY,EACZ,QAAS,EACT,IAAK,GACL,qBAAsB,GACtB,eAAgB,GAChB,eAAgB,GAChB,0BAA2B,GAC3B,0BAA2B,GAC3B,0BAA2B,GAC3B,0BAA2B,GAC3B,yBAA0B,GAC1B,8BAA+B,GAC/B,+BAAgC,GAChC,6BAA8B,GAC9B,6BAA8B,GAC9B,wBAAyB,GACzB,yBAA0B,GAC1B,sBAAuB,GACvB,mBAAoB,GACpB,oCAAqC,GACrC,8BAA+B,GAC/B,8BAA+B,GAC/B,aAAc,GACd,gBAAiB,GACjB,eAAgB,GAChB,UAAW,GACX,iBAAkB,GAClB,WAAY,GACZ,eAAgB,GAChB,gBAAiB,GACjB,YAAa,GACb,WAAY,GACZ,WAAY,GACZ,UAAW,GACX,YAAa,GACb,aAAc,GACd,aAAc,GACd,kBAAmB,GACnB,0BAA2B,GAC3B,0BAA2B,GAC3B,0BAA2B,GAC3B,0BAA2B,GAC3B,kBAAmB,GACnB,YAAa,GACb,aAAc,GACd,YAAa,GACb,YAAa,GACb,YAAa,GACb,cAAe,GACf,cAAe,GACf,QAAS,GACT,QAAS,GACT,OAAQ,IACR,OAAQ,IACR,YAAa,IACb,oBAAqB,IACrB,kBAAmB,IACnB,YAAa,IACb,YAAa,IACb,WAAY,IACZ,WAAY,IACZ,WAAY,GAChB,EAMaC,GAAkB,CAC3B,EAAK,EACL,EAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,EACL,GAAK,CACT,ECzPO,IAAMC,GAAe,GAEtBC,GAAmB,IAMlB,SAASC,GAAeC,EAC/B,CACI,OAAOA,IAAQ,MAAQF,GAAmB,CAC9C,CAMO,SAASG,GAAUC,EAC1B,CACI,OAAOA,IAAW,KAAOA,IAAW,KAAOA,IAAW,GAC1D,CAMO,SAASC,GAAaC,EAC7B,CACI,OAAOH,GAAUG,CAAI,GAAKA,IAASP,IAAgBO,IAASN,EAChE,CAeO,SAASO,GAAgBC,EAAYF,EAAMG,EAAQC,EAAOC,EAASC,EAC1E,CAEI,IAAIC,EAAML,EACNM,EAAc,EAClB,GAAIJ,EAEIK,GAAWN,CAAM,EAEZJ,GAAaC,CAAI,IAElBO,EAAMP,GAGLG,IAAW,QAEhBI,EAAMP,OAId,CACI,IAAIU,EAAmB,GACvB,OAAQP,EACR,CACI,IAAK,KAEDQ,EACI,+BAA+BX,CAAI,iCACnCY,EAAc,IAClB,EACAF,EAAmB,GACnB,MAEJ,IAAK,KACDA,EAAmBX,GAAaC,CAAI,EAEhCH,GAAUG,CAAI,EAEdQ,EAAc,EAKVF,EAAgB,KAAO,IAEvBE,EAAc,GAGtB,MAEJ,IAAK,MACGR,IAAS,IAETQ,EAAc,EAIVF,EAAgB,KAAO,IAEvBE,EAAc,EAG9B,CAEIH,IAGAL,EAAO,KAEPA,IAAS,KAAO,CAACK,IAGjBL,EAAOE,GAEPQ,IAEAH,EAAMP,EAEd,CACA,MAAO,CACH,QAASO,EACT,YAAaC,CACjB,CACJ,CAcO,SAASK,GAAWC,EAAKC,EAAKV,EAASW,EAC9C,CACI,OAAIA,EAEIX,EAEIR,GAAUiB,CAAG,EAENA,EAIA,IAMPf,GAAae,CAAG,GAKhBC,IAAQ,GAAKD,IAAQ,EAEdA,EAENf,GAAagB,CAAG,EAId,EAFIA,EAORV,EAAU,IAAMS,CAE/B,CAMO,SAASL,GAAWN,EAC3B,CACI,OAAOA,IAAW,OAASA,IAAW,IAC1C,CC3LO,IAAMc,GAAsB,CAC/B,WAAY,EACZ,UAAW,EACX,UAAW,EACX,kBAAmB,EACnB,WAAY,CAChB,EAOO,SAASC,GAAmBC,EAAMC,EACzC,CACI,OAAQD,EACR,CACI,KAAKF,GAAoB,UACrB,IAAII,EAAMD,EACV,KAAK,IAAMC,EAEXA,EAAOA,EAAM,EAAK,GAClB,KAAK,QAAW,EAAIA,EACpB,KAAK,SAAYA,EACjB,MAEJ,KAAKJ,GAAoB,WACrB,KAAK,WAAaG,EAAQE,GAC1B,KAAK,mBAAmBL,GAAoB,UAAW,KAAK,GAAG,EAC/D,MAEJ,KAAKA,GAAoB,UACrB,KAAK,SAAWG,EAChB,MAEJ,KAAKH,GAAoB,kBACrB,KAAK,kBAAoBG,EACzB,MAEJ,KAAKH,GAAoB,WACrB,KAAK,UAAUG,CAAK,CAC5B,CACJ,CCvCO,SAASG,GAAkBC,EAAWC,EAAOC,EAAU,GAC9D,CACI,IAAIC,EAAW,GACXC,EAAS,GACb,QAASC,EAAI,EAAGA,EAAIJ,EAAOI,IAC3B,CACI,IAAIC,EAAON,EAAUA,EAAU,cAAc,EAC7C,GAAI,CAAAG,EAIJ,KAAKG,EAAO,IAAMA,EAAO,MAAQA,IAAS,IAEtC,GAAIJ,EACJ,CACIC,EAAW,GACX,QACJ,SAGQG,IAAS,EACb,CACIH,EAAW,GACX,QACJ,EAGRC,GAAU,OAAO,aAAaE,CAAI,EACtC,CACA,OAAOF,CACX,CAQO,SAASG,GAAeH,EAAQI,EAAU,GAAOC,EAAa,GACrE,CACI,IAAIC,EAAMN,EAAO,OACbI,GAEAE,IAEAD,GAAcC,EAAM,IAAM,GAE1BA,IAEJ,IAAMC,EAAM,IAAIC,EAAiBF,CAAG,EACpC,OAAAG,GAAmBF,EAAKP,CAAM,EACvBO,CACX,CAQO,SAASE,GAAmBC,EAAUV,EAAQW,EAAY,EACjE,CACQA,EAAY,GAERX,EAAO,OAASW,IAEhBX,EAASA,EAAO,MAAM,EAAGW,CAAS,GAG1C,QAASV,EAAI,EAAGA,EAAID,EAAO,OAAQC,IAE/BS,EAASA,EAAS,cAAc,EAAIV,EAAO,WAAWC,CAAC,EAI3D,GAAIU,EAAYX,EAAO,OAEnB,QAASC,EAAI,EAAGA,EAAIU,EAAYX,EAAO,OAAQC,IAE3CS,EAASA,EAAS,cAAc,EAAI,EAG5C,OAAOA,CACX,CCvFO,IAAME,GAAqB,CAC9B,OAAQ,EACR,gBAAiB,EACjB,YAAa,CACjB,EAKaC,GAAoB,CAC7B,gBAAiB,EACjB,OAAQ,EACR,sBAAuB,CAC3B,ECTO,IAAMC,GAAgB,GAKhBC,EAAmB,CAC5B,aAAc,EACd,eAAgB,EAChB,aAAc,EACd,aAAc,GACd,gBAAiB,GACjB,WAAY,GACZ,gBAAiB,GACjB,KAAM,GAEV,EAMaC,GAAsB,CAC/B,OAAQ,EACR,QAAS,EACT,OAAQ,EACR,OAAQ,CACZ,EAGO,SAASC,GAAiBC,EAAWC,EAAUC,EAAWC,EAAMC,EACvE,CACI,OAAQJ,GAAa,GAAOC,GAAY,EAAMC,GAAa,EAAMC,GAAQ,EAAKC,CAClF,CAEA,IAAMC,GAA2BN,GAC7BD,GAAoB,OACpB,EACA,EACA,EACAQ,EAAgB,eACpB,EAEaC,GAAN,MAAMC,CACb,CAKI,aAAe,EAMf,qBAMA,gBAMA,cAcA,kBAAoB,GAQpB,2BAA6B,GAO7B,eAMA,gBAMA,aAMA,YAMA,gBAOA,eAMA,gBAMA,aAMA,YAMA,gBAoBA,YAAYC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAoB,GACpBC,EAA6B,GACzC,CACI,KAAK,eAAiBX,EACtB,KAAK,gBAAkBC,EACvB,KAAK,aAAeF,EACpB,KAAK,YAAcF,EACnB,KAAK,gBAAkBC,EAEvB,KAAK,eAAiBO,EACtB,KAAK,gBAAkBC,EACvB,KAAK,aAAeF,EACpB,KAAK,YAAcF,EACnB,KAAK,gBAAkBC,EAEvB,KAAK,qBAAuBI,EAC5B,KAAK,gBAAkBC,EACvB,KAAK,cAAgBC,EACrB,KAAK,kBAAoBC,EACzB,KAAK,2BAA6BC,EAG9B,KAAK,qBAAuBC,KAE5B,KAAK,qBAAuBC,EAAe,QAGnD,CAMA,OAAO,KAAKC,EACZ,CACI,OAAO,IAAIlB,EACPkB,EAAU,YACVA,EAAU,gBACVA,EAAU,aACVA,EAAU,eACVA,EAAU,gBACVA,EAAU,YACVA,EAAU,gBACVA,EAAU,aACVA,EAAU,eACVA,EAAU,gBACVA,EAAU,qBACVA,EAAU,gBACVA,EAAU,cACVA,EAAU,kBACVA,EAAU,0BACd,CACJ,CAQA,OAAO,YAAYC,EAAMC,EAAMC,EAAc,GAC7C,CACI,OAAQF,EAAK,cAAgBC,EAAK,aAC1BD,EAAK,eAAiBC,EAAK,cAC3BD,EAAK,iBAAmBC,EAAK,gBAC7BD,EAAK,kBAAoBC,EAAK,iBAC9BD,EAAK,kBAAoBC,EAAK,iBAE9BD,EAAK,cAAgBC,EAAK,aAC1BD,EAAK,eAAiBC,EAAK,cAC3BD,EAAK,iBAAmBC,EAAK,gBAC7BD,EAAK,kBAAoBC,EAAK,iBAC9BD,EAAK,kBAAoBC,EAAK,iBAE9BD,EAAK,uBAAyBC,EAAK,sBACnCD,EAAK,gBAAkBC,EAAK,gBAC5B,CAACC,GAAgBF,EAAK,kBAAoBC,EAAK,gBAC3D,CAMA,OAAO,YAAYE,EACnB,CACI,SAASC,EAAcC,EAAQC,EAC/B,CACI,OAAO,OAAO,KAAKD,CAAM,EAAE,KAAKE,GAAOF,EAAOE,CAAG,IAAMD,CAAK,CAChE,CAEA,IAAIE,EAAeJ,EAAcjC,GAAqBgC,EAAI,eAAe,EACzEK,GAAgBL,EAAI,iBAAmB,EAAI,aAAe,YAC1DK,GAAgBL,EAAI,kBAAoB,EAAI,YAAc,aACtDA,EAAI,aAEJK,GAAgBJ,EAAczB,EAAiBwB,EAAI,WAAW,EAI9DK,GAAgBJ,EAAclC,EAAkBiC,EAAI,WAAW,EAGnE,IAAIM,EAAeL,EAAcjC,GAAqBgC,EAAI,eAAe,EACzE,OAAAM,GAAgBN,EAAI,iBAAmB,EAAI,aAAe,YAC1DM,GAAgBN,EAAI,kBAAoB,EAAI,YAAc,aACtDA,EAAI,aAEJM,GAAgBL,EAAczB,EAAiBwB,EAAI,WAAW,EAI9DM,GAAgBL,EAAclC,EAAkBiC,EAAI,WAAW,EAE5D;AAAA,kBACGK,CAAY;AAAA,4BACFC,CAAY;AAAA,uBACjBL,EAAcN,EAAgBK,EAAI,oBAAoB,CAAC;AAAA,2BACnDA,EAAI,eAAe;AAAA,0BACpBA,EAAI,aAAa;AAAA;AAAA;AAAA,CAEvC,CAEA,eACA,CACI,OAAO/B,GACH,KAAK,gBACL,KAAK,eACL,KAAK,gBACL,KAAK,aACL,KAAK,WACT,CACJ,CAEA,eACA,CACI,OAAOA,GACH,KAAK,gBACL,KAAK,eACL,KAAK,gBACL,KAAK,aACL,KAAK,WACT,CACJ,CAOA,aAAa2B,EACb,CACI,OAAO,IAAIlB,EACP,KAAK,YACL,KAAK,gBACL,KAAK,aACL,KAAK,eACL,KAAK,gBACL,KAAK,YACL,KAAK,gBACL,KAAK,aACL,KAAK,eACL,KAAK,gBACL,KAAK,qBACL,KAAK,gBAAkBkB,EAAU,gBACjC,KAAK,cACL,KAAK,kBACL,KAAK,0BACT,CACJ,CACJ,EAEaW,GAAN,cAA+B9B,EACtC,CASI,YAAY+B,EAAYC,EAAqBpB,EAAaC,EAAQC,EAClE,CAEI,IAAMT,EAAiB0B,GAAc,EAAI,EACnCzB,EAAkByB,GAAc,EAAI,EACpC3B,EAAe2B,GAAc,EAAI,EACjC7B,EAA+C6B,EAAa,IAC5D5B,EAAsD4B,GAAc,GAAK,EAGzErB,EAAiBsB,GAAuB,EAAI,EAC5CrB,EAAkBqB,GAAuB,EAAI,EAC7CvB,EAAeuB,GAAuB,EAAI,EAC1CzB,EAA+CyB,EAAsB,IACrExB,EAAsDwB,GAAuB,GAAK,EAExF,MACI9B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,CACJ,EAGA,KAAK,mBAEGiB,IAAe,KACZA,IAAe,MAEnBC,IAAwB,IAEvB,KAAK,uBAAyBd,EAAe,mBAC1C,KAAK,uBAAyBA,EAAe,mBAIxD,KAAK,2BACDa,IAAejC,IACZkC,IAAwB,GACxB,KAAK,uBAAyBd,EAAe,cAExD,CACJ,EAEae,GAAiC,IACjCC,GAAqC3C,GAAoB,QAGhE4C,GAAsB,CAExB,IAAIL,GACAtC,GACI0C,GACA,EACA,EACA,EACA5C,EAAiB,cACrB,EACA,EACA4B,EAAe,mBACfe,GACA,CACJ,EAGA,IAAIH,GAAiB,IAAQ,EAAKZ,EAAe,cAAe,GAAI,CAAC,EAGrE,IAAIY,GACAtC,GACI0C,GACA,EACA,EACA,EACAnC,EAAgB,UACpB,EACA,EACAmB,EAAe,mBACfe,GACA,CACJ,EAGA,IAAIH,GAAiB,GAAQ,EAAKZ,EAAe,cAAe,GAAI,CAAC,EAGrE,IAAIY,GAAiB,IAAQ,GAAQZ,EAAe,SAAU,MAAO,CAAC,EAItE,IAAIY,GAAiB,IAAQ,EAAKZ,EAAe,IAAK,IAAK,CAAC,EAG5D,IAAIY,GACAtC,GACI0C,GACA,EACA,EACA,EACAnC,EAAgB,oBACpB,EACA,EACAmB,EAAe,mBACfe,GACA,CACJ,EAGA,IAAIH,GAAiB,IAAQ,EAAKZ,EAAe,kBAAmB,IAAK,CAAC,EAG1E,IAAIY,GAAiB,IAAQ,EAAKZ,EAAe,kBAAmB,IAAK,CAAC,CAC9E,EAEMkB,GAAmB,CAGrB,IAAIN,GACAtC,GAAiBD,GAAoB,OAAQ,EAAG,EAAG,EAAGD,EAAiB,YAAY,EACnF,EACA4B,EAAe,cACf,GACA,CACJ,EAGA,IAAIY,GACAtC,GACID,GAAoB,OACpB,EACA,EACA,EACAQ,EAAgB,YACpB,EACA,EACAmB,EAAe,eACf,GACA,CACJ,EAGA,IAAIY,GACAtC,GACID,GAAoB,OACpB,EACA,EACA,EACAQ,EAAgB,UACpB,EACA,EACAmB,EAAe,aACf,IACA,CACJ,EAGA,IAAIY,GACAtC,GACID,GAAoB,OACpB,EACA,EACA,EACAQ,EAAgB,WACpB,EACA,EACAmB,EAAe,cACf,KACA,CACJ,EAGA,IAAIY,GACAtC,GACID,GAAoB,OACpB,EACA,EACA,EACAQ,EAAgB,UACpB,EACA,EACAmB,EAAe,gBACf,IACA,CACJ,EAGA,IAAIY,GACAhC,GACA,EACAoB,EAAe,eACf,IACA,CACJ,CAEJ,EAKamB,GAAoBF,GAAoB,OAAOC,EAAgB,EC1jBrE,IAAME,GAAsB,IACtBC,GAAwB,IAIxBC,GAAa,IAAI,WAAWD,EAAqB,EAAE,KAAK,CAAC,EACzDE,GAAgB,CAACC,EAAGC,IAAMH,GAAWE,CAAC,EAAIC,GAAK,EAG5DF,GAAcG,EAAgB,WAAY,GAAG,EAC7CH,GAAcG,EAAgB,QAAS,EAAE,EACzCH,GAAcG,EAAgB,qBAAsB,GAAG,EACvDH,GAAcG,EAAgB,IAAK,EAAE,EAErCH,GAAcG,EAAgB,gBAAiB,GAAG,EAElDH,GAAcG,EAAgB,gBAAiB,EAAE,EACjDH,GAAcG,EAAgB,YAAa,EAAE,EAC7CH,GAAcG,EAAgB,WAAY,EAAE,EAC5CH,GAAcG,EAAgB,WAAY,EAAE,EAE5CH,GAAcG,EAAgB,UAAW,EAAE,EAC3CH,GAAcG,EAAgB,YAAa,EAAE,EAC7CH,GAAcG,EAAgB,aAAc,EAAE,EAC9CH,GAAcG,EAAgB,aAAc,EAAE,EAC9CH,GAAcG,EAAgB,0BAA2B,EAAE,EAC3DH,GAAcG,EAAgB,0BAA2B,EAAE,EAE3DH,GAAcG,EAAgB,OAAQ,GAAG,EACzCH,GAAcG,EAAgB,OAAQ,GAAG,EACzCH,GAAcG,EAAgB,QAAS,GAAG,EAC1CH,GAAcG,EAAgB,QAAS,GAAG,EAGnC,IAAMC,GAA2B,EAKxCL,GAAWI,EAAgB,iBAAiB,EAAIC,GAGhDJ,GAAcH,GAAsBQ,EAAiB,WAAY,EAAE,EACnEL,GAAcH,GAAsBQ,EAAiB,gBAAiB,CAAC,EAKhE,IAAMC,GAAoB,CAC7B,cAAe,EACf,qBAAsB,EAEtB,qBAAsB,EACtB,aAAc,EACd,uBAAwB,EACxB,gBAAiB,EACjB,oBAAqB,CACzB,EACaC,GAA+B,OAAO,KAAKD,EAAiB,EAAE,OAC9DE,GAAmB,IAAI,aAAaD,EAA4B,EAC7EC,GAAiBF,GAAkB,oBAAoB,EAAI,EAIpD,IAAMG,GAAkB,CAC3B,KAAM,EACN,SAAU,EACV,OAAQ,EACR,UAAW,EACX,QAAS,EACT,WAAY,EACZ,SAAU,CACd,EAKaC,GAAuB,CAChC,iBAAkB,GACtB,EC1DA,SAASC,GAAUC,EAAOC,EAAOC,EACjC,CACI,IAAMC,EAAWH,EACXI,EAAYH,GAAS,EAAKC,EAGhC,OAAIF,IAAU,KAAQC,IAAU,KAAQC,IAAU,IAEvC,CAAE,SAAU,GAAI,WAAY,IAAK,EAIrC,CAAE,SAAUC,EAAU,WAAYC,EAAW,KAAO,CAC/D,CAQO,SAASC,GAAgBC,EAAKC,EAAgB,EACrD,CACI,IAAMC,EAAOF,EAAI,CAAC,EAClB,GAAI,KAAK,WAAa,IAAoCA,EAAI,CAAC,IAAM,KAE7D,KAAK,WAAaA,EAAI,CAAC,EAGvB,OAIR,SAASG,EAAYC,EAASC,EAAOC,EAAMC,EAC3C,CACIC,EACI,eAAeJ,CAAO,MAAME,CAAI,OAAOD,CAAK,IAAIE,CAAK,cAAcE,GAAiBT,CAAG,CAAC,GACxFU,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,MACdA,EAAc,KACdA,EAAc,KAClB,CACJ,CAEA,SAASC,GACT,CAEIC,EACI,yCAAyCH,GAAiBT,CAAG,CAAC,GAC9DU,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,YAClB,CACJ,CAEA,OAAQR,EACR,CACI,QACIU,EACI,2BAA2BH,GAAiBT,CAAG,CAAC,GAChDU,EAAc,KACdA,EAAc,YAClB,EACA,MAGJ,IAAK,KACL,IAAK,KACD,OAAQV,EAAI,CAAC,EACb,CACI,IAAK,GACD,IAAIa,EAEJ,OAAQb,EAAI,CAAC,EACb,CACI,IAAK,GAED,IAAMc,EAAMd,EAAI,CAAC,GAAK,EAAIA,EAAI,CAAC,EAC/B,KAAK,cAAcc,EAAM,KAAK,EAC9BN,EACI,8BAA8BM,CAAG,GACjCJ,EAAc,KACdA,EAAc,KAClB,EACA,MAEJ,IAAK,GAID,IAAMK,IADUf,EAAI,CAAC,GAAK,EAAIA,EAAI,CAAC,GACZ,MAAQ,KAC/B,KAAK,mBAAmBgB,GAAoB,UAAWD,CAAG,EAC1DP,EACI,wBAAwBO,CAAG,GAC3BL,EAAc,KACdA,EAAc,KAClB,EACA,MAGJ,IAAK,GAED,IAAMO,GAAgBjB,EAAI,CAAC,GAAK,EAAKA,EAAI,CAAC,GAAK,KAC/Ca,EAAQ,KAAK,MAAMI,EAAc,KAAK,EACtC,KAAK,gBAAgBJ,CAAK,EAC1BL,EACI,kCAAkCK,CAAK,GACvCH,EAAc,KACdA,EAAc,KAClB,EACA,MAEJ,IAAK,GAIDG,GADkBb,EAAI,CAAC,EAAI,IACP,IACpB,KAAK,gBAAgBa,CAAK,EAC1BL,EACI,oCAAoCK,CAAK,GACzCH,EAAc,KACdA,EAAc,KAClB,EACA,MAEJ,QACIE,EACI,2DAA2DH,GAAiBT,CAAG,CAAC,GAChFU,EAAc,KACdA,EAAc,YAClB,CACR,CACA,MAEJ,IAAK,GAEGV,EAAI,CAAC,IAAM,GAEXQ,EAAgB,kBAAmBE,EAAc,IAAI,EACrD,KAAK,UAAU,IAAI,GAEdV,EAAI,CAAC,IAAM,GAEhBQ,EAAgB,kBAAmBE,EAAc,IAAI,EACrD,KAAK,UAAU,KAAK,IAIpBF,EAAgB,oCAAqCE,EAAc,IAAI,EACvE,KAAK,UAAU,IAAI,GAEvB,MAIJ,IAAK,GACD,IAAIQ,EAAsB,EAC1B,OAAQlB,EAAI,CAAC,EACb,CAEI,IAAK,GACD,IAAMmB,EAAUnB,EAAIkB,GAAqB,EAEzClB,EAAI,aAAekB,EACnB,IAAME,EAAaC,GAAkBrB,EAAK,EAAE,EAE5C,GADAkB,GAAuB,GACnBlB,EAAI,OAAS,IACjB,CACIY,EAAgB,uCAAuCZ,EAAI,MAAM,oCAAoC,EACrG,MACJ,CAEA,QAASsB,EAAI,EAAGA,EAAI,IAAKA,IAGrB,KAAK,QAAQH,CAAO,EAAEG,CAAC,EAAI7B,GACvBO,EAAIkB,GAAqB,EACzBlB,EAAIkB,GAAqB,EACzBlB,EAAIkB,GAAqB,CAC7B,EAEJV,EACI,wBAAwBY,CAAU,iBAAiBD,CAAO,GAC1DT,EAAc,KACdA,EAAc,MACdA,EAAc,KACdA,EAAc,UAClB,EACA,MAIJ,IAAK,GACL,IAAK,GACGV,EAAI,CAAC,IAAM,GAGXkB,IAGJ,IAAMK,EAAgBvB,EAAIkB,GAAqB,EACzCM,EAAkBxB,EAAIkB,GAAqB,EACjD,QAASI,EAAI,EAAGA,EAAIE,EAAiBF,IAGjC,KAAK,QAAQC,CAAa,EAAEvB,EAAIkB,GAAqB,CAAC,EAAIzB,GACtDO,EAAIkB,GAAqB,EACzBlB,EAAIkB,GAAqB,EACzBlB,EAAIkB,GAAqB,CAC7B,EAEJV,EACI,oCAAoCe,CAAa,uBAAuBC,CAAe,GACvFd,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,UAClB,EACA,MAIJ,IAAK,GACL,IAAK,GAED,IAAMe,EAAkB,IAAI,UAAU,EAAE,EAExC,GAAIzB,EAAI,CAAC,IAAM,EAGX,QAASsB,EAAI,EAAGA,EAAI,GAAIA,IAEpBG,EAAgBH,CAAC,EAAItB,EAAI,EAAIsB,CAAC,EAAI,OAMtC,SAASA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAC7B,CACI,IAAMI,GAAW1B,EAAI,EAAIsB,CAAC,GAAK,EAAKtB,EAAI,EAAIsB,CAAC,GAAK,KAClDG,EAAgBH,EAAI,CAAC,EAAI,KAAK,MAAMI,EAAS,KAAK,CACtD,EAIC1B,EAAI,CAAC,EAAI,KAAO,GAEjB,KAAK,kBAAkB,GAAKC,CAAa,EAAE,gBAAgBwB,CAAe,GAExEzB,EAAI,CAAC,GAAK,EAAK,KAAO,GAExB,KAAK,kBAAkB,GAAKC,CAAa,EAAE,gBAAgBwB,CAAe,EAI9E,QAASH,EAAI,EAAGA,EAAI,EAAGA,KAENtB,EAAI,CAAC,GAAKsB,EAAK,KAChB,GAER,KAAK,kBAAkB,EAAIA,EAAIrB,CAAa,EAAE,gBAAgBwB,CAAe,EAKrF,QAASH,EAAI,EAAGA,EAAI,EAAGA,KAENtB,EAAI,CAAC,GAAKsB,EAAK,KAChB,GAER,KAAK,kBAAkBA,EAAIrB,CAAa,EAAE,gBAAgBwB,CAAe,EAIjFjB,EACI,uBACIR,EAAI,CAAC,IAAM,EAAO,WAAa,WACnC,yBAAyByB,EAAgB,KAAK,GAAG,CAAC,GAClDf,EAAc,KACdA,EAAc,KAClB,EACA,MAEJ,QACIE,EACI,kDAAkDH,GAAiBT,CAAG,CAAC,GACvEU,EAAc,KACdA,EAAc,YAClB,EACA,KACR,CACA,MAEJ,QACIE,EACI,wDAAwDH,GAAiBT,CAAG,CAAC,GAC7EU,EAAc,KACdA,EAAc,YAClB,CAER,CACA,MAKJ,IAAK,IACD,GAAIV,EAAI,CAAC,IAAM,IAAQA,EAAI,CAAC,IAAM,GAClC,CAEI,IAAM2B,EAAe3B,EAAI,CAAC,EAG1B,GAAIA,EAAI,CAAC,IAAM,IAASA,EAAI,CAAC,IAAM,GAAQA,EAAI,CAAC,IAAM,KAGlD,IAAKA,EAAI,CAAC,EAAI,IAAQ,EACtB,CAII,IAAMI,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAEJ,EAAI,CAAC,EAAI,EAAI,EAAIC,EAElF2B,EAAgB,KAAK,kBAAkBxB,CAAO,EACpD,OAAQJ,EAAI,CAAC,EACb,CACI,QAEIW,EAAc,EACd,MAEJ,IAAK,IAED,IAAMkB,EAAUF,EAAe,GAAK3B,EAAI,CAAC,GAAK,EAC9C4B,EAAc,SAASC,CAAO,EAC9BrB,EACI,eAAeJ,CAAO,MAAMyB,EACxB,wBAEA,0BACJ,aAAapB,GAAiBT,CAAG,CAAC,GAClCU,EAAc,KACdA,EAAc,MACdA,EAAc,WACdA,EAAc,KACdA,EAAc,KAClB,EACA,OAEJ,IAAK,IAED,IAAMoB,EAAWH,EAAe,GAChCC,EAAc,oBAAoBG,GAAkB,gBAAiBD,CAAQ,EAC7E3B,EAAYC,EAAS0B,EAAU,YAAa,MAAM,EAClD,OAGJ,IAAK,IAED,IAAIE,EAASL,EACTK,IAAW,GAEXJ,EAAc,UAAY,GAC1BpB,EACI,uCAAuCJ,CAAO,GAC9CM,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,KAClB,IAIAkB,EAAc,UAAY,GAC1BA,EAAc,iBAAiBK,EAAgB,IAAKD,CAAM,GAE9D,MAGJ,IAAK,IACDJ,EAAc,iBAAiBK,EAAgB,YAAaN,CAAY,EACxE,MAGJ,IAAK,IACDC,EAAc,iBAAiBK,EAAgB,YAAaN,CAAY,EACxE,MAEJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAED,IAAMO,EAAclC,EAAI,OAAS,EAE3BmC,EAAY,IAAI,UAAU,EAAE,EAClC,QAASb,EAAI,EAAGA,EAAIY,EAAaZ,IAE7Ba,EAAUb,CAAC,EAAItB,EAAIsB,EAAI,CAAC,EAAI,GAEhCM,EAAc,gBAAgBO,CAAS,EACvC,IAAMtB,EAAQc,EAAe,GAC7BxB,EAAYC,EAAS+B,EAAU,KAAK,GAAG,EAAG,sBAAuB,OAAO,EACxEP,EAAc,UAAUf,CAAK,EAC7B,KACR,CACA,MACJ,UAGKb,EAAI,CAAC,EAAI,IAAQ,EACtB,CAGI,IAAMI,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAEJ,EAAI,CAAC,EAAI,EAAI,EAAIC,EAElF2B,EAAgB,KAAK,kBAAkBxB,CAAO,EAC9CgC,EAAiBT,EAAe,GAChCU,EAAkBD,EAAgB,GAClCE,EAAwBX,EAAe,IAGvCY,EAAiB,CAACC,EAAQC,EAAYC,EAAU,KACtD,CACI,OAAQ1C,EAAI,CAAC,EAAI,GACjB,CACI,IAAK,GAMGwC,IAAWG,GAAsBC,EAAiB,YAElDhB,EAAc,iBAAiBK,EAAgB,OAAQ,CAAG,EAC1DL,EAAc,iBAAiBK,EAAgB,OAAQ,CAAG,EAC1DL,EAAc,iBACVK,EAAgB,aAChB,KAAK,MAAMG,CAAa,CAC5B,IAIAR,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,SACfT,EAAgB,IAChBM,CACJ,EACAvC,EAAYC,EAASgC,EAAe,GAAGK,CAAU,iBAAkB,WAAW,GAElF,MAEJ,IAAK,GAEDb,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,gBACfR,EAAkB,KAClBK,CACJ,EACAvC,EACIC,EACAiC,EAAkB,KAClB,GAAGI,CAAU,iBACb,OACJ,EACA,MAEJ,IAAK,GAEDb,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,mBACfR,EAAkB,IAClBK,CACJ,EACAvC,EAAYC,EAASiC,EAAkB,IAAK,GAAGI,CAAU,aAAc,IAAI,EAC3E,MAIJ,IAAK,GAEDb,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,cACfP,EAAwB,IACxBI,CACJ,EACAvC,EACIC,EACAkC,EAAwB,IACxB,GAAGG,CAAU,oBACb,OACJ,EACA,MAEJ,IAAK,GAEDb,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,iBACfP,EAAwB,KACxBI,CACJ,EACAvC,EACIC,EACAkC,EAAwB,KACxB,GAAGG,CAAU,qBACb,OACJ,EACA,MAEJ,IAAK,GAEDb,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,eACfR,EAAkB,IAClBK,CACJ,EACAvC,EACIC,EACAiC,EAAkB,IAClB,GAAGI,CAAU,wBACb,IACJ,EACA,MAIJ,IAAK,GAEDb,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,cACfP,EAAwB,IACxBI,CACJ,EACAvC,EACIC,EACAkC,EAAwB,IACxB,GAAGG,CAAU,oBACb,OACJ,EACA,MAEJ,IAAK,GAEDb,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,iBACfP,EAAwB,KACxBI,CACJ,EACAvC,EACIC,EACAkC,EAAwB,KACxB,GAAGG,CAAU,qBACb,OACJ,EACA,MAEJ,IAAK,IAEDb,EAAc,gBAAgB,aAC1BY,EACAK,EAAe,eACfR,EAAkB,IAClBK,CACJ,EACAvC,EACIC,EACAiC,EAAkB,IAClB,GAAGI,CAAU,wBACb,IACJ,EACA,KACR,CACJ,EAGA,OAAQzC,EAAI,CAAC,EAAI,IACjB,CACI,QAEIW,EAAc,EACd,MAEJ,IAAK,GAED4B,EAAeN,EAAgB,gBAAiB,WAAW,EAC3D,MAEJ,IAAK,IAEDM,EAAeI,GAAsBC,EAAiB,WAAY,aAAc,EAAI,EACpF,MAEJ,IAAK,IAEDL,EACII,GAAsBC,EAAiB,gBACvC,kBACJ,EACA,MAEJ,IAAK,IAEDL,EACII,GAAsBC,EAAiB,aACvC,eACJ,EACA,KACR,CACA,MACJ,SAGI5C,EAAI,CAAC,IAAM,EACf,CACI,OAAQA,EAAI,CAAC,EACb,CACI,QACIW,EAAc,EACd,MAEJ,IAAK,KAGGgB,IAAiB,GAGjBnB,EAAgB,uBAAwBE,EAAc,IAAI,EAC1D,KAAK,oBAAoB,EAAK,EAC9B,KAAK,UAAU,IAAI,GAEdiB,IAAiB,MAGtBnB,EAAgB,oCAAqCE,EAAc,IAAI,EACvE,KAAK,oBAAoB,EAAK,EAC9B,KAAK,UAAU,KAAK,GAExB,MAEJ,IAAK,GAEDF,EACI,oCAAoCmB,CAAY,cAAclB,GAC1DT,CAAG,CAAC,GACRU,EAAc,KACdA,EAAc,MACdA,EAAc,KACdA,EAAc,KAClB,EACA,KAAK,mBAAmBM,GAAoB,WAAYW,EAAe,IAAM,EAAE,EAC/E,MAGJ,IAAK,GAEDnB,EACI,uCAAuCmB,CAAY,cAAclB,GAC7DT,CAAG,CAAC,GACRU,EAAc,KACdA,EAAc,MACdA,EAAc,KACdA,EAAc,KAClB,EACA,KAAK,cAAciB,EAAe,GAAG,EACrC,MAEJ,IAAK,GAED,IAAMmB,EAAYnB,EAAe,GACjCnB,EACI,0CAA0CsC,CAAS,cAAcrC,GAC7DT,CAAG,CAAC,GACRU,EAAc,KACdA,EAAc,MACdA,EAAc,KACdA,EAAc,KAClB,EACA,KAAK,gBAAgBoC,EAAY,GAAG,EACpC,KACR,CACA,MACJ,SAGI9C,EAAI,CAAC,IAAM,EAEX,OAAQA,EAAI,CAAC,EACb,CACI,QACIW,EAAc,EACd,MAEJ,IAAK,GAEDX,EAAI,aAAe,EACnB,IAAM+C,EAAY1B,GAAkBrB,EAAK,EAAE,EAC3CQ,EACI,sBAAsBuC,CAAS,GAC/BrC,EAAc,KACdA,EAAc,KAClB,EACA,MAEJ,IAAK,IAEDF,EACI,wBAAwBmB,CAAY,GACpCjB,EAAc,KAAMA,EAAc,KACtC,EAEA,KAAK,WAAaiB,EAAe,GACjC,MAGJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACDnB,EACI,wCAAwCR,EAAI,CAAC,EAAE,SAAS,EAAE,CAAC,GAC3DU,EAAc,KAAMA,EAAc,YACtC,EACA,MAEJ,IAAK,IAEDF,EACI,wBAAwBmB,CAAY,GACpCjB,EAAc,KAAMA,EAAc,KACtC,EAEA,KAAK,WAAaiB,EAAe,GACjC,MAGJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACDnB,EACI,wCAAwCR,EAAI,CAAC,EAAE,SAAS,EAAE,CAAC,GAC3DU,EAAc,KAAMA,EAAc,YACtC,EACA,KACR,OAMJC,EAAc,EAElB,MACJ,SACSX,EAAI,CAAC,IAAM,IAAQA,EAAI,CAAC,IAAM,IAMnC,GACIA,EAAI,CAAC,IAAM,IACXA,EAAI,CAAC,IAAM,EAGX,GAAIA,EAAI,CAAC,IAAM,EACf,CAGI,IAAMgD,EAAO,IAAI,WAAWhD,EAAI,MAAM,EAAGA,EAAI,OAAS,CAAC,CAAC,EACxD,KAAK,UACD,eACA,CACI,YAAagD,EACb,YAAaC,GAAkB,eACnC,CACJ,CACJ,SACSjD,EAAI,CAAC,IAAM,EACpB,CAGI,IAAMkD,EAAgB,IAAI,WAAWlD,EAAI,MAAM,EAAGA,EAAI,OAAS,CAAC,CAAC,EACjE,KAAK,UACD,eACA,CACI,YAAakD,EACb,YAAaD,GAAkB,qBACnC,CACJ,EACAzC,EACI,yCAAyCC,GACrCT,CAAG,CAAC,GACRU,EAAc,KACdA,EAAc,KAClB,CACJ,MAIIC,EAAc,UAIjBX,EAAI,CAAC,IAAM,IAAQA,EAAI,CAAC,IAAM,IAAQA,EAAI,CAAC,IAAM,GAC1D,CAEI,KAAK,cAAcA,EAAI,CAAC,EAAI,GAAG,EAC/BQ,EACI,4CAA4CR,EAAI,CAAC,CAAC,aAAaS,GAC3DT,CAAG,CAAC,GACRU,EAAc,KACdA,EAAc,MACdA,EAAc,KACdA,EAAc,KAClB,EACA,MACJ,KAEA,CAEIE,EACI,kCAAkCH,GAAiBT,CAAG,CAAC,GACvDU,EAAc,KACdA,EAAc,YAClB,EACA,MACJ,CACA,MAIJ,IAAK,IAED,GAAIV,EAAI,CAAC,IAAM,GAGX,GAAIA,EAAI,CAAC,IAAM,GAAQA,EAAI,CAAC,IAAM,EAE9B,OAAQA,EAAI,CAAC,EACb,CAEI,IAAK,GACD,IAAMc,EAAMd,EAAI,CAAC,EACjB,KAAK,cAAcc,EAAM,GAAG,EAC5BN,EACI,iCAAiCM,CAAG,GACpCJ,EAAc,KACdA,EAAc,UAClB,EACA,MAGJ,IAAK,GACD,IAAMoC,EAAY9C,EAAI,CAAC,EAAI,GAC3B,KAAK,qBAAqB8C,CAAS,EACnCtC,EACI,oCAAoCsC,CAAS,GAC7CpC,EAAc,KACdA,EAAc,UAClB,EACA,MAGJ,IAAK,KACDF,EAAgB,iBAAkBE,EAAc,IAAI,EACpD,KAAK,oBAAoB,EAAK,EAC9B,KAAK,UAAU,IAAI,EACnB,KACR,SAIAV,EAAI,CAAC,IAAM,EACf,CACI,GAAI,CAACmD,GAAW,KAAK,MAAM,EAEvB,OAEJ,IAAM/C,EAAUJ,EAAI,CAAC,EAAIC,EACzB,GAAIG,GAAW,KAAK,kBAAkB,OAGlC,OAEJ,IAAMwB,EAAgB,KAAK,kBAAkBxB,CAAO,EAC9CC,EAAQL,EAAI,CAAC,EACnB,OAAQA,EAAI,CAAC,EACb,CAEI,IAAK,GACD4B,EAAc,iBAAiBK,EAAgB,WAAY5B,CAAK,EAChE,MAGJ,IAAK,GACDuB,EAAc,iBAAiBK,EAAgB,yBAA0B5B,CAAK,EAC9E,MAGJ,IAAK,GACDuB,EAAc,cAAcvB,CAAK,EACjC,MAGJ,IAAK,GACD,GAAIuB,EAAc,YAEd,OAEJ,IAAMwB,EAAY/C,EAAQ,GAC1BuB,EAAc,yBAA2BwB,EACzC,MAGJ,IAAK,IACDxB,EAAc,iBAAiBK,EAAgB,WAAY5B,CAAK,EAChE,MAGJ,IAAK,IACD,IAAIU,EAAMV,EACNU,IAAQ,GAGRa,EAAc,UAAY,GAC1BpB,EACI,uCAAuCJ,CAAO,GAC9CM,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,KAClB,GAIAkB,EAAc,iBAAiBK,EAAgB,IAAKlB,CAAG,EAE3D,MAGJ,IAAK,IACDa,EAAc,iBAAiBK,EAAgB,YAAa5B,CAAK,EACjE,MAGJ,IAAK,IACDuB,EAAc,iBAAiBK,EAAgB,YAAa5B,CAAK,EACjE,MAEJ,QACIO,EACI,0CAA0CZ,EAAI,CAAC,EAAE,SAAS,EAAE,EACvD,YAAY,CAAC,GAClBU,EAAc,KACdA,EAAc,YAClB,CACR,CACJ,SAEIV,EAAI,CAAC,IAAM,GACXA,EAAI,CAAC,IAAM,EAEf,CAGI,IAAMqD,EAAW,IAAI,WAAWrD,EAAI,MAAM,EAAGA,EAAI,OAAS,CAAC,CAAC,EAC5D,KAAK,UACD,eACA,CACI,YAAaqD,EACb,YAAaJ,GAAkB,MACnC,CACJ,CACJ,MACSE,GAAW,KAAK,MAAM,GAE3BvC,EACI,qCAAqCH,GAAiBT,CAAG,CAAC,GAC1DU,EAAc,KACdA,EAAc,YAClB,OAMAyC,GAAW,KAAK,MAAM,GAEtBvC,EACI,kCAAkCH,GAAiBT,CAAG,CAAC,GACvDU,EAAc,KACdA,EAAc,YAClB,EAGR,KAGR,CACJ,CC5gCO,SAAS4C,GAAoBC,EAAM,GAC1C,CACQA,GAEAC,EAAgB,+BAAgCC,EAAc,IAAI,EAEtE,KAAK,UAAU,qBAAsB,MAAS,EAC9C,KAAK,UAAUC,EAAkB,EACjC,QAASC,EAAgB,EAAGA,EAAgB,KAAK,kBAAkB,OAAQA,IAC3E,CAII,IAAMC,EAAK,KAAK,kBAAkBD,CAAa,EAkC/C,GAhCAC,EAAG,iBAAiB,EAEfA,EAAG,WAwBJ,KAAK,UAAU,aAAc,CACzB,QAASD,EACT,cAAeC,EAAG,WACtB,CAAC,GAzBDA,EAAG,cAAcC,GAAe,KAAK,MAAM,CAAC,EACxCF,EAAgB,KAAO,GAEvBC,EAAG,UAAU,KAAK,UAAU,EAC5BA,EAAG,YAAc,GACjB,KAAK,UAAU,aAAc,CACzB,QAASD,EACT,cAAe,EACnB,CAAC,IAIDC,EAAG,YAAc,GACjBA,EAAG,UAAU,KAAK,aAAa,EAC/B,KAAK,UAAU,aAAc,CACzB,QAASD,EACT,cAAe,EACnB,CAAC,IAWL,CAACC,EAAG,OAEJ,SAEJ,IAAME,EAAaF,EAAG,QAAQ,KAE9B,KAAK,UAAU,gBAAiB,CAC5B,QAASD,EACT,QAASC,EAAG,QAAQ,QACpB,KAAME,CACV,CAAC,EAED,QAASC,EAAQ,EAAGA,EAAQ,IAAKA,IAEzB,KAAK,kBAAkBJ,CAAa,EAAE,kBAAkBI,CAAK,GAG7D,KAAK,UAAU,mBAAoB,CAC/B,QAASJ,EACT,iBAAkBI,EAClB,gBAAiB,KAAK,kBAAkBJ,CAAa,EAAE,gBAAgBI,CAAK,GAAK,CACrF,CAAC,EAOT,GAAI,KAAK,kBAAkBJ,CAAa,EAAE,kBAAkBK,GAAsBC,EAAiB,UAAU,IAAM,GACnH,CACI,IAAMC,EAAM,KAAK,kBAAkBP,CAAa,EAAE,gBAAgBK,GAAsBC,EAAiB,UAAU,EAC7GE,EAAMD,GAAO,EACbE,EAAMF,EAAM,IAClB,KAAK,UAAU,aAAc,CACzB,QAASP,EACT,IAAKQ,EACL,IAAKC,CACT,CAAC,CACL,CAGA,GAAI,KAAK,kBAAkBT,CAAa,EAAE,kBAAkBK,GAAsBC,EAAiB,eAAe,IAAM,GACxH,CACI,IAAMC,EAAM,KAAK,kBAAkBP,CAAa,EAAE,gBAAgBK,GAAsBC,EAAiB,eAAe,GAAK,EAC7H,KAAK,UAAU,kBAAmB,CAC9B,QAASN,EACT,SAAUO,CACd,CAAC,CACL,CACJ,CACA,KAAK,QAAU,CAAC,EAChB,KAAK,QAAU,CAAC,EAChB,QAASG,EAAI,EAAGA,EAAI,IAAKA,IAErB,KAAK,QAAQ,KAAK,CAAC,CAAC,EAGxB,KAAK,cAAc,CAAC,CACxB,CAMO,SAASC,IAChB,CACI,KAAK,oBAAoB,KAAK,CAAC,EAG/B,QAASD,EAAI,EAAGA,EAAIE,GAAW,OAAQF,IACvC,CACI,GAAI,KAAK,kBAAkBA,CAAC,EAExB,SAEJ,IAAMG,EAAaD,GAAWF,CAAC,EAC3B,KAAK,gBAAgBA,CAAC,IAAMG,GAAcH,EAAI,IAE1CA,IAAMI,EAAgB,kBAEtB,KAAK,gBAAgBJ,CAAC,EAAIK,GAI1B,KAAK,iBAAiBL,EAAGG,GAAc,CAAC,EAM5C,KAAK,gBAAgBH,CAAC,EAAIG,CAElC,CACA,KAAK,eAAiB,CAAE,KAAM,EAAG,MAAO,EAAG,MAAO,CAAE,EACpD,KAAK,UAAY,GACjB,KAAK,UAAY,GAEjB,KAAK,gBAAgB,gBAAgB,EAIrC,IAAMG,EAAY,KAAK,kBAAkBC,GAAkB,oBAAoB,EAC/E,KAAK,kBAAkB,IAAIC,EAAgB,EAC3C,KAAK,oBAAoBD,GAAkB,qBAAsBD,CAAS,EAC1E,KAAK,gBAAgB,CAEzB,CAMO,IAAMG,GAAkB,IAAI,IAAI,CACnCL,EAAgB,WAChBA,EAAgB,yBAChBA,EAAgB,WAChBA,EAAgB,yBAChBA,EAAgB,IAChBA,EAAgB,mBAChBA,EAAgB,YAChBA,EAAgB,aAChBA,EAAgB,YAChBA,EAAgB,YAChBA,EAAgB,YAChBA,EAAgB,eAChBA,EAAgB,gBAChBA,EAAgB,YAChBA,EAAgB,WAChBA,EAAgB,WAChBA,EAAgB,UAChBA,EAAgB,YAChBA,EAAgB,aAChBA,EAAgB,aAChBA,EAAgB,iBACpB,CAAC,EAOM,SAASM,IAChB,CAEI,KAAK,oBAAoB,KAAK,CAAC,EAG/B,KAAK,WAAW,GAAI,CAAC,EAErB,KAAK,eAAiB,CAAE,KAAM,EAAG,MAAO,EAAG,MAAO,CAAE,EAEpD,QAASV,EAAI,EAAGA,EAAI,IAAKA,IACzB,CACI,IAAMG,EAAaD,GAAWF,CAAC,EAC3B,CAACS,GAAgB,IAAIT,CAAC,GAAKG,IAAe,KAAK,gBAAgBH,CAAC,IAE5DA,IAAMI,EAAgB,kBAEtB,KAAK,gBAAgBJ,CAAC,EAAIK,GAI1B,KAAK,iBAAiBL,EAAGG,GAAc,CAAC,EAGpD,CACA,KAAK,wBAAwB,EAC7B,KAAK,sBAAsB,CAC/B,CAKO,SAASQ,IAChB,CAII,KAAK,eAAiBC,GAAgB,KACtC,KAAK,gBAAgBR,EAAgB,OAAO,EAAI,MAChD,KAAK,gBAAgBA,EAAgB,OAAO,EAAI,MAChD,KAAK,gBAAgBA,EAAgB,MAAM,EAAI,MAC/C,KAAK,gBAAgBA,EAAgB,MAAM,EAAI,MAC/C,KAAK,wBAAwB,EAC7B,KAAK,sBAAsB,CAC/B,CClPO,IAAMS,GAAN,KACP,CAKI,cAAgB,CAAC,EAIjB,WAAa,CAAC,EAKd,YAAYC,EACZ,CACI,KAAK,yBAA2BA,CACpC,CAEA,oBACA,CAKI,IAAMC,EAAa,CAAC,EAEpB,QAASC,EAAI,KAAK,cAAc,OAAS,EAAGA,GAAK,EAAGA,IACpD,CACI,IAAMC,EAAO,KAAK,cAAcD,CAAC,EAM3BE,EAAU,IAAI,IACpB,QAAWC,KAAKF,EAAK,UAAU,QAC/B,CAEI,IAAMG,EAAe,GADR,KAAK,IAAI,IAAKD,EAAE,KAAOF,EAAK,UAAU,CACvB,IAAIE,EAAE,OAAO,GACrCD,EAAQ,IAAIE,CAAY,IAI5BF,EAAQ,IAAIE,CAAY,EACxBL,EAAWK,CAAY,EAAID,EAAE,WACjC,CACJ,CAEA,KAAK,WAAa,CAAC,EACnB,OAAW,CAACE,EAAQC,CAAI,IAAK,OAAO,QAAQP,CAAU,EACtD,CACI,IAAMQ,EAAKF,EAAO,MAAM,GAAG,EAC3B,KAAK,WAAW,KAAK,CACjB,WAAYC,EACZ,QAAS,SAASC,EAAG,CAAC,CAAC,EACvB,KAAM,SAASA,EAAG,CAAC,CAAC,CACxB,CAAC,CACL,CACA,KAAK,yBAAyB,CAClC,CAMA,eACA,CACI,OAAO,KAAK,WAAW,MAAM,CACjC,CAOA,cAAcC,EACd,CAEI,KAAK,cAAgB,KAAK,cAAc,OAAOC,GAAMA,EAAG,KAAOC,EAAsB,EACrF,KAAK,cAAc,KAAK,CACpB,GAAI,OACJ,WAAY,EACZ,UAAWF,CACf,CAAC,EACD,KAAK,mBAAmB,CAC5B,CAOA,gBAAgBG,EAChB,CACI,GAAI,KAAK,cAAc,SAAW,EAClC,CACIC,EAAgB,6BAA6B,EAC7C,MACJ,CACA,IAAMC,EAAQ,KAAK,cAAc,UAAUC,GAAKA,EAAE,KAAOH,CAAE,EAC3D,GAAIE,IAAU,GACd,CACIE,EAAgB,4BAA4BJ,CAAE,oBAAoB,EAClE,MACJ,CACA,KAAK,cAAc,OAAOE,EAAO,CAAC,EAClC,KAAK,mBAAmB,CAC5B,CASA,gBAAgBZ,EAAMU,EAAIK,EAC1B,CACI,GAAI,KAAK,cAAc,KAAK,GAAK,EAAE,KAAOL,CAAE,IAAM,OAClD,CAEI,IAAMM,EAAY,KAAK,cAAc,KAAKH,GAAKA,EAAE,KAAOH,CAAE,EAC1DM,EAAU,UAAYhB,EACtBgB,EAAU,WAAaD,CAC3B,MAGI,KAAK,cAAc,KAAK,CACpB,GAAIL,EACJ,UAAWV,EACX,WAAYe,CAChB,CAAC,EAEL,KAAK,mBAAmB,CAC5B,CAMA,0BACA,CACI,OAAO,KAAK,cAAc,IAAIF,GAAKA,EAAE,EAAE,CAC3C,CAOA,oBAAoBI,EACpB,CACI,KAAK,cAAc,KAAK,CAACC,EAAGC,IACxBF,EAAQ,QAAQC,EAAE,EAAE,EAAID,EAAQ,QAAQE,EAAE,EAAE,CAChD,EACA,KAAK,mBAAmB,CAC5B,CASA,UAAUC,EAAYC,EAAeC,EAAe,GACpD,CACI,GAAI,KAAK,cAAc,OAAS,EAE5B,MAAM,IAAI,MAAM,2CAA2C,EAE/D,IAAMC,EAASH,IAAe,KAAQE,GAAgBE,GAAUJ,CAAU,EAC1E,QAAWZ,KAAM,KAAK,cACtB,CAEI,IAAMiB,EAASjB,EAAG,UAAU,oBACxBY,IAAe,IAAM,IAAMA,EAAaZ,EAAG,WAC3Ca,EACAC,CACJ,EACA,GAAIG,IAAW,OAEX,MAAO,CACH,OAAQA,EACR,WAAYjB,EAAG,UACnB,CAGR,CAEA,GAAKe,EAsBL,CACI,QAAWf,KAAM,KAAK,cACtB,CAEI,IAAMN,EAAIM,EAAG,UAAU,QAAQ,KAAKN,GAAKA,EAAE,aAAaoB,CAAY,GAAKpB,EAAE,UAAYmB,CAAa,EACpG,GAAInB,EAEA,MAAO,CACH,OAAQA,EACR,WAAYM,EAAG,UACnB,EAGJ,IAAMiB,EAASjB,EAAG,UAAU,QAAQ,KAAKN,GAAKA,EAAE,aAAaoB,CAAY,CAAC,EAC1E,GAAIG,EAEA,MAAO,CACH,OAAQA,EACR,WAAYjB,EAAG,UACnB,CAER,CAEA,IAAMA,EAAK,KAAK,cAAc,CAAC,EAC/B,MAAO,CACH,OAAQA,EAAG,UAAU,QAAQ,CAAC,EAC9B,WAAYA,EAAG,UACnB,CACJ,KAjDA,CACI,QAAWA,KAAM,KAAK,cACtB,CACI,IAAMiB,EAASjB,EAAG,UAAU,QAAQ,KAAKN,GAAKA,EAAE,UAAYmB,GAAiB,CAACnB,EAAE,aAC5EoB,CAAY,CAAC,EACjB,GAAIG,EAEA,MAAO,CACH,OAAQA,EACR,WAAYjB,EAAG,UACnB,CAER,CAEA,IAAMA,EAAK,KAAK,cAAc,CAAC,EAC/B,MAAO,CACH,OAAQA,EAAG,UAAU,QAAQ,CAAC,EAC9B,WAAYA,EAAG,UACnB,CACJ,CA+BJ,CAEA,gBACA,CACI,KAAK,cAAc,QAAQK,GAC3B,CACIA,EAAE,UAAU,iBAAiB,CACjC,CAAC,EACD,OAAO,KAAK,aAChB,CACJ,EChOO,IAAMa,GAAN,KACP,CAOI,aAAe,CAAC,EAQhB,WAAWC,EAASC,EAAUC,EAC9B,CACQ,KAAK,aAAaF,CAAO,IAAM,SAE/B,KAAK,aAAaA,CAAO,EAAI,CAAC,GAElC,KAAK,aAAaA,CAAO,EAAEC,CAAQ,EAAIC,CAC3C,CAOA,cAAcF,EAASC,EACvB,CACQ,KAAK,aAAaD,CAAO,IAAIC,CAAQ,IAAM,SAI/C,KAAK,aAAaD,CAAO,EAAEC,CAAQ,EAAI,OAC3C,CAMA,eACA,CACI,KAAK,aAAe,CAAC,CACzB,CAKA,YAAYE,EACZ,CACI,KAAK,aAAeA,CACxB,CAKA,aACA,CACI,OAAO,KAAK,YAChB,CAOA,YAAYH,EAASC,EACrB,CACI,OAAO,KAAK,aAAaD,CAAO,IAAIC,CAAQ,GAAG,UAAY,EAC/D,CAOA,QAAQD,EAASC,EACjB,CACI,OAAO,KAAK,aAAaD,CAAO,IAAIC,CAAQ,GAAG,MAAQ,CAC3D,CAOA,iBAAiBD,EAASC,EAC1B,CACI,IAAMG,EAAO,KAAK,aAAaJ,CAAO,IAAIC,CAAQ,GAAG,OAAO,KAC5D,OAAOG,IAAS,QAAaA,GAAQ,CACzC,CAOA,SAASJ,EAASC,EAClB,CACI,IAAMI,EAAW,KAAK,aAAaL,CAAO,IAAIC,CAAQ,EACtD,GAAII,EAEA,OAAOA,EAAS,MAEpB,MAAM,IAAI,MAAM,cAAc,CAClC,CAEJ,ECzIO,IAAMC,GAA0B,GAW1BC,GAAN,MAAMC,CACb,CAOI,OAAO,mBAAqB,CAAC,EAK7B,GAAK,EAML,GAAK,EAML,GAAK,EAML,GAAK,EAML,GAAK,EAML,GAAK,EAML,GAAK,EAML,GAAK,EAML,GAAK,EAML,YAAc,EAMd,iBAAmB,MAOnB,iBAAmB,IAMnB,YAAc,GAKd,WAKA,YAAYC,EACZ,CACI,KAAK,WAAaA,EAIlB,KAAK,UAAYA,EAAa,GAClC,CASA,OAAO,MAAMC,EAAOC,EAAcC,EAAaC,EAC/C,CACI,IAAMC,EAAYJ,EAAM,oBAAoBK,EAAe,eAAe,EACpEC,EAASN,EAAM,OAGhBM,EAAO,YAYRA,EAAO,mBAAqBF,EAAYE,EAAO,kBAAoBH,GATnEG,EAAO,YAAc,GACrBA,EAAO,iBAAmBF,GAY9B,IAAMG,EAAeD,EAAO,iBAAmBJ,EACzCM,EAAqBR,EAAM,oBAAoBK,EAAe,cAAc,EAOlF,GAAIC,EAAO,iBAAmB,OAASC,EAAe,OAASC,IAAuB,EACtF,CACIF,EAAO,iBAAmB,MAC1B,MACJ,EAGI,KAAK,IAAIA,EAAO,iBAAmBC,CAAY,EAAI,GAAKD,EAAO,cAAgBE,KAE/EF,EAAO,iBAAmBC,EAC1BD,EAAO,YAAcE,EACrBV,EAAc,sBAAsBQ,EAAQC,CAAY,GAK5D,QAASE,EAAI,EAAGA,EAAIR,EAAa,OAAQQ,IACzC,CACI,IAAIC,EAAQT,EAAaQ,CAAC,EACtBE,EAAWL,EAAO,GAAKI,EACrBJ,EAAO,GAAKA,EAAO,GACnBA,EAAO,GAAKA,EAAO,GACnBA,EAAO,GAAKA,EAAO,GACnBA,EAAO,GAAKA,EAAO,GAGzBA,EAAO,GAAKA,EAAO,GACnBA,EAAO,GAAKI,EACZJ,EAAO,GAAKA,EAAO,GACnBA,EAAO,GAAKK,EAEZV,EAAaQ,CAAC,EAAIE,CACtB,CACJ,CAMA,OAAO,sBAAsBL,EAAQM,EACrC,CACIA,EAAc,CAAC,CAACA,EAChB,IAAMC,EAAMP,EAAO,YAEbQ,EAAShB,EAAc,qBAAqBe,CAAG,IAAID,CAAW,EACpE,GAAIE,IAAW,OACf,CACIR,EAAO,GAAKQ,EAAO,GACnBR,EAAO,GAAKQ,EAAO,GACnBR,EAAO,GAAKQ,EAAO,GACnBR,EAAO,GAAKQ,EAAO,GACnBR,EAAO,GAAKQ,EAAO,GACnB,MACJ,CACA,IAAIC,EAAWC,GAAaJ,CAAW,EAGvCG,EAAW,KAAK,IAAIA,EAAUT,EAAO,SAAS,EAI9C,IAAMW,EAAMJ,EAAM,GAEZK,EAAgBC,GAAyB,EAAEF,EAAM,KAAK,EAKtDG,EAAQ,EAAI,KAAK,KAAKD,GAAyB,CAACF,CAAG,CAAC,EAItDI,EAAI,EAAI,KAAK,GAAKN,EAAWT,EAAO,WACpCgB,EAAO,KAAK,IAAID,CAAC,EACjBE,EAAQ,KAAK,IAAIF,CAAC,GAAK,EAAIH,GAE3BM,GAAM,EAAIF,GAAQF,EAClBK,EAAKD,EAAK,EACVE,EAAKD,EACLE,EAAK,EAAIJ,EACTK,EAAK,GAAKN,EACVO,EAAK,EAAIN,EAMPO,EAAU,CAAC,EACjBA,EAAQ,GAAKL,EAAKE,EAClBG,EAAQ,GAAKN,EAAKG,EAClBG,EAAQ,GAAKJ,EAAKC,EAClBG,EAAQ,GAAKF,EAAKD,EAClBG,EAAQ,GAAKD,EAAKF,EAClBrB,EAAO,GAAKwB,EAAQ,GACpBxB,EAAO,GAAKwB,EAAQ,GACpBxB,EAAO,GAAKwB,EAAQ,GACpBxB,EAAO,GAAKwB,EAAQ,GACpBxB,EAAO,GAAKwB,EAAQ,GAEhBhC,EAAc,mBAAmBe,CAAG,IAAM,SAE1Cf,EAAc,mBAAmBe,CAAG,EAAI,CAAC,GAE7Cf,EAAc,mBAAmBe,CAAG,EAAED,CAAW,EAAIkB,CACzD,CACJ,EAGMC,GAAQ,IAAIlC,GAAc,KAAK,EACrCkC,GAAM,YAAc,EAEpB,QAAStB,EAAI,KAAMA,EAAI,MAAOA,IAE1BsB,GAAM,iBAAmBtB,EACzBZ,GAAc,sBAAsBkC,GAAOtB,CAAC,EChRzC,IAAMuB,GAAyB,MAGhCC,GAAU,IAAI,aAAaD,GAAyB,CAAC,EACrDE,GAAS,IAAI,aAAaF,GAAyB,CAAC,EAG1DC,GAAQ,CAAC,EAAI,EACbA,GAAQA,GAAQ,OAAS,CAAC,EAAI,EAE9BC,GAAO,CAAC,EAAI,EACZA,GAAOA,GAAO,OAAS,CAAC,EAAI,EAC5B,QAASC,EAAI,EAAGA,EAAIH,GAAyB,EAAGG,IAChD,CACI,IAAIC,EAAK,mBAAkB,KAAK,IAAID,GAAKF,GAAQ,OAAS,EAAE,EAAI,KAAK,KACrEC,GAAOC,CAAC,EAAI,EAAIC,EAChBH,GAAQA,GAAQ,OAAS,EAAIE,CAAC,EAAIC,CACtC,CAUO,SAASC,GAAuBC,EAAWC,EAAWC,EAAOC,EACpE,CAMI,OAJIH,IAEAE,EAAQ,EAAIA,GAERD,EACR,CACI,KAAKG,GAAoB,OACrB,OAAID,EAGOD,EAAQ,EAAI,EAEhBA,EAEX,KAAKE,GAAoB,OAGrB,OADAF,EAAQA,EAAQ,GAAM,EAAI,EACtBC,EAGOD,EAAQ,EAAI,EAEhBA,EAEX,KAAKE,GAAoB,QAErB,OAAID,GAEAD,EAAQA,EAAQ,EAAI,EAChBA,EAAQ,EAED,CAACP,GAAQ,CAAC,EAAEO,EAAQ,CAACR,GAAuB,EAEhDC,GAAQ,CAAC,EAAEO,EAAQR,GAAuB,GAE9CC,GAAQ,CAAC,EAAEO,EAAQR,GAAuB,EAErD,KAAKU,GAAoB,OAErB,OAAID,GAEAD,EAAQA,EAAQ,EAAI,EAChBA,EAAQ,EAED,CAACN,GAAO,CAAC,EAAEM,EAAQ,CAACR,GAAuB,EAE/CE,GAAO,CAAC,EAAEM,EAAQR,GAAuB,GAE7CE,GAAO,CAAC,EAAEM,EAAQR,GAAuB,CACxD,CACJ,CC/EA,IAAMW,GAAc,EAGdC,GAAgB,IAAI,aAAa,GAAI,EAC3C,QAASC,EAAI,EAAGA,EAAID,GAAc,OAAQC,IAGtCD,GAAcC,CAAC,EAAIC,GAAuB,EAAGC,GAAoB,OAAQF,EAAI,IAAM,CAAC,EAGjF,IAAMG,GAAN,MAAMC,CACb,CAKI,eAAiB,EAKjB,cAAgB,EAMhB,aAAe,EAMf,gBAAkB,EAMlB,aAAe,EAMf,SAAW,EAKX,UAAY,EAKZ,QAAU,EAKV,SAAW,EAMX,kBAAoB,EAMpB,aAAe,EAMf,OAAO,aAAaC,EACpB,CACID,EAAmB,YAAYC,CAAK,CACxC,CAKA,OAAO,YAAYA,EACnB,CACI,IAAMC,EAAMD,EAAM,mBAGdA,EAAM,cAENC,EAAI,kBAAoBF,EAAmB,SAASC,EAAOA,EAAM,iBAAkB,EAAI,GAG3FC,EAAI,aAAe,EAAKD,EAAM,oBAAoBE,EAAe,aAAa,EAAI,IAElFD,EAAI,eAAiBE,GAAmBH,EAAM,oBAAoBE,EAAe,YAAY,CAAC,EAE9F,IAAME,GAA2B,GAAKJ,EAAM,UAAYA,EAAM,oBAAoBE,EAAe,mBAAmB,EAC9GG,EAAYF,GAAmBH,EAAM,oBAAoBE,EAAe,WAAW,EAAIE,CAAsB,EAInHH,EAAI,cAAgBI,GAAa,EAAIJ,EAAI,cAEzC,IAAMK,GAA0B,GAAKN,EAAM,UAAYA,EAAM,oBAAoBE,EAAe,kBAAkB,EAClHD,EAAI,aAAeE,GAAmBG,EAAwBN,EAAM,oBAAoBE,EAAe,UAAU,CAAC,EAElH,IAAMK,EAAcJ,GAAmBH,EAAM,oBAAoBE,EAAe,aAAa,CAAC,EAG9FD,EAAI,gBAAkBM,EAAcN,EAAI,kBAExCA,EAAI,SAAWD,EAAM,UAAYG,GAAmBH,EAAM,oBAAoBE,EAAe,WAAW,CAAC,EACzGD,EAAI,UAAYA,EAAI,SAAWA,EAAI,eACnCA,EAAI,QAAUA,EAAI,UAAYA,EAAI,aAClCA,EAAI,SAAWA,EAAI,QAAUA,EAAI,aACrC,CASA,OAAO,SAASD,EAAOQ,EAAaC,EAAgB,GACpD,CACI,IAAMR,EAAMD,EAAM,mBAClB,OAAIA,EAAM,aAAe,CAACS,EAIlBR,EAAI,oBAAsB,EAEnB,EAEJ,KAAK,IACR,GACC,GAAKO,EAAcR,EAAM,kBAAoBC,EAAI,iBAAmBA,EAAI,iBAC7E,GAGAO,EAAcP,EAAI,SAElBA,EAAI,aAAe,EAEdO,EAAcP,EAAI,UAGvBA,EAAI,aAAeP,GAAc,CAAC,GAAG,GAAKO,EAAI,UAAYO,GAAeP,EAAI,gBAAkB,IAAK,EAE/FO,EAAcP,EAAI,QAGvBA,EAAI,aAAeR,GAEde,EAAcP,EAAI,SAGvBA,EAAI,cAAgB,GAAKA,EAAI,SAAWO,GAAeP,EAAI,gBAAkBA,EAAI,aAAeR,IAAeA,GAK/GQ,EAAI,aAAeA,EAAI,aAEpBA,EAAI,aACf,CACJ,EClLO,IAAMS,GAAgB,EAEhBC,EAAN,KACP,CAKI,cAAgBC,EAAe,QAK/B,eAAiB,EAQjB,YAAYC,EAAOD,EAAe,QAASE,EAAQ,EAAGC,EAAW,GACjE,CAEI,GADA,KAAK,cAAgBF,EACjBC,IAAU,OAEV,MAAM,IAAI,MAAM,oBAAoB,EAGxC,GADA,KAAK,eAAiB,KAAK,MAAMA,CAAK,EAClCC,EACJ,CACI,IAAMC,EAAMC,EAAgBJ,CAAI,EAE5BG,IAAQ,SAER,KAAK,eAAiB,KAAK,IAAIA,EAAI,IAAK,KAAK,IAAIA,EAAI,IAAK,KAAK,cAAc,CAAC,EAEtF,CACJ,CACJ,EAYO,SAASE,GAAqBC,EAAeC,EAAYC,EAChE,CACI,IAAMC,EAASL,EAAgBE,CAAa,GAAK,CAAE,IAAK,EAAG,IAAK,MAAO,IAAK,CAAE,EAC1EI,EAAYH,EAAW,KAAKI,GAAKA,EAAE,gBAAkBL,CAAa,EAClEM,EAAc,EACdF,IAEAE,EAAcF,EAAU,gBAG5B,IAAIG,EAAYL,EAAe,KAAKG,GAAKA,EAAE,gBAAkBL,CAAa,EACtEQ,EAAcL,EAAO,IACzB,OAAII,IAEAC,EAAcD,EAAU,gBAIrBC,EAAcF,CACzB,CC3DA,IAAMG,GAAwB,MACxBC,GAA4B,MAE5BC,GAAN,KACA,CAKI,WAKA,aAAe,EAKf,OAAS,EAKT,QAAU,EAKV,UAAY,EAKZ,QAAU,EAKV,IAAM,EASN,YAAc,EAKd,UAAY,GAYZ,YACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,WAAaP,EAClB,KAAK,aAAeC,EACpB,KAAK,OAASC,EACd,KAAK,QAAUC,EACf,KAAK,UAAYC,EACjB,KAAK,QAAUC,EACf,KAAK,IAAMC,EACX,KAAK,YAAcC,EACnB,KAAK,UAAY,KAAK,cAAgB,GAAK,KAAK,cAAgB,CACpE,CACJ,EAcMC,GAAN,MAAMC,CACN,CAKI,OAMA,OAMA,KAAO,EAMP,WAMA,WAAa,CAAC,EAMd,gBAAkB,EAOlB,oBAMA,SAAW,GAMX,YAAc,GAMd,SAAW,EAMX,SAAW,EAMX,SAAW,EAMX,UAAY,EAMZ,mBAAqB,IAAIC,GAMzB,eAMA,UAAY,EAMZ,iBAAmB,IAMnB,mBAAqB,EAMrB,wBAA0B,EAM1B,WAAa,EASb,QAKA,kBAAoB,GAMpB,mBAAqB,EAMrB,YAAc,EAMd,eAAiB,EAcjB,YACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,OAASP,EACd,KAAK,WAAaM,EAClB,KAAK,eAAiB,KAAK,WAAWE,EAAe,cAAc,EACnE,KAAK,oBAAsB,IAAI,WAAWF,CAAU,EACpD,KAAK,WAAaC,EAClB,KAAK,OAAS,IAAIE,GAAcV,CAAU,EAC1C,KAAK,SAAWG,EAChB,KAAK,SAAWD,EAChB,KAAK,UAAYE,EACjB,KAAK,UAAYC,EACjB,KAAK,QAAUC,EACf,KAAK,eAAiB,IAAIK,GAAeX,EAAYO,EAAWE,EAAe,aAAa,CAAC,CACjG,CASA,OAAO,KAAKG,EAAOR,EAAaE,EAChC,CACI,IAAMO,EAAeD,EAAM,OACrBE,EAAS,IAAI1B,GACfyB,EAAa,WACbA,EAAa,aACbA,EAAa,OACbA,EAAa,QACbA,EAAa,UACbA,EAAa,QACbA,EAAa,IACbA,EAAa,WACjB,EACA,OAAO,IAAIf,EACPc,EAAM,eAAe,WACrBE,EACAF,EAAM,SACNA,EAAM,SACNR,EACAQ,EAAM,UACNN,EACA,IAAI,WAAWM,EAAM,UAAU,EAC/BA,EAAM,WAAW,IAAIG,GAAKC,GAAU,KAAKD,CAAC,CAAC,CAC/C,CACJ,CAMA,iBAAiBX,EACjB,CACI,KAAK,QAAQA,EAAaa,EAAoB,EAC9C,KAAK,oBAAoBR,EAAe,aAAa,EAAIvB,GACzD,KAAK,oBAAoBuB,EAAe,aAAa,EAAItB,GACzDwB,GAAe,YAAY,IAAI,EAC/BZ,GAAmB,YAAY,IAAI,CACvC,CAOA,QAAQK,EAAac,EAAgBC,GACrC,CACI,KAAK,iBAAmBf,EAEpB,KAAK,iBAAmB,KAAK,UAAYc,IAEzC,KAAK,iBAAmB,KAAK,UAAYA,EAEjD,CACJ,EAYO,SAASE,GAAmBC,EAAQC,EAAMC,EAASrB,EAAUC,EAAUG,EAC9E,CAII,IAAMkB,EAASH,EAAO,wBAAwBnB,EAAUC,CAAQ,EAC3D,OAAO,CAACqB,EAAQC,IACjB,CACI,GAAIA,EAAoB,OAAO,aAAa,IAAM,OAE9C,OAAAC,EAAgB,8BAA8BD,EAAoB,OAAO,UAAU,EAAE,EAC9ED,EAIX,IAAMjB,EAAa,IAAI,WAAWoB,EAAiB,EAEnD,QAASC,EAAI,EAAGA,EAAI,GAAIA,IAEpBrB,EAAWqB,CAAC,EAAIC,GACZD,EACAH,EAAoB,iBACpBA,EAAoB,oBACxB,EAKJlB,EAAWE,EAAe,kBAAkB,EAAI,KAAK,MAAMF,EAAWE,EAAe,kBAAkB,EAAI,EAAG,EAG9G,IAAIjB,EAAUiC,EAAoB,OAAO,YACrClB,EAAWE,EAAe,iBAAiB,EAAI,KAE/CjB,EAAUe,EAAWE,EAAe,iBAAiB,GAGzD,IAAIJ,EAAYH,EACZK,EAAWE,EAAe,MAAM,EAAI,KAEpCJ,EAAYE,EAAWE,EAAe,MAAM,GAIhD,IAAIhB,EAAYgC,EAAoB,OAAO,qBACvC/B,EAAU+B,EAAoB,OAAO,mBACrC7B,EAAcW,EAAWE,EAAe,WAAW,EAMjDR,EAAc,IAAIb,GACpBqC,EAAoB,OAAO,WAC1BA,EAAoB,OAAO,WAAa,KAAK,WAAc,KAAK,IAC7D,EACAA,EAAoB,OAAO,sBAAwB,IACvD,EACA,EACAjC,EACAC,EACAC,EACA,KAAK,MAAM+B,EAAoB,OAAO,WAAW,MAAM,EAAI,EAC3D7B,CACJ,EAEA,OAAIW,EAAWE,EAAe,QAAQ,EAAI,KAEtCN,EAAWI,EAAWE,EAAe,QAAQ,GAajDe,EAAO,KACH,IAAI3B,GACA,KAAK,WACLI,EACAC,EACAC,EACA,KAAK,iBACLE,EACAC,EACAC,EACAkB,EAAoB,WAAW,IAAIV,GAAKC,GAAU,KAAKD,CAAC,CAAC,CAC7D,CACJ,EACOS,CACX,EAAG,CAAC,CAAC,EAET,YAAK,eAAeF,EAAMC,EAASrB,EAAUC,EAAUqB,CAAM,EACtDA,EAAO,IAAIM,GACdjC,GAAM,KAAKiC,EAAG,KAAK,iBAAkBxB,CAAO,CAAC,CACrD,CAUO,SAASyB,GAAUC,EAAS9B,EAAUC,EAAUG,EACvD,CACI,IAAM2B,EAAgB,KAAK,kBAAkBD,CAAO,EAG9CE,EAAgB,KAAK,mBAAmB,iBAAiBF,EAAS9B,CAAQ,EAE5EoB,EAAOW,EAAc,cAAc,EAEnCZ,EAASY,EAAc,OAC3B,GAAI,CAACZ,EAED,OAAAK,EAAgB,yBAAyBM,CAAO,GAAG,EAC5C,CAAC,EAEZ,IAAIT,EAAUF,EAAO,QACrB,GAAIa,EACJ,CACI,IAAMC,EAAW,KAAK,mBAAmB,SAASH,EAAS9B,CAAQ,EACnEoB,EAAOa,EAAS,KAChBZ,EAAUY,EAAS,OACvB,CAEA,IAAMC,EAAS,KAAK,eAAed,EAAMC,EAASrB,EAAUC,CAAQ,EAEpE,OAAIiC,IAAW,OAEJA,EAAO,IAAIN,GAAKjC,GAAM,KAAKiC,EAAG,KAAK,iBAAkBxB,CAAO,CAAC,GAIpE4B,IAEAb,EAAS,KAAK,UAAUC,EAAMC,CAAO,GAElC,KAAK,mBAAmBF,EAAQC,EAAMC,EAASrB,EAAUC,EAAUG,CAAO,EACrF,CCrgBO,IAAM+B,GAAuB,IAGvBC,GAAiB,KACjBC,GAAiB,IACxBC,GAAU,KAAK,GAAK,EAEpBC,GAAU,KACVC,GAAU,IACVC,GAAiBD,GAAUD,GAG3BG,GAAe,IAAI,aAAaD,GAAiB,CAAC,EAClDE,GAAgB,IAAI,aAAaF,GAAiB,CAAC,EACzD,QAASG,EAAML,GAASK,GAAOJ,GAASI,IACxC,CAEI,IAAMC,GAAWD,EAAML,IAAWE,GAC5BK,EAAaF,EAAML,GACzBG,GAAaI,CAAU,EAAI,KAAK,IAAIR,GAAUO,CAAO,EACrDF,GAAcG,CAAU,EAAI,KAAK,IAAIR,GAAUO,CAAO,CAC1D,CAeO,SAASE,GAAeC,EACAC,EACAC,EAAYC,EACZC,EAAYC,EACZC,EAAYC,EACZC,EAC/B,CACI,GAAI,MAAMP,EAAY,CAAC,CAAC,EAEpB,OAMJ,IAAIL,EACAI,EAAM,YAENJ,EAAMI,EAAM,aAKZA,EAAM,aAAeA,EAAM,oBAAoBS,EAAe,GAAG,EAAIT,EAAM,YAAc,KAAK,MAAM,mBACpGJ,EAAMI,EAAM,YAGhB,IAAMU,EAAO,KAAK,MAAM,YAAcV,EAAM,KACtCW,EAAQ,CAAC,EAAEf,EAAM,KAEjBgB,EAAWlB,GAAaiB,CAAK,EAAID,EAAO,KAAK,MAAM,QACnDG,EAAYlB,GAAcgB,CAAK,EAAID,EAAO,KAAK,MAAM,SAG3D,GAAI,KAAK,MAAM,eACf,CACI,IAAMI,EAAad,EAAM,oBAAoBS,EAAe,iBAAiB,EAC7E,GAAIK,EAAa,EACjB,CAEI,IAAMC,EAAa,KAAK,MAAM,WAAa,KAAK,MAAM,WAAaL,GAAQI,EAAa1B,IACxF,QAAS4B,EAAI,EAAGA,EAAIf,EAAY,OAAQe,IACxC,CACI,IAAMC,EAAMD,EAAIR,EAChBJ,EAAWa,CAAG,GAAKF,EAAad,EAAYe,CAAC,EAC7CX,EAAYY,CAAG,GAAKF,EAAad,EAAYe,CAAC,CAClD,CACJ,CAEA,IAAME,EAAalB,EAAM,oBAAoBS,EAAe,iBAAiB,EAC7E,GAAIS,EAAa,EACjB,CAEI,IAAMC,EAAa,KAAK,MAAM,WAAa,KAAK,MAAM,YAAcD,EAAa7B,IAC3E+B,EAAiBR,EAAWO,EAC5BE,EAAkBR,EAAYM,EACpC,QAASH,EAAI,EAAGA,EAAIf,EAAY,OAAQe,IACxC,CACI,IAAMC,EAAMD,EAAIR,EAChBF,EAAWW,CAAG,GAAKG,EAAiBnB,EAAYe,CAAC,EACjDT,EAAYU,CAAG,GAAKI,EAAkBpB,EAAYe,CAAC,CACvD,CACJ,CACJ,CAGA,GAAIJ,EAAW,EAEX,QAASI,EAAI,EAAGA,EAAIf,EAAY,OAAQe,IAEpCd,EAAWc,EAAIR,CAAU,GAAKI,EAAWX,EAAYe,CAAC,EAG9D,GAAIH,EAAY,EAEZ,QAASG,EAAI,EAAGA,EAAIf,EAAY,OAAQe,IAEpCb,EAAYa,EAAIR,CAAU,GAAKK,EAAYZ,EAAYe,CAAC,CAGpE,CCpHO,SAASM,GAAgBC,EAAQ,GACxC,CACIC,EAAgB,uBAAwBC,EAAc,IAAI,EAC1D,QAASC,EAAI,EAAGA,EAAI,KAAK,kBAAkB,OAAQA,IAE/C,KAAK,kBAAkBA,CAAC,EAAE,aAAaH,CAAK,EAEhD,KAAK,UAAU,UAAW,MAAS,CACvC,CCTO,SAASI,EAAiBC,EAAWC,EAC5C,CACI,IAAIC,EAAM,EACV,QAASC,EAAI,EAAGA,EAAIF,EAAaE,IAE7BD,GAAQF,EAAUA,EAAU,cAAc,GAAKG,EAAI,EAGvD,OAAOD,IAAQ,CACnB,CAQO,SAASE,GAAkBJ,EAAWK,EAAQC,EACrD,CACI,QAASH,EAAI,EAAGA,EAAIG,EAAYH,IAE5BH,EAAUA,EAAU,cAAc,EAAKK,GAAWF,EAAI,EAAM,GAEpE,CAMO,SAASI,EAAUP,EAAWQ,EACrC,CACIR,EAAUA,EAAU,cAAc,EAAIQ,EAAO,IAC7CR,EAAUA,EAAU,cAAc,EAAIQ,GAAQ,CAClD,CAMO,SAASC,GAAWT,EAAWU,EACtC,CACIN,GAAkBJ,EAAWU,EAAO,CAAC,CACzC,CAOO,SAASC,GAAYC,EAAOC,EACnC,CACI,IAAIC,EAAOD,GAAS,EAAKD,EACzB,OAAIE,EAAM,MAECA,EAAM,MAEVA,CACX,CAMO,SAASC,GAAWC,EAC3B,CACI,OAAIA,EAAO,IAEAA,EAAO,IAEXA,CACX,CCnEO,IAAMC,GAAN,KACP,CAKI,OAMA,KAMA,UASA,YAAYC,EAAQC,EAAMC,EAC1B,CACI,KAAK,OAASF,EACd,KAAK,KAAOC,EACZ,KAAK,UAAYC,CACrB,CAEJ,EAQO,SAASC,GAAcC,EAAWC,EAAW,GAAMC,EAAa,GACvE,CACI,IAAIN,EAASO,GAAkBH,EAAW,CAAC,EAEvCH,EAAOO,EAAiBJ,EAAW,CAAC,EACpCJ,IAAW,KAKXC,EAAO,GAKX,IAAIQ,EACJ,OAAIJ,IAEAI,EAAYL,EAAU,MAAMA,EAAU,aAAcA,EAAU,aAAeH,CAAI,IAEjFI,GAAYC,KAEZF,EAAU,cAAgBH,GAG1BA,EAAO,IAAM,GAETG,EAAUA,EAAU,YAAY,IAAM,GAEtCA,EAAU,eAIX,IAAIL,GAAUC,EAAQC,EAAMQ,CAAS,CAChD,CAUO,SAASC,EAAkBV,EAAQE,EAAMS,EAAc,GAAOC,EAAS,GAC9E,CACI,IAAIC,EAAkB,EAClBC,EAAgBd,EAChBe,EAAab,EAAK,OAClBS,GAEAI,IAEJ,IAAIC,EAAcD,EACdH,IAGAC,GAAmB,EACnBG,GAAe,EACfF,EAAgB,QAEpB,IAAIG,EAAYJ,EAAkBE,EAC9BE,EAAY,IAAM,GAGlBA,IAGJ,IAAMC,EAAW,IAAIC,EAAiBF,CAAS,EAE/C,OAAAG,GAAmBF,EAAUJ,CAAa,EAE1CO,GAAWH,EAAUF,CAAW,EAC5BJ,GAGAQ,GAAmBF,EAAUlB,CAAM,EAEvCkB,EAAS,IAAIhB,EAAMW,CAAe,EAC3BK,CACX,CASO,SAASI,GAAoBtB,EAAQuB,EAAQX,EAAS,GAC7D,CACI,IAAIY,EAAa,EACbV,EAAgBd,EAChBe,EAAaQ,EAAO,OAAO,CAACE,EAAKC,IAAMA,EAAE,OAASD,EAAK,CAAC,EACxDT,EAAcD,EACdH,IAGAY,GAAc,EACdR,GAAe,EACfF,EAAgB,QAEpB,IAAIG,EAAYO,EAAaT,EACzBE,EAAY,IAAM,GAGlBA,IAGJ,IAAMC,EAAW,IAAIC,EAAiBF,CAAS,EAE/C,OAAAG,GAAmBF,EAAUJ,CAAa,EAE1CO,GAAWH,EAAUF,CAAW,EAC5BJ,GAGAQ,GAAmBF,EAAUlB,CAAM,EAEvCuB,EAAO,QAAQG,GACf,CACIR,EAAS,IAAIQ,EAAGF,CAAU,EAC1BA,GAAcE,EAAE,MACpB,CAAC,EACMR,CACX,CAOO,SAASS,GAAiBC,EAAYC,EAC7C,CACI,OAAOD,EAAW,KAAKF,GAEfA,EAAE,SAAW,OAEN,IAEXA,EAAE,UAAU,aAAe,EACpBnB,GAAkBmB,EAAE,UAAW,CAAC,IAAMG,EAChD,CACL,CCxLO,SAASC,IAChB,CAEI,IAAIC,EAAWC,GACf,QAAWC,KAAQ,KAAK,YAEpBF,GAAYE,EAAK,WAAW,WAAW,OAASD,GAChDD,GAAYE,EAAK,gBAAgB,OAAO,CAACC,EAAKC,KAG1CA,EAAE,WAAcA,EAAE,WAAW,OAAOC,GAChCA,EAAE,gBAAkBC,EAAe,UACnCD,EAAE,gBAAkBC,EAAe,UACnCD,EAAE,gBAAkBC,EAAe,QACvC,EAGIF,EAAE,aAEFA,EAAE,iBAAiB,IAAIG,EACnBD,EAAe,SACfF,EAAE,SAAS,KAAO,EAAI,KAAK,IAAIA,EAAE,SAAS,IAAK,CAAC,EAChD,EACJ,CAAC,EAEDA,EAAE,aAEFA,EAAE,iBAAiB,IAAIG,EACnBD,EAAe,SACfF,EAAE,SAAS,KAAO,EAAI,KAAK,IAAIA,EAAE,SAAS,IAAK,CAAC,EAChD,EACJ,CAAC,EAGLA,EAAE,cAAc,IAAIG,EAChBD,EAAe,SACf,KAAK,QAAQ,QAAQF,EAAE,MAAM,EAC7B,EACJ,CAAC,EACMA,EAAE,WAAW,OAASH,GAAgBE,GAC9C,CAAC,EAER,IAAMK,EAAW,IAAIC,EAAiBT,CAAQ,EAKxCU,EAAYN,GAClB,CACI,QAAWO,KAAOP,EAAE,WAGhBQ,EAAUJ,EAAUG,EAAI,aAAa,EACrCC,EAAUJ,EAAUG,EAAI,cAAc,CAE9C,EAEA,QAAWE,KAAc,KAAK,YAC9B,CAEIH,EAAUG,EAAW,UAAU,EAC/B,QAAWC,KAAkBD,EAAW,gBAEpCH,EAAUI,CAAc,CAEhC,CAEAC,GAAWP,EAAU,CAAC,EAGtB,IAAMQ,EAAY,IAAIP,EAAiBR,EAAa,EACpDc,GAAWC,EAAW,CAAC,EAEvB,IAAMC,EAAOC,EAAkB,OAAQV,CAAQ,EACzCW,EAAQD,EAAkB,OAAQF,CAAS,EACjD,MAAO,CACH,KAAMC,EACN,KAAME,EACN,aAAc,CAClB,CACJ,CC1EA,IAAMC,GACF,GAgBJ,eAAsBC,GAAQC,EACAC,EACAC,EACAC,EACAC,EACAC,EAE9B,CAGI,IAAIC,EAAe,EACfC,EAAgB,EACdC,EAAc,CAAC,EAGrB,QAAWC,KAAK,KAAK,QACrB,CACQP,GAEA,MAAMO,EAAE,eAAeL,CAAU,EAEjCD,GAEAM,EAAE,aAAaA,EAAE,aAAa,CAAC,EAKnC,IAAMC,EAAID,EAAE,WAAW,EAAI,EAC3BH,IACAD,IAAeI,EAAE,WAAYH,EAAc,KAAK,QAAQ,MAAM,EAE9DK,EACI,sBAAsBL,CAAY,KAAKG,EAAE,UAAU,WAAW,KAAK,QAAQ,MAAM,qBAAqBA,EAAE,YAAY,MACpHG,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,KACdH,EAAE,aAAeG,EAAc,WAAaA,EAAc,aAC1DA,EAAc,IAClB,EAQAL,GAAiBG,EAAE,QAAUD,EAAE,aAAe,EAAI,IAClDD,EAAY,KAAKE,CAAC,CACtB,CAEIH,EAAgB,IAAM,GAEtBA,IAGJ,IAAMM,EAAO,IAAIC,EAAiBP,EAAgBT,EAAmB,EAIrEiB,GAAmBF,EAAM,MAAM,EAE/BG,GAAkBH,EAAMN,EAAgBT,GAAsB,EAAG,CAAC,EAClEiB,GAAmBF,EAAM,MAAM,EAC/BE,GAAmBF,EAAM,MAAM,EAC/BG,GAAkBH,EAAMN,EAAe,CAAC,EAExC,IAAIU,EAAS,EAEb,YAAK,QAAQ,QAAQ,CAACC,EAAQC,IAC9B,CACI,IAAMC,EAAOZ,EAAYW,CAAC,EAC1BN,EAAK,IAAIO,EAAMH,EAASnB,EAAmB,EAC3C,IAAIuB,EACAC,EACAJ,EAAO,cAGPG,EAAcJ,EACdK,EAAYD,EAAcD,EAAK,SAK/BC,EAAcJ,EAAS,EACvBK,EAAYD,EAAcD,EAAK,OAAS,EACxCH,GAAU,IAEdA,GAAUG,EAAK,OACfpB,EAAiB,KAAKqB,CAAW,EAEjCpB,EAAe,KAAKqB,CAAS,CACjC,CAAC,EAEMT,CACX,CC7HA,IAAMU,GAAgB,KASTC,GAAc,CACvB,WAAY,EACZ,YAAa,EACb,WAAY,EACZ,aAAc,EACd,cAAe,MACf,eAAgB,MAChB,cAAe,MACf,gBAAiB,KACrB,EAUaC,GAAN,KACP,CAMI,WAMA,WAMA,YAMA,sBAMA,aAMA,WAMA,qBAMA,mBAMA,aAAe,GAMf,eAAiB,OAMjB,kBAAoB,CAAC,EAKrB,WAAa,OAMb,cAAgB,GAYhB,YACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,CACI,KAAK,WAAaN,EAClB,KAAK,WAAaC,EAClB,KAAK,YAAcC,EACnB,KAAK,sBAAwBC,EAC7B,KAAK,qBAAuBE,EAC5B,KAAK,mBAAqBC,EAC1B,KAAK,WAAaF,CACtB,CAMA,IAAI,UACJ,CACI,OAAO,KAAK,aAAeN,GAAY,aACnC,KAAK,aAAeA,GAAY,YAChC,KAAK,aAAeA,GAAY,YACxC,CAMA,IAAI,UACJ,CACI,OAAO,KAAK,kBAAkB,MAClC,CAQA,WAAWS,EACX,CACI,OAAI,KAAK,cAAgBA,GAAe,CAAC,KAAK,cAEnC,KAAK,eAET,KAAK,YAAY,CAC5B,CAEA,aAAaC,EACb,CACI,IAAIC,EAAY,KAAK,aAAa,EAC5BC,EAAQF,EAAgB,KAAK,WAC7BG,EAAY,IAAI,aAAa,KAAK,MAAMF,EAAU,OAASC,CAAK,CAAC,EACvE,QAASE,EAAI,EAAGA,EAAID,EAAU,OAAQC,IAElCD,EAAUC,CAAC,EAAIH,EAAU,KAAK,MAAMG,GAAK,EAAIF,EAAM,CAAC,EAExDD,EAAYE,EACZ,KAAK,WAAaH,EAElB,KAAK,qBAAuB,KAAK,MAAM,KAAK,qBAAuBE,CAAK,EACxE,KAAK,mBAAqB,KAAK,MAAM,KAAK,mBAAqBA,CAAK,EACpE,KAAK,WAAaD,CACtB,CAKA,MAAM,eAAeI,EACrB,CAEI,GAAI,MAAK,aAKT,GACA,CAEI,IAAIJ,EAAY,KAAK,aAAa,GAC9B,KAAK,WAAa,KAAQ,KAAK,WAAa,QAE5C,KAAK,aAAaZ,EAAa,EAC/BY,EAAY,KAAK,aAAa,GAElC,IAAMK,EAAa,MAAMD,EAAaJ,EAAW,KAAK,UAAU,EAChE,KAAK,kBAAkBK,CAAU,CACrC,OACOC,EACP,CACIC,EAAgB,sBAAsB,KAAK,UAAU,6BAA8BD,CAAC,EACpF,OAAO,KAAK,eAEZ,KAAK,aAAe,EACxB,CAEJ,CAKA,cAAcE,EACd,CAaI,GAZA,KAAK,WAAaA,EACb,KAAK,WAGF,KAAK,eAEL,KAAK,aAAa,aAAe,OACjC,KAAK,aAAa,WAAaA,GAGnC,KAAK,aAAe,SAEnBA,EAAO,OAAU,EAElB,MAAM,IAAI,MAAM,gCAAgC,CAGxD,CAEA,cACA,CACI,GAAI,KAAK,SAAW,EAEhB,MAAM,IAAI,MAAM,iCAAiC,KAAK,kBAAkB,IAAIL,GAAKA,EAAE,cAAc,CAAC,GAAG,EAEzG,KAAK,aAAa,CACtB,CAMA,cACA,CACI,KAAK,cAAcd,GAAY,UAAU,CAC7C,CAQA,gBAAgBoB,EAAQD,EACxB,CAEI,GAAIC,EAAO,aAEP,MAAM,IAAI,MAAM,GAAGA,EAAO,UAAU,iBAAiBA,EAAO,aAAa,UAAU,oBAAoB,EAI3G,GAFA,KAAK,aAAeA,EACpBA,EAAO,aAAe,KAClBD,IAASnB,GAAY,WAErB,KAAK,cAAcA,GAAY,UAAU,EACzCoB,EAAO,cAAcpB,GAAY,WAAW,UAEvCmB,IAASnB,GAAY,YAE1B,KAAK,cAAcA,GAAY,WAAW,EAC1CoB,EAAO,cAAcpB,GAAY,UAAU,UAEtCmB,IAASnB,GAAY,aAE1B,KAAK,cAAcA,GAAY,YAAY,EAC3CoB,EAAO,cAAcpB,GAAY,YAAY,MAI7C,OAAM,IAAI,MAAM,wBAA0BmB,CAAI,CAEtD,CAKA,OAAOE,EACP,CACI,KAAK,kBAAkB,KAAKA,CAAU,CAC1C,CAKA,WAAWA,EACX,CACI,IAAMC,EAAQ,KAAK,kBAAkB,QAAQD,CAAU,EACvD,GAAIC,EAAQ,EACZ,CACIJ,EAAgB,iBAAiBG,EAAW,cAAc,SAAS,KAAK,UAAU,eAAe,EACjG,MACJ,CACA,KAAK,kBAAkB,OAAOC,EAAO,CAAC,CAC1C,CAQA,cACA,CACI,GAAI,KAAK,WAEL,OAAO,KAAK,WAIhB,GACA,CAKI,IAAMC,EADSC,GAAU,OAAO,KAAK,cAAc,EAC5B,KAAK,CAAC,EAC7B,GAAID,IAAY,OAEZ,OAAAL,EAAgB,yBAAyB,KAAK,UAAU,qCAAqC,EACtF,IAAI,aAAa,CAAC,EAI7B,QAASJ,EAAI,EAAGA,EAAIS,EAAQ,OAAQT,IAGhCS,EAAQT,CAAC,EAAI,KAAK,IAAI,GAAI,KAAK,IAAIS,EAAQT,CAAC,EAAG,gBAAiB,CAAC,EAErE,OAAOS,CACX,OACON,EACP,CAEI,OAAAC,EAAgB,yBAAyB,KAAK,UAAU,KAAKD,CAAC,EAAE,EACzD,IAAI,aAAa,KAAK,mBAAqB,CAAC,CACvD,CACJ,CAQA,cACA,CACI,GAAI,KAAK,WAEL,OAAO,KAAK,WAEhB,GAAI,KAAK,aAIL,YAAK,WAAa,KAAK,aAAa,EAC7B,KAAK,WAEhB,MAAM,IAAI,MAAM,sDAAsD,CAC1E,CAMA,aACA,CACI,IAAMQ,EAAO,KAAK,aAAa,EACzBC,EAAS,IAAI,WAAWD,EAAK,MAAM,EACnCE,EAAMF,EAAK,OACjB,QAASX,EAAI,EAAGA,EAAIa,EAAKb,IACzB,CACI,IAAIM,EAASK,EAAKX,CAAC,EAAI,MAEnBM,EAAS,MAETA,EAAS,MAEJA,EAAS,SAEdA,EAAS,QAEbM,EAAOZ,CAAC,EAAIM,CAChB,CACA,OAAO,IAAIQ,EAAiBF,EAAO,MAAM,CAC7C,CAQA,aAAaf,EACb,CACI,KAAK,aAAe,GACpB,OAAO,KAAK,eACZ,KAAK,WAAaA,EAClB,KAAK,cAAgB,EACzB,CAMA,kBAAkBc,EAClB,CACI,KAAK,WAAa,OAClB,KAAK,eAAiBA,EACtB,KAAK,aAAe,GACpB,KAAK,cAAgB,EACzB,CACJ,EC9aO,IAAMI,GAAe,GAEfC,GAAN,cAA8BC,EACrC,CAKI,kBAMA,UAkBA,YACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,CAGI,IAAMC,GAAcH,EAAaZ,IAAgB,EAEjDY,GAAc,CAACZ,GACf,MACIG,EACAK,EACAC,EACAC,EACAE,EACAN,EAAwBF,EAAmB,EAC3CG,EAAsBH,EAAmB,CAC7C,EACA,KAAK,cAAgB,GACrB,KAAK,aAAeW,EACpB,KAAK,WAAaZ,EAElB,KAAK,gBAAkBC,EACvB,KAAK,cAAgBC,EACrB,KAAK,SAAWS,EAChB,IAAME,EAAYH,EAAgB,aAM9B,KAAK,cAGL,KAAK,sBAAwB,KAAK,gBAAkB,EACpD,KAAK,oBAAsB,KAAK,gBAAkB,EAGlD,KAAK,eAAiBA,EAAgB,MAClC,KAAK,gBAAkB,EAAIG,EAC3B,KAAK,cAAgB,EAAIA,CAC7B,GAIIH,aAA2B,cAG3B,KAAK,WAAaA,EAAgB,MAC9B,KAAK,gBAAkB,EACvB,KAAK,cAAgB,CACzB,EACA,KAAK,cAAgB,IAKrB,KAAK,UAAYA,EAAgB,MAC7BG,EAAY,KAAK,gBACjBA,EAAY,KAAK,aACrB,EAIR,KAAK,kBAAoBL,CAC7B,CAKA,gBAAgBM,EAChB,CACI,GAAI,KAAK,cAAgB,CAAC,KAAK,SAE3B,OAEJ,IAAMC,EAASD,EAAa,KAAK,iBAAiB,EAC7CC,EASGA,EAAO,cAEPC,EACI,+BAA+B,KAAK,UAAU,uBAAuBD,EAAO,aAAa,UAAU,GACnGE,EAAc,IAClB,EACA,KAAK,aAAa,GAIlB,KAAK,gBAAgBF,EAAQ,KAAK,UAAU,GAhBhDC,EAAgB,+BAA+B,KAAK,UAAU,qBAAsBC,EAAc,IAAI,EACtG,KAAK,aAAa,EAkB1B,CAKA,aAAaC,EACb,CACI,MAAM,aAAaA,CAAS,CAChC,CAMA,cACA,CACI,GAAI,KAAK,WAEL,OAAO,KAAK,WAIhB,GAAI,KAAK,aAEL,OAAO,MAAM,aAAa,EAI9B,IAAMC,EAAa,KAAK,cAAgB,KAAK,gBAC7C,GAAIA,EAAa,EAEb,OAAAC,EAAgB,kBAAkB,KAAK,UAAU,qBAAqBD,CAAU,EAAE,EAC3E,IAAI,aAAa,CAAC,EAM7B,IAAID,EAAY,IAAI,aAAaC,EAAa,CAAC,EAC3CE,EAAoB,IAAI,WACxB,KAAK,UAAU,MACnB,EAGA,QAASC,EAAI,EAAGA,EAAID,EAAkB,OAAQC,IAE1CJ,EAAUI,CAAC,EAAID,EAAkBC,CAAC,EAAI,MAG1C,YAAK,WAAaJ,EACXA,CAEX,CAMA,WAAWK,EACX,CACI,OAAI,KAAK,eAAiB,KAAK,eAGpB,MAAM,WAAWA,CAAW,EAGhC,KAAK,SAChB,CACJ,EASO,SAASC,GAAYC,EAAoBC,EAAeC,EAAc,GAC7E,CAII,IAAIC,EAAU,CAAC,EACXC,EAAQ,EACZ,KAAOJ,EAAmB,UAAU,OAASA,EAAmB,UAAU,cAC1E,CACI,IAAMK,EAASC,GAAWF,EAAOJ,EAAmB,UAAWC,CAAa,EAC5EE,EAAQ,KAAKE,CAAM,EACnBD,GACJ,CAEA,OAAAD,EAAQ,IAAI,EAGRD,GAEAC,EAAQ,QAAQI,GAAKA,EAAE,gBAAgBJ,CAAO,CAAC,EAG5CA,CACX,CASA,SAASG,GAAWF,EAAOI,EAAkBC,EAC7C,CAGI,IAAIlC,EAAamC,GAAkBF,EAAkB,EAAE,EAGnDhC,EAAmBmC,EAAiBH,EAAkB,CAAC,EAAI,EAG3D/B,EAAiBkC,EAAiBH,EAAkB,CAAC,EAAI,EAGzD9B,EAAuBiC,EAAiBH,EAAkB,CAAC,EAG3D7B,EAAqBgC,EAAiBH,EAAkB,CAAC,EAGzD5B,EAAa+B,EAAiBH,EAAkB,CAAC,EAGjD3B,EAAc2B,EAAiBA,EAAiB,cAAc,EAC9D3B,EAAc,MAGdA,EAAc,IAIlB,IAAIC,EAAwB8B,GAAWJ,EAAiBA,EAAiB,cAAc,CAAC,EAIpFK,EAAaF,EAAiBH,EAAkB,CAAC,EACjDxB,EAAa2B,EAAiBH,EAAkB,CAAC,EAGrD,OAAO,IAAInC,GACPE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA+B,EACA7B,EACAyB,EACAL,CACJ,CACJ,CChTO,SAASU,GAAQC,EAAkBC,EAC1C,CAEI,IAAMC,EAAW,IAAgB,KAAK,QAAQ,OAAS,GACjDC,EAAW,IAAIC,EAAiBF,CAAQ,EAExCG,EAAY,IAAID,EAAiBF,CAAQ,EAC3CI,EAAgB,EACpB,KAAK,QAAQ,QAAQ,CAACC,EAAQC,IAC9B,CAEIC,GAAmBN,EAAUI,EAAO,WAAW,UAAU,EAAG,EAAE,EAAG,EAAE,EACnEE,GAAmBJ,EAAWE,EAAO,WAAW,UAAU,EAAE,EAAG,EAAE,EAEjE,IAAMG,EAAUV,EAAiBQ,CAAK,EACtCG,GAAWR,EAAUO,CAAO,EAC5BL,EAAU,cAAgB,EAE1B,IAAMO,EAAQX,EAAeO,CAAK,EAClCG,GAAWR,EAAUS,CAAK,EAC1BP,EAAU,cAAgB,EAE1B,IAAIQ,EAAYN,EAAO,qBAAuBG,EAC1CI,EAAUP,EAAO,mBAAqBG,EACtCH,EAAO,eAGPM,GAAaH,EACbI,GAAWJ,GAEfC,GAAWR,EAAUU,CAAS,EAC9BF,GAAWR,EAAUW,CAAO,EAE5BH,GAAWR,EAAUI,EAAO,UAAU,EAEtCJ,EAASA,EAAS,cAAc,EAAII,EAAO,YAC3CJ,EAASA,EAAS,cAAc,EAAII,EAAO,sBAE3CF,EAAU,cAAgB,GAE1B,IAAMU,EAAkB,KAAK,QAAQ,QAAQR,EAAO,YAAY,EAChES,EAAUb,EAAU,KAAK,IAAI,EAAGY,CAAe,EAAI,KAAM,EACzDC,EAAUX,EAAW,KAAK,IAAI,EAAGU,CAAe,GAAK,EAAE,EACvDT,EAAgB,KAAK,IAAIA,EAAeS,CAAe,EAEvD,IAAIE,EAAOV,EAAO,WACdA,EAAO,eAEPU,GAAQC,IAEZF,EAAUb,EAAUc,CAAI,EACxBZ,EAAU,cAAgB,CAC9B,CAAC,EAGDI,GAAmBN,EAAU,MAAO,EAAY,EAChDM,GAAmBJ,EAAW,MAAO,EAAY,EACjD,IAAMc,EAAOC,EAAkB,OAAQjB,CAAQ,EACzCkB,EAAQD,EAAkB,OAAQf,CAAS,EACjD,MAAO,CACH,KAAMc,EACN,KAAME,EACN,aAAcf,CAClB,CACJ,CCnEO,SAASgB,IAChB,CAGI,IAAIC,EAAWC,GACf,QAAWC,KAAQ,KAAK,YAEpBF,GAAYE,EAAK,WAAW,WAAW,OAASD,GAEhDD,GAAYE,EAAK,gBAAgB,OAAO,CAACC,EAAKC,IAAMA,EAAE,WAAW,OAASH,GAAgBE,EAAK,CAAC,EAEpG,IAAME,EAAW,IAAIC,EAAiBN,CAAQ,EAKxCO,EAAYH,GAClB,CACI,QAAWI,KAAOJ,EAAE,WAEhBK,EAAUJ,EAAUG,EAAI,cAAc,CAAC,EACvCC,EAAUJ,EAAUG,EAAI,oBAAoB,EAC5CC,EAAUJ,EAAUG,EAAI,eAAe,EACvCC,EAAUJ,EAAUG,EAAI,cAAc,CAAC,EACvCC,EAAUJ,EAAUG,EAAI,aAAa,CAE7C,EAEA,QAAWN,KAAQ,KAAK,YACxB,CAEIK,EAAUL,EAAK,UAAU,EACzB,QAAWQ,KAAkBR,EAAK,gBAE9BK,EAAUG,CAAc,CAEhC,CAGAC,GAAkBN,EAAU,EAAGJ,EAAa,EAG5C,IAAMW,EAAY,IAAIN,EAAiBL,EAAa,EACpDU,GAAkBC,EAAW,EAAGX,EAAa,EAE7C,IAAMY,EAAOC,EAAkB,OAAQT,CAAQ,EACzCU,EAAQD,EAAkB,OAAQF,CAAS,EACjD,MAAO,CACH,KAAMC,EACN,KAAME,EACN,aAAc,CAClB,CACJ,CCzDA,IAAMC,GAAW,EAMV,SAASC,IAChB,CAEI,IAAMC,EAAW,KAAK,YAAY,OAC9B,CAACC,EAAKC,KAEDA,EAAE,gBAAgB,OAAS,GAAKJ,GAAWG,EAChDH,EACJ,EACMK,EAAW,IAAIC,EAAiBJ,CAAQ,EAExCK,EAAY,IAAID,EAAiBJ,CAAQ,EAC3CM,EAAiB,EACjBC,EAAiB,EAIfC,EAAYC,GAClB,CAEIC,EAAUP,EAAUG,EAAiB,KAAM,EAC3CI,EAAUP,EAAUI,EAAiB,KAAM,EAE3CG,EAAUL,EAAWC,GAAkB,EAAE,EACzCI,EAAUL,EAAWE,GAAkB,EAAE,EACzCD,GAAkBG,EAAE,WAAW,OAC/BF,GAAkBE,EAAE,WAAW,MACnC,EAEA,QAAWE,KAAQ,KAAK,YACxB,CACIH,EAAUG,EAAK,UAAU,EACzB,QAAWC,KAAQD,EAAK,gBAEpBH,EAAUI,CAAI,CAEtB,CAEAF,EAAUP,EAAUG,EAAiB,KAAM,EAC3CI,EAAUP,EAAUI,EAAiB,KAAM,EAC3CG,EAAUL,EAAWC,GAAkB,EAAE,EACzCI,EAAUL,EAAWE,GAAkB,EAAE,EACzC,IAAMK,EAAOC,EAAkB,OAAQV,CAAQ,EACzCW,EAAQD,EAAkB,OAAQR,CAAS,EACjD,MAAO,CACH,KAAMO,EACN,KAAME,EACN,aAAc,KAAK,IAAIR,EAAgBC,CAAc,CACzD,CACJ,CCtDA,IAAMQ,GAAY,GAMX,SAASC,IAChB,CACI,IAAMC,EAAW,KAAK,YAAY,OAASF,GAAYA,GACjDG,EAAW,IAAIC,EAAiBF,CAAQ,EAExCG,EAAY,IAAID,EAAiBF,CAAQ,EAE3CI,EAAkB,EACtB,QAAWC,KAAQ,KAAK,YAEpBC,GAAmBL,EAAUI,EAAK,eAAe,UAAU,EAAG,EAAE,EAAG,EAAE,EACrEC,GAAmBH,EAAWE,EAAK,eAAe,UAAU,EAAE,EAAG,EAAE,EACnEE,EAAUN,EAAUG,EAAkB,KAAM,EAC5CG,EAAUJ,EAAWC,GAAmB,EAAE,EAC1CA,GAAmBC,EAAK,gBAAgB,OAAS,EAGrDC,GAAmBL,EAAU,MAAO,EAAE,EACtCK,GAAmBH,EAAW,MAAO,EAAE,EACvCI,EAAUN,EAAUG,EAAkB,KAAM,EAC5CG,EAAUJ,EAAWC,GAAmB,EAAE,EAE1C,IAAMC,EAAOG,EAAkB,OAAQP,CAAQ,EACzCQ,EAAQD,EAAkB,OAAQL,CAAS,EAEjD,MAAO,CACH,KAAME,EACN,KAAMI,EACN,aAAcL,CAClB,CACJ,CC9BO,SAASM,IAChB,CAGI,IAAIC,EAAWC,GACf,QAAWC,KAAU,KAAK,QAEtBF,GAAYE,EAAO,WAAW,WAAW,OAASD,GAClDD,GAAYE,EAAO,YAAY,OAAO,CAACC,EAAMC,KAGzCA,EAAE,WAAaA,EAAE,WAAW,OAAOC,GAC/BA,EAAE,gBAAkBC,EAAe,YACnCD,EAAE,gBAAkBC,EAAe,UACnCD,EAAE,gBAAkBC,EAAe,QACvC,EAEIF,EAAE,aAEFA,EAAE,iBAAiB,IAAIG,EACnBD,EAAe,SACfF,EAAE,SAAS,KAAO,EAAI,KAAK,IAAIA,EAAE,SAAS,IAAK,CAAC,EAChD,EACJ,CAAC,EAEDA,EAAE,aAEFA,EAAE,iBAAiB,IAAIG,EACnBD,EAAe,SACfF,EAAE,SAAS,KAAO,EAAI,KAAK,IAAIA,EAAE,SAAS,IAAK,CAAC,EAChD,EACJ,CAAC,EAGLA,EAAE,cAAc,IAAIG,EAChBD,EAAe,WACf,KAAK,YAAY,QAAQF,EAAE,UAAU,EACrC,EACJ,CAAC,EACMA,EAAE,WAAW,OAASH,GAAgBE,GAC9C,CAAC,EAER,IAAMK,EAAW,IAAIC,EAAiBT,CAAQ,EAKxCU,EAAYN,GAClB,CACI,QAAWO,KAAOP,EAAE,WAGhBQ,EAAUJ,EAAUG,EAAI,aAAa,EACrCC,EAAUJ,EAAUG,EAAI,cAAc,CAE9C,EACA,QAAWT,KAAU,KAAK,QAC1B,CAEIQ,EAAUR,EAAO,UAAU,EAC3B,QAAWW,KAAQX,EAAO,YAEtBQ,EAAUG,CAAI,CAEtB,CAEAC,GAAWN,EAAU,CAAC,EAGtB,IAAMO,EAAY,IAAIN,EAAiBR,EAAa,EACpDa,GAAWC,EAAW,CAAC,EAEvB,IAAMC,EAAOC,EAAkB,OAAQT,CAAQ,EAEzCU,EAAQD,EAAkB,OAAQF,CAAS,EACjD,MAAO,CACH,KAAMC,EACN,KAAME,EACN,aAAc,CAClB,CACJ,CClFO,SAASC,IAChB,CAGI,IAAIC,EAAWC,GACf,QAAWC,KAAU,KAAK,QAEtBF,GAAYE,EAAO,WAAW,WAAW,OAASD,GAClDD,GAAYE,EAAO,YAAY,OAAO,CAACC,EAAKC,IAAMA,EAAE,WAAW,OAASH,GAAgBE,EAAK,CAAC,EAElG,IAAME,EAAW,IAAIC,EAAiBN,CAAQ,EAKxCO,EAAYH,GAClB,CACI,QAAWI,KAAOJ,EAAE,WAEhBK,EAAUJ,EAAUG,EAAI,cAAc,CAAC,EACvCC,EAAUJ,EAAUG,EAAI,oBAAoB,EAC5CC,EAAUJ,EAAUG,EAAI,eAAe,EACvCC,EAAUJ,EAAUG,EAAI,cAAc,CAAC,EACvCC,EAAUJ,EAAUG,EAAI,aAAa,CAE7C,EAGA,QAAWN,KAAU,KAAK,QAC1B,CAEIK,EAAUL,EAAO,UAAU,EAC3B,QAAWQ,KAAQR,EAAO,YAEtBK,EAAUG,CAAI,CAEtB,CAGAC,GAAkBN,EAAU,EAAGJ,EAAa,EAG5C,IAAMW,EAAY,IAAIN,EAAiBL,EAAa,EACpDU,GAAkBC,EAAW,EAAGX,EAAa,EAE7C,IAAMY,EAAOC,EAAkB,OAAQT,CAAQ,EACzCU,EAAQD,EAAkB,OAAQF,CAAS,EACjD,MAAO,CACH,KAAMC,EACN,KAAME,EACN,aAAc,CAClB,CACJ,CCzDA,IAAMC,GAAW,EAMV,SAASC,IAChB,CAEI,IAAMC,EAAW,KAAK,QAAQ,OAAO,CAACC,EAAKC,KAEtCA,EAAE,YAAY,OAAS,GAAKJ,GAAWG,EAAKH,EAAQ,EACnDK,EAAW,IAAIC,EAAiBJ,CAAQ,EAExCK,EAAY,IAAID,EAAiBJ,CAAQ,EAC3CM,EAAiB,EACjBC,EAAiB,EAKfC,EAAYC,GAClB,CACIC,EAAUP,EAAUG,EAAiB,KAAM,EAC3CI,EAAUP,EAAUI,EAAiB,KAAM,EAC3CG,EAAUL,EAAWC,GAAkB,EAAE,EACzCI,EAAUL,EAAWE,GAAkB,EAAE,EACzCD,GAAkBG,EAAE,WAAW,OAC/BF,GAAkBE,EAAE,WAAW,MACnC,EAEA,QAAWE,KAAU,KAAK,QAC1B,CAEIH,EAAUG,EAAO,UAAU,EAC3B,QAAWC,KAAQD,EAAO,YAEtBH,EAAUI,CAAI,CAEtB,CAEAF,EAAUP,EAAUG,CAAc,EAClCI,EAAUP,EAAUI,CAAc,EAClCG,EAAUL,EAAWC,CAAc,EACnCI,EAAUL,EAAWE,CAAc,EACnC,IAAMK,EAAOC,EAAkB,OAAQV,CAAQ,EACzCW,EAAOD,EAAkB,OAAQR,CAAS,EAChD,MAAO,CACH,KAAMO,EACN,KAAME,EACN,aAAc,KAAK,IAAIR,EAAgBC,CAAc,CACzD,CACJ,CCnDA,IAAMQ,GAAY,GAMX,SAASC,IAChB,CACI,IAAMC,EAAW,KAAK,QAAQ,OAASF,GAAYA,GAC7CG,EAAW,IAAIC,EAAiBF,CAAQ,EAExCG,EAAY,IAAID,EAAiBF,CAAQ,EAE3CI,EAAc,EAClB,QAAWC,KAAU,KAAK,QAEtBC,GAAmBL,EAAUI,EAAO,WAAW,UAAU,EAAG,EAAE,EAAG,EAAE,EACnEC,GAAmBH,EAAWE,EAAO,WAAW,UAAU,EAAE,EAAG,EAAE,EAEjEE,EAAUN,EAAUI,EAAO,OAAO,EAClCE,EAAUN,EAAUI,EAAO,IAAI,EAC/BE,EAAUN,EAAUG,EAAc,KAAM,EAExCD,EAAU,cAAgB,EAC1BI,EAAUJ,EAAWC,GAAe,EAAE,EAGtCI,GAAWP,EAAUI,EAAO,OAAO,EACnCG,GAAWP,EAAUI,EAAO,KAAK,EACjCG,GAAWP,EAAUI,EAAO,UAAU,EAEtCF,EAAU,cAAgB,GAE1BC,GAAeC,EAAO,YAAY,OAAS,EAG/CC,GAAmBL,EAAU,MAAO,EAAE,EACtCA,EAAS,cAAgB,EACzBM,EAAUN,EAAUG,EAAc,KAAM,EACxCH,EAAS,cAAgB,GAEzBK,GAAmBH,EAAW,MAAO,EAAE,EACvCA,EAAU,cAAgB,EAC1BI,EAAUJ,EAAWC,GAAe,EAAE,EACtCD,EAAU,cAAgB,GAE1B,IAAMM,EAAOC,EAAkB,OAAQT,CAAQ,EAEzCU,EAAQD,EAAkB,OAAQP,CAAS,EAEjD,MAAO,CACH,KAAMM,EACN,KAAME,EACN,aAAcP,CAClB,CACJ,CCtDO,SAASQ,GAAiBC,EAAKC,EACtC,CACQD,IAAQ,SAERA,EAAM,CAAC,GAEX,QAAWE,KAAOD,EAEVA,EAAO,eAAeC,CAAG,GAAK,EAAEA,KAAOF,KAEvCA,EAAIE,CAAG,EAAID,EAAOC,CAAG,GAG7B,OAAOF,CACX,CC8BA,IAAMG,GAAwB,CAC1B,SAAU,GACV,mBAAoB,GACpB,oBAAqB,OACrB,iBAAkB,OAClB,uBAAwB,GACxB,oBAAqB,GACrB,WAAY,EAChB,EAQA,eAAsBC,GAAMC,EAAUF,GACtC,CAEI,GADAE,EAAUC,GAAiBD,EAASF,EAAqB,EACrDE,GAAS,SACb,CACI,GAAI,OAAOA,GAAS,qBAAwB,WAExC,MAAM,IAAI,MAAM,2DAA2D,EAE/E,GAAIA,GAAS,WAET,MAAM,IAAI,MAAM,+CAA+C,CAEvE,CACAE,GACI,wBACAC,EAAc,IAClB,EACAC,EACI,oBAAoBJ,GAAS,UAAY,OAAO,iBAAiBA,GAAS,oBAAsB,MAAM,GACtGG,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,UAClB,EACAC,EACI,oBACAD,EAAc,IAClB,EAKA,IAAME,EAAa,CAAC,EACpB,KAAK,cAAc,KAAU,eACzBL,GAAS,UAAY,KAAK,QAAQ,KAAKM,GAAKA,EAAE,YAAY,KAE1D,KAAK,cAAc,KAAU,OAE7BN,GAAS,aAET,KAAK,cAAc,KAAU,OAG7BA,GAAS,wBAGT,KAAK,cAAc,KAAU,GAAG,KAAK,kBAAkB,MAAM,cAC7D,KAAK,wBAA0B,IAI/B,OAAO,KAAK,cAAc,KAG9B,OAAW,CAACO,EAAMC,CAAI,IAAK,OAAO,QAAQ,KAAK,aAAa,EAExD,GAAID,IAAS,QAAUA,IAAS,OAChC,CACI,IAAME,EAAQ,SAASD,EAAK,MAAM,GAAG,EAAE,CAAC,CAAC,EACnCE,EAAQ,SAASF,EAAK,MAAM,GAAG,EAAE,CAAC,CAAC,EACnCG,EAAS,IAAIC,EAAiB,CAAC,EACrCC,EAAUF,EAAQF,CAAK,EACvBI,EAAUF,EAAQD,CAAK,EACvBL,EAAW,KAAKS,EAAkBP,EAAMI,CAAM,CAAC,CACnD,SACSJ,IAAS,OAClB,CACI,IAAMQ,EAAO,KAAK,kBAClBX,EACI,eAAeW,EAAK,MAAM,2BAC1BZ,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EACA,IAAIa,EAAWC,GAAgBF,EAAK,OAASE,GACvCC,EAAW,IAAIN,EAAiBI,CAAQ,EAC9C,QAAWG,KAAOJ,EAEdF,EAAUK,EAAUC,EAAI,cAAc,CAAC,EACvCN,EAAUK,EAAUC,EAAI,oBAAoB,EAC5CN,EAAUK,EAAUC,EAAI,eAAe,EACvCN,EAAUK,EAAUC,EAAI,cAAc,CAAC,EACvCN,EAAUK,EAAUC,EAAI,aAAa,EAIzCC,GAAkBF,EAAU,EAAGD,EAAa,EAE5CZ,EAAW,KAAKS,EAAkBP,EAAMW,CAAQ,CAAC,CACrD,MAGIb,EAAW,KAAKS,EACZP,EACAc,GAAeb,EAAM,GAAM,EAAI,CACnC,CAAC,EAITJ,EACI,oBACAD,EAAc,IAClB,EAEA,IAAMmB,EAAmB,CAAC,EACpBC,EAAiB,CAAC,EAClBC,EAAY,MAAMC,GAAQ,KAC5B,KACAH,EACAC,EACAvB,EAAQ,SACRA,EAAQ,WACRA,GAAS,oBACTA,GAAS,gBACb,EAEAI,EACI,oBACAD,EAAc,IAClB,EAIAC,EACI,oBACAD,EAAc,IAClB,EACA,IAAMuB,EAAYC,GAAQ,KAAK,KAAML,EAAkBC,CAAc,EACrEnB,EACI,oBACAD,EAAc,IAClB,EACA,IAAMyB,EAAYC,GAAQ,KAAK,IAAI,EACnCzB,EACI,oBACAD,EAAc,IAClB,EACA,IAAM2B,EAAYC,GAAQ,KAAK,IAAI,EACnC3B,EACI,oBACAD,EAAc,IAClB,EACA,IAAM6B,EAAYC,GAAQ,KAAK,IAAI,EACnC7B,EACI,oBACAD,EAAc,IAClB,EACA,IAAM+B,EAAYC,GAAQ,KAAK,IAAI,EACnC/B,EACI,oBACAD,EAAc,IAClB,EAEA,IAAMiC,EAAYC,GAAQ,KAAK,IAAI,EACnCjC,EACI,oBACAD,EAAc,IAClB,EACA,IAAMmC,EAAYC,GAAQ,KAAK,IAAI,EACnCnC,EACI,oBACAD,EAAc,IAClB,EACA,IAAMqC,EAAYC,GAAQ,KAAK,IAAI,EACnCrC,EACI,oBACAD,EAAc,IAClB,EAKA,IAAMuC,EAAS,CAJGC,GAAQ,KAAK,IAAI,EAIRH,EAAWF,EAAWF,EAAWF,EAAWF,EAAWF,EAAWF,EAAWF,CAAS,EAE3GkB,EAAYC,GACd,OACAH,EAAO,IAAII,GAAKA,EAAE,IAAI,EACtB,EACJ,EACMC,EAAW,KAAK,IAClB,GAAGL,EAAO,IAAII,GAAKA,EAAE,YAAY,CACrC,EASA,GAPkB9C,EAAQ,sBACtB+C,EAAW,OACR,KAAK,QAAQ,KAAKC,GAAKA,EAAE,WAAW,OAAS,EAAE,GAC/C,KAAK,YAAY,KAAKC,GAAKA,EAAE,eAAe,OAAS,EAAE,GACvD,KAAK,QAAQ,KAAK3C,GAAKA,EAAE,WAAW,OAAS,EAAE,GAItD,CACIF,EACI,0CAA0C2C,CAAQ,GAClD5C,EAAc,KACdA,EAAc,KAClB,EAEA,IAAM+C,EAAaL,GAAoB,OAAQH,EAAO,IAAII,GAAKA,EAAE,IAAI,EAAG,EAAI,EAC5EzC,EAAW,KAAK6C,CAAU,CAC9B,CAEA,IAAMC,EAAYN,GAAoB,OAAQxC,EAAY,EAAI,EAC9DD,EACI,+BACAD,EAAc,IAClB,EAEA,IAAMiD,EAAOP,GACT,OACA,CAACxB,GAAe,MAAM,EAAG8B,EAAW3B,EAAWoB,CAAS,CAC5D,EACA,OAAAxC,EACI,2CAA2CgD,EAAK,MAAM,GACtDjD,EAAc,KACdA,EAAc,UAClB,EACAkD,EAAoB,EACbD,CACX,CCrRO,IAAME,GAAN,KACP,CAMI,SAAW,CAAE,IAAK,GAAI,IAAK,GAAI,EAO/B,SAAW,CAAE,IAAK,GAAI,IAAK,GAAI,EAM/B,WAAa,CAAC,EAKd,WAAa,CAAC,EAKd,IAAI,aACJ,CACI,OAAO,KAAK,SAAS,MAAQ,EACjC,CAKA,IAAI,aACJ,CACI,OAAO,KAAK,SAAS,MAAQ,EACjC,CAMA,iBAAiBC,EACjB,CACI,KAAK,WAAW,QAAQA,CAAS,CACrC,CAOA,aAAaC,EAAMC,EACnB,CACI,OAAQD,EACR,CACI,KAAKE,EAAe,SAChB,MAAM,IAAI,MAAM,iBAAiB,EACrC,KAAKA,EAAe,WAChB,MAAM,IAAI,MAAM,qBAAqB,EAEzC,KAAKA,EAAe,SACpB,KAAKA,EAAe,SAChB,MAAM,IAAI,MAAM,wBAAwB,CAChD,CACA,IAAIH,EAAY,KAAK,WAAW,KAAKI,GAAKA,EAAE,gBAAkBH,CAAI,EAC9DD,EAEAA,EAAU,eAAiBE,EAI3B,KAAK,cAAc,IAAIG,EAAUJ,EAAMC,CAAK,CAAC,CAErD,CAKA,iBAAiBI,EACjB,CACIA,EAAW,QAAQF,GACnB,CACI,OAAQA,EAAE,cACV,CACI,QACI,KAAK,WAAW,KAAKA,CAAC,EACtB,MAEJ,KAAKD,EAAe,SAChB,KAAK,SAAS,IAAMC,EAAE,eAAiB,IACvC,KAAK,SAAS,IAAOA,EAAE,gBAAkB,EAAK,IAC9C,MAEJ,KAAKD,EAAe,SAChB,KAAK,SAAS,IAAMC,EAAE,eAAiB,IACvC,KAAK,SAAS,IAAOA,EAAE,gBAAkB,EAAK,GACtD,CACJ,CAAC,CACL,CAKA,iBAAiBG,EACjB,CACI,KAAK,WAAW,KAAK,GAAGA,CAAU,CACtC,CAOA,kBAAkBC,EAAeC,EACjC,CACI,OAAO,KAAK,WAAW,KAAKL,GAAKA,EAAE,gBAAkBI,CAAa,GAAG,gBAAkBC,CAC3F,CAKA,SAASC,EACT,CACI,KAAK,WAAa,CAAC,GAAGA,EAAK,UAAU,EACrC,KAAK,WAAaA,EAAK,WAAW,IAAIC,GAAKC,GAAU,KAAKD,CAAC,CAAC,EAC5D,KAAK,SAAW,CAAE,GAAGD,EAAK,QAAS,EACnC,KAAK,SAAW,CAAE,GAAGA,EAAK,QAAS,CACvC,CACJ,EC7IO,IAAMG,GAAN,cAA8BC,EACrC,CAEA,ECHO,IAAMC,GAAN,cAAkCC,EACzC,CAKI,iBAMA,OAKA,SAKA,YAAYC,EACZ,CACI,MAAM,EACN,KAAK,iBAAmBA,EACxB,KAAK,SAAWA,EAAW,QAC/B,CAKA,UAAUC,EACV,CACI,KAAK,OAASA,EACdA,EAAO,OAAO,KAAK,gBAAgB,CACvC,CAEA,YACA,CACI,KAAK,OAAO,WAAW,KAAK,gBAAgB,CAChD,CACJ,ECxCO,IAAMC,GAAN,KACP,CAKI,eAAiB,GAOjB,gBAAkB,CAAC,EAMnB,WAAa,IAAIC,GAOjB,cAAgB,CAAC,EAKjB,IAAI,UACJ,CACI,OAAO,KAAK,cAAc,MAC9B,CAKA,YACA,CACI,IAAMC,EAAO,IAAIC,GAAoB,IAAI,EACzC,YAAK,gBAAgB,KAAKD,CAAI,EACvBA,CACX,CAKA,OAAOE,EACP,CACI,KAAK,cAAc,KAAKA,CAAM,EAC9B,KAAK,gBAAgB,QAAQC,GAAKA,EAAE,UAAU,CAClD,CAKA,WAAWD,EACX,CACI,IAAME,EAAQ,KAAK,cAAc,QAAQF,CAAM,EAC/C,GAAIE,EAAQ,EACZ,CACIC,EAAgB,iBAAiBH,EAAO,UAAU,SAAS,KAAK,cAAc,eAAe,EAC7F,MACJ,CACA,KAAK,cAAc,OAAOE,EAAO,CAAC,EAClC,KAAK,gBAAgB,QAAQD,GAAKA,EAAE,UAAU,CAClD,CAEA,mBACA,CACI,KAAK,gBAAkB,KAAK,gBAAgB,OAAOA,GACnD,CACI,IAAMG,EAAQH,EAAE,SAAW,EAC3B,OAAKG,GAEDH,EAAE,WAAW,EAEVG,CACX,CAAC,CACL,CAGA,kBACA,CACI,GAAI,KAAK,SAAW,EAEhB,MAAM,IAAI,MAAM,gDAAgD,KAAK,cAAc,IAAIC,GAAKA,EAAE,UAAU,CAAC,GAAG,EAEhH,KAAK,gBAAgB,QAAQJ,GAAKA,EAAE,WAAW,CAAC,CACpD,CAOA,WAAWC,EAAOI,EAAQ,GAC1B,CACI,IAAMR,EAAO,KAAK,gBAAgBI,CAAK,EAEvC,OADAJ,EAAK,UAAY,EACbA,EAAK,SAAW,GAAKQ,GAErBR,EAAK,WAAW,EAChB,KAAK,gBAAgB,OAAOI,EAAO,CAAC,EAC7B,IAEJ,EACX,CACJ,EC7GA,IAAMK,GAAqB,IAAI,IAAI,CAC/BC,EAAe,SACfA,EAAe,SACfA,EAAe,WACfA,EAAe,eACfA,EAAe,QACfA,EAAe,YACfA,EAAe,qBACfA,EAAe,2BACfA,EAAe,mBACfA,EAAe,yBACfA,EAAe,iBACfA,EAAe,uBACfA,EAAe,cACfA,EAAe,qBACfA,EAAe,mBACfA,EAAe,SACfA,EAAe,WACfA,EAAe,mBACfA,EAAe,oBACfA,EAAe,mBACfA,EAAe,mBACnB,CAAC,EAQM,SAASC,GAAaC,EAAQC,EAAY,GACjD,CAKI,SAASC,EAAUC,EAAMC,EACzB,CACID,EAAK,KAAK,GAAGC,EAAM,OAAOC,GAAK,CAACF,EAAK,KAAKG,GAAMA,EAAG,gBAAkBD,EAAE,aAAa,CAAC,CAAC,CAC1F,CAOA,SAASE,EAAeC,EAAIC,EAC5B,CACI,MAAO,CAAE,IAAK,KAAK,IAAID,EAAG,IAAKC,EAAG,GAAG,EAAG,IAAK,KAAK,IAAID,EAAG,IAAKC,EAAG,GAAG,CAAE,CAC1E,CAMA,SAASC,EAAcP,EAAMC,EAC7B,CACID,EAAK,KAAK,GAAGC,EAAM,OAAOO,GAAK,CAACR,EAAK,KAAKS,GAAMC,GAAU,YAAYF,EAAGC,CAAE,CAAC,CAAC,CAAC,CAClF,CAEA,IAAME,EAAmB,IAAIC,GAKvBC,EAAyB,CAAC,EAI1BC,EAAyB,CAAC,EAE1BC,EAAmBlB,EAAO,WAChCgB,EAAuB,KAAK,GAAGE,EAAiB,UAAU,EAC1DD,EAAuB,KAAK,GAAGC,EAAiB,UAAU,EAC1D,IAAIC,EAAuBD,EAAiB,SACxCE,EAAuBF,EAAiB,SAE5C,QAAWG,KAAcrB,EAAO,YAChC,CAEI,IAAIsB,EAAqBD,EAAW,SAC/BA,EAAW,cAEZC,EAAqBH,GAEzB,IAAII,EAAqBF,EAAW,SAC/BA,EAAW,cAEZE,EAAqBH,GAGzB,IAAMI,EAAmBH,EAAW,WAAW,IAAIhB,GAAK,IAAIoB,EAAUpB,EAAE,cAAeA,EAAE,cAAc,CAAC,EACxGH,EAAUsB,EAAkBR,CAAsB,EAClD,IAAMU,EAAmB,CAAC,GAAGL,EAAW,UAAU,EAClDX,EAAcgB,EAAkBT,CAAsB,EACtD,IAAMU,EAAaN,EAAW,WACxBO,EAASD,EAAW,gBAIpBE,EAAuB,CAAC,EAIxBC,EAAuB,CAAC,EACxBC,EAAiBJ,EAAW,WAClCE,EAAqB,KAAK,GAAGE,EAAe,UAAU,EACtDD,EAAqB,KAAK,GAAGC,EAAe,UAAU,EACtD,IAAIC,EAAqBD,EAAe,SACpCE,EAAqBF,EAAe,SAExC,QAAWG,KAAYN,EACvB,CAEI,IAAIO,EAAmBD,EAAS,SAC3BA,EAAS,cAEVC,EAAmBH,GAEvB,IAAII,EAAmBF,EAAS,SAUhC,GATKA,EAAS,cAEVE,EAAmBH,GAEvBE,EAAmB5B,EAAe4B,EAAkBb,CAAkB,EACtEc,EAAmB7B,EAAe6B,EAAkBb,CAAkB,EAIlEY,EAAiB,IAAMA,EAAiB,KAAOC,EAAiB,IAAMA,EAAiB,IAEvF,SAIJ,IAAMC,GAAiBH,EAAS,WAAW,IAAI7B,GAAK,IAAIoB,EAAUpB,EAAE,cAAeA,EAAE,cAAc,CAAC,EACpGH,EAAUmC,GAAgBR,CAAoB,EAC9C,IAAMS,GAAiB,CAAC,GAAGJ,EAAS,UAAU,EAC9CxB,EAAc4B,GAAgBR,CAAoB,EAMlD,IAAMS,GAAe,CAAC,GAAGD,EAAc,EACvC,QAAWE,KAAOd,EAClB,CACI,IAAMe,EAAmBF,GAAa,UAClC5B,GAAKE,GAAU,YAAY2B,EAAK7B,CAAC,CAAC,EAClC8B,IAAqB,GAKrBF,GAAaE,CAAgB,EAAIF,GAAaE,CAAgB,EAAE,aAC5DD,CAAG,EAIPD,GAAa,KAAKC,CAAG,CAE7B,CAGA,IAAIE,GAAeL,GAAe,IAAIhC,GAAK,IAAIoB,EAAUpB,EAAE,cAAeA,EAAE,cAAc,CAAC,EAC3F,QAAWsC,KAAOnB,EAClB,CACI,GAAImB,EAAI,gBAAkB7C,EAAe,UACrC6C,EAAI,gBAAkB7C,EAAe,UACrC6C,EAAI,gBAAkB7C,EAAe,YACrC6C,EAAI,gBAAkB7C,EAAe,SACrC6C,EAAI,gBAAkB7C,EAAe,YAErC,SAEJ,IAAM8C,EAAmBP,GAAe,UAAUhC,GAAKA,EAAE,gBAAkBsC,EAAI,aAAa,EAC5F,GAAIC,IAAqB,GACzB,CAEI,IAAMC,EAAYH,GAAaE,CAAgB,EAAE,eAAiBD,EAAI,eACtED,GAAaE,CAAgB,EAAI,IAAInB,EAAUkB,EAAI,cAAeE,CAAS,CAC/E,KAEA,CAEI,IAAMA,EAAYC,EAAgBH,EAAI,aAAa,EAAE,IAAMA,EAAI,eAC/DD,GAAa,KAAK,IAAIjB,EAAUkB,EAAI,cAAeE,CAAS,CAAC,CACjE,CACJ,CAGAH,GAAeA,GAAa,OAAOrC,GAC/BA,EAAE,gBAAkBP,EAAe,UACnCO,EAAE,gBAAkBP,EAAe,UACnCO,EAAE,gBAAkBP,EAAe,UACnCO,EAAE,gBAAkBP,EAAe,SACnCO,EAAE,gBAAkBP,EAAe,YACnCO,EAAE,iBAAmByC,EAAgBzC,EAAE,aAAa,EAAE,GAC1D,EAGA,IAAM0C,GAAOjC,EAAiB,WAAW,EACzCiC,GAAK,SAAWZ,EAChBY,GAAK,SAAWX,EACZW,GAAK,SAAS,MAAQ,GAAKA,GAAK,SAAS,MAAQ,MAEjDA,GAAK,SAAS,IAAM,IAEpBA,GAAK,SAAS,MAAQ,GAAKA,GAAK,SAAS,MAAQ,MAEjDA,GAAK,SAAS,IAAM,IAExBA,GAAK,UAAUb,EAAS,MAAM,EAC9Ba,GAAK,cAAc,GAAGL,EAAY,EAClCK,GAAK,cAAc,GAAGR,EAAY,CACtC,CACJ,CACA,IAAMS,EAAalC,EAAiB,WACpC,GAAIb,EACJ,CAII,QAASgD,EAAc,EAAGA,EAAc,GAAIA,IAC5C,CAEI,GAAIpD,GAAmB,IAAIoD,CAAW,EAElC,SAKJ,IAAIC,EAAsB,CAAC,EACrBC,EAAoBL,EAAgBG,CAAW,GAAG,KAAO,EAC/DC,EAAoBC,CAAiB,EAAI,EACzC,QAAWC,KAAKtC,EAAiB,gBACjC,CACI,IAAM6B,EAAMS,EAAE,WAAW,KAAK/C,GAAKA,EAAE,gBAAkB4C,CAAW,EAClE,GAAIN,EACJ,CACI,IAAMU,EAAQV,EAAI,eACdO,EAAoBG,CAAK,IAAM,OAE/BH,EAAoBG,CAAK,EAAI,EAI7BH,EAAoBG,CAAK,GAEjC,MAGIH,EAAoBC,CAAiB,IAIzC,IAAIG,EACJ,OAAQL,EACR,CACI,QACI,SAEJ,KAAKnD,EAAe,YAChBwD,EAAsBxD,EAAe,oBACrC,MACJ,KAAKA,EAAe,WAChBwD,EAAsBxD,EAAe,mBACrC,MACJ,KAAKA,EAAe,YAChBwD,EAAsBxD,EAAe,oBACrC,MACJ,KAAKA,EAAe,WAChBwD,EAAsBxD,EAAe,kBAC7C,CAEA,GADiBsD,EAAE,WAAW,KAAK/C,GAAKA,EAAE,gBAAkBiD,CAAmB,IAC9D,OACjB,CACIJ,EAAsB,CAAC,EACvB,KACJ,CACJ,CAEA,GAAI,OAAO,KAAKA,CAAmB,EAAE,OAAS,EAC9C,CAEI,IAAMK,EAAmB,OAAO,QAAQL,CAAmB,EAAE,OAAO,CAACM,EAAKC,IAElED,EAAI,CAAC,EAAIC,EAAK,CAAC,EAERA,EAEJD,EACR,CAAC,EAAG,CAAC,CAAC,EACHE,EAAc,SAASH,EAAiB,CAAC,CAAC,EAG5CG,IAAgBP,GAEhBH,EAAW,cAAc,IAAIvB,EAAUwB,EAAaS,CAAW,CAAC,EAGpE5C,EAAiB,gBAAgB,QAAQsC,GACzC,CACI,IAAMT,EAAMS,EAAE,WAAW,UAAU/C,GAC/BA,EAAE,gBAAkB4C,CAAW,EAC/BN,IAAQ,GAEJS,EAAE,WAAWT,CAAG,EAAE,iBAAmBe,GAGrCN,EAAE,WAAW,OAAOT,EAAK,CAAC,EAO1Be,IAAgBP,GAEhBC,EAAE,cAAc,IAAI3B,EAAUwB,EAAaE,CAAiB,CAAC,CAGzE,CAAC,CACL,CACJ,CAIA,IAAMQ,EADY7C,EAAiB,gBAAgB,CAAC,EACvB,WAAW,IAAIH,GAAKE,GAAU,KAAKF,CAAC,CAAC,EAClE,QAAWiD,KAAoBD,EAC/B,CACI,IAAIE,EAAoB,GACxB,QAAWd,KAAQjC,EAAiB,gBACpC,CACI,GAAI,CAAC+C,EAED,SAGQd,EAAK,WAAW,KAAKpC,GAAKE,GAAU,YAAYF,EAAGiD,CAAgB,CAAC,IAI5EC,EAAoB,GAI5B,CACA,GAAIA,IAAsB,GAC1B,CACIb,EAAW,cAAcnC,GAAU,KAAK+C,CAAgB,CAAC,EAEzD,QAAWb,KAAQjC,EAAiB,gBACpC,CACI,IAAMgD,EAAYf,EAAK,WAAW,KAAKpC,GAAKE,GAAU,YAAYF,EAAGiD,CAAgB,CAAC,EAIlFE,EAAU,kBAAoBF,EAAiB,iBAE/Cb,EAAK,WAAW,OAAOA,EAAK,WAAW,QAAQe,CAAS,EAAG,CAAC,CAEpE,CACJ,CACJ,CACJ,CACA,OAAOhD,CACX,CCjXA,IAAMiD,GAAY,GAYX,SAASC,GACZC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,CACI,IAAIC,EAAYD,IAAgB,EAAI,EAAI,EAClCE,EAAW,IAAIC,EAAiBX,GAAYS,EAAY,EAAE,EAChEG,GAAWF,EAAUV,EAAS,EAE9Ba,EAAUH,EAAUP,CAAO,EAE3BU,EAAUH,EAAUN,CAAM,EAG1B,IAAMU,EAAgBT,EAAuB,GAGvCU,EAAQ,KAAK,MAAMD,EAAgB,MAAM,EAC/CF,GAAWF,EAAUK,CAAK,EAE1BH,GAAWF,EAAU,CAAC,EAEtB,IAAMM,EAAWT,EAAUD,EACvBW,EAAa,EACjB,OAAQT,EACR,CACI,QACA,IAAK,GAEDC,EAAY,EACZ,MAEJ,IAAK,GAEDQ,EAAa,EACbR,EAAY,EACZ,MAEJ,IAAK,GAEDQ,EAAa,EACbR,EAAY,CACpB,CAGA,OAAAG,GAAWF,EAAUD,CAAS,EAC1BA,IAAc,IAEdG,GAAWF,EAAU,EAAE,EACvBE,GAAWF,EAAUO,CAAU,EAC/BL,GAAWF,EAAUJ,CAAS,EAC9BM,GAAWF,EAAUM,CAAQ,GAE1BE,EACH,OACAR,CACJ,CACJ,CCtEO,IAAMS,EAAa,CACtB,KAAM,EACN,OAAQ,EACR,SAAU,EACV,OAAQ,EACR,OAAQ,EACR,OAAQ,EACR,WAAY,EACZ,aAAc,EACd,gBAAiB,EACjB,WAAY,EAEZ,gBAAiB,IACjB,OAAQ,IACR,IAAK,IACL,WAAY,IAEZ,OAAQ,IACR,OAAQ,IAER,gBAAiB,IACjB,SAAU,IACV,WAAY,GAChB,EAEaC,GAAqB,IAAIC,GAClC,IACA,EACAC,EAAe,kBACf,IACA,CACJ,EAEaC,GAAqB,IAAIF,GAClC,IACA,EACAC,EAAe,kBACf,IACA,CACJ,EAEaE,GAAuB,IAAIH,GACpC,IACA,EACAC,EAAe,cACf,EACA,CACJ,EAEaG,GAA4B,IAAIJ,GACzC,GACA,EACAC,EAAe,cACf,EACA,CACJ,EC1DO,IAAMI,EAAkB,CAC3B,KAAM,EACN,KAAM,EACN,SAAU,EACV,MAAO,EACP,IAAK,EACL,OAAQ,EAER,WAAY,IACZ,WAAY,IAEZ,WAAY,IACZ,YAAa,IAEb,WAAY,IACZ,YAAa,IAEb,aAAc,IACd,YAAa,IACb,cAAe,IACf,cAAe,IACf,YAAa,IACb,WAAY,IAEZ,aAAc,IACd,YAAa,IACb,cAAe,IACf,cAAe,IACf,YAAa,IACb,WAAY,IAEZ,aAAc,KACd,QAAS,IACb,EClCO,IAAMC,GAAN,KACP,CAII,OAIA,QAIA,YAIA,MAIA,UAEA,YAAYC,EAAQC,EAASC,EAAaC,EAAOC,EACjD,CACI,KAAK,OAASJ,EACd,KAAK,QAAUC,EACf,KAAK,YAAcC,EACnB,KAAK,MAAQC,EACb,KAAK,UAAYC,CACrB,CAKA,kBACA,CACI,IAAMC,EAAM,IAAIC,EAAiB,EAAE,EACnC,OAAAC,EAAUF,EAAK,KAAK,MAAM,EAC1BE,EAAUF,EAAK,KAAK,OAAO,EAC3BE,EAAUF,EAAK,KAAK,WAAW,EAC/BE,EAAUF,EAAK,KAAK,SAAS,EAC7BG,GAAWH,EAAK,KAAK,OAAS,EAAE,EACzBA,CACX,CACJ,EClCA,SAASI,GAA0BC,EAAIC,EACvC,CACI,GAAID,EAEA,OAAQC,EACR,CACI,QAEI,OAEJ,KAAKC,EAAgB,gBACjB,OAAOC,EAAW,gBACtB,KAAKD,EAAgB,WACjB,OAAOC,EAAW,OACtB,KAAKD,EAAgB,IACjB,OAAOC,EAAW,IACtB,KAAKD,EAAgB,qBACjB,OAAOC,EAAW,WACtB,KAAKD,EAAgB,YACjB,OAAOC,EAAW,OACtB,KAAKD,EAAgB,YACjB,OAAOC,EAAW,MAC1B,KAIA,QAAQF,EACR,CACI,QAEI,OAEJ,KAAKG,EAAiB,aAClB,OAAOD,EAAW,OACtB,KAAKC,EAAiB,eAClB,OAAOD,EAAW,SACtB,KAAKC,EAAiB,aAClB,OAAOD,EAAW,KACtB,KAAKC,EAAiB,aAClB,OAAOD,EAAW,aACtB,KAAKC,EAAiB,gBAClB,OAAOD,EAAW,gBACtB,KAAKC,EAAiB,WAClB,OAAOD,EAAW,WACtB,KAAKC,EAAiB,gBAClB,OAAOD,EAAW,eAC1B,CAER,CAOA,SAASE,GAAyBC,EAAMC,EACxC,CACI,OAAQD,EACR,CACI,QACI,OAEJ,KAAKE,EAAe,mBAGhB,MAAO,CAAE,KAAMC,EAAgB,KAAM,OAAQ,CAACF,CAAO,EACzD,KAAKC,EAAe,SAChB,OAAOC,EAAgB,MAC3B,KAAKD,EAAe,IAChB,OAAOC,EAAgB,IAC3B,KAAKD,EAAe,OAChB,OAAOC,EAAgB,OAE3B,KAAKD,EAAe,kBAChB,OAAOC,EAAgB,WAC3B,KAAKD,EAAe,kBAChB,OAAOC,EAAgB,WAE3B,KAAKD,EAAe,WAChB,OAAOC,EAAgB,WAC3B,KAAKD,EAAe,YAChB,OAAOC,EAAgB,YAE3B,KAAKD,EAAe,YAChB,OAAOC,EAAgB,YAC3B,KAAKD,EAAe,WAChB,OAAOC,EAAgB,WAE3B,KAAKD,EAAe,YAChB,OAAOC,EAAgB,YAC3B,KAAKD,EAAe,aAChB,OAAOC,EAAgB,aAC3B,KAAKD,EAAe,WAChB,OAAOC,EAAgB,WAC3B,KAAKD,EAAe,YAChB,OAAOC,EAAgB,YAC3B,KAAKD,EAAe,cAChB,MAAO,CAAE,KAAMC,EAAgB,cAAe,OAAQ,IAAOF,CAAO,EACxE,KAAKC,EAAe,cAChB,OAAOC,EAAgB,cAE3B,KAAKD,EAAe,YAChB,OAAOC,EAAgB,YAC3B,KAAKD,EAAe,aAChB,OAAOC,EAAgB,aAC3B,KAAKD,EAAe,WAChB,OAAOC,EAAgB,WAC3B,KAAKD,EAAe,YAChB,OAAOC,EAAgB,YAC3B,KAAKD,EAAe,cAChB,MAAO,CAAE,KAAMC,EAAgB,cAAe,OAAQ,IAAOF,CAAO,EACxE,KAAKC,EAAe,cAChB,OAAOC,EAAgB,cAE3B,KAAKD,EAAe,gBAChB,OAAOC,EAAgB,aAC3B,KAAKD,EAAe,eAChB,OAAOC,EAAgB,OAC/B,CACJ,CAOA,SAASC,GAAsBJ,EAAMK,EACrC,CAEI,OAAQL,EACR,CACI,QACI,OAEJ,KAAKE,EAAe,iBAChB,MAAO,CAAE,OAAQL,EAAW,OAAQ,KAAMM,EAAgB,aAAc,IAAKE,EAAK,UAAW,EAAM,EACvG,KAAKH,EAAe,cAChB,MAAO,CAAE,OAAQL,EAAW,OAAQ,KAAMM,EAAgB,MAAO,IAAKE,EAAK,UAAW,EAAM,EAGhG,KAAKH,EAAe,iBAChB,MAAO,CAAE,OAAQL,EAAW,OAAQ,KAAMM,EAAgB,aAAc,IAAKE,EAAK,UAAW,EAAK,EACtG,KAAKH,EAAe,eAChB,MAAO,CAAE,OAAQL,EAAW,OAAQ,KAAMM,EAAgB,KAAM,IAAKE,EAAK,UAAW,EAAK,EAC9F,KAAKH,EAAe,cAChB,MAAO,CAAE,OAAQL,EAAW,OAAQ,KAAMM,EAAgB,MAAO,IAAKE,EAAK,UAAW,EAAK,EAG/F,KAAKH,EAAe,cAChB,MAAO,CAAE,OAAQL,EAAW,WAAY,KAAMM,EAAgB,MAAO,IAAKE,EAAK,UAAW,EAAK,EAGnG,KAAKH,EAAe,mBAChB,MAAO,CACH,OAAQL,EAAW,OACnB,KAAMM,EAAgB,WACtB,IAAKE,EACL,UAAW,EACf,EACJ,KAAKH,EAAe,oBAChB,MAAO,CACH,OAAQL,EAAW,OACnB,KAAMM,EAAgB,YACtB,IAAKE,EACL,UAAW,EACf,EACJ,KAAKH,EAAe,mBAChB,MAAO,CACH,OAAQL,EAAW,OACnB,KAAMM,EAAgB,WACtB,IAAKE,EACL,UAAW,EACf,EACJ,KAAKH,EAAe,oBAChB,MAAO,CACH,OAAQL,EAAW,OACnB,KAAMM,EAAgB,YACtB,IAAKE,EACL,UAAW,EACf,EAMJ,KAAKH,EAAe,YAChB,MAAO,CACH,OAAQL,EAAW,OACnB,KAAMM,EAAgB,MACtB,IAAKE,EAAM,IACX,UAAW,EACf,CACR,CACJ,CAMO,SAASC,GAAkCC,EAClD,CACI,IAAMP,EAAOD,GAAyBQ,EAAI,cAAeA,EAAI,cAAc,EACvEC,EAAcR,EACdS,EAAS,EACTR,EAASM,EAAI,eACbP,GAAM,SAAW,SAEjBC,EAASD,EAAK,OACdQ,EAAcR,EAAK,MAGvB,IAAMU,EAAQN,GAAsBG,EAAI,cAAeA,EAAI,cAAc,EACzE,GAAIG,IAAU,OAEVT,EAASS,EAAM,IACfF,EAAcE,EAAM,KACpBD,EAASC,EAAM,eAEVF,IAAgB,OACzB,CACIG,EAAgB,2BAA2BJ,EAAI,aAAa,EAAE,EAC9D,MACJ,CACA,OAAO,IAAIK,GACPH,EACA,EACAD,EACAP,EACA,CACJ,CACJ,CAOO,SAASY,GAAkCC,EAClD,CACI,GAAIA,EAAI,gBAAkB,EAC1B,CACIH,EAAgB,0CAA0C,EAC1D,MACJ,CACA,IAAIF,EAAShB,GAA0BqB,EAAI,aAAcA,EAAI,WAAW,EACpEC,EAAsBD,EAAI,gBAC1BE,EAAgBF,EAAI,eACpBG,EAAkBH,EAAI,gBAC1B,GAAIL,IAAW,OACf,CACIE,EAAgB,mBAAmBG,EAAI,WAAW,SAASA,EAAI,YAAY,EAAE,EAC7E,MACJ,CAEIA,EAAI,uBAAyBZ,EAAe,qBAE5Ce,EAAkBA,IAAoB,EAAI,EAAI,GAElD,IAAIC,EAAUzB,GAA0BqB,EAAI,aAAcA,EAAI,WAAW,EACrEK,EAAuBL,EAAI,gBAC3BM,EAAiBN,EAAI,eACrBO,EAAmBP,EAAI,gBAC3B,GAAII,IAAY,OAChB,CACIP,EAAgB,6BAA6BG,EAAI,WAAW,SAASA,EAAI,YAAY,EAAE,EACvF,MACJ,CACA,IAAIQ,EAAwBvB,GAAyBe,EAAI,qBAAsBA,EAAI,eAAe,EAC9FN,EAAcc,EACdjB,EAAMS,EAAI,gBACVQ,GAAuB,OAAS,SAEhCd,EAAcc,EAAsB,KACpCjB,EAAMiB,EAAsB,QAEhC,IAAMC,EAAenB,GAAsBU,EAAI,qBAAsBA,EAAI,eAAe,EACxF,GAAIS,IAAiB,OAEjBlB,EAAMkB,EAAa,IAEnBL,EAAUT,EACVU,EAAuBJ,EACvBK,EAAiBJ,EACjBK,EAAmBJ,EAGnBF,EAAsBS,GAAoB,OAC1CR,EAAgBO,EAAa,UAAY,EAAI,EAC7CN,EAAkB,EAClBR,EAASc,EAAa,OACtBf,EAAce,EAAa,aAEtBf,IAAgB,OACzB,CACIG,EAAgB,wBAAwBG,EAAI,oBAAoB,EAAE,EAClE,MACJ,CAGA,IAAIW,EAAY,EAChB,OAAAA,GAAaN,GAAwB,EACrCM,GAAaL,GAAkB,EAC/BK,GAAaJ,GAAoB,EAGjCI,GAAaV,EACbU,GAAaT,GAAiB,GAC9BS,GAAaR,GAAmB,GACzB,IAAIL,GACPH,EACAS,EACAV,EACAH,EACAoB,CACJ,CACJ,CCzTA,IAAMC,GAAwB,IAAI,IAAI,CAClCC,EAAe,YACfA,EAAe,mBACfA,EAAe,SACfA,EAAe,SACfA,EAAe,SACfA,EAAe,SACfA,EAAe,WACfA,EAAe,iBACfA,EAAe,uBACfA,EAAe,cACfA,EAAe,qBACfA,EAAe,qBACfA,EAAe,2BACfA,EAAe,mBACfA,EAAe,yBACfA,EAAe,kBACfA,EAAe,cACnB,CAAC,EAMM,SAASC,GAAiBC,EACjC,CAMI,QAASC,EAAI,EAAGA,EAAID,EAAK,WAAW,OAAQC,IAC5C,CACI,IAAMC,EAAIF,EAAK,WAAWC,CAAC,GAEvBC,EAAE,gBAAkBJ,EAAe,aACnCI,EAAE,gBAAkBJ,EAAe,cACnCI,EAAE,gBAAkBJ,EAAe,YACnCI,EAAE,gBAAkBJ,EAAe,aACnCI,EAAE,gBAAkBJ,EAAe,eACnCI,EAAE,gBAAkBJ,EAAe,aACnCI,EAAE,gBAAkBJ,EAAe,cACnCI,EAAE,gBAAkBJ,EAAe,YACnCI,EAAE,gBAAkBJ,EAAe,eAGnCE,EAAK,WAAWC,CAAC,EAAI,IAAIE,EAAUD,EAAE,cAAe,KAAK,IAAIA,EAAE,eAAgB,IAAI,EAAG,EAAK,EAEnG,CASA,QAASD,EAAI,EAAGA,EAAID,EAAK,WAAW,OAAQC,IAC5C,CACI,IAAMG,EAAoBJ,EAAK,WAAWC,CAAC,EACvCI,EACJ,OAAQD,EAAkB,cAC1B,CACI,QACI,SAEJ,KAAKN,EAAe,oBAChBO,EAAsBP,EAAe,YACrC,MACJ,KAAKA,EAAe,mBAChBO,EAAsBP,EAAe,WACrC,MACJ,KAAKA,EAAe,oBAChBO,EAAsBP,EAAe,YACrC,MACJ,KAAKA,EAAe,mBAChBO,EAAsBP,EAAe,UAC7C,CACA,IAAIQ,EAAoBN,EAAK,WAAW,KAAKE,GAAKA,EAAE,gBAAkBG,CAAmB,EACzF,GAAIC,IAAsB,OAGtB,SAEJ,IAAMC,EAAcH,EAAkB,eAAiB,KACjDI,EAAe,GAAK,IAAOD,EAC3BE,EAAcH,EAAkB,eAAiBE,EAEjDE,EAAKV,EAAK,WAAW,QAAQI,CAAiB,EAC9CO,EAAKX,EAAK,WAAW,QAAQM,CAAiB,EACpDN,EAAK,WAAWW,CAAE,EACd,IAAIR,EAAUE,EAAqBI,EAAa,EAAK,EACzDT,EAAK,WAAWU,CAAE,EACd,IAAIP,EAAUC,EAAkB,cAAeG,EAAa,EAAK,CACzE,CAIA,IAAMK,EAAaZ,EAAK,WAAW,OAAO,CAACa,EAAMX,IACjD,CACI,GAAIL,GAAsB,IAAIK,EAAE,aAAa,EAEzC,OAAOW,EAEX,IAAMC,EAAMC,GAAkCb,CAAC,EAC/C,OAAIY,IAAQ,QAERD,EAAK,KAAKC,CAAG,EACbE,EAAgB,6CAA8CC,EAAc,UAAU,GAKtFC,EAAgB,uCAAuC,EAEpDL,CACX,EAAG,CAAC,CAAC,EAICM,EAAanB,EAAK,WAAW,OAAO,CAACa,EAAMO,IACjD,CAEI,GACIC,GAAU,YAAYD,EAAGE,GAAoB,EAAI,GACjDD,GAAU,YAAYD,EAAGG,GAAoB,EAAI,GACjDF,GAAU,YAAYD,EAAGI,GAAsB,EAAI,GACnDH,GAAU,YAAYD,EAAGK,GAA2B,EAAI,EAGxD,OAAOZ,EAEX,IAAMC,EAAMY,GAAkCN,CAAC,EAC/C,OAAIN,IAAQ,QAERD,EAAK,KAAKC,CAAG,EACbE,EAAgB,6CAA8CC,EAAc,UAAU,GAKtFC,EAAgB,uCAAuC,EAEpDL,CACX,EAAG,CAAC,CAAC,EACLD,EAAW,KAAK,GAAGO,CAAU,EAE7B,IAAMQ,EAAW,IAAIC,EAAiB,CAAC,EACvCC,GAAWF,EAAU,CAAC,EACtBE,GAAWF,EAAUf,EAAW,MAAM,EAGtC,IAAMkB,EAAMlB,EAAW,IAAImB,GAAKA,EAAE,iBAAiB,CAAC,EACpD,OAAOC,GACH,OACA,CAACL,EAAU,GAAGG,CAAG,CACrB,CACJ,CChKO,SAASG,GAAeC,EAAMC,EACrC,CAEI,IAAMC,EAAW,IAAIC,EAAiB,EAAE,EAExCC,EAAUF,EAAU,KAAK,IAAIF,EAAK,SAAS,IAAK,CAAC,CAAC,EAClDI,EAAUF,EAAUF,EAAK,SAAS,GAAG,EAErCI,EAAUF,EAAU,KAAK,IAAIF,EAAK,SAAS,IAAK,CAAC,CAAC,EAClDI,EAAUF,EAAUF,EAAK,SAAS,GAAG,EAErCI,EAAUF,EAAU,CAAC,EAErB,IAAMG,EAAYL,EAAK,kBAAkBM,EAAe,eAAgB,CAAC,EACzEF,EAAUF,EAAUG,CAAS,EAE7BD,EAAUF,EAAU,CAAC,EACrB,IAAMK,EAAOC,EACT,OACAN,CACJ,EAEIO,EAAUT,EAAK,kBAAkBM,EAAe,kBAAmBN,EAAK,OAAO,WAAW,EAK1EA,EAAK,kBACrBM,EAAe,YACfL,EAAW,kBAAkBK,EAAe,YAAa,GAAG,CAChE,IACoB,GAAKN,EAAK,SAAS,IAAMA,EAAK,SAAS,MAAQ,IAE/DS,EAAUT,EAAK,SAAS,KAI5B,IAAMU,EAAOC,GACTX,EAAK,OACLS,EACAT,EAAK,kBACDM,EAAe,SACf,CACJ,EAAIN,EAAK,kBAAkBM,EAAe,WAAY,CAAC,EAAI,IACzDN,EAAK,OAAO,sBACdA,EAAK,kBAAkBM,EAAe,mBAAoB,CAAC,EAE3DN,EAAK,OAAO,qBACVA,EAAK,kBAAkBM,EAAe,qBAAsB,CAAC,EAC7DN,EAAK,kBAAkBM,EAAe,2BAA4B,CAAC,EAAI,MACzEN,EAAK,OAAO,mBACVA,EAAK,kBAAkBM,EAAe,mBAAoB,CAAC,EAC3DN,EAAK,kBAAkBM,EAAe,yBAA0B,CAAC,EAAI,MACvEN,EAAK,kBAAkBM,EAAe,YAAa,CAAC,CACxD,EAGMM,EAAW,IAAIT,EAAiB,EAAE,EACxCC,EAAUQ,EAAU,CAAC,EACrBR,EAAUQ,EAAU,CAAC,EAgBrBC,GAAWD,EAAU,CAAC,EACtBC,GAAWD,EAAU,KAAK,QAAQ,QAAQZ,EAAK,MAAM,CAAC,EACtD,IAAMc,EAAON,EACT,OACAI,CACJ,EAGIG,EAAO,IAAIZ,EAAiB,CAAC,EACjC,GAAIH,EAAK,WAAW,OAASA,EAAK,WAAW,OAAS,EACtD,CACI,IAAMgB,EAAOC,GAAiBjB,CAAI,EAElCe,EAAOP,EACH,OACAQ,EACA,GACA,EACJ,CACJ,CAEA,OAAOE,GACH,OACA,CACIX,EACAG,EACAI,EACAC,CACJ,EACA,EACJ,CACJ,CCxGO,SAASI,GAASC,EACzB,CACIC,GACI,eAAeD,EAAO,UAAU,QAChCE,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EAEA,IAAMC,EAAOC,GAAaJ,CAAM,EAC1BK,EAASF,EAAK,WACdG,EAAQH,EAAK,gBAIbI,EAAW,IAAIC,EAAiB,EAAE,EACxCC,GAAWF,EAAUD,EAAM,MAAM,EAEjC,IAAII,GAAUV,EAAO,KAAO,MAAQ,EAEhCA,EAAO,OAAS,MAEhBU,GAAW,GAAK,IAEpBD,GAAWF,EAAUG,CAAM,EAC3BD,GAAWF,EAAUP,EAAO,QAAU,GAAG,EAEzC,IAAMW,EAAOC,EACT,OACAL,CACJ,EAGMM,EAAOC,GAAiBT,CAAM,EAChCU,EAAOH,EACP,OACAC,EACA,GACA,EACJ,EAGMG,EAAOC,GACT,OACAX,EAAM,OAAO,CAACY,EAAMC,KAEhBD,EAAK,KAAKE,GAAe,MAAM,KAAM,CAACD,EAAGd,CAAM,CAAC,CAAC,EAC1Ca,GACR,CAAC,CAAC,EACL,EACJ,EAGMG,EAAOT,EACT,OACAU,GAAetB,EAAO,WAAY,EAAI,CAC1C,EACMuB,EAAOX,EACT,OACAS,EACA,GACA,EACJ,EAEA,OAAAG,EAAoB,EACbP,GACH,OAAQ,CAACN,EAAMK,EAAMD,EAAMQ,CAAI,EAC/B,EACJ,CACJ,CC7EO,SAASE,IAChB,CACI,OAAOC,GACH,OACA,KAAK,QAAQ,IAAIC,GAAKC,GAAS,MAAM,KAAM,CAACD,CAAC,CAAC,CAAC,EAC/C,EACJ,CACJ,CCFO,SAASE,GAAeC,EAC/B,CACI,IAAMC,EAAU,IAAIC,EAAiB,EAAE,EACvCC,EAAUF,EAAS,CAAC,EACpBE,EAAUF,EAAS,CAAC,EACpBG,GAAWH,EAASD,EAAO,UAAU,EACrCI,GAAWH,EAASD,EAAO,WAAa,CAAC,EACzCG,EAAUF,EAAS,CAAC,EACpBE,EAAUF,EAAS,EAAE,EACrB,IAAMI,EAAMC,EACR,OACAL,CACJ,EACIM,EAAO,EACPP,EAAO,qBAAuB,KAAK,IAAIA,EAAO,aAAa,EAAE,OAASA,EAAO,kBAAkB,EAAI,IAEnGO,EAAO,GAEX,IAAMC,EAAOC,GACTT,EACAA,EAAO,YACPA,EAAO,sBACP,EACAA,EAAO,qBACPA,EAAO,mBACPO,CACJ,EACIG,EAAOJ,EACP,OACAN,EAAO,WAAW,EAAK,CAC3B,EAEMW,EAAOL,EACT,OACAM,GAAeZ,EAAO,WAAY,EAAI,CAC1C,EACMa,EAAOP,EACT,OACAK,EACA,GACA,EACJ,EACA,OAAAG,EACI,aAAad,EAAO,UAAU,kBAC9Be,EAAc,WACdA,EAAc,MACdA,EAAc,UAClB,EACOC,GACH,OACA,CACIX,EACAG,EACAE,EACAG,CACJ,EACA,EACJ,CACJ,CC9DA,eAAsBI,GAAcC,EACpC,CACI,IAAIC,EAAe,EACbC,EAAU,CAAC,EAIXC,EAAU,CAAC,EACbC,EAAU,EACd,QAAWC,KAAK,KAAK,QACrB,CACI,IAAMC,EAAMC,GAAeF,CAAC,EAC5B,MAAML,IAAmBK,EAAE,WAAYD,EAAS,KAAK,QAAQ,MAAM,EACnEF,EAAQ,KAAKD,CAAY,EACzBA,GAAgBK,EAAI,OACpBH,EAAQ,KAAKG,CAAG,EAChBF,GACJ,CACA,MAAO,CACH,KAAMI,GACF,OACAL,EACA,EACJ,EACA,QAASD,CACb,CACJ,CCfA,IAAMO,GAAsB,CACxB,iBAAkB,MACtB,EAQA,eAAsBC,GAASC,EAAUF,GACzC,CACIE,EAAUC,GAAiBD,EAASF,EAAmB,EACvDI,GACI,kBACAC,EAAc,IAClB,EAEA,IAAMC,EAAU,IAAIC,EAAiB,CAAC,EACtCC,GAAWF,EAAS,KAAK,QAAQ,MAAM,EACvC,IAAMG,EAAOC,EACT,OACAJ,CACJ,EACAF,GACI,2BACAC,EAAc,IAClB,EACA,IAAMM,EAAOC,GAAU,MAAM,IAAI,EACjCC,EACI,aACAR,EAAc,UAClB,EACAS,EAAoB,EAEpBV,GACI,4BACAC,EAAc,IAClB,EACA,IAAMU,EAAW,MAAMC,GAAc,KAAK,KAAMd,EAAQ,gBAAgB,EAClEe,EAAOF,EAAS,KAChBG,EAAcH,EAAS,QAC7BF,EAAgB,eAAgBR,EAAc,UAAU,EACxDS,EAAoB,EAGpB,IAAMK,EAAW,IAAIZ,EAAiB,EAAI,EAAIW,EAAY,MAAM,EAChEV,GAAWW,EAAU,CAAC,EACtBX,GAAWW,EAAUD,EAAY,MAAM,EACvC,QAAWE,KAAUF,EAEjBV,GAAWW,EAAUC,CAAM,EAE/B,IAAMC,EAAOX,EACT,OACAS,CACJ,EAEA,KAAK,cAAc,MAAW,KAAK,cAAc,MAAW,aAAe;AAAA,6CAC3E,KAAK,cAAc,KAAU,cAE7B,IAAMG,EAAQ,CAAC,EACf,OAAW,CAACC,EAAMC,CAAI,IAAK,OAAO,QAAQ,KAAK,aAAa,EAGpDD,IAAS,QACTA,IAAS,QACTA,IAAS,QACTA,IAAS,QACTA,IAAS,QACTA,IAAS,QACTA,IAAS,QAKbD,EAAM,KACFZ,EACIa,EACAE,GAAeD,EAAM,EAAI,CAC7B,CACJ,EAEJ,IAAMD,EAAOG,GACT,OACAJ,EACA,EACJ,EACA,OAAAT,EACI,uBACAR,EAAc,UAClB,EACAS,EAAoB,EACbY,GACH,OACA,CACID,GAAe,MAAM,EACrBhB,EACAE,EACAU,EACAJ,EACAM,CACJ,CACJ,CACJ,CCzHO,IAAMI,GAAN,cAA8BC,EACrC,CAKI,aAMA,WAKA,YAAYC,EACZ,CACI,MAAM,EACN,KAAK,aAAeA,CACxB,CAEA,YACA,CACI,KAAK,WAAW,WAAW,KAAK,YAAY,CAChD,CAKA,cAAcC,EACd,CACI,KAAK,WAAaA,EAClB,KAAK,WAAW,OAAO,KAAK,YAAY,CAC5C,CACJ,ECxBO,IAAMC,GAAN,KACP,CAMI,gBAMA,WAAa,GAMb,QAAU,EAMV,KAAO,EAMP,YAAc,CAAC,EAMf,WAAa,IAAIC,GAMjB,QAAU,EAKV,MAAQ,EAKR,WAAa,EAMb,YAAYC,EACZ,CACI,KAAK,gBAAkBA,CAC3B,CAOA,aAAaC,EAASC,EAAW,GACjC,CACI,IAAMC,EAAKF,GAAW,KAAK,gBAAgB,SAE3C,OAAO,KAAK,OAAS,KACjBE,GACCC,GAAU,KAAK,IAAI,IAAM,KAAK,OAAS,KAAOF,EAEvD,CAGA,cACA,CACI,KAAK,YAAY,QAAQG,GAAKA,EAAE,WAAW,CAAC,CAChD,CAKA,WAAWC,EACX,CACI,KAAK,YAAYA,CAAK,EAAE,WAAW,EACnC,KAAK,YAAY,OAAOA,EAAO,CAAC,CACpC,CAKA,YACA,CACI,IAAMD,EAAI,IAAIE,GAAgB,IAAI,EAClC,YAAK,YAAY,KAAKF,CAAC,EAChBA,CACX,CAMA,QAAQG,EAAQC,EAChB,CACI,QAASC,EAAMF,EAAQE,EAAMD,EAAS,EAAGC,IAErC,QAASC,EAAW,EAAGA,EAAW,IAAKA,IAEnC,KAAK,wBAAwBD,EAAKC,CAAQ,EAAE,QAAQC,GACpD,CACIA,EAAU,OAAO,aAAa,CAClC,CAAC,CAGb,CAQA,wBAAwBC,EAAUF,EAClC,CAEI,GAAI,KAAK,YAAY,OAAS,EAE1B,MAAO,CAAC,EAQZ,SAASG,EAAUC,EAAOC,EAC1B,CACI,OAAOA,GAAUD,EAAM,KAAOC,GAAUD,EAAM,GAClD,CAMA,SAASE,EAAUC,EAAMC,EACzB,CACID,EAAK,KAAK,GAAGC,EAAM,OAAOC,GAAK,CAACF,EAAK,KAAKG,GAAMA,EAAG,gBAAkBD,EAAE,aAAa,CAAC,CAAC,CAC1F,CAMA,SAASE,EAAcJ,EAAMC,EAC7B,CACID,EAAK,KAAK,GAAGC,EAAM,OAAOI,GAAK,CAACL,EAAK,KAAKM,GAAMC,GAAU,YAAYF,EAAGC,CAAE,CAAC,CAAC,CAAC,CAClF,CAKA,IAAIE,EAA6B,CAAC,EAM9BC,EAAyB,CAAC,GAAG,KAAK,WAAW,UAAU,EAKvDC,EAAyB,CAAC,GAAG,KAAK,WAAW,UAAU,EACrDC,EAAiB,KAAK,WAAW,SACjCC,EAAiB,KAAK,WAAW,SAevC,OAZyB,KAAK,YAAY,OAAOC,GAC7CjB,EACIiB,EAAY,YAAcA,EAAY,SAAWF,EACjDhB,CACJ,GAEAC,EACIiB,EAAY,YAAcA,EAAY,SAAWD,EACjDnB,CACJ,CACJ,EAEmB,QAAQqB,GAC3B,CACI,IAAMC,EAAaD,EAAW,WAE9B,GAAIC,EAAW,gBAAgB,OAAS,EAEpC,OAEJ,IAAIC,EAAmBF,EAAW,WAC9BG,EAAmBH,EAAW,WAK9BI,EAA6B,CAAC,GAAGH,EAAW,WAAW,UAAU,EACjEI,EAA6B,CAAC,GAAGJ,EAAW,WAAW,UAAU,EAC/DJ,EAAiBI,EAAW,WAAW,SACvCH,EAAiBG,EAAW,WAAW,SAGhBA,EAAW,gBACnC,OAAOF,GAEJjB,EACIiB,EAAY,YAAcA,EAAY,SAAWF,EACjDhB,CACJ,GAEAC,EACIiB,EAAY,YAAcA,EAAY,SAAWD,EACjDnB,CACJ,CACJ,EAEmB,QAAQ2B,GAC/B,CACI,IAAIC,EAAuB,CAAC,GAAGD,EAAe,UAAU,EACpDE,EAAuB,CAAC,GAAGF,EAAe,UAAU,EAExDrB,EACIiB,EACAP,CACJ,EAKAV,EACIsB,EACAH,CACJ,EAEAd,EACIa,EACAP,CACJ,EACAN,EACIkB,EACAH,CACJ,EAGAf,EACIkB,EACA,KAAK,gBAAgB,iBACzB,EAMA,IAAMC,EAAqB,CAAC,GAAGD,CAAoB,EACnD,QAASE,EAAI,EAAGA,EAAIP,EAAiB,OAAQO,IAC7C,CACI,IAAIC,EAAMR,EAAiBO,CAAC,EACtBE,GAA+BH,EAAmB,UACpDlB,IAAKE,GAAU,YAAYkB,EAAKpB,EAAC,CAAC,EAClCqB,KAAiC,GAKjCH,EAAmBG,EAA4B,EAAIH,EAAmBG,EAA4B,EAAE,aAChGD,CAAG,EAIPF,EAAmB,KAAKE,CAAG,CAEnC,CAIAjB,EAA2B,KAAK,CAC5B,qBAAsBa,EACtB,iBAAkBL,EAClB,WAAYO,EACZ,OAAQH,EAAe,MAC3B,CAAC,CACL,CAAC,CACL,CAAC,EACMZ,CACX,CACJ,ECjSA,IAAMmB,GAAN,MAAMC,CACN,CAMI,OAAO,kBAAoBC,GAAU,cAMrC,cAAgB,CAAC,EAOjB,QAAU,CAAC,EAOX,QAAU,CAAC,EAOX,YAAc,CAAC,EAMf,kBAAoBC,GAAkB,IAAIC,GAAKC,GAAU,KAAKD,CAAC,CAAC,EAMhE,wBAA0B,GAM1B,SAAW,GAMX,YAAYE,EAAO,OACnB,CACI,GAAIA,GAAM,QACV,CACI,KAAK,cAAgBA,EAAK,KAC1B,KAAK,WAAW,GAAGA,EAAK,OAAO,EAI/B,IAAMC,EAAiB,CAAC,EACxB,QAAWC,KAAUF,EAAK,QAEtB,QAAWG,KAAQD,EAAO,YAEjBD,EAAe,SAASE,EAAK,UAAU,GAExCF,EAAe,KAAKE,EAAK,UAAU,EAI/C,KAAK,eAAe,GAAGF,CAAc,EAKrC,IAAMG,EAAa,CAAC,EAEpB,QAAWC,KAAcJ,EAErB,QAAWE,KAAQE,EAAW,gBAErBD,EAAW,SAASD,EAAK,MAAM,GAEhCC,EAAW,KAAKD,EAAK,MAAM,EAIvC,KAAK,WAAW,GAAGC,CAAU,CACjC,CACJ,CAOA,OAAO,mBAAmBE,EAC1B,CACI,IAAMC,EAASD,EAAW,MAAM,EAC1BE,EAAUD,EAAO,QACvB,KAAOD,EAAW,QAEKA,EAAW,MAAM,EAAE,QAC3B,QAAQG,GACnB,CAEQD,EAAQ,KAAKE,GAAkBA,EAAe,OAASD,EAAU,MAAQC,EAAe,UAAYD,EAAU,OAAO,IAAM,QAG3HD,EAAQ,KAAKC,CAAS,CAE9B,CAAC,EAGL,OAAO,IAAId,EAAe,CAAE,QAASa,EAAS,KAAMD,EAAO,aAAc,CAAC,CAC9E,CAMA,aAAa,uBACb,CACI,IAAMI,EAAO,IAAIhB,EACXiB,EAAS,IAAIC,GACf,MACA,MACA,GACA,GACAC,GAAY,WACZ,EACA,GACJ,EACMC,EAAa,IAAI,aAAa,GAAG,EACvC,QAASC,EAAI,EAAGA,EAAI,IAAKA,IAErBD,EAAWC,CAAC,EAAKA,EAAI,IAAO,EAAI,EAEpCJ,EAAO,aAAaG,CAAU,EAC9BJ,EAAK,WAAWC,CAAM,EAEtB,IAAMK,EAAQ,IAAIC,GAClBD,EAAM,cACF,IAAIE,EAAUC,EAAe,mBAAoB,GAAG,EACpD,IAAID,EAAUC,EAAe,cAAe,IAAK,EACjD,IAAID,EAAUC,EAAe,YAAa,CAAC,CAC/C,EAEA,IAAMC,EAAO,IAAIC,GACjBD,EAAK,eAAiB,WACtBA,EAAK,WAAaJ,EAEJI,EAAK,WAAW,EACxB,UAAUT,CAAM,EAEtB,IAAMW,EAAQF,EAAK,WAAW,EAC9BE,EAAM,UAAUX,CAAM,EACtBW,EAAM,cAAc,IAAIJ,EAAUC,EAAe,SAAU,EAAE,CAAC,EAE9DT,EAAK,eAAeU,CAAI,EAGxB,IAAMnB,EAAS,IAAIsB,GAAYb,CAAI,EACnC,OAAAT,EAAO,WAAa,WACNA,EAAO,WAAW,EAC1B,cAAcmB,CAAI,EAExBV,EAAK,WAAWT,CAAM,EAEtBS,EAAK,cAAc,KAAU,MAC7BA,EAAK,cAAc,KAAU,YAC7BA,EAAK,cAAc,KAAU,QAC7BA,EAAK,MAAM,GACD,MAAMA,EAAK,MAAM,GAClB,MACb,CAKA,cAAcH,EACd,CACI,KAAK,QAAQ,KAAK,GAAGA,CAAO,CAChC,CAKA,kBAAkBiB,EAClB,CACI,KAAK,YAAY,KAAK,GAAGA,CAAW,CACxC,CAKA,cAAcC,EACd,CACI,KAAK,QAAQ,KAAK,GAAGA,CAAO,CAChC,CAOA,YAAYd,EACZ,CACI,IAAMe,EAAY,KAAK,QAAQ,KAAK,GAAK,EAAE,aAAef,EAAO,UAAU,EAC3E,GAAIe,EAEA,OAAOA,EAEX,IAAMC,EAAY,IAAIf,GAClBD,EAAO,WACPA,EAAO,WACPA,EAAO,YACPA,EAAO,sBACPA,EAAO,WACPA,EAAO,qBACPA,EAAO,kBACX,EAUA,GATIA,EAAO,aAEPgB,EAAU,kBAAkBhB,EAAO,eAAe,MAAM,CAAC,EAIzDgB,EAAU,aAAahB,EAAO,aAAa,CAAC,EAEhD,KAAK,WAAWgB,CAAS,EACrBhB,EAAO,aACX,CACI,IAAMiB,EAAe,KAAK,YAAYjB,EAAO,YAAY,EAEpDiB,EAAa,cAEdD,EAAU,gBAAgBC,EAAcD,EAAU,UAAU,CAEpE,CACA,OAAOA,CACX,CAQA,gBAAgBvB,EAChB,CACI,IAAMsB,EAAY,KAAK,YAAY,KAAKX,GAAKA,EAAE,iBAAmBX,EAAW,cAAc,EAC3F,GAAIsB,EAEA,OAAOA,EAEX,IAAMG,EAAgB,IAAIR,GAC1BQ,EAAc,eAAiBzB,EAAW,eAC1CyB,EAAc,WAAW,SAASzB,EAAW,UAAU,EACvD,QAAWF,KAAQE,EAAW,gBAC9B,CACI,IAAM0B,EAAaD,EAAc,WAAW,EAC5CC,EAAW,SAAS5B,CAAI,EACxB4B,EAAW,UAAU,KAAK,YAAY5B,EAAK,MAAM,CAAC,CACtD,CACA,YAAK,eAAe2B,CAAa,EAC1BA,CACX,CAQA,YAAY5B,EACZ,CACI,IAAMyB,EAAY,KAAK,QAAQ,KAAKK,GAAKA,EAAE,aAAe9B,EAAO,UAAU,EAC3E,GAAIyB,EAEA,OAAOA,EAEX,IAAMlB,EAAY,IAAIe,GAAY,IAAI,EACtCf,EAAU,WAAaP,EAAO,WAC9BO,EAAU,KAAOP,EAAO,KACxBO,EAAU,QAAUP,EAAO,QAC3BO,EAAU,QAAUP,EAAO,QAC3BO,EAAU,MAAQP,EAAO,MACzBO,EAAU,WAAaP,EAAO,WAC9BO,EAAU,WAAW,SAASP,EAAO,UAAU,EAC/C,QAAWC,KAAQD,EAAO,YAC1B,CACI,IAAM6B,EAAatB,EAAU,WAAW,EACxCsB,EAAW,SAAS5B,CAAI,EACxB4B,EAAW,cAAc,KAAK,gBAAgB5B,EAAK,UAAU,CAAC,CAClE,CAEA,YAAK,WAAWM,CAAS,EAClBA,CACX,CAEA,OACA,CACI,KAAK,QAAQ,KAAK,CAACwB,EAAGC,IAEdD,EAAE,OAASC,EAAE,KAEND,EAAE,KAAOC,EAAE,KAEfD,EAAE,QAAUC,EAAE,OACxB,EACD,KAAK,eAAe,CACxB,CAMA,gBACA,CACI,KAAK,SAAW,GAQhB,IAAMC,EAAkB,IAAI,IAAI,CAC5B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GACtC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpD,GAAI,GAAI,GAAI,IAAK,GACrB,CAAC,EACD,QAAWjC,KAAU,KAAK,QAEtB,GAAIkC,GAAUlC,EAAO,IAAI,IAErB,KAAK,SAAW,GACZ,CAACiC,EAAgB,IAAIjC,EAAO,OAAO,GACvC,CAEI,KAAK,SAAW,GAChBmC,EACI,yCAAyCnC,EAAO,IAAI,IAAIA,EAAO,OAAO,mEACtEoC,EAAc,KACdA,EAAc,MACdA,EAAc,IAClB,EACA,KACJ,CAGZ,CAMA,cAAcC,EACd,CACI,IAAMC,EAAY,KAOlB,SAASC,EAAoBpC,EAAYqC,EACzC,CACI,IAAIC,EAAgB,EACpB,QAASC,EAAa,EAAGA,EAAavC,EAAW,gBAAgB,OAAQuC,IACzE,CACI,IAAMC,EAAQxC,EAAW,gBAAgBuC,CAAU,EAC7CE,EAAYD,EAAM,SAClBE,EAAYF,EAAM,SACpBG,EAAc,GAClB,QAAWC,KAAUP,EAEjB,GACKO,EAAO,KAAOH,EAAU,KAAOG,EAAO,KAAOH,EAAU,KACvDG,EAAO,UAAYF,EAAU,KAAOE,EAAO,UAAYF,EAAU,IAEtE,CACIC,EAAc,GACd,KACJ,CAECA,IAEDX,EACI,KAAKQ,EAAM,OAAO,UAAU,qBAAqBxC,EAAW,cAAc,MAC1EiC,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EACIjC,EAAW,WAAWuC,CAAU,IAEhCD,IACAC,IACAP,EACI,KAAKQ,EAAM,OAAO,UAAU,aAC5BP,EAAc,WACdA,EAAc,IAClB,GAEAO,EAAM,OAAO,SAAW,GAExBL,EAAU,aAAaK,EAAM,MAAM,EAI/C,CACA,OAAOF,CACX,CAEAO,GACI,0BACAZ,EAAc,IAClB,EACA,IAAMa,EAAsBZ,EAAI,uBAAuBC,CAAS,EAEhEY,GACI,2BACAd,EAAc,IAClB,EACAD,EAAgB,0BAA2Bc,CAAmB,EAE9D,QAASE,EAAc,EAAGA,EAAcb,EAAU,QAAQ,OAAQa,IAClE,CACI,IAAMrB,EAAIQ,EAAU,QAAQa,CAAW,EACjCC,EAAStB,EAAE,KAAO,IAAMA,EAAE,QAC1BuB,EAAOJ,EAAoBG,CAAM,EACvC,GAAIC,IAAS,OAETlB,EACI,uBAAuBL,EAAE,UAAU,mBACnCM,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EACAE,EAAU,aAAaR,CAAC,EACxBqB,QAGJ,CACI,IAAMX,EAAS,CAAC,GAAGa,CAAI,EAAE,IAAIC,GAC7B,CACI,IAAMC,EAAQD,EAAE,MAAM,GAAG,EACzB,MAAO,CACH,IAAK,SAASC,EAAM,CAAC,CAAC,EACtB,SAAU,SAASA,EAAM,CAAC,CAAC,CAC/B,CACJ,CAAC,EACDL,GACI,gBAAgBpB,EAAE,UAAU,GAC5BM,EAAc,KACdA,EAAc,UAClB,EACAD,EAAgB,YAAYL,EAAE,UAAU,IAAKU,CAAM,EACnD,IAAIgB,EAAe,EAEnB,QAASC,EAAY,EAAGA,EAAY3B,EAAE,YAAY,OAAQ2B,IAC1D,CACI,IAAMxD,EAAO6B,EAAE,YAAY2B,CAAS,EAC9BC,EAAWzD,EAAK,SAChB0D,EAAW1D,EAAK,SAElB2D,EAAa,GACjB,QAAWC,KAASrB,EAEhB,GACKqB,EAAM,KAAOH,EAAS,KAAOG,EAAM,KAAOH,EAAS,KACnDG,EAAM,UAAYF,EAAS,KAAOE,EAAM,UAAYF,EAAS,IAElE,CAEIC,EAAa,GACb,IAAMnB,EAAgBF,EAAoBtC,EAAK,WAAYuC,CAAM,EACjEL,EACI,mBAAmBM,CAAa,mBAAmBxC,EAAK,WAAW,cAAc,GACjFmC,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,UAClB,EACA,KACJ,CAECwB,IAEDJ,IACA1B,EAAE,WAAW2B,CAAS,EAClBxD,EAAK,WAAW,SAAW,GAE3BqC,EAAU,iBAAiBrC,EAAK,UAAU,EAE9CwD,IAER,CACAtB,EACI,mBAAmBqB,CAAY,mBAAmB1B,EAAE,UAAU,GAC9DM,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,UAClB,EACA0B,EAAoB,CACxB,CACJ,CACAxB,EAAU,qBAAqB,EAE/BA,EAAU,cAAc,KAAU,oFAAoFD,EAAI,QAAQ;AAAA;AAAA,EAC5HC,EAAU,cAAc,KAE9BH,EACI,wBACAC,EAAc,UAClB,EACA0B,EAAoB,EACpBA,EAAoB,CACxB,CAEA,sBACA,CACI,KAAK,YAAc,KAAK,YAAY,OAAOhD,GAC3C,CACIA,EAAE,kBAAkB,EACpB,IAAMiD,EAAYjD,EAAE,SAAW,EAC/B,OAAIiD,GAEAjD,EAAE,iBAAiB,EAEhB,CAACiD,CACZ,CAAC,EACD,KAAK,QAAU,KAAK,QAAQ,OAAOT,GACnC,CACI,IAAMS,EAAYT,EAAE,SAAW,EAC/B,OAAIS,GAEAT,EAAE,aAAa,EAEZ,CAACS,CACZ,CAAC,CACL,CAKA,iBAAiB5D,EACjB,CACIA,EAAW,iBAAiB,EAC5B,KAAK,YAAY,OAAO,KAAK,YAAY,QAAQA,CAAU,EAAG,CAAC,CACnE,CAKA,aAAaH,EACb,CACIA,EAAO,aAAa,EACpB,KAAK,QAAQ,OAAO,KAAK,QAAQ,QAAQA,CAAM,EAAG,CAAC,CACvD,CAKA,aAAaU,EACb,CACIA,EAAO,aAAa,EACpB,KAAK,QAAQ,OAAO,KAAK,QAAQ,QAAQA,CAAM,EAAG,CAAC,CACvD,CASA,oBAAoBsD,EAAQC,EAAWC,EAAe,GACtD,CACI,IAAMC,EAASH,IAAW,KAAQE,GAAgBhC,GAAU8B,CAAM,EAE9DlC,EASJ,GARIqC,EAEArC,EAAI,KAAK,QAAQ,KAAKA,GAAKA,EAAE,OAASkC,GAAUlC,EAAE,aAAaoC,CAAY,GAAKpC,EAAE,UAAYmC,CAAS,EAIvGnC,EAAI,KAAK,QAAQ,KAAKA,GAAKA,EAAE,OAASkC,GAAUlC,EAAE,UAAYmC,CAAS,EAEvEnC,EAEA,OAAOA,EAGX,GAAIqC,GAEID,EACJ,CAEI,IAAMpC,EAAI,KAAK,QAAQ,KAAKA,GAAKA,EAAE,aAAaoC,CAAY,GAAKpC,EAAE,UAAYmC,CAAS,EACxF,GAAInC,EAEA,OAAOA,CAEf,CAGR,CASA,UAAUkC,EAAQC,EAAWC,EAAe,GAC5C,CACI,IAAME,EAAUJ,IAAW,KAAQE,GAAgBhC,GAAU8B,CAAM,EAE/DhE,EAUJ,OARIoE,EAEApE,EAAS,KAAK,QAAQ,KAAK8B,GAAKA,EAAE,OAASkC,GAAUlC,EAAE,aAAaoC,CAAY,GAAKpC,EAAE,UAAYmC,CAAS,EAI5GjE,EAAS,KAAK,QAAQ,KAAK8B,GAAKA,EAAE,OAASkC,GAAUlC,EAAE,UAAYmC,CAAS,EAE5EjE,IAKAoE,GAGApE,EAAS,KAAK,QAAQ,KAAK8B,GAAKA,EAAE,aAAaoC,CAAY,GAAKpC,EAAE,UAAYmC,CAAS,EAClFjE,IAGDA,EAAS,KAAK,QAAQ,KAAK8B,GAAKA,EAAE,aAAaoC,CAAY,CAAC,IAMhElE,EAAS,KAAK,QAAQ,KAAK8B,GAAKA,EAAE,UAAYmC,GAAa,CAACnC,EAAE,aAAaoC,CAAY,CAAC,EAExFlE,GAEAqE,EACI,YAAYL,CAAM,IAAIC,CAAS,+BAA+BjE,EAAO,UAAU,KAAKA,EAAO,IAAI,IAAIA,EAAO,OAAO,IACjHoC,EAAc,KACdA,EAAc,UAClB,EAICpC,IAEDqE,EAAgB,UAAUJ,CAAS,4BAA6B,KAAK,QAAQ,CAAC,EAAE,UAAU,EAC1FjE,EAAS,KAAK,QAAQ,CAAC,GAEpBA,EACX,CAOA,gBAAgBsE,EAChB,CACI,IAAItE,EAAS,KAAK,QAAQ,KAAK8B,GAAKA,EAAE,aAAewC,CAAU,EAC/D,OAAKtE,IAEDqE,EAAgB,mCAAoC,KAAK,QAAQ,CAAC,EAAE,UAAU,EAC9ErE,EAAS,KAAK,QAAQ,CAAC,GAEpBA,CACX,CAKA,aAAauE,EACb,CACI,MAAM,IAAI,MAAM,qBAAqBA,CAAK,6BAA6B,CAC3E,CAEA,kBACA,CACI,OAAO,KAAK,QACZ,OAAO,KAAK,YACZ,OAAO,KAAK,QACZ,OAAO,KAAK,aAChB,CACJ,EAEA/E,GAAe,UAAU,MAAQgF,GACjChF,GAAe,UAAU,SAAWiF,GCztB7B,SAASC,GAAsBC,EACtC,CACIC,GAA0B,2BAA4BC,EAAc,IAAI,EACxE,QAASC,EAAI,EAAGA,EAAI,KAAK,iBAAkBA,IAEvC,KAAK,kBAAkBC,GAAcJ,EAAoB,SAAS,CAAC,EAEvEK,EAAoB,CACxB,CCZO,IAAMC,GAAN,cAAsBC,EAC7B,CAII,YAAYC,EACZ,CACI,MAAMA,CAAI,CACd,CAWA,cACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,CACQL,IAAgB,GAEhB,KAAK,cAAc,IAAIM,EAAUC,EAAe,YAAaP,CAAW,CAAC,EAE7E,KAAK,cAAc,IAAIM,EAAUC,EAAe,mBAAoBR,CAAa,CAAC,EAGlFM,GAAyBF,EAAO,sBAChC,IAAMK,EAAa,KAAK,MAAMH,EAAwB,GAAG,EACrDG,IAAe,GAEf,KAAK,cAAc,IAAIF,EAAUC,EAAe,WAAYC,CAAU,CAAC,EAE3E,IAAMC,EAAWJ,EAAyBG,EAAa,IAOvD,GANIC,IAAa,GAEb,KAAK,cAAc,IAAIH,EAAUC,EAAe,SAAUE,CAAQ,CAAC,EAInET,IAAgB,EACpB,CACI,IAAMU,EAAYT,EAAK,MAAQE,EAAO,qBAChCQ,EAAUV,EAAK,IAAME,EAAO,mBAClC,GAAIO,IAAc,EAClB,CACI,IAAME,EAAOF,EAAY,MACzB,KAAK,cAAc,IAAIJ,EAAUC,EAAe,qBAAsBK,CAAI,CAAC,EAE3E,IAAMC,EAAS,KAAK,MAAMH,EAAY,KAAK,EACvCG,IAAW,GAEX,KAAK,cAAc,IAAIP,EAAUC,EAAe,2BAA4BM,CAAM,CAAC,CAE3F,CACA,GAAIF,IAAY,EAChB,CACI,IAAMC,EAAOD,EAAU,MACvB,KAAK,cAAc,IAAIL,EAAUC,EAAe,mBAAoBK,CAAI,CAAC,EAEzE,IAAMC,EAAS,KAAK,MAAMF,EAAU,KAAK,EACrCE,IAAW,GAEX,KAAK,cAAc,IAAIP,EAAUC,EAAe,yBAA0BM,CAAM,CAAC,CAEzF,CACJ,CAEIX,IAAcC,EAAO,aAErB,KAAK,cAAc,IAAIG,EAAUC,EAAe,kBAAmBL,CAAS,CAAC,EAGjF,KAAK,UAAUC,CAAM,CACzB,CACJ,ECrFO,IAAMW,GAAN,cAA4BC,EACnC,CACI,aACA,CACI,MAAM,CACV,CAKA,YACA,CACI,IAAMC,EAAI,IAAIC,GAAQ,IAAI,EAC1B,YAAK,gBAAgB,KAAKD,CAAC,EACpBA,CACX,CACJ,EChBO,IAAME,GAAN,cAAwBC,EAC/B,CAII,cAAgB,IAAIC,GAQpB,YAAYC,EAAKC,EAAQC,EACzB,CAEI,MAAMF,CAAG,EACT,KAAK,QAAUE,EAAe,IAC9B,IAAMC,EAAWF,GAAU,EAAK,IAC1BG,EAAUH,EAAS,IAErBE,EAAU,EAEV,KAAK,KAAOA,EAIZ,KAAK,KAAOC,EAEAH,GAAU,KAItB,KAAK,KAAO,KAGH,KAAK,WAAW,EACxB,cAAc,KAAK,aAAa,CACzC,CACJ,EC/BO,SAASI,GAAWC,EAAOC,EAClC,CAOI,IAAMC,EAAe,CAAC,EACtB,KAAOF,EAAM,UAAU,OAASA,EAAM,UAAU,cAE5CE,EAAa,KAAKC,GAAcH,EAAM,SAAS,CAAC,EAIpD,IAAMI,EAAeF,EAAa,KAAKG,GAAKA,EAAE,SAAW,MAAM,EAE/D,GAAI,CAACD,EACL,CACIE,EAAgB,yDAAyD,EACzE,MACJ,CAEA,IAAIC,EAASC,EAAiBJ,EAAa,UAAW,CAAC,EACnDK,EAASD,EAAiBJ,EAAa,UAAW,CAAC,EAEnDM,EAASF,EAAiBJ,EAAa,UAAW,CAAC,EACnDO,EAASH,EAAiBJ,EAAa,UAAW,CAAC,EAGnDM,IAAW,GAAKC,IAAW,IAE3BA,EAAS,IACTD,EAAS,GAIb,IAAME,EAAOX,EAAW,WAAW,EAEnCW,EAAK,SAAW,CAAE,IAAKL,EAAQ,IAAKE,CAAO,EAC3CG,EAAK,SAAW,CAAE,IAAKF,EAAQ,IAAKC,CAAO,EAG3CH,EAAiBJ,EAAa,UAAW,CAAC,EAG1C,IAAMS,EAAYL,EAAiBJ,EAAa,UAAW,CAAC,EACxDS,IAAc,GAEdD,EAAK,cAAc,IAAIE,EAAUC,EAAe,eAAgBF,CAAS,CAAC,EAI9E,IAAMG,EAAOC,GAAiBf,EAAc,MAAM,EAC5CgB,EAAOD,GAAiBf,EAAc,MAAM,EAClD,KAAK,SAASc,EAAME,EAAMN,CAAI,EAG9B,IAAMO,EAAkBjB,EAAa,KAAKG,GAAKA,EAAE,SAAW,MAAM,EAElEG,EAAiBW,EAAgB,UAAW,CAAC,EAC7C,IAAIC,EAAcZ,EAAiBW,EAAgB,UAAW,CAAC,EAG3DE,EAAkBC,GAClBH,EAAgB,UAAUA,EAAgB,UAAU,cAAc,EAClEA,EAAgB,UAAUA,EAAgB,UAAU,cAAc,CACtE,EAMMI,GAFiBf,EAAiBW,EAAgB,UAAW,CAAC,EAE7B,GAAK,QAG5CX,EAAiBW,EAAgB,UAAW,CAAC,EAG7C,IAAMK,EAAchB,EAAiBW,EAAgB,UAAW,CAAC,EAC7DM,EACEC,EAAO,CAAE,MAAO,EAAG,IAAK,CAAE,EAChC,GAAIF,IAAgB,EAGhBC,EAAc,MAGlB,CAEIjB,EAAiBW,EAAgB,UAAW,CAAC,EAE5BX,EAAiBW,EAAgB,UAAW,CAAC,IAC7C,EAEbM,EAAc,EAIdA,EAAc,EAElBC,EAAK,MAAQlB,EAAiBW,EAAgB,UAAW,CAAC,EAC1D,IAAMQ,EAAanB,EAAiBW,EAAgB,UAAW,CAAC,EAChEO,EAAK,IAAMA,EAAK,MAAQC,CAC5B,CAGA,IAAMC,EAAgB1B,EAAa,KAAKG,GAAKA,EAAE,SAAW,MAAM,EAChE,GAAIuB,IAAkB,OAGlB,OAIJpB,EAAiBoB,EAAc,UAAW,CAAC,EAE3CpB,EAAiBoB,EAAc,UAAW,CAAC,EAE3CpB,EAAiBoB,EAAc,UAAW,CAAC,EAE3C,IAAMC,EAAWrB,EAAiBoB,EAAc,UAAW,CAAC,EAKtDE,EAAS,KAAK,QAAQD,CAAQ,EACpC,GAAIC,IAAW,OAEX,MAAM,IAAI,MAAM,oBAAoB,EAMxC,IAAMC,GAFqBR,GAAgBO,EAAO,qBAER,GAAM,GAEhDlB,EAAK,cACDmB,EAAaN,EACbC,EACAN,EACAU,EACAD,EACAR,CACJ,CACJ,CC7IO,SAASW,GAAkBC,EAClC,CACI,KAAK,aAAaA,EAAO,MAAM,EAC/B,KAAK,WAAWC,GAAkBD,EAAM,UAAW,CAAC,EAAG,MAAM,EAI7D,IAAME,EAAS,CAAC,EAChB,KAAOF,EAAM,UAAU,OAASA,EAAM,UAAU,cAE5CE,EAAO,KAAKC,GAAcH,EAAM,SAAS,CAAC,EAI9C,IAAMI,EAAmBF,EAAO,KAAKG,GAAKA,EAAE,SAAW,MAAM,EAC7D,GAAI,CAACD,EAED,MAAAE,EAAoB,EACd,IAAI,MAAM,uBAAuB,EAI3C,IAAMC,EAAUC,EAAiBJ,EAAiB,UAAW,CAAC,EACxDK,EAASD,EAAiBJ,EAAiB,UAAW,CAAC,EACvDM,EAAeF,EAAiBJ,EAAiB,UAAW,CAAC,EAC7DO,EAAS,IAAIC,GAAU,KAAMH,EAAQC,CAAY,EAGnDG,EAAa,GACXC,EAAYC,GAAiBb,EAAQ,MAAM,EACjD,GAAIY,EACJ,CACI,IAAIE,EAAOb,GAAcW,EAAU,SAAS,EAC5C,KAAOE,EAAK,SAAW,QAEnBA,EAAOb,GAAcW,EAAU,SAAS,EAE5CD,EAAaZ,GAAkBe,EAAK,UAAWA,EAAK,UAAU,MAAM,EAAE,KAAK,CAC/E,CACIH,EAAW,OAAS,IAEpBA,EAAa,WAAYJ,GAAU,EAAK,GAAG,IAAIC,EAAe,GAAG,IAErEC,EAAO,WAAaE,EACpBF,EAAO,cAAc,eAAiBE,EACtCI,GACI,gBAAgBJ,CAAU,SAC1BK,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EAGA,IAAMC,EAAkBJ,GAAiBb,EAAQ,MAAM,EACvD,GAAI,CAACiB,EAED,MAAAb,EAAoB,EACd,IAAI,MAAM,iBAAiB,EAIrC,IAAMc,EAAaT,EAAO,cAAc,WAGlCU,EAAaN,GAAiBb,EAAQ,MAAM,EAC5CoB,EAAaP,GAAiBb,EAAQ,MAAM,GAC9CoB,IAAe,QAAaD,IAAe,SAE3C,KAAK,SAASA,EAAYC,EAAYF,CAAU,EAGpDA,EAAW,WAAaA,EAAW,WAAW,OAAOG,GAAKA,EAAE,iBAAmBC,EAAgBD,EAAE,aAAa,EAAE,GAAG,EAG/GH,EAAW,WAAW,KAAKK,GAAKA,EAAE,uBAAyBC,EAAe,iBAAiB,IAAM,QAEjGN,EAAW,cAAcO,GAAU,KAAKC,EAAkB,CAAC,EAG3DR,EAAW,WAAW,KAAKK,GAAKA,EAAE,uBAAyBC,EAAe,iBAAiB,IAAM,QAEjGN,EAAW,cAAcO,GAAU,KAAKE,EAAkB,CAAC,EAI/D,QAASC,EAAI,EAAGA,EAAIvB,EAASuB,IAC7B,CACI,IAAM9B,EAAQG,GAAcgB,EAAgB,SAAS,EACrD,KAAK,aAAanB,EAAO,MAAM,EAC/B,IAAM+B,EAAO9B,GAAkBD,EAAM,UAAW,CAAC,EAC7C+B,IAAS,QAAUA,IAAS,SAE5BzB,EAAoB,EACpB,KAAK,aAAa,sDAAsDyB,CAAI,GAAG,GAInFC,GAAW,KAAK,KAAMhC,EAAOW,EAAO,aAAa,CACrD,CACA,KAAK,WAAWA,CAAM,EACtB,KAAK,eAAeA,EAAO,aAAa,EACxCL,EAAoB,CACxB,CClGA,SAAS2B,GAAoBC,EAC7B,CACI,IAAIC,EACAC,EAAO,GACX,OAAQF,EACR,CACI,QACA,KAAKG,EAAW,OAChB,KAAKA,EAAW,WAChB,KAAKA,EAAW,WAChB,KAAKA,EAAW,SAChB,KAAKA,EAAW,OACZ,OAEJ,KAAKA,EAAW,OACZF,EAAaG,EAAiB,aAC9B,MACJ,KAAKD,EAAW,KACZF,EAAaG,EAAiB,aAC9B,MACJ,KAAKD,EAAW,gBACZF,EAAaI,EAAgB,gBAC7BH,EAAO,GACP,MACJ,KAAKC,EAAW,IACZF,EAAaI,EAAgB,IAC7BH,EAAO,GACP,MACJ,KAAKC,EAAW,OACZF,EAAaI,EAAgB,YAC7BH,EAAO,GACP,MACJ,KAAKC,EAAW,OACZF,EAAaI,EAAgB,YAC7BH,EAAO,GACP,MACJ,KAAKC,EAAW,WACZF,EAAaI,EAAgB,qBAC7BH,EAAO,GACP,MACJ,KAAKC,EAAW,OACZF,EAAaI,EAAgB,WAC7BH,EAAO,GACP,MACJ,KAAKC,EAAW,SACZF,EAAaG,EAAiB,eAC9B,MACJ,KAAKD,EAAW,aACZF,EAAaG,EAAiB,aAC9B,MACJ,KAAKD,EAAW,gBACZF,EAAaG,EAAiB,gBAC9B,MACJ,KAAKD,EAAW,WACZF,EAAaG,EAAiB,WAC9B,MACJ,KAAKD,EAAW,gBACZF,EAAaG,EAAiB,gBAC9B,KACR,CACA,GAAIH,IAAe,OAEf,MAAM,IAAI,MAAM,uBAAuBD,CAAM,EAAE,EAEnD,MAAO,CAAE,KAAMC,EAAY,KAAMC,CAAK,CAC1C,CAOA,SAASI,GAAuBC,EAAaC,EAC7C,CACI,OAAQD,EACR,CACI,QACA,KAAKE,EAAgB,KACjB,OACJ,KAAKA,EAAgB,IACjB,OAAOC,EAAe,IAC1B,KAAKD,EAAgB,KACjB,MAAO,CAAE,IAAKC,EAAe,mBAAoB,UAAWF,EAAS,EAAG,EAC5E,KAAKC,EAAgB,MACjB,OAAOC,EAAe,SAC1B,KAAKD,EAAgB,OACjB,OAAOC,EAAe,kBAG1B,KAAKD,EAAgB,YACjB,OAAOC,EAAe,YAC1B,KAAKD,EAAgB,aACjB,OAAOC,EAAe,aAC1B,KAAKD,EAAgB,WACjB,OAAOC,EAAe,WAC1B,KAAKD,EAAgB,YACjB,OAAOC,EAAe,YAC1B,KAAKD,EAAgB,cACjB,MAAO,CAAE,IAAKC,EAAe,cAAe,UAAW,IAAOF,CAAO,EACzE,KAAKC,EAAgB,cACjB,OAAOC,EAAe,cAG1B,KAAKD,EAAgB,YACjB,OAAOC,EAAe,YAC1B,KAAKD,EAAgB,aACjB,OAAOC,EAAe,aAC1B,KAAKD,EAAgB,WACjB,OAAOC,EAAe,WAC1B,KAAKD,EAAgB,YACjB,OAAOC,EAAe,YAC1B,KAAKD,EAAgB,cACjB,MAAO,CAAE,IAAKC,EAAe,cAAe,WAAY,IAAOF,GAAU,EAAG,EAChF,KAAKC,EAAgB,cACjB,OAAOC,EAAe,cAE1B,KAAKD,EAAgB,aACjB,OAAOC,EAAe,gBAC1B,KAAKD,EAAgB,QACjB,OAAOC,EAAe,eAC1B,KAAKD,EAAgB,WACjB,OAAOC,EAAe,kBAC1B,KAAKD,EAAgB,WACjB,OAAOC,EAAe,kBAG1B,KAAKD,EAAgB,WACjB,OAAOC,EAAe,WAC1B,KAAKD,EAAgB,YACjB,OAAOC,EAAe,YAC1B,KAAKD,EAAgB,WACjB,OAAOC,EAAe,WAC1B,KAAKD,EAAgB,YACjB,OAAOC,EAAe,WAC9B,CACJ,CAQA,SAASC,GAAwBX,EAAQO,EACzC,CACI,OAAIP,IAAWG,EAAW,YAAcI,IAAgBE,EAAgB,MAG7DC,EAAe,cAEjBV,IAAWG,EAAW,QAAUI,IAAgBE,EAAgB,MAG9DC,EAAe,cAEjBV,IAAWG,EAAW,QAAUI,IAAgBE,EAAgB,aAG9DC,EAAe,iBAEjBV,IAAWG,EAAW,QAAUI,IAAgBE,EAAgB,KAG9DC,EAAe,eAEjBV,IAAWG,EAAW,QAAUI,IAAgBE,EAAgB,aAG9DC,EAAe,iBAEjBV,IAAWG,EAAW,QAAUI,IAAgBE,EAAgB,MAG9DC,EAAe,cAItB,MAER,CAuDO,SAASE,GACZC,EACAC,EACAC,EACAC,EACAC,EAEJ,CASI,IAAMC,EAAqBC,GAAwBN,EAAQE,CAAW,EAIlEK,EAIAC,EACAC,EAAc,GACdC,EAAuB,GACvBC,EAAWP,EACf,GAAIC,IAAuB,OAC3B,CAEI,IAAMO,EAAoBC,GAAuBX,EAAaE,CAAK,EACnE,GAAIQ,IAAsB,OAC1B,CAEIE,EAAgB,wBAAwBZ,CAAW,EAAE,EACrD,MACJ,CAWA,GAPAK,EAAuBK,EACnBA,EAAkB,YAAc,SAEhCD,EAAWC,EAAkB,UAC7BL,EAAuBK,EAAkB,KAE7CJ,EAAYO,GAAoBf,CAAM,EAClCQ,IAAc,OAClB,CAEIM,EAAgB,mBAAmBd,CAAM,EAAE,EAC3C,MACJ,CACJ,MAGIO,EAAuBF,EACvBI,EAAc,GACdD,EAAY,CAAE,KAAMQ,EAAiB,aAAc,KAAM,EAAM,EAC/DN,EAAuB,GAE3B,IAAIO,EAAkBF,GAAoBd,CAAO,EACjD,GAAIgB,IAAoB,OACxB,CAEIH,EAAgB,oBAAoBb,CAAO,EAAE,EAC7C,MACJ,CAGA,IAAIiB,EACJ,GAAIR,EAMAQ,EAAkB,MAGtB,CAGI,IAAMC,EAAkBhB,EAAY,GAEhCiB,EAAmBjB,GAAa,GAAM,GACtCiB,IAAoBC,GAAoB,QAAUF,IAAoBE,GAAoB,SAE1FD,EAAkBD,GAEtB,IAAMG,EAAmBnB,GAAa,GAAM,EACxCoB,EAAoBpB,GAAa,GAAM,EAEvCI,IAAyBiB,EAAe,oBAKpCpB,EAAQ,IAERmB,EAAmB,GAG3BL,EAAkBO,GACdL,EACAE,EACAC,EACAf,EAAU,KACVA,EAAU,IACd,CACJ,CAKID,IAAyBiB,EAAe,qBAExCb,EAAW,KAAK,IAAI,IAAK,KAAK,IAAI,EAAGA,CAAQ,CAAC,GAGlD,IAAMe,EAAsBvB,GAAa,EAAK,GACxCwB,EAAsBxB,GAAa,EAAK,EACxCyB,EAAsBzB,GAAa,EAAI,EACzC0B,EAAqBJ,GACrBC,EACAC,EACAC,EACAX,EAAgB,KAChBA,EAAgB,IACpB,EAEA,GAAIR,EACJ,CACI,IAAMqB,EAAOD,EACbA,EAAqBX,EACrBA,EAAkBY,CACtB,CAGA,OAAO,IAAIC,GACPb,EACAW,EACAtB,EACAI,EACA,CACJ,CAEJ,CChYO,SAASqB,GAAiBC,EAAOC,EACxC,CACI,IAAMC,EAAUF,EAAM,UAIhBG,EAAa,CAAC,EAIdC,EAAa,CAAC,EAGpBC,EAAiBH,EAAS,CAAC,EAC3B,IAAMI,EAAoBD,EAAiBH,EAAS,CAAC,EACrD,QAASK,EAAI,EAAGA,EAAID,EAAmBC,IACvC,CAEI,IAAMC,EAASH,EAAiBH,EAAS,CAAC,EACpCO,EAAUJ,EAAiBH,EAAS,CAAC,EACrCQ,EAAcL,EAAiBH,EAAS,CAAC,EACzCS,EAAYN,EAAiBH,EAAS,CAAC,EAEvCU,GADQP,EAAiBH,EAAS,CAAC,EAAI,IACtB,GAYvB,GAAIM,IAAW,GAAKC,IAAY,GAAKE,IAAc,EACnD,CAII,IAAIE,EACJ,OAAQH,EACR,CACI,KAAKI,EAAgB,IACjBD,EAAY,IAAIE,EAAUC,EAAe,IAAKJ,CAAK,EACnD,MACJ,KAAKE,EAAgB,KACjBD,EAAY,IAAIE,EAAUC,EAAe,mBAAoB,CAACJ,EAAQ,GAAK,EAAG,EAC9E,MACJ,KAAKE,EAAgB,aACjBD,EAAY,IAAIE,EAAUC,EAAe,gBAAiBJ,CAAK,EAC/D,MACJ,KAAKE,EAAgB,QACjBD,EAAY,IAAIE,EAAUC,EAAe,eAAgBJ,CAAK,EAC9D,MAGJ,KAAKE,EAAgB,WACjBD,EAAY,IAAIE,EAAUC,EAAe,WAAYJ,CAAK,EAC1D,MACJ,KAAKE,EAAgB,YACjBD,EAAY,IAAIE,EAAUC,EAAe,YAAaJ,CAAK,EAC3D,MACJ,KAAKE,EAAgB,WACjBD,EAAY,IAAIE,EAAUC,EAAe,WAAYJ,CAAK,EAC1D,MACJ,KAAKE,EAAgB,YACjBD,EAAY,IAAIE,EAAUC,EAAe,YAAaJ,CAAK,EAC3D,MAGJ,KAAKE,EAAgB,YACjBD,EAAY,IAAIE,EAAUC,EAAe,YAAaJ,CAAK,EAC3D,MACJ,KAAKE,EAAgB,aACjBD,EAAY,IAAIE,EAAUC,EAAe,aAAcJ,CAAK,EAC5D,MACJ,KAAKE,EAAgB,WAEjBD,EAAY,IAAIE,EAAUC,EAAe,WAAYJ,EAAO,EAAK,EACjE,MACJ,KAAKE,EAAgB,YAEjBD,EAAY,IAAIE,EAAUC,EAAe,YAAaJ,EAAO,EAAK,EAClE,MACJ,KAAKE,EAAgB,cACjBD,EAAY,IAAIE,EAAUC,EAAe,cAAeJ,CAAK,EAC7D,MACJ,KAAKE,EAAgB,cAEjB,IAAMG,EAAY,IAAOL,EACzBC,EAAY,IAAIE,EAAUC,EAAe,cAAeC,CAAS,EACjE,MAGJ,KAAKH,EAAgB,YACjBD,EAAY,IAAIE,EAAUC,EAAe,YAAaJ,CAAK,EAC3D,MACJ,KAAKE,EAAgB,aACjBD,EAAY,IAAIE,EAAUC,EAAe,aAAcJ,CAAK,EAC5D,MACJ,KAAKE,EAAgB,WAEjBD,EAAY,IAAIE,EAAUC,EAAe,WAAYJ,EAAO,EAAK,EACjE,MACJ,KAAKE,EAAgB,YAEjBD,EAAY,IAAIE,EAAUC,EAAe,YAAaJ,EAAO,EAAK,EAClE,MACJ,KAAKE,EAAgB,cACjBD,EAAY,IAAIE,EAAUC,EAAe,cAAeJ,CAAK,EAC7D,MACJ,KAAKE,EAAgB,cAEjB,IAAMI,EAAoB,IAAON,EACjCC,EAAY,IAAIE,EAAUC,EAAe,cAAeE,CAAiB,EACzE,MAEJ,KAAKJ,EAAgB,WACjBD,EAAY,IAAIE,EAAUC,EAAe,kBAAmBJ,CAAK,EACjE,MACJ,KAAKE,EAAgB,WACjBD,EAAY,IAAIE,EAAUC,EAAe,kBAAmBJ,CAAK,EACjE,MACJ,KAAKE,EAAgB,MAEjB,IAAMK,EAAO,KAAK,MAAMP,EAAQ,GAAG,EAC7BQ,EAAQ,KAAK,MAAMR,EAAQO,EAAO,GAAG,EAC3CN,EAAY,IAAIE,EAAUC,EAAe,SAAUI,CAAK,EACxDjB,EAAW,KAAK,IAAIY,EAAUC,EAAe,WAAYG,CAAI,CAAC,EAC9D,KACR,CACIN,GAEAV,EAAW,KAAKU,CAAS,CAEjC,KAGA,CACI,IAAIQ,EAAc,GAEZC,EAAuB,CAACV,EAAOW,EAAUC,IAC/C,CAKI,IAAMC,EAAgBb,EAAQ,KAG9B,GAFAT,EAAW,KAAK,IAAIY,EAAUQ,EAAUE,CAAa,CAAC,EAElDA,GAAiB,IACrB,CACI,IAAMC,EAAa,KAAK,MAAO,OAAYd,CAAK,EAChDT,EAAW,QAAQwB,GACnB,CACQA,EAAE,gBAAkBH,IAEpBG,EAAE,gBAAkBD,EAE5B,CAAC,CACL,CACJ,EAkFA,GA/EIjB,IAAYmB,EAAW,KAGnBpB,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,MAEhEX,EAAW,KAAK,IAAIY,EAAUC,EAAe,cAAeJ,CAAK,CAAC,EAIlEJ,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,KAEhEX,EAAW,KAAK,IAAIY,EAAUC,EAAe,eAAgBJ,CAAK,CAAC,EAInEJ,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,aAEhEX,EAAW,KAAK,IAAIY,EAAUC,EAAe,iBAAkBJ,CAAK,CAAC,EAIrEJ,IAAWoB,EAAW,YAAclB,IAAgBI,EAAgB,MAEpEX,EAAW,KAAK,IAAIY,EAAUC,EAAe,cAAeJ,CAAK,CAAC,EAIlEJ,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,MAEhEX,EAAW,KAAK,IAAIY,EAAUC,EAAe,cAAeJ,CAAK,CAAC,EAIlEJ,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,aAEhEX,EAAW,KAAK,IAAIY,EAAUC,EAAe,iBAAkBJ,CAAK,CAAC,EAIrEJ,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,MAIhEX,EAAW,KAAK,IAAIY,EAAUC,EAAe,YAAaJ,EAAQ,GAAG,CAAC,EAItEJ,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,WAEhEQ,EAAqBV,EAAOI,EAAe,mBAAoBA,EAAe,UAAU,EAIxFR,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,YAEhEQ,EAAqBV,EAAOI,EAAe,oBAAqBA,EAAe,WAAW,EAI1FR,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,WAEhEQ,EAAqBV,EAAOI,EAAe,mBAAoBA,EAAe,UAAU,EAIxFR,IAAWoB,EAAW,QAAUlB,IAAgBI,EAAgB,YAEhEQ,EAAqBV,EAAOI,EAAe,oBAAqBA,EAAe,WAAW,EAI1FK,EAAc,GAMlBA,EAAc,GAEdA,IAAgB,GACpB,CAII,IAAMQ,EAAMC,GACRtB,EACAC,EACAC,EACAC,EACAC,CACJ,EACIiB,GAGAzB,EAAW,KAAKyB,CAAG,EACnBE,EAAgB,2CAA4CC,EAAc,UAAU,GAIpFC,EAAgB,qCAAqC,CAE7D,CACJ,CACJ,CAGA,OAAIhC,GAEAG,EAAW,KAEP8B,GAAU,KAAKC,EAAoB,EAEnCD,GAAU,KAAKE,EAAyB,CAC5C,EAGG,CAAE,WAAYhC,EAAY,WAAYD,CAAW,CAC5D,CClSO,SAASkC,GAASC,EAAWC,EAAWC,EAC/C,CACI,GAAIF,EAEA,KAAOA,EAAU,UAAU,aAAeA,EAAU,UAAU,QAC9D,CACI,IAAMG,EAAOC,GAAcJ,EAAU,SAAS,EAC9C,KAAK,aAAaG,EAAM,OAAQ,MAAM,EACtC,IAAME,EAAcC,GAAiBH,EAAM,EAAI,EAC/CD,EAAK,cAAc,GAAGG,EAAY,UAAU,EAC5CH,EAAK,cAAc,GAAGG,EAAY,UAAU,CAChD,CAGJ,GAAIJ,EAEA,KAAOA,EAAU,UAAU,aAAeA,EAAU,UAAU,QAC9D,CACI,IAAMM,EAAOH,GAAcH,EAAU,SAAS,EAC9C,KAAK,aAAaM,EAAM,OAAQ,MAAM,EACtC,IAAMF,EAAcC,GAAiBC,EAAM,EAAK,EAChDL,EAAK,cAAc,GAAGG,EAAY,UAAU,EAC5CH,EAAK,cAAc,GAAGG,EAAY,UAAU,CAChD,CAER,CC7BA,IAAMG,GAAe,CACjB,IAAK,EACL,KAAM,CACV,EAQA,SAASC,GAAQC,EAAMC,EACvB,CACI,IAAMC,EAAiB,KAAK,IAAI,EAAGD,EAAiB,EAAI,CAAC,EACnDE,EAAc,KAAK,IAAI,EAAGF,EAAiB,CAAC,EAE9CG,EACAC,EAAa,GAEbJ,IAAmB,GAEnBG,EAAsB,IACtBC,EAAa,IAIbD,EAAsBF,EAE1B,IAAMI,EAAeN,EAAK,OAASC,EAC7BM,EAAa,IAAI,aAAaD,CAAY,EAChD,GAAIL,IAAmB,EACvB,CAEI,IAAMO,EAAM,IAAI,WAAWR,EAAK,MAAM,EACtC,QAASS,EAAI,EAAGA,EAAID,EAAI,OAAQC,IAE5BF,EAAWE,CAAC,EAAID,EAAIC,CAAC,EAAI,KAEjC,KAGI,SAAS,EAAI,EAAG,EAAIF,EAAW,OAAQ,IACvC,CAEI,IAAIG,EAASC,EAAiBX,EAAMC,CAAc,EAE9CI,EAGAE,EAAW,CAAC,EAAKG,EAASN,EAAuB,IAK7CM,GAAUR,IAEVQ,GAAUP,GAEdI,EAAW,CAAC,EAAIG,EAASN,EAEjC,CAEJ,OAAOG,CACX,CAOA,SAASK,GAASZ,EAAMC,EACxB,CACI,IAAMK,EAAeN,EAAK,OAASC,EAC7BM,EAAa,IAAI,aAAaD,CAAY,EAChD,QAASG,EAAI,EAAGA,EAAIF,EAAW,OAAQE,IACvC,CAEI,IAAMI,EAAQF,EAAiBX,EAAMC,CAAc,EAI/CS,EAASG,EAAQ,GAGrBH,GAAU,IAGV,IAAII,EAAWJ,GAAU,EAErBK,EAAWL,EAAS,GACpBI,EAAW,IAEXC,GAAY,IAGhBA,GAAYA,GAAY,GAAK,EACzBD,EAAW,IAEXC,EAAWA,GAAaD,EAAW,GAGvC,IAAME,EAAYH,EAAQ,IAAME,EAAW,CAACA,EAG5CR,EAAWE,CAAC,EAAIO,EAAY,KAChC,CACA,OAAOT,CACX,CAEO,IAAMU,GAAN,cAAwBC,EAC/B,CAKI,oBAIA,WAKA,WAKA,eAMA,QAcA,YACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA1B,EAEJ,CACI,MACIkB,EACAC,EACAC,EACAC,EACAM,GAAY,WACZL,EACAC,CACJ,EACA,KAAK,oBAAsBC,EAC3B,KAAK,cAAgB,GAIrB,KAAK,QAAUC,EAAU,UACzB,KAAK,WAAaC,EAClB,KAAK,eAAiB1B,CAC1B,CAEA,cACA,CACI,GAAI,EAAE,KAAK,mBAAmB,YAE1B,OAAO,IAAI,aAAa,CAAC,EAE7B,GAAI,CAAC,KAAK,WACV,CACI,IAAIM,EACJ,OAAQ,KAAK,WACb,CACI,QACIsB,EAAgB,gDAAgD,KAAK,UAAU,EAAE,EACjFtB,EAAa,IAAI,aAAa,KAAK,QAAQ,OAAS,KAAK,cAAc,EACvE,MAEJ,KAAKT,GAAa,IACdS,EAAaR,GAAQ,KAAK,QAAS,KAAK,cAAc,EACtD,MAEJ,KAAKD,GAAa,KACdS,EAAaK,GAAS,KAAK,QAAS,KAAK,cAAc,EACvD,KAER,CACA,KAAK,aAAaL,CAAU,CAChC,CACA,OAAO,KAAK,UAChB,CAKA,aAAauB,EACb,CACI,MAAM,aAAaA,CAAS,CAChC,CAEA,WAAWC,EACX,CACI,OAAI,KAAK,eAAiB,KAAK,aAEpB,MAAM,WAAWA,CAAW,EAEnC,KAAK,aAAejC,GAAa,KAAO,KAAK,iBAAmB,EAGzD,KAAK,QAET,KAAK,YAAY,CAC5B,CACJ,EC5NO,SAASkC,GAAeC,EAC/B,CACIC,GACI,4BACAC,EAAc,UAClB,EACA,IAAIC,EAAW,EACf,KAAOH,EAAc,UAAU,aAAeA,EAAc,UAAU,QACtE,CACI,IAAMI,EAAYC,GAAcL,EAAc,SAAS,EACvD,KAAK,aAAaI,EAAW,MAAM,EACnC,KAAK,WAAWE,GAAkBF,EAAU,UAAW,CAAC,EAAG,MAAM,EAKjE,IAAMG,EAAa,CAAC,EACpB,KAAOH,EAAU,UAAU,aAAeA,EAAU,UAAU,QAE1DG,EAAW,KAAKF,GAAcD,EAAU,SAAS,CAAC,EAGtD,IAAMI,EAAWD,EAAW,KAAKE,GAAKA,EAAE,SAAW,MAAM,EACzD,GAAI,CAACD,EAED,MAAM,IAAI,MAAM,gCAAgC,EAGpD,IAAME,EAAaC,EAAiBH,EAAS,UAAW,CAAC,EACnDI,EAAiBD,EAAiBH,EAAS,UAAW,CAAC,EAC7D,GAAII,IAAmB,EAEnB,MAAM,IAAI,MAAM,gDAAgDA,CAAc,WAAW,EAE7F,IAAMC,EAAaF,EAAiBH,EAAS,UAAW,CAAC,EAEzDG,EAAiBH,EAAS,UAAW,CAAC,EAEtCG,EAAiBH,EAAS,UAAW,CAAC,EAGtC,IAAMM,EADiBH,EAAiBH,EAAS,UAAW,CAAC,EACrB,EAElCO,EAAYR,EAAW,KAAKE,GAAKA,EAAE,SAAW,MAAM,EACrDM,GAED,KAAK,aAAa,kCAAkC,EAIxD,IAAMC,EAAWC,GAAiBV,EAAY,MAAM,EAChDW,EAAa,WAAWf,CAAQ,GACpC,GAAIa,EACJ,CACI,IAAIG,EAAYd,GAAcW,EAAS,SAAS,EAChD,KAAOG,EAAU,SAAW,QAAUH,EAAS,UAAU,aAAeA,EAAS,UAAU,QAEvFG,EAAYd,GAAcW,EAAS,SAAS,EAE5CG,EAAU,SAAW,SAErBD,EAAaZ,GAAkBa,EAAU,UAAWA,EAAU,IAAI,EAAE,KAAK,EAEjF,CAGA,IAAIC,EAAY,GACZC,EAAc,EACdC,EAAkB,EAElBC,EADiBR,EAAU,KAAOD,EACH,EAC/BU,EAAsB,EAGpBC,EAAYlB,EAAW,KAAKE,GAAKA,EAAE,SAAW,MAAM,EAC1D,GAAIgB,EACJ,CAEId,EAAiBc,EAAU,UAAW,CAAC,EACvCL,EAAYT,EAAiBc,EAAU,UAAW,CAAC,EAGnDJ,EAAcK,GACVD,EAAU,UAAUA,EAAU,UAAU,cAAc,EACtDA,EAAU,UAAUA,EAAU,UAAU,cAAc,CAC1D,EAGA,IAAME,EAAuB,KAAK,MAAMN,EAAc,GAAG,EAYzD,GAXAD,GAAaO,EACbN,GAAeM,EAAuB,IAMtCH,GAFuBb,EAAiBc,EAAU,UAAW,CAAC,EAEtB,GAAK,QAE7Cd,EAAiBc,EAAU,UAAW,CAAC,EACnBd,EAAiBc,EAAU,UAAW,CAAC,IACvC,EACpB,CAEId,EAAiBc,EAAU,UAAW,CAAC,EACvCH,EAAkBX,EAAiBc,EAAU,UAAW,CAAC,EACzD,IAAMG,EAAWjB,EAAiBc,EAAU,UAAW,CAAC,EACxDF,EAAgBD,EAAkBM,CACtC,CACJ,MAGIC,EAAgB,+CAA+C,EAGnE,KAAK,QAAQ,KAAK,IAAIC,GAClBZ,EACAL,EACAO,EACAC,EACAC,EACAC,EACAC,EACAT,EACAL,EACAI,CACJ,CAAC,EAGDX,IACA4B,EACI,qBAAqBb,CAAU,GAC/BhB,EAAc,KACdA,EAAc,UAClB,CACJ,CACA8B,EAAoB,CACxB,CC7IA,IAAMC,GAAN,cAA2BC,EAC3B,CAKI,YAAYC,EACZ,CACI,MAAM,EACN,KAAK,UAAY,IAAIC,EAAiBD,CAAM,EAC5CE,GAAiB,mBAAoBC,EAAc,IAAI,EAClD,KAAK,YAENC,EAAoB,EACpB,KAAK,aAAa,mBAAmB,GAIzC,IAAIC,EAAaC,GAAc,KAAK,UAAW,EAAK,EACpD,KAAK,aAAaD,EAAY,MAAM,EACpC,KAAK,WAAWE,GAAkB,KAAK,UAAW,CAAC,EAAE,YAAY,EAAG,MAAM,EAM1E,IAAMC,EAAS,CAAC,EAChB,KAAO,KAAK,UAAU,aAAe,KAAK,UAAU,QAEhDA,EAAO,KAAKF,GAAc,KAAK,SAAS,CAAC,EAI7C,KAAK,cAAc,KAAU,MAC7B,KAAK,cAAc,KAAU,YAG7B,KAAK,cAAc,KAAU,cAC7B,KAAK,cAAc,KAAU,UAC7B,KAAK,cAAc,KAAU,kBAC7B,KAAK,cAAc,KAAU,IAAI,KAAK,EAAE,aAAa,EAGrD,IAAMG,EAAYC,GAAiBF,EAAQ,MAAM,EACjD,GAAIC,EAEA,KAAOA,EAAU,UAAU,aAAeA,EAAU,UAAU,QAC9D,CACI,IAAME,EAAWL,GAAcG,EAAU,SAAS,EAClD,KAAK,cAAcE,EAAS,MAAM,EAAIJ,GAAkBI,EAAS,UAAWA,EAAS,IAAI,CAC7F,CAEJ,KAAK,cAAc,KAAU,KAAK,cAAc,MAAW,mBACvD,KAAK,cAAc,OAGnB,KAAK,cAAc,MAAW;AAAA,EAAO,KAAK,cAAc,KACxD,OAAO,KAAK,cAAc,MAE9B,KAAK,cAAc,MAAW;AAAA,4CAE9B,OAAW,CAACC,EAAMC,CAAK,IAAK,OAAO,QAAQ,KAAK,aAAa,EAEzDC,EACI,MAAMF,CAAI,SAASC,CAAK,IACxBV,EAAc,KACdA,EAAc,UAClB,EAIJ,IAAIY,EAAYP,EAAO,KAAKQ,GAAKA,EAAE,SAAW,MAAM,EAC/CD,IAEDX,EAAoB,EACpB,KAAK,aAAa,gBAAgB,GAEtC,KAAK,iBAAmBa,EAAiBF,EAAU,UAAW,CAAC,EAC/DD,EACI,2BAA2B,KAAK,gBAAgB,GAChDX,EAAc,KACdA,EAAc,UAClB,EAGA,IAAIe,EAAgBR,GAAiBF,EAAQ,MAAM,EAC9CU,IAEDd,EAAoB,EACpB,KAAK,aAAa,gBAAgB,GAEtC,KAAK,eAAec,CAAa,EAGjC,IAAIC,EAAsBT,GAAiBF,EAAQ,MAAM,EACpDW,IAEDf,EAAoB,EACpB,KAAK,aAAa,gBAAgB,GAEtC,KAAK,sBAAsBe,CAAmB,EAG9C,KAAK,MAAM,EACXL,EACI,0BAA0B,KAAK,cAAc,MAAW,SAAS,aAAa,KAAK,QAAQ,MAAM;AAAA,YACjG,KAAK,YAAY,MAAM,wBAAwB,KAAK,QAAQ,MAAM,cAClEX,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EACAC,EAAoB,CACxB,CAMA,aAAagB,KAAUC,EACvB,CACI,QAAWC,KAAUD,EAEjB,GAAID,EAAM,OAAO,YAAY,IAAME,EAAO,YAAY,EAElD,OAGRlB,EAAoB,EACpB,KAAK,aAAa,uCAAuCiB,EAAS,SAAS,CAAC,UAAUD,EAAM,OAAO,YAAY,CAAC,GAAG,CACvH,CAMA,WAAWG,EAAMF,EACjB,CACQE,EAAK,YAAY,IAAMF,EAAS,YAAY,IAE5CjB,EAAoB,EACpB,KAAK,aAAa,2BAA2BiB,EAAS,YAAY,CAAC,UAAUE,EAAK,YAAY,CAAC,GAAG,EAE1G,CAKA,aAAaC,EACb,CACI,MAAM,IAAI,MAAM,oBAAoBA,CAAK,6BAA6B,CAC1E,CAEA,kBACA,CACI,MAAM,iBAAiB,EACvB,OAAO,KAAK,SAChB,CACJ,EAEA1B,GAAa,UAAU,sBAAwB2B,GAC/C3B,GAAa,UAAU,kBAAoB4B,GAC3C5B,GAAa,UAAU,SAAW6B,GAClC7B,GAAa,UAAU,eAAiB8B,GC9KjC,IAAMC,GAAN,cAA4BC,CACnC,CAKI,YAAYC,EACZ,CACI,MAAM,EAGN,IAAMC,EAAID,EAAU,aAIpB,KAAK,cAAiBA,EAAUC,EAAI,CAAC,GAAK,EAAKD,EAAUC,CAAC,EAC1D,KAAK,eAAiBC,GAAYF,EAAUC,EAAI,CAAC,EAAGD,EAAUC,EAAI,CAAC,CAAC,EACpED,EAAU,cAAgB,CAC9B,CACJ,EAOO,SAASG,GAAeC,EAC/B,CACI,IAAIC,EAAO,CAAC,EACZ,KAAOD,EAAe,UAAU,OAASA,EAAe,UAAU,cAE9DC,EAAK,KAAK,IAAIP,GAAcM,EAAe,SAAS,CAAC,EAGzD,OAAAC,EAAK,IAAI,EACFA,CACX,CChCO,IAAMC,GAAN,cAAyBC,EAChC,CAKI,YAAYC,EACZ,CACI,MAAMA,CAAM,CAChB,CAMA,cAAcC,EACd,CACI,IAAIC,EAAe,KAAK,WAAW,KAAKC,GAAKA,EAAE,gBAAkBC,EAAe,UAAU,EACtFF,GAEA,KAAK,cAAcD,EAAYC,EAAa,cAAc,CAAC,CAEnE,CACJ,EAWO,SAASG,GAAiBC,EAASC,EAAYC,EAAYP,EAAaQ,EAC/E,CACI,IAAMC,EAAkBJ,EAAQ,IAC1BK,EAAkBL,EAAQ,IAE5BM,EAAW,EACXC,EAAW,EACf,QAAWb,KAAUS,EAEjB,QAASK,EAAI,EAAGA,EAAId,EAAO,WAAYc,IACvC,CACI,IAAMC,EAAYL,EAAgBG,GAAU,EACtCG,EAAUN,EAAgBG,CAAQ,EAClCI,EAAOV,EAAW,MAAMQ,EAAWC,CAAO,EAC1CE,EAAYP,EAAgBC,GAAU,EACtCO,EAAUR,EAAgBC,CAAQ,EAClCQ,EAAOZ,EAAW,MAAMU,EAAWC,CAAO,EAEhD,GAAIF,EAAK,KAAKd,GAAKA,EAAE,gBAAkBC,EAAe,UAAU,IAAM,OACtE,CAEI,IAAMiB,EAAOrB,EAAO,WAAW,EAC/BqB,EAAK,cAAc,GAAGJ,CAAI,EAC1BI,EAAK,cAAc,GAAGD,CAAI,EAC1BC,EAAK,cAAcpB,CAAW,CAClC,MAIID,EAAO,WAAW,cAAc,GAAGiB,CAAI,EACvCjB,EAAO,WAAW,cAAc,GAAGoB,CAAI,CAE/C,CAER,CCpEO,IAAME,GAAN,cAAqBC,EAC5B,CAKI,eAIA,WAAa,EAOb,YAAYC,EAAaC,EACzB,CACI,MAAMA,CAAG,EACT,KAAK,WAAaC,GAAkBF,EAAY,UAAW,EAAE,EACxD,QAAQ,cAAe,EAAE,EAE9B,KAAK,QAAUG,EAAiBH,EAAY,UAAW,CAAC,EACxD,KAAK,KAAOG,EAAiBH,EAAY,UAAW,CAAC,EACrD,KAAK,eAAiBG,EAAiBH,EAAY,UAAW,CAAC,EAG/D,KAAK,QAAUG,EAAiBH,EAAY,UAAW,CAAC,EACxD,KAAK,MAAQG,EAAiBH,EAAY,UAAW,CAAC,EACtD,KAAK,WAAaG,EAAiBH,EAAY,UAAW,CAAC,CAC/D,CAKA,YACA,CACI,IAAMI,EAAI,IAAIC,GAAW,IAAI,EAC7B,YAAK,YAAY,KAAKD,CAAC,EAChBA,CACX,CACJ,EAQO,SAASE,GAAYN,EAAaO,EACzC,CAII,IAAIC,EAAU,CAAC,EACf,KAAOR,EAAY,UAAU,OAASA,EAAY,UAAU,cAC5D,CACI,IAAIS,EAAS,IAAIX,GAAOE,EAAaO,CAAM,EAC3C,GAAIC,EAAQ,OAAS,EACrB,CACI,IAAME,EAAWF,EAAQA,EAAQ,OAAS,CAAC,EAC3CE,EAAS,WAAaD,EAAO,eAAiBC,EAAS,cAC3D,CACAF,EAAQ,KAAKC,CAAM,CACvB,CAEA,OAAAD,EAAQ,IAAI,EACLA,CACX,CCxEO,IAAMG,GAAN,cAA6BC,EACpC,CAKI,YAAYC,EACZ,CACI,MAAMA,CAAI,CACd,CAMA,UAAUC,EACV,CACI,IAAIC,EAAW,KAAK,WAAW,KAAKC,GAAKA,EAAE,gBAAkBC,EAAe,QAAQ,EAChFF,GAEA,KAAK,UAAUD,EAAQC,EAAS,cAAc,CAAC,CAEvD,CACJ,EAUO,SAASG,GAAqBC,EAASC,EAAsBC,EAAsBP,EAASQ,EACnG,CACI,IAAMC,EAAkBJ,EAAQ,IAC1BK,EAAkBL,EAAQ,IAE5BM,EAAW,EACXC,EAAW,EACf,QAAWC,KAAcL,EAErB,QAASM,EAAI,EAAGA,EAAID,EAAW,WAAYC,IAC3C,CACI,IAAMC,EAAYN,EAAgBG,GAAU,EACtCI,EAAUP,EAAgBG,CAAQ,EAClCK,EAAOX,EAAqB,MAAMS,EAAWC,CAAO,EACpDE,EAAYR,EAAgBC,GAAU,EACtCQ,EAAUT,EAAgBC,CAAQ,EAClCS,EAAOb,EAAqB,MAAMW,EAAWC,CAAO,EAE1D,GAAIF,EAAK,KAAKf,GAAKA,EAAE,gBAAkBC,EAAe,QAAQ,EAC9D,CAEI,IAAMkB,EAAOR,EAAW,WAAW,EACnCQ,EAAK,cAAc,GAAGJ,CAAI,EAC1BI,EAAK,cAAc,GAAGD,CAAI,EAC1BC,EAAK,UAAUrB,CAAO,CAC1B,MAIIa,EAAW,WAAW,cAAc,GAAGI,CAAI,EAC3CJ,EAAW,WAAW,cAAc,GAAGO,CAAI,CAEnD,CAER,CC9DO,IAAME,GAAN,cAAyBC,EAChC,CAII,eAIA,WAAa,EAMb,YAAYC,EACZ,CACI,MAAM,EACN,KAAK,eAAiBC,GAAkBD,EAAgB,UAAW,EAAE,EACrE,KAAK,eAAiBE,EAAiBF,EAAgB,UAAW,CAAC,CACvE,CAKA,YACA,CACI,IAAMG,EAAI,IAAIC,GAAe,IAAI,EACjC,YAAK,gBAAgB,KAAKD,CAAC,EACpBA,CACX,CACJ,EAOO,SAASE,GAAgBL,EAChC,CAII,IAAIM,EAAc,CAAC,EACnB,KAAON,EAAgB,UAAU,OAASA,EAAgB,UAAU,cACpE,CACI,IAAIO,EAAa,IAAIT,GAAWE,CAAe,EAE/C,GAAIM,EAAY,OAAS,EACzB,CACI,IAAME,EAAWF,EAAYA,EAAY,OAAS,CAAC,EACnDE,EAAS,WAAaD,EAAW,eAAiBC,EAAS,cAC/D,CACAF,EAAY,KAAKC,CAAU,CAC/B,CAEA,OAAAD,EAAY,IAAI,EACTA,CACX,CC9DO,SAASG,GAAeC,EAC/B,CACI,IAAIC,EAAO,CAAC,EACZ,KAAOD,EAAe,UAAU,OAASA,EAAe,UAAU,cAClE,CACI,IAAME,EAAYF,EAAe,UAC3BG,EAAaC,EAAiBF,EAAW,CAAC,EAC1CG,EAAcD,EAAiBF,EAAW,CAAC,EAC3CI,EAASC,GAAYL,EAAUA,EAAU,cAAc,EAAGA,EAAUA,EAAU,cAAc,CAAC,EAC7FM,EAAsBJ,EAAiBF,EAAW,CAAC,EACnDO,EAAgBL,EAAiBF,EAAW,CAAC,EACnDD,EAAK,KAAK,IAAIS,GAAiBP,EAAYK,EAAqBH,EAAaC,EAAQG,CAAa,CAAC,CACvG,CAEA,OAAAR,EAAK,IAAI,EACFA,CACX,CCjBO,SAASU,GAAgBC,EAChC,CAII,IAAMC,EAAkB,CAAC,EAInBC,EAAkB,CAAC,EAEzB,KAAOF,EAAW,UAAU,OAASA,EAAW,UAAU,cAEtDE,EAAgB,KAAKC,EAAiBH,EAAW,UAAW,CAAC,CAAC,EAC9DC,EAAgB,KAAKE,EAAiBH,EAAW,UAAW,CAAC,CAAC,EAElE,MAAO,CACH,IAAKC,EACL,IAAKC,CACT,CACJ,CCHO,IAAME,GAAN,cAAyBC,EAChC,CAII,YAAc,CAAC,EAKf,QAAU,CAAC,EAOX,YAAYC,EAAaC,EAAiB,GAC1C,CACI,MAAM,EACFA,GAEA,QAAQ,KAAK,0EAA0E,EAE3F,IAAMC,EAAgB,IAAIC,EAAiBH,CAAW,EACtDI,GAAiB,yBAA0BC,EAAc,IAAI,EACxDH,IAEDI,EAAoB,EACpB,KAAK,aAAa,mBAAmB,GAIzC,IAAIC,EAAaC,GAAcN,EAAe,EAAK,EACnD,KAAK,aAAaK,EAAY,MAAM,EAEpC,IAAME,EAAOC,GAAkBR,EAAe,CAAC,EAAE,YAAY,EAC7D,GAAIO,IAAS,QAAUA,IAAS,OAE5B,MAAAH,EAAoB,EACd,IAAI,YAAY,qDAAqDG,CAAI,GAAG,EAOtF,IAAME,EAAYF,IAAS,OAGvBG,EAAYJ,GAAcN,CAAa,EAC3C,KAAK,aAAaU,EAAW,MAAM,EACnC,IAAMC,EAAaH,GAAkBE,EAAU,UAAW,CAAC,EAC3D,GAAIC,IAAe,OAEf,MAAAP,EAAoB,EACd,IAAI,YAAY,0CAA0CO,CAAU,GAAG,EAMjF,IAAIC,EAGJ,KAAOF,EAAU,UAAU,OAASA,EAAU,UAAU,cACxD,CACI,IAAIG,EAAQP,GAAcI,EAAU,SAAS,EACzCI,EAEJ,OAAQD,EAAM,OAAO,YAAY,EACjC,CACI,IAAM,OACN,IAAK,OACDC,EAAO,GAAGC,EAAiBF,EAAM,UAAW,CAAC,CAAC,IAAIE,EAAiBF,EAAM,UAAW,CAAC,CAAC,GACtF,KAAK,cAAcA,EAAM,MAAM,EAAIC,EACnC,MAEJ,IAAK,OACDA,EAAON,GAAkBK,EAAM,UAAWA,EAAM,UAAU,OAAQ,EAAK,EACvE,KAAK,cAAcA,EAAM,MAAM,EAAIC,EACnC,MAGJ,IAAK,OACD,IAAME,EAAgBC,GAAeJ,CAAK,EAC1CC,EAAO,eAAeE,EAAc,MAAM,GAG1C,KAAK,kBAAoBA,EACzB,KAAK,wBAA0B,GAC/B,KAAK,cAAcH,EAAM,MAAM,EAAIC,EACnC,MAEJ,IAAK,OAEgBN,GAAkBK,EAAM,UAAW,CAAC,IACpC,SAEbK,EAAgB,wBAAyBf,EAAc,UAAU,EACjES,EAAYC,GAEhB,MAEJ,QACIC,EAAON,GAAkBK,EAAM,UAAWA,EAAM,UAAU,MAAM,EAChE,KAAK,cAAcA,EAAM,MAAM,EAAIC,CAC3C,CAEAI,EACI,MAAML,EAAM,MAAM,SAASC,CAAI,IAC/BX,EAAc,KACdA,EAAc,UAClB,CACJ,CAEA,IAAMgB,EAAaP,IAAc,OAc7BQ,EAAU,CAAC,EACXD,IAGAC,EAAQ,KAAOd,GAAcM,EAAU,SAAS,EAChDQ,EAAQ,KAAOd,GAAcM,EAAU,SAAS,EAChDQ,EAAQ,KAAOd,GAAcM,EAAU,SAAS,EAChDQ,EAAQ,KAAOd,GAAcM,EAAU,SAAS,EAChDQ,EAAQ,KAAOd,GAAcM,EAAU,SAAS,EAChDQ,EAAQ,KAAOd,GAAcM,EAAU,SAAS,EAChDQ,EAAQ,KAAOd,GAAcM,EAAU,SAAS,EAChDQ,EAAQ,KAAOd,GAAcM,EAAU,SAAS,EAChDQ,EAAQ,KAAOd,GAAcM,EAAU,SAAS,GAIpD,IAAMS,EAAYf,GAAcN,EAAe,EAAK,EACpD,KAAK,aAAaqB,EAAW,MAAM,EACnC,KAAK,WAAWb,GAAkBR,EAAe,CAAC,EAAG,MAAM,EAG3DkB,EAAgB,4BAA6Bf,EAAc,IAAI,EAC/D,IAAImB,EAAkBhB,GAAcN,EAAe,EAAK,EACxD,KAAK,aAAasB,EAAiB,MAAM,EAIzC,IAAIC,EAEJ,GAAId,EACJ,CACIS,EACI,6DACAf,EAAc,IAClB,EACA,GACA,CAIIoB,EAAaC,GAAU,OAAOxB,EAAc,OAAO,MAC/CA,EAAc,aACdA,EAAc,aAAeqB,EAAU,KAAO,EAClD,CAAC,EAAE,KAAK,CAAC,CACb,OACOI,EACP,CACI,MAAArB,EAAoB,EACd,IAAI,MAAM,oCAAoCqB,CAAC,EAAE,CAC3D,CACAP,EACI,uCAAuCK,EAAW,MAAM,GACxDpB,EAAc,KACdA,EAAc,KAClB,CACJ,MAMIoB,EAAavB,EACb,KAAK,qBAAuBA,EAAc,aAG9CkB,EACI,sCAAsCG,EAAU,KAAO,EAAE,GACzDlB,EAAc,KACdA,EAAc,KAClB,EACAH,EAAc,cAAgBqB,EAAU,KAAO,GAG/CH,EAAgB,iCAAkCf,EAAc,IAAI,EACpE,IAAIuB,EAAcpB,GAAcN,CAAa,EAC7C,KAAK,aAAa0B,EAAa,MAAM,EACrClB,GAAkBkB,EAAY,UAAW,CAAC,EAG1C,IAAMC,EAAYrB,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaC,EAAW,MAAM,EAEnC,IAAMC,EAAYtB,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaE,EAAW,MAAM,EAEnC,IAAMC,EAAYvB,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaG,EAAW,MAAM,EAEnC,IAAMC,EAAYxB,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaI,EAAW,MAAM,EAEnC,IAAMC,EAAYzB,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaK,EAAW,MAAM,EAEnC,IAAMC,EAAY1B,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaM,EAAW,MAAM,EAEnC,IAAMC,EAAY3B,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaO,EAAW,MAAM,EAEnC,IAAMC,EAAY5B,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaQ,EAAW,MAAM,EAEnC,IAAMC,EAAY7B,GAAcoB,EAAY,SAAS,EACrD,KAAK,aAAaS,EAAW,MAAM,EAMnCnC,EAAc,aAAe,KAAK,qBAClC,IAAMoC,EAAUC,GAAYF,EAAWZ,EAAY,CAACJ,CAAU,EAE9D,GAAIA,EACJ,CAEI,IAAMmB,EAAWD,GAAYjB,EAAQ,KAAM,IAAI,aAAa,CAAC,EAAG,EAAK,EACjEkB,EAAS,SAAWF,EAAQ,QAE5BA,EAAQ,QAAQ,CAACG,EAAGC,IACpB,CACID,EAAE,YAAcD,EAASE,CAAC,EAAE,WAC5BD,EAAE,mBAAqBD,EAASE,CAAC,EAAE,mBAAqB,EAC5D,CAAC,CAGT,CAEAJ,EAAQ,QAAQG,GAAKA,EAAE,WAAaA,EAAE,WAAW,KAAK,CAAC,EACvD,KAAK,QAAQ,KAAK,GAAGH,CAAO,EAM5B,IAAIK,EAAuBC,GAAeR,CAAS,EAM/CS,GAAuB1B,GAAegB,CAAS,EAE7CW,GAAcC,GAAgBd,CAAS,EAE7C,GAAIZ,EACJ,CAEI,IAAM2B,EAAQD,GAAgBzB,EAAQ,IAAI,EACtC0B,EAAM,SAAWF,GAAY,SAE7BA,GAAY,QAAQ,CAACG,EAAMP,IAC3B,CACIO,EAAK,gBAAkBD,EAAMN,CAAC,EAAE,eAChCO,EAAK,gBAAkBD,EAAMN,CAAC,EAAE,cACpC,CAAC,EAEDI,GAAY,QAAQ,CAACG,EAAMP,IAC3B,CACQA,EAAII,GAAY,OAAS,IAEzBG,EAAK,WAAaH,GAAYJ,EAAI,CAAC,EAAE,eAAiBO,EAAK,eAEnE,CAAC,EAGT,CAEAH,GAAY,QAAQJ,GAAKA,EAAE,eAAiBA,EAAE,eAAe,KAAK,CAAC,EACnE,KAAK,YAAY,KAAK,GAAGI,EAAW,EAEpC,IAAMI,GAAcC,GAAgBjB,CAAS,EAE7C,GAAIb,EACJ,CACI,IAAM+B,EAAeD,GAAgB7B,EAAQ,IAAI,EACjD,QAASoB,EAAI,EAAGA,EAAIQ,GAAY,IAAI,OAAQR,IAExCQ,GAAY,IAAIR,CAAC,GAAKU,EAAa,IAAIV,CAAC,GAAK,GAEjD,QAASA,EAAI,EAAGA,EAAIQ,GAAY,IAAI,OAAQR,IAExCQ,GAAY,IAAIR,CAAC,GAAKU,EAAa,IAAIV,CAAC,GAAK,EAErD,CAMAW,GACIH,GACAP,EACAE,GACA,KAAK,QACL,KAAK,WACT,EAMA,IAAIS,GAAmBV,GAAeZ,CAAS,EAM3CuB,GAAmBpC,GAAeY,CAAS,EAEzCyB,EAAUC,GAAY5B,EAAW,IAAI,EAE3C,GAAIR,EACJ,CAEI,IAAMqC,EAAUD,GAAYnC,EAAQ,KAAM,IAAI,EAC1CoC,EAAQ,SAAWF,EAAQ,SAE3BA,EAAQ,QAAQ,CAACG,EAAMjB,IACvB,CACIiB,EAAK,YAAcD,EAAQhB,CAAC,EAAE,WAC9BiB,EAAK,gBAAkBD,EAAQhB,CAAC,EAAE,cACtC,CAAC,EAEDc,EAAQ,QAAQ,CAACI,EAAQlB,IACzB,CACQA,EAAIc,EAAQ,OAAS,IAErBI,EAAO,WAAaJ,EAAQd,EAAI,CAAC,EAAE,eAAiBkB,EAAO,eAEnE,CAAC,EAGT,CAGAJ,EAAQ,QAAQK,GAAKA,EAAE,aAAeA,EAAE,WAAW,KAAK,CAAC,EACzD,KAAK,WAAW,GAAGL,CAAO,EAE1B,IAAMM,EAAcX,GAAgBrB,CAAS,EAE7C,GAAIT,EACJ,CACI,IAAM+B,EAAeD,GAAgB7B,EAAQ,IAAI,EACjD,QAASoB,EAAI,EAAGA,EAAIoB,EAAY,IAAI,OAAQpB,IAExCoB,EAAY,IAAIpB,CAAC,GAAKU,EAAa,IAAIV,CAAC,GAAK,GAEjD,QAASA,EAAI,EAAGA,EAAIoB,EAAY,IAAI,OAAQpB,IAExCoB,EAAY,IAAIpB,CAAC,GAAKU,EAAa,IAAIV,CAAC,GAAK,EAErD,CAEAqB,GAAiBD,EAAaR,GAAkBC,GAAkB,KAAK,YAAa,KAAK,OAAO,EAChG,KAAK,MAAM,EACXnC,EACI,0BAA0B,KAAK,cAAc,IAAO,aAAa,KAAK,QAAQ,MAAM;AAAA,YACpF,KAAK,YAAY,MAAM,wBAAwB,KAAK,QAAQ,MAAM,cAClEf,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EACAC,EAAoB,CACxB,CAMA,aAAaS,EAAOiD,EACpB,CACQjD,EAAM,OAAO,YAAY,IAAMiD,EAAS,YAAY,IAEpD1D,EAAoB,EACpB,KAAK,aAAa,mCAAmC0D,EAAS,YAAY,CAAC,UAAUjD,EAAM,OAAO,YAAY,CAAC,GAAG,EAE1H,CAMA,WAAWC,EAAMgD,EACjB,CACQhD,EAAK,YAAY,IAAMgD,EAAS,YAAY,IAE5C1D,EAAoB,EACpB,KAAK,aAAa,6BAA6B0D,EAAS,YAAY,CAAC,UAAUhD,EAAK,YAAY,CAAC,KAAK,EAE9G,CACJ,ECzbO,SAASiD,GAAcC,EAC9B,CACI,IAAMC,EAAQD,EAAO,MAAM,EAAG,EAAE,EAC1BE,EAAI,IAAIC,EAAiBF,CAAK,EAEpC,OADWG,GAAkBF,EAAG,EAAG,EAAK,EAAE,YAAY,IAC3C,OAEA,IAAIG,GAAaL,CAAM,EAE3B,IAAIM,GAAWN,EAAQ,EAAK,CACvC,CCZO,SAASO,IAChB,CACQ,KAAK,iBAAiB,cAAc,KAAKC,GAAKA,EAAE,KAAOC,EAAsB,GAE7E,KAAK,iBAAiB,gBAAgBA,EAAsB,CAEpE,CAQO,SAASC,GAAqBC,EAAMC,EAC3C,CAGI,IAAMC,EAAaC,GAAcH,CAAI,EACrC,KAAK,iBAAiB,gBAAgBE,EAAYJ,GAAwBG,CAAM,EAEhF,IAAMG,EAAQ,KAAK,iBAAiB,yBAAyB,EAC7DA,EAAM,IAAI,EACVA,EAAM,QAAQN,EAAsB,EACpC,KAAK,iBAAiB,oBAAoBM,CAAK,EAI3C,KAAK,YAAc,QAEnB,KAAK,yBAAyB,KAAK,SAAS,EAEhDC,EAAgB,yCAAyCJ,CAAM,GAAIK,EAAc,WAAYA,EAAc,KAAK,CACpH,CCtCO,SAASC,IAChB,CAII,IAAMC,EAAW,KAAK,iBAAiB,cAAc,EACrD,KAAK,WAAW,EAChB,KAAK,UAAU,mBAAoBA,CAAQ,EAC3C,KAAK,kBAAkB,EAEvB,KAAK,kBAAkB,QAAQC,GAC/B,CACIA,EAAE,cAAc,EAAK,CACzB,CAAC,EACD,KAAK,oBAAoB,EAAK,CAClC,CCZO,SAASC,GAAqBC,EAAWC,EAAQ,GACxD,CACI,KAAK,cAAgB,EACrB,QAASC,EAAI,EAAGA,EAAI,KAAK,kBAAkB,OAAQA,IAE/C,KAAK,kBAAkBA,CAAC,EAAE,iBAAiBF,EAAWC,CAAK,EAE/D,KAAK,cAAgBD,CACzB,CCPO,SAASG,GAAgBC,EAChC,CACIA,EAAQ,KAAK,MAAMA,CAAK,EACxB,QAASC,EAAI,EAAGA,EAAI,KAAK,kBAAkB,OAAQA,IAE/C,KAAK,kBAAkBA,CAAC,EAAE,oBAAoBC,GAAkB,aAAcF,CAAK,CAE3F,CCXO,IAAMG,GAAN,MAAMC,CACb,CAKI,QAMA,KAMA,UAMA,UAMA,WAMA,aAMA,gBAMA,kBAMA,kBAMA,YASA,eAMA,yBAMA,oBAMA,QAMA,iBAMA,YAQA,OAAO,mBAAmBC,EAAsBC,EAChD,CACI,IAAMC,EAAgBF,EAAqB,kBAAkBC,CAAa,EACpEE,EAAkB,IAAIJ,EAE5B,OAAAI,EAAgB,QAAUD,EAAc,OAAO,QAC/CC,EAAgB,KAAOD,EAAc,cAAc,EACnDC,EAAgB,UAAYA,EAAgB,OAASD,EAAc,KACnEC,EAAgB,WAAaD,EAAc,WAC3CC,EAAgB,aAAeD,EAAc,aAC7CC,EAAgB,UAAYD,EAAc,OAAO,WAGjDC,EAAgB,gBAAkBD,EAAc,gBAChDC,EAAgB,kBAAoBD,EAAc,kBAClDC,EAAgB,kBAAoBD,EAAc,kBAGlDC,EAAgB,eAAiBD,EAAc,eAC/CC,EAAgB,YAAcD,EAAc,iBAG5CC,EAAgB,yBAA2BD,EAAc,yBACzDC,EAAgB,oBAAsBD,EAAc,oBAGpDC,EAAgB,QAAUD,EAAc,QACxCC,EAAgB,iBAAmBD,EAAc,iBACjDC,EAAgB,YAAcD,EAAc,YACrCC,CACX,CAQA,OAAO,qBAAqBH,EAAsBC,EAAeE,EACjE,CACI,IAAMD,EAAgBF,EAAqB,kBAAkBC,CAAa,EAC1EC,EAAc,YAAYC,EAAgB,OAAO,EACjDD,EAAc,SAASC,EAAgB,WAAW,EAGlDD,EAAc,gBAAkBC,EAAgB,gBAChDD,EAAc,kBAAoBC,EAAgB,kBAClDD,EAAc,kBAAoBC,EAAgB,kBAClDD,EAAc,oBAAoB,EAGlCA,EAAc,eAAiBC,EAAgB,eAC/CD,EAAc,iBAAmBC,EAAgB,YACjDD,EAAc,yBAA2BC,EAAgB,yBACzDD,EAAc,oBAAsBC,EAAgB,oBACpDD,EAAc,iBAAmBC,EAAgB,iBAGjDD,EAAc,cAAc,EAAK,EACjCA,EAAc,cAAcC,EAAgB,KAAMA,EAAgB,SAAS,EAC3ED,EAAc,cAAcC,EAAgB,OAAO,EACnDD,EAAc,cAAcC,EAAgB,UAAU,EACtDD,EAAc,aAAeC,EAAgB,YACjD,CACJ,ECtKO,IAAMC,GAAN,MAAMC,CACb,CAKI,iBAMA,YAMA,WAMA,IAMA,cAMA,OAMA,cAQA,OAAO,0BAA0BC,EACjC,CACI,IAAMC,EAAW,IAAIF,EAErB,OAAAE,EAAS,iBACLD,EAAqB,kBAAkB,IAAI,CAACE,EAAGC,IAC3CC,GAAgB,mBAAmBJ,EAAsBG,CAAC,CAAC,EAGnEF,EAAS,YAAcD,EAAqB,mBAAmB,YAAY,EAE3EC,EAAS,WAAaD,EAAqB,WAC3CC,EAAS,IAAMD,EAAqB,IAGpCC,EAAS,OAASD,EAAqB,OACvCC,EAAS,cAAgBD,EAAqB,kBAC9CC,EAAS,cAAgBD,EAAqB,cAG9CC,EAAS,cAAgB,CAAC,EACnBA,CAEX,CAOA,OAAO,cAAcD,EAAsBC,EAC3C,CAYI,IAVAD,EAAqB,UAAUC,EAAS,MAAM,EAG9CD,EAAqB,mBAAmBK,GAAoB,WAAYJ,EAAS,UAAU,EAC3FD,EAAqB,mBAAmBK,GAAoB,UAAWJ,EAAS,GAAG,EACnFD,EAAqB,qBAAqBC,EAAS,aAAa,EAChED,EAAqB,kBAAoBC,EAAS,cAClDD,EAAqB,mBAAmB,YAAYC,EAAS,WAAW,EAGjED,EAAqB,kBAAkB,OAASC,EAAS,iBAAiB,QAE7ED,EAAqB,kBAAkB,EAI3CC,EAAS,iBAAiB,QAAQ,CAACK,EAAiBC,IACpD,CACIH,GAAgB,qBAAqBJ,EAAsBO,EAAOD,CAAe,CACrF,CAAC,EAEDE,EAAgB,oCAAqCC,EAAc,IAAI,CAC3E,CACJ,ECzGO,SAASC,GAAyBC,EACzC,CACI,KAAK,UAAYA,EACjBC,GAAoB,cAAc,KAAMD,CAAQ,EAChDE,EAAgB,gCAAiCC,EAAc,IAAI,EACnE,KAAK,oBAAoB,CAC7B,CCHO,SAASC,GAAYC,EAAWC,EAAWC,EAClD,CACI,GAAIA,EAAcF,EAEd,MAAO,GAGX,IAAMG,GAAQD,EAAcF,IAAc,EAAIC,GAAa,IAK3D,OAAO,KAAK,IAAIE,EAAQ,CAAC,EAAEA,EAAO,GAAK,EAAI,EAAI,CACnD,CCjBO,IAAMC,GAAN,MAAMC,CACb,CAOI,OAAO,UAAUC,EAAOC,EAAcC,EACtC,CACI,IAAMC,EAAOH,EAAM,wBAA0BA,EAAM,OAAO,aAE1D,GAAIG,IAAS,EACb,CACIJ,EAAoB,iBAAiBC,EAAOC,EAAcE,CAAI,EAC9D,MACJ,CACA,OAAQD,EACR,CACI,KAAKE,GAAmB,YACpB,KAAK,iBAAiBJ,EAAOC,EAAcE,CAAI,EAC/C,OAEJ,KAAKC,GAAmB,OACxB,QACI,KAAK,gBAAgBJ,EAAOC,EAAcE,CAAI,EAC9C,OAEJ,KAAKC,GAAmB,gBACpBL,EAAoB,iBAAiBC,EAAOC,EAAcE,CAAI,EAC9D,MACR,CACJ,CAQA,OAAO,gBAAgBH,EAAOC,EAAcE,EAC5C,CACI,IAAME,EAASL,EAAM,OACjBM,EAAMD,EAAO,OACXE,EAAaF,EAAO,WAE1B,GAAIA,EAAO,UACX,CACI,IAAMG,EAAaH,EAAO,QAAUA,EAAO,UAC3C,QAAS,EAAI,EAAG,EAAIJ,EAAa,OAAQ,IACzC,CAEI,KAAOK,GAAOD,EAAO,SAEjBC,GAAOE,EAIX,IAAMC,EAAQ,CAAC,CAACH,EACZI,EAAOD,EAAQ,EAEnB,KAAOC,GAAQL,EAAO,SAElBK,GAAQF,EAGZ,IAAMG,EAAWL,EAAMG,EAGjBG,EAAQL,EAAWG,CAAI,EACvBG,EAAQN,EAAWE,CAAK,EAC9BR,EAAa,CAAC,EAAKY,GAASD,EAAQC,GAASF,EAE7CL,GAAOH,CACX,CACJ,KAGI,SAASW,EAAI,EAAGA,EAAIb,EAAa,OAAQa,IACzC,CAGI,IAAML,EAAQ,CAAC,CAACH,EACVI,EAAOD,EAAQ,EAGrB,GAAIC,GAAQL,EAAO,IACnB,CACIL,EAAM,SAAW,GACjB,MACJ,CAEA,IAAMW,EAAWL,EAAMG,EAGjBG,EAAQL,EAAWG,CAAI,EACvBG,EAAQN,EAAWE,CAAK,EAC9BR,EAAaa,CAAC,EAAKD,GAASD,EAAQC,GAASF,EAE7CL,GAAOH,CACX,CAEJH,EAAM,OAAO,OAASM,CAC1B,CAQA,OAAO,iBAAiBN,EAAOC,EAAcE,EAC7C,CACI,IAAME,EAASL,EAAM,OACjBM,EAAMD,EAAO,OACXE,EAAaF,EAAO,WAE1B,GAAIA,EAAO,UACX,CACI,IAAMG,EAAaH,EAAO,QAAUA,EAAO,UAC3C,QAAS,EAAI,EAAG,EAAIJ,EAAa,OAAQ,IACzC,CAEI,KAAOK,GAAOD,EAAO,SAEjBC,GAAOE,EAIX,IAAIE,EAAO,CAAC,CAACJ,EAAM,EAEnB,KAAOI,GAAQL,EAAO,SAElBK,GAAQF,EAGZP,EAAa,CAAC,EAAIM,EAAWG,CAAI,EACjCJ,GAAOH,CACX,CACJ,KAGI,SAASW,EAAI,EAAGA,EAAIb,EAAa,OAAQa,IACzC,CAGI,IAAMJ,EAAO,CAAC,CAACJ,EAAM,EAGrB,GAAII,GAAQL,EAAO,IACnB,CACIL,EAAM,SAAW,GACjB,MACJ,CAEAC,EAAaa,CAAC,EAAIP,EAAWG,CAAI,EACjCJ,GAAOH,CACX,CAEJE,EAAO,OAASC,CACpB,CASA,OAAO,iBAAiBN,EAAOC,EAAcE,EAC7C,CACI,IAAME,EAASL,EAAM,OACjBM,EAAMD,EAAO,OACXE,EAAaF,EAAO,WAE1B,GAAIA,EAAO,UACX,CACI,IAAMG,EAAaH,EAAO,QAAUA,EAAO,UAC3C,QAAS,EAAI,EAAG,EAAIJ,EAAa,OAAQ,IACzC,CAEI,KAAOK,GAAOD,EAAO,SAEjBC,GAAOE,EAIX,IAAMO,EAAK,CAAC,CAACT,EACTU,EAAKD,EAAK,EACVE,EAAKF,EAAK,EACVG,EAAKH,EAAK,EACRI,EAAIb,EAAMS,EAGZC,GAAMX,EAAO,UAEbW,GAAMR,GAENS,GAAMZ,EAAO,UAEbY,GAAMT,GAENU,GAAMb,EAAO,UAEba,GAAMV,GAIV,IAAMY,EAAMb,EAAWQ,CAAE,EACnBM,EAAKd,EAAWS,CAAE,EAClBM,EAAKf,EAAWU,CAAE,EAClBM,EAAKhB,EAAWW,CAAE,EAIlBM,GAAKF,EAAKF,GAAO,GACjBK,EAAIJ,EAAKC,EACTI,EAAIF,EAAIC,EACRE,EAAID,EAAID,GAAKF,EAAKF,GAAM,GACxBO,EAAIF,EAAIC,EACd1B,EAAa,CAAC,IAAQ0B,EAAIR,EAAKS,GAAKT,EAAIK,GAAKL,EAAIE,EAEjDf,GAAOH,CACX,CACJ,KAGI,SAASW,EAAI,EAAGA,EAAIb,EAAa,OAAQa,IACzC,CAEI,IAAMC,EAAK,CAAC,CAACT,EACTU,EAAKD,EAAK,EACVE,EAAKF,EAAK,EACVG,EAAKH,EAAK,EACRI,EAAIb,EAAMS,EAGhB,GAAIC,GAAMX,EAAO,KACbY,GAAMZ,EAAO,KACba,GAAMb,EAAO,IACjB,CACIL,EAAM,SAAW,GACjB,MACJ,CAGA,IAAMoB,EAAMb,EAAWQ,CAAE,EACnBM,EAAKd,EAAWS,CAAE,EAClBM,EAAKf,EAAWU,CAAE,EAClBM,EAAKhB,EAAWW,CAAE,EAIlBM,GAAKF,EAAKF,GAAO,GACjBK,EAAIJ,EAAKC,EACTI,EAAIF,EAAIC,EACRE,EAAID,EAAID,GAAKF,EAAKF,GAAM,GACxBO,EAAIF,EAAIC,EACd1B,EAAaa,CAAC,IAAQa,EAAIR,EAAKS,GAAKT,EAAIK,GAAKL,EAAIE,EAEjDf,GAAOH,CACX,CAEJH,EAAM,OAAO,OAASM,CAC1B,CACJ,ECzPO,SAASuB,GACZC,EAAOC,EACPC,EAAYC,EACZC,EAAkBC,EAClBC,EAAkBC,EAClBC,EAAYC,EAEhB,CAoBI,GAlBKT,EAAM,aAGHC,GAAWD,EAAM,mBAGjBA,EAAM,YAAc,GACpBU,GAAe,aAAaV,CAAK,EACjCW,GAAmB,aAAaX,CAAK,EACjCA,EAAM,OAAO,cAAgB,IAE7BA,EAAM,OAAO,UAAY,KAOjCA,EAAM,oBAAoBY,EAAe,kBAAkB,EAAI,KAE/D,OAAIZ,EAAM,cAENA,EAAM,SAAW,IAEdA,EAAM,SAIjB,IAAIa,EAAYb,EAAM,UAGlBc,EAAQd,EAAM,oBAAoBY,EAAe,QAAQ,EACvD,KAAK,oBAAoBZ,EAAM,QAAQ,EACvC,KAAK,mBACPe,EAAYf,EAAM,oBAAoBY,EAAe,UAAU,EAG7DI,EAAS,KAAK,MAAM,QAAQ,KAAK,QAAQ,OAAO,IAAIhB,EAAM,OAAO,EAUvE,GATIgB,IAAW,QAAaA,GAAQ,UAAY,IAG5CH,EAAYG,EAAO,SAEnBF,GAASE,EAAO,YAIhBhB,EAAM,kBAAoB,GAC9B,CAEI,IAAMiB,EAAU,KAAK,KAAKhB,EAAUD,EAAM,WAAaA,EAAM,mBAAoB,CAAC,EAC5EkB,GAAOL,EAAYb,EAAM,kBAE/Be,GAAaG,IAAQ,EAAID,EAC7B,CAGAH,IAAUD,EAAYb,EAAM,OAAO,SAAWA,EAAM,oBAAoBY,EAAe,WAAW,EAGlG,IAAIO,EAAmB,EACnBC,EAA2B,EAGzBC,EAAgBrB,EAAM,oBAAoBY,EAAe,aAAa,EACtEU,EAActB,EAAM,oBAAoBY,EAAe,cAAc,EACrEW,EAAiBvB,EAAM,oBAAoBY,EAAe,gBAAgB,EAChF,GAAIS,IAAkB,GAAKC,IAAgB,GAAKC,IAAmB,EACnE,CAEI,IAAMC,EAAWxB,EAAM,UAAYyB,GAAmBzB,EAAM,oBAAoBY,EAAe,WAAW,CAAC,EACrGc,GAAYC,GAAa3B,EAAM,oBAAoBY,EAAe,UAAU,CAAC,EAC7EgB,GAAcC,GAAYL,EAAUE,GAAWzB,CAAO,EAE5Da,GAASc,IAAeP,EAAgB,KAAK,kBAAkBS,GAAkB,oBAAoB,GAGrGV,GAA4B,CAACQ,GAAcN,EAE3CH,GAAoBS,GAAcL,CACtC,CAGA,IAAMQ,EAAgB/B,EAAM,oBAAoBY,EAAe,aAAa,EACtEoB,EAAchC,EAAM,oBAAoBY,EAAe,cAAc,EACrEqB,EAAiBjC,EAAM,oBAAoBY,EAAe,gBAAgB,EAEhF,GAAImB,IAAkB,GAAKE,IAAmB,GAAKD,IAAgB,EACnE,CAEI,IAAME,EAAWlC,EAAM,UAAYyB,GAAmBzB,EAAM,oBAAoBY,EAAe,WAAW,CAAC,EACrGuB,GAAYR,GAAa3B,EAAM,oBAAoBY,EAAe,UAAU,CAAC,EAC7EwB,GAAcP,GAAYK,EAAUC,GAAWlC,CAAO,EAE5Da,GAASsB,IAAeL,EAAgB,KAAK,kBAAkBD,GAAkB,oBAAoB,GAGrGV,GAA4B,CAACgB,GAAcJ,EAE3Cb,GAAoBiB,GAAcH,CACtC,CAGA,GAAI,KAAK,eAAe,MAAQ,EAChC,CAEI,IAAMI,EAAiBR,GACnB7B,EAAM,UAAY,KAAK,eAAe,MACtC,KAAK,eAAe,KACpBC,CACJ,EACIoC,IAEAvB,GAASuB,EAAiB,KAAK,eAAe,MAEtD,CAGA,IAAMC,EAAmBtC,EAAM,oBAAoBY,EAAe,aAAa,EACzE2B,EAAoBvC,EAAM,oBAAoBY,EAAe,gBAAgB,EAEnF,GAAI2B,IAAsB,GAAKD,IAAqB,EACpD,CACI,IAAME,EAAS7B,GAAmB,SAASX,EAAOC,CAAO,EAEzDkB,GAAoBqB,EAASD,EAC7BzB,GAAS0B,EAASF,CACtB,CAGAlB,GAA4BpB,EAAM,gBAGlC,IAAMyC,EAAa,CAAC,EAAE3B,EAAQC,EAAY,KACtC0B,IAAezC,EAAM,qBAErBA,EAAM,mBAAqByC,EAC3BzC,EAAM,wBAA0B,KAAK,IAAI,EAAGyC,EAAa,IAAI,GAKjE,IAAMC,EAAY,IAAI,aAAajC,CAAW,EAI9C,OAAIT,EAAM,OAAO,cAAgB,GAAK,CAACA,EAAM,aAEzCU,GAAe,MACXV,EACA0C,EACAtB,EACA,KAAK,MAAM,6BACf,EACOpB,EAAM,WAIjB2C,GAAoB,UAAU3C,EAAO0C,EAAW,KAAK,MAAM,iBAAiB,EAG5EE,GAAc,MAAM5C,EAAO0C,EAAWvB,EAAkB,KAAK,MAAM,qBAAqB,EAGxFT,GAAe,MACXV,EACA0C,EACAtB,EACA,KAAK,MAAM,6BACf,EAEA,KAAK,eACDpB,EACA0C,EACAxC,EAAYC,EACZC,EAAkBC,EAClBC,EAAkBC,EAClBC,CACJ,EACOR,EAAM,SACjB,CC5MO,SAAS6C,GAASC,EAAUC,EAAc,MACjD,CACID,GAAY,KAAK,kBAAkBE,GAAkB,eAAe,EAEpE,KAAK,OAAO,QAAQC,GACpB,CACQA,EAAE,UAAYH,IAIlBG,EAAE,oBAAoBC,EAAe,aAAa,EAAIH,EACtDE,EAAE,QAAQ,KAAK,MAAM,gBAAgB,EACzC,CAAC,CACL,CCZO,SAASE,GAAUC,EAAOC,EAAM,GACvC,CACID,EAAQ,KAAK,MAAMA,CAAK,EACxB,KAAK,oBAAoBE,GAAkB,cAAeF,CAAK,EAC1DC,GAILE,EACI,uBAAuB,KAAK,aAAa,sBAAsBH,CAAK,YACpEI,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,MACdA,EAAc,IAClB,CACJ,CClBO,SAASC,GAAmBC,EACnC,CACIA,EAAQ,KAAK,MAAMA,CAAK,EACxBC,EACI,aAAa,KAAK,aAAa,+BAA+BD,CAAK,GACnEE,EAAc,KACdA,EAAc,KAClB,EAUA,KAAK,oBAAoBC,GAAkB,qBAAsBH,EAAQ,EAAE,CAC/E,CChBO,IAAMI,GAA2B,CACpC,eAAgB,EAChB,WAAY,EACZ,aAAc,EACd,gBAAiB,EACjB,gBAAiB,KACrB,EAKaC,GAAmB,CAC5B,cAAe,EACf,MAAO,IACP,IAAK,GACT,EAOMC,GAAqB,CACvB,YAAa,EACb,aAAc,EACd,aAAc,GAEd,gBAAiB,GACjB,mBAAoB,GAEpB,aAAc,GACd,cAAe,GAEnB,EASO,SAASC,GAAgBC,EAChC,CAEI,KAAK,gBAAgBC,EAAgB,YAAY,EAAID,GAAa,EAQlE,IAAME,EAAoB,IAC1B,CACQ,KAAK,eAAe,QAAU,GAAK,KAAK,eAAe,OAAS,GAAK,KAAK,eAAe,QAAU,IAEnG,KAAK,eAAe,MAAQ,GAC5B,KAAK,eAAe,KAAO,EAC3B,KAAK,eAAe,MAAQ,GAEpC,EAEMC,EAAW,CAACC,EAAMC,EAAOC,IAC/B,CACQA,EAAK,OAAS,IAEdA,EAAO,IAAMA,GAEjBC,EACI,KAAKH,CAAI,UAAU,KAAK,aAAa,sBAAsBC,CAAK,KAAKC,CAAI,IACzEE,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,MACdA,EAAc,IAClB,CACJ,EACA,OAAQ,KAAK,eACb,CACI,QACA,KAAKC,GAAgB,KACjB,MAGJ,KAAKA,GAAgB,QACjB,GAAI,KAAK,iBAEL,OAKJ,IAAMC,EAAa,KAAK,gBAAgBT,EAAgB,OAAO,GAAK,EAI9DU,EAAW,KAAK,gBAAgBV,EAAgB,OAAO,GAAK,EAC5DW,EAAgB,KAAK,gBAAgBX,EAAgB,uBAAuB,GAAK,EACvF,OAAQS,EACR,CACI,QACI,GAAIV,IAAc,GAGd,OAEJa,EACI,6BAA6B,KAAK,aAAa,YAAYF,EAAS,SAAS,EAAE,EAC1E,YAAY,CAAC,MAAMA,EAAS,SAC7B,EAAE,EAAE,YAAY,CAAC,qBAAqBX,CAAS,GACnDQ,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,aACdA,EAAc,KACdA,EAAc,KAClB,EACA,MAGJ,KAAKX,GAAiB,cAClB,OAAQc,EACR,CACI,QACI,GAAIX,IAAc,GAGd,OAEJa,EACI,6BAA6B,KAAK,aAAa,YAAYH,EAAW,SAAS,EAAE,CAAC,MAAMC,EAAS,SAC7F,EAAE,CAAC,qBAAqBX,CAAS,GACrCQ,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,aACdA,EAAc,KACdA,EAAc,KAClB,EACA,MAGJ,KAAKV,GAAmB,YACpB,GAAIE,IAAc,GAEd,OAEJE,EAAkB,EAClB,KAAK,eAAe,KAAQF,EAAY,GAAM,EAC9CG,EAAS,eAAgB,GAAGH,CAAS,MAAM,KAAK,eAAe,IAAI,GAAI,IAAI,EAC3E,MAGJ,KAAKF,GAAmB,aACpB,GAAIE,IAAc,GAEd,OAEJE,EAAkB,EAClB,KAAK,eAAe,MAAQF,EAAY,EACxCG,EAAS,gBAAiB,GAAGH,CAAS,MAAM,KAAK,eAAe,KAAK,GAAI,iBAAiB,EAC1F,MAGJ,KAAKF,GAAmB,aACpB,GAAIE,IAAc,GAEd,OAEJE,EAAkB,EAClB,KAAK,eAAe,MAASF,EAAY,GAAM,EAC/CG,EAAS,gBAAiB,GAAGH,CAAS,MAAM,KAAK,eAAe,KAAK,GAAI,SAAS,EAClF,MAGJ,KAAKF,GAAmB,gBAEpB,KAAK,iBAAiBG,EAAgB,WAAYD,CAAS,EAC3DG,EAAS,gBAAiBH,EAAU,SAAS,EAAG,EAAE,EAClD,MAGJ,KAAKF,GAAmB,aAEpB,KAAK,iBAAiBG,EAAgB,WAAYD,CAAS,EAC3DG,EAAS,iBAAkBH,EAAU,SAAS,EAAG,EAAE,EACnD,MAGJ,KAAKF,GAAmB,cAEpB,KAAK,iBAAiBG,EAAgB,YAAaD,CAAS,EAC5DG,EAAS,kBAAmBH,EAAU,SAAS,EAAG,EAAE,EACpD,KACR,CACA,MAEJ,KAAKH,GAAiB,MAClB,MAGJ,KAAKA,GAAiB,IAClB,GAAIc,EAAW,IAKX,MAEJ,IAAMG,EAAM,KAAK,kBAAkBC,GAAkB,mBAAmB,EAClEC,GAAUhB,GAAa,EAAIY,GAAiB,KAClD,KAAK,mBAAmBE,EAAKE,CAAM,EACnC,KACR,CACA,MAEJ,KAAKP,GAAgB,SACrB,KAAKA,GAAgB,OAIjB,IAAMQ,EAAW,KAAK,gBAAgBhB,EAAgB,MAAM,EAAK,KAAK,gBAAgBA,EAAgB,MAAM,GAAK,EACjH,OAAQgB,EACR,CACI,QACIJ,EACI,4BAA4B,KAAK,aAAa,YAAYI,EAAS,SAAS,EAAE,CAAC,qBAAqBjB,CAAS,GAC7GQ,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,aACdA,EAAc,KACdA,EAAc,KAClB,EACA,MAGJ,KAAKZ,GAAyB,eAC1B,KAAK,gBAAgBsB,GAAsBC,EAAiB,eAAe,EAAInB,GAAa,EAC5FG,EAAS,mBAAoBH,EAAU,SAAS,EAAG,WAAW,EAC9D,MAGJ,KAAKJ,GAAyB,aAE1B,IAAMwB,EAAYpB,EAAY,GAC9B,KAAK,oBAAoBe,GAAkB,uBAAwBK,CAAS,EAC5EjB,EAAS,gBAAiBiB,EAAU,SAAS,EAAG,WAAW,EAC3D,MAGJ,KAAKxB,GAAyB,WAG1B,KAAK,UAAUI,EAAY,GAAI,EAAK,EACpC,MAGJ,KAAKJ,GAAyB,gBAC1B,KAAK,mBAAmBI,EAAY,GAAG,EACvC,MAEJ,KAAKJ,GAAyB,gBAC1B,KAAK,gBAAgB,EACrB,KAER,CAER,CACJ,CC/QA,IAAMyB,GAA8B,CAChCC,EAAe,YACfA,EAAe,WAEfA,EAAe,YACfA,EAAe,WAEfA,EAAe,YACfA,EAAe,aACfA,EAAe,WACfA,EAAe,YACfA,EAAe,cACfA,EAAe,cAEfA,EAAe,YACfA,EAAe,aACfA,EAAe,WACfA,EAAe,YACfA,EAAe,cACfA,EAAe,cAEfA,EAAe,SAEfA,EAAe,cACfA,EAAe,cACfA,EAAe,cACfA,EAAe,eAEfA,EAAe,gBACfA,EAAe,eAEfA,EAAe,iBACfA,EAAe,iBAEfA,EAAe,kBACfA,EAAe,iBACnB,EAgBO,SAASC,GAAgBC,EAAQC,EAASC,EACjD,CACI,IAAMC,EAAO,CAACC,EAAGC,EAAKC,IAAQ,KAAK,IAAID,EAAK,KAAK,IAAIC,EAAKF,CAAC,CAAC,EACtDG,EAAkBC,GAAM,KAAK,IAAI,OAAQ,KAAO,KAAK,KAAKA,EAAK,GAAI,CAAC,EACpEC,EAAYC,GAAM,KAAO,KAAO,KAAK,KAAKA,EAAK,GAAG,EAGpDC,EAAaT,GAAW,EAAKD,EAGjCU,GAAa,KACb,IAAMC,EAAYf,GAA4BG,CAAM,EAC/CY,GAEDC,EACI,wBAAwBb,CAAM,GAC9Bc,EAAc,YAClB,EAEJ,IAAIC,EAAcC,EAAOC,EAAWC,EACpC,OAAQN,EACR,CACI,QAEI,MAGJ,KAAKd,EAAe,YACpB,KAAKA,EAAe,YACpB,KAAKA,EAAe,YACpB,KAAKA,EAAe,YAChBiB,EAAe,EAAIZ,EAAKQ,EAAW,EAAG,IAAI,EAE1C,KAAK,qBAAqBC,EAAWL,EAAgBQ,CAAY,CAAC,EAClE,MAGJ,KAAKjB,EAAe,aACpB,KAAKA,EAAe,aAChBiB,EAAeZ,EAAKQ,EAAW,EAAG,IAAI,EAEtC,KAAK,qBAAqBC,EAAWL,EAAgBQ,CAAY,CAAC,EAClE,MAGJ,KAAKjB,EAAe,WACpB,KAAKA,EAAe,WAChBiB,EAAeZ,EAAKQ,EAAW,EAAG,IAAI,EAEtC,KAAK,qBAAqBC,EAAWL,EAAgBQ,CAAY,CAAC,EAClE,MAGJ,KAAKjB,EAAe,YACpB,KAAKA,EAAe,YACpB,KAAKA,EAAe,cACpB,KAAKA,EAAe,cAChBiB,EAAe,EAAIZ,EAAKQ,EAAW,EAAG,IAAI,EAE1C,KAAK,qBAAqBC,EAAWL,EAAgBQ,CAAY,CAAC,EAClE,MAGJ,KAAKjB,EAAe,WACpB,KAAKA,EAAe,WAChBkB,EAAQ,KAAQf,EAEhB,KAAK,qBAAqBW,EAAWH,EAAUO,CAAK,EAAG,EAAI,EAC3D,MAGJ,KAAKlB,EAAe,cACpB,KAAKA,EAAe,cAEhBmB,EAAYhB,EAAU,IACtB,KAAK,qBAAqBW,EAAWK,CAAS,EAC9C,MAGJ,KAAKnB,EAAe,SAEhB,KAAK,qBAAqBc,EAAWD,EAAW,EAAI,EACpD,MAGJ,KAAKb,EAAe,cACpB,KAAKA,EAAe,cAChBoB,EAAQf,EAAKQ,EAAW,KAAM,GAAG,EAAI,MACrC,KAAK,qBAAqBC,EAAWM,EAAO,EAAI,EAChD,MAGJ,KAAKpB,EAAe,cAChBoB,EAAQf,EAAKQ,EAAW,KAAM,GAAG,EAAI,MACrC,KAAK,qBAAqBC,EAAWM,CAAK,EAC1C,MAGJ,KAAKpB,EAAe,eAEhBmB,EAAY,MAAQhB,EACpB,KAAK,qBAAqBW,EAAWK,EAAW,EAAI,EACpD,MAGJ,KAAKnB,EAAe,gBAEhB,IAAMqB,EAAU,KAAO,GAAKlB,EAC5B,KAAK,qBAAqBW,EAAWO,EAAS,EAAI,EAClD,MAGJ,KAAKrB,EAAe,eAGhBmB,EAAY,KAAOhB,EAAU,KAC7B,KAAK,qBAAqBW,EAAWK,EAAW,EAAI,EACpD,MAGJ,KAAKnB,EAAe,iBAChBoB,EAAQf,EAAKQ,EAAW,IAAK,EAAE,EAAI,MACnC,KAAK,qBAAqBC,EAAWM,EAAO,EAAI,EAChD,MAEJ,KAAKpB,EAAe,iBAChBoB,EAAQf,EAAKQ,EAAW,IAAK,EAAE,EAAI,MACnC,KAAK,qBAAqBC,EAAWM,CAAK,EAC1C,MAGJ,KAAKpB,EAAe,kBACpB,KAAKA,EAAe,kBAChB,KAAK,qBAAqBc,EAAWT,EAAKQ,EAAW,EAAG,GAAG,GAAK,IAAO,IAAI,EAC3E,KACR,CACJ,CCvLO,SAASS,GAAcC,EAC9B,CAGI,OADA,KAAK,gBAAgBC,EAAgB,uBAAuB,EAAID,GAAa,EACrE,KAAK,eACb,CACI,QACI,MAEJ,KAAKE,GAAgB,SACrB,KAAKA,GAAgB,OAEjB,OADiB,KAAK,gBAAgBD,EAAgB,MAAM,EAAK,KAAK,gBAAgBA,EAAgB,MAAM,GAAK,EAEjH,CACI,QACI,MAGJ,KAAKE,GAAyB,eAC1B,GAAIH,IAAc,EAEd,MAGJ,KAAK,gBAAgBI,GAAsBC,EAAiB,eAAe,GAAKL,EAChF,IAAMM,GAAc,KAAK,gBAAgBF,GAAsBC,EAAiB,eAAe,GAAK,GAAKL,EAAY,IACrHO,EACI,aAAa,KAAK,aAAa,6BAA6BD,CAAU,GACtEE,EAAc,KACdA,EAAc,KAClB,EACA,MAGJ,KAAKL,GAAyB,WAG1B,IAAMM,EADS,KAAK,kBAAkBC,GAAkB,aAAa,GACtC,EAAKV,EACpC,KAAK,UAAUS,EAAc,YAAa,EAC1C,MAGJ,KAAKN,GAAyB,gBAE1B,IAAIQ,EADgC,KAAK,kBAAkBD,GAAkB,oBAAoB,EAAI,GAC1DV,EAAY,IAAO,IAC9D,KAAK,mBAAmBW,CAAK,EAC7B,MAEJ,IAAK,OACD,KAAK,gBAAgB,EACrB,KAER,CACA,MAEJ,KAAKT,GAAgB,QAIjB,IAAMU,EAAa,KAAK,gBAAgBX,EAAgB,OAAO,GAAK,EAI9DY,EAAW,KAAK,gBAAgBZ,EAAgB,OAAO,GAAK,EAClE,GAAIW,IAAeE,GAAiB,IAEhC,OAEJ,OAAQF,EACR,CACI,QACIG,EACI,iCAAiC,KAAK,aAAa,YAAYF,EAAS,SAAS,EAAE,EAC9E,YAAY,CAAC,MAAMA,EAAS,SAC7B,EAAE,EAAE,YAAY,CAAC,qBAAqBb,CAAS,GACnDQ,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,aACdA,EAAc,KACdA,EAAc,KAClB,EACA,MAEJ,KAAKM,GAAiB,MAClBE,GAAgB,KACZ,KACAH,EACAb,EACA,KAAK,gBAAgBC,EAAgB,YAAY,GAAK,CAC1D,EACA,KACR,CACR,CACJ,CClGO,SAASgB,GAAiBC,EAAkBC,EAAiBC,EAAQ,GAC5E,CACI,GAAIF,EAAmB,IACvB,CAEI,GAAI,CAACE,EAED,OAEJ,OAAQF,EACR,CACI,QACI,OAEJ,KAAKG,GAAqB,iBACtB,KAAK,iBAAmBF,CAChC,CACJ,CAIA,GACID,GAAoBI,EAAgB,+BACjCJ,GAAoBI,EAAgB,+BACpCJ,IAAqBI,EAAgB,wBAE5C,CACI,IAAMC,EAAcL,EAAmB,GACvC,GAAI,KAAK,kBAAkBK,CAAW,EAElC,OAGJ,KAAK,gBAAgBA,CAAW,EAAK,KAAK,gBAAgBA,CAAW,EAAI,MAAWJ,EAAkB,IACtG,KAAK,OAAO,QAAQK,GAAK,KAAK,kBAAkBA,EAAG,EAAGD,CAAW,CAAC,CACtE,CACA,GAAI,MAAK,kBAAkBL,CAAgB,EAUvC,QAJJ,KAAK,gBAAgBA,CAAgB,EAAIC,GAAmB,EAIhDD,EACR,CACI,KAAKI,EAAgB,YACjB,KAAK,aAAa,EAClB,MAEJ,KAAKA,EAAgB,YACjB,KAAK,aAAa,EAAI,EACtB,MAGJ,KAAKA,EAAgB,WACjB,KAAK,cAAcH,CAAe,EAClC,MAEJ,KAAKG,EAAgB,yBACjB,KAAK,cAAcH,EAAiB,EAAI,EACxC,MAGJ,KAAKG,EAAgB,OACjB,KAAK,eAAiBG,GAAgB,OACtC,MAEJ,KAAKH,EAAgB,OACjB,KAAK,eAAiBG,GAAgB,SACtC,MAEJ,KAAKH,EAAgB,QAEjB,KAAK,kBAAkBI,GAAkB,mBAAmB,EAAI,EAChE,KAAK,eAAiBD,GAAgB,UACtC,MAEJ,KAAKH,EAAgB,QACb,KAAK,gBAAgBA,EAAgB,OAAO,GAAK,IAAMK,GAAiB,MAGpE,KAAK,kBAAkBD,GAAkB,mBAAmB,EAAI,MAAQ,IAExE,KAAK,kBAAkBA,GAAkB,mBAAmB,EAAI,GAGhEP,IAAoB,IAEpB,KAAK,kBAAkBO,GAAkB,mBAAmB,GAAK,IAE5DP,IAAoB,IAEzB,KAAK,kBAAkBO,GAAkB,mBAAmB,GAAK,IAE5DP,IAAoB,IAEzB,KAAK,kBAAkBO,GAAkB,mBAAmB,GAAK,IAE5DP,EAAkB,MAEvB,KAAK,kBAAkBO,GAAkB,mBAAmB,GAAKP,IAGzE,KAAK,eAAiBM,GAAgB,QACtC,MAEJ,KAAKH,EAAgB,aACjB,KAAK,gBAAgBH,CAAe,EACpC,MAEJ,KAAKG,EAAgB,wBACjB,KAAK,cAAcH,CAAe,EAClC,MAEJ,KAAKG,EAAgB,oBACjB,KAAK,8BAA8B,EACnC,MAEJ,KAAKA,EAAgB,aACbH,GAAmB,GAEnB,KAAK,UAAY,IAIjB,KAAK,UAAY,GACjB,KAAK,gBAAgB,QAAQK,GAC7B,CACIA,EAAE,QAAQ,KAAK,MAAM,gBAAgB,CACzC,CAAC,EACD,KAAK,gBAAkB,CAAC,GAE5B,MAGJ,QACI,KAAK,OAAO,QAAQA,GAAK,KAAK,kBAAkBA,EAAG,EAAGN,CAAgB,CAAC,EACvE,KACR,CAEJ,KAAK,MAAM,UAAU,mBAAoB,CACrC,QAAS,KAAK,cACd,iBAAkBA,EAClB,gBAAiBC,CACrB,CAAC,EACL,CCzJO,SAASS,GAAaC,EAAQ,GACrC,CACQA,GAGA,KAAK,OAAO,OAAS,EACrB,KAAK,gBAAgB,OAAS,EAC9B,KAAK,oBAAoB,IAIzB,KAAK,OAAO,QAAQC,GACpB,CACQA,EAAE,aAINA,EAAE,QAAQ,KAAK,MAAM,gBAAgB,CACzC,CAAC,EACD,KAAK,gBAAgB,QAAQA,GAC7B,CACIA,EAAE,QAAQ,KAAK,MAAM,gBAAgB,CACzC,CAAC,EAET,CCzBO,SAASC,GAAYC,EAC5B,CACQA,GAEA,KAAK,aAAa,EAAI,EAE1B,KAAK,QAAUA,EACf,KAAK,oBAAoB,EACzB,KAAK,MAAM,UAAU,cAAe,CAChC,QAAS,KAAK,cACd,QAASA,CACb,CAAC,CACL,CCPO,SAASC,GAAiBC,EAAWC,EAAQ,GACpD,CACS,KAAK,cAEND,GAAa,KAAK,MAAM,eAE5B,IAAME,EAAW,KAAK,MAAMF,CAAS,EAC/BG,EAAmB,KAAK,yBAA2B,KAAK,kBAAkBC,GAAkB,oBAAoB,EAAI,IAErH,KAAK,aAAe,CAACH,GACnBD,IAAcG,IAKjBD,IAAa,KAAK,0BAGlB,KAAK,iBAAiBG,EAAgB,YAAa,GAAG,EAG1D,KAAK,yBAA2BH,EAChC,KAAK,oBAAoBE,GAAkB,sBAAuBJ,EAAYE,GAAY,GAAG,EAC7F,KAAK,oBAAoB,EAC7B,CCVA,IAAMI,GAAmB,CACrB,EAAG,EACH,EAAG,KACH,EAAG,KACH,EAAG,IACH,EAAG,IACH,GAAI,IACJ,GAAI,GACJ,GAAI,KACJ,GAAI,IACJ,GAAI,IACJ,IAAK,KACL,IAAK,KACL,IAAK,GACL,IAAK,GACL,IAAK,GACT,EAMA,SAASC,GAAUC,EACnB,CACI,GAAIF,GAAiBE,CAAK,IAAM,OAE5B,OAAOF,GAAiBE,CAAK,EAGjC,IAAIC,EAAQ,KACRC,EAAQ,KAEZ,QAASC,KAAO,OAAO,KAAKL,EAAgB,EAExCK,EAAM,SAASA,CAAG,EACdA,EAAMH,IAAUC,IAAU,MAAQE,EAAMF,KAExCA,EAAQE,GAERA,EAAMH,IAAUE,IAAU,MAAQC,EAAMD,KAExCA,EAAQC,GAKhB,GAAIF,IAAU,MAAQC,IAAU,KAChC,CACI,IAAIE,EAAYN,GAAiBG,CAAK,EAClCI,EAAYP,GAAiBI,CAAK,EAGtC,OAAOE,GAAcJ,EAAQC,IAAUI,EAAYD,IAAeF,EAAQD,EAC9E,CACA,MAAO,EACX,CASO,SAASK,GAAwBC,EAAMC,EAC9C,CAEI,OAAOT,GAAUQ,CAAI,GAAKC,EAAW,GACzC,CC7EO,SAASC,GAAOC,EAAUC,EACjC,CACI,GAAIA,EAAW,EACf,CACI,KAAK,QAAQD,CAAQ,EACrB,MACJ,CAGA,GAFAC,EAAW,KAAK,IAAI,IAAKA,CAAQ,EAG5B,KAAK,MAAM,qBAAuB,KAAK,MAAM,kBAAoB,KAAOA,EAAW,IACnF,KAAK,MAAM,qBAAuBA,EAAW,IAC7C,KAAK,QAGN,OAGJ,GAAI,CAAC,KAAK,OACV,CACIC,EAAgB,yBAAyB,KAAK,aAAa,GAAG,EAC9D,MACJ,CAEA,IAAMC,EAAUH,EAAW,KAAK,yBAA2B,KAAK,kBAAkBI,GAAkB,eAAe,EAC/GC,EAAmBF,EAEvB,GAAIA,EAAU,KAAOA,EAAU,EAE3B,OAEJ,IAAMG,EAAU,KAAK,QAAQ,QACvBC,EAAO,KAAK,MAAM,QAAQD,CAAO,IAAIH,CAAO,GAAG,SACjDI,GAAQ,IAERF,EAAmBE,GAInB,KAAK,iBAAmB,IAExBN,EAAW,KAAK,kBAIpB,IAAMO,EAAS,KAAK,MAAM,mBAAmB,YAAY,KAAK,cAAeL,CAAO,EAChFK,EAAS,KAETP,EAAWO,GAIf,IAAMC,EAAY,KAAK,MAAM,mBAAmB,QAAQ,KAAK,cAAeN,CAAO,EAG/EO,EAAoB,GACpBC,EAAqB,EAEnBC,EAAiB,KAAK,gBAAgBC,EAAgB,cAAc,GAAK,EACzEC,EAAU,KAAK,gBAAgBD,EAAgB,iBAAiB,EAChEE,EAAiBD,GAAW,EAClC,GACI,CAAC,KAAK,aACNC,IAAmBV,GACnB,KAAK,gBAAgBQ,EAAgB,eAAe,GAAK,MACzDD,EAAiB,EAErB,CAEI,GAAIE,IAAY,EAChB,CACI,IAAME,EAAO,KAAK,IAAIX,EAAmBU,CAAc,EACvDJ,EAAqBM,GAAwBL,EAAgBI,CAAI,EACjEN,EAAoBK,CACxB,CAEA,KAAK,iBAAiBF,EAAgB,kBAAmBR,CAAgB,CAC7E,CAEA,IAAMa,EAAS,KAAK,MAAM,UACtB,KAAK,cACLb,EACAJ,EACAE,CACJ,EAGIgB,EAAc,EACd,KAAK,YAGLA,EAAc,KAAK,MAAM,KAAK,OAAO,EAAI,IAAO,GAAG,GAIvD,IAAMC,EAAgB,KAAK,OAC3BF,EAAO,QAAQG,GACf,CAEIA,EAAM,kBAAoBX,EAC1BW,EAAM,mBAAqBV,EAG3BU,EAAM,YAAcF,EAGpBE,EAAM,KAAOZ,EAGb,KAAK,gBAAgB,cAAc,QAAQa,GAC3C,CACI,IAAMC,EAAMD,EAAE,IACRE,EAAmBH,EAAM,WAAW,UAAUI,IAAYC,GAAU,YAAYD,GAAUF,CAAG,CAAC,EAGhGC,IAAqB,GAErBH,EAAM,WAAWG,CAAgB,EAAIE,GAAU,KAAKH,CAAG,EAIvDF,EAAM,WAAW,KAAKK,GAAU,KAAKH,CAAG,CAAC,CAEjD,CAAC,EAGG,KAAK,2BAEL,KAAK,mBAAmB,QAAQ,CAACI,EAAeC,IAChD,CACQD,IAAkBE,KAItBR,EAAM,WAAWO,CAAa,EAAID,EACtC,CAAC,EAKL,IAAMG,EAAYT,EAAM,eACpBS,IAAc,GAGdV,EAAc,QAAQW,GACtB,CACQA,EAAE,iBAAmBD,GAErBC,EAAE,iBAAiB,KAAK,MAAM,gBAAgB,CAEtD,CAAC,EAGL,KAAK,kBAAkBV,CAAK,EAE5B,IAAMW,EAAoBX,EAAM,oBAAoBY,EAAe,gBAAgB,EAAIZ,EAAM,oBAAoBY,EAAe,sBAAsB,EAAI,MACpJC,EAAYb,EAAM,oBAAoBY,EAAe,aAAa,EAAIZ,EAAM,oBAAoBY,EAAe,oBAAoB,EAAI,MACvIE,EAAkBd,EAAM,oBAAoBY,EAAe,oBAAoB,EAAIZ,EAAM,oBAAoBY,EAAe,0BAA0B,EAAI,MAC1JG,EAAgBf,EAAM,oBAAoBY,EAAe,kBAAkB,EAAIZ,EAAM,oBAAoBY,EAAe,wBAAwB,EAAI,MACpJI,EAAKhB,EAAM,OAEXiB,EAAQC,GAAO,KAAK,IAAI,EAAG,KAAK,IAAIF,EAAG,WAAW,OAAS,EAAGE,CAAG,CAAC,EAMxE,GALAF,EAAG,OAASC,EAAMD,EAAG,OAASL,CAAiB,EAC/CK,EAAG,IAAMC,EAAMD,EAAG,IAAMH,CAAS,EACjCG,EAAG,UAAYC,EAAMD,EAAG,UAAYF,CAAe,EACnDE,EAAG,QAAUC,EAAMD,EAAG,QAAUD,CAAa,EAEzCC,EAAG,QAAUA,EAAG,UACpB,CACI,IAAMG,EAAOH,EAAG,UAChBA,EAAG,UAAYA,EAAG,QAClBA,EAAG,QAAUG,CACjB,CACIH,EAAG,QAAUA,EAAG,UAAY,IAE5BA,EAAG,YAAc,EACjBA,EAAG,UAAY,IAInBhB,EAAM,eAAe,YAAcA,EAAM,eAAe,sBAExDA,EAAM,WAAa,KAAK,IAAI,KAAM,KAAK,IAAI,IAAKA,EAAM,oBAAoBY,EAAe,GAAG,CAAC,CAAC,CAClG,CAAC,EAED,KAAK,MAAM,mBAAqBf,EAAO,OAEnC,KAAK,MAAM,kBAAoB,KAAK,MAAM,UAE1C,KAAK,MAAM,aAAaA,EAAO,MAAM,EAEzCE,EAAc,KAAK,GAAGF,CAAM,EAC5B,KAAK,oBAAoB,EACzB,KAAK,MAAM,UAAU,SAAU,CAC3B,SAAUlB,EACV,QAAS,KAAK,cACd,SAAUC,CACd,CAAC,CAEL,CC7MO,SAASwC,GAAQC,EACxB,CACI,GAAIA,EAAW,KAAOA,EAAW,EACjC,CACIC,EAAgB,6BAA8BD,EAAU,WAAW,EACnE,MACJ,CAEA,IAAIE,EAAUF,EAAW,KAAK,yBAA2B,KAAK,kBAAkBG,GAAkB,eAAe,EAGjH,GAAI,KAAK,MAAM,qBAGP,CAAC,KAAK,YACV,CACI,KAAK,SAASD,EAAS,KAAK,EAC5B,KAAK,MAAM,UAAU,UAAW,CAC5B,SAAUF,EACV,QAAS,KAAK,aAClB,CAAC,EACD,MACJ,CAGkB,KAAK,OACb,QAAQI,GACtB,CACQA,EAAE,UAAYF,GAAWE,EAAE,cAAgB,KAK3C,KAAK,UAEL,KAAK,gBAAgB,KAAKA,CAAC,EAI3BA,EAAE,QAAQ,KAAK,MAAM,gBAAgB,EAE7C,CAAC,EACD,KAAK,MAAM,UAAU,UAAW,CAC5B,SAAUJ,EACV,QAAS,KAAK,aAClB,CAAC,CACL,CC9CO,SAASK,GAAaC,EAAUC,EACvC,CACI,KAAK,OAAO,QAAQC,GACpB,CACQA,EAAE,WAAaF,IAInBE,EAAE,SAAWD,EACb,KAAK,kBACDC,EACA,EACAC,EAAiB,YACrB,EACJ,CAAC,EACD,KAAK,MAAM,UAAU,eAAgB,CACjC,QAAS,KAAK,cACd,SAAUH,EACV,SAAUC,CACd,CAAC,CACL,CCpBO,SAASG,GAAgBC,EAChC,CACI,KAAK,gBAAgBC,GAAsBC,EAAiB,eAAe,EAAIF,GAAY,EAC3F,KAAK,oBAAoB,EACzB,KAAK,OAAO,QAAQG,GAChB,KAAK,kBACDA,EACA,EACAD,EAAiB,eACrB,CAAC,EACL,KAAK,MAAM,UAAU,kBAAmB,CACpC,QAAS,KAAK,cACd,SAAUF,CACd,CAAC,CACL,CCbO,SAASI,GAAWC,EAAKC,EAChC,CACI,GAAI,KAAK,kBAAkBC,GAAsBC,EAAiB,UAAU,EAExE,OAEJ,IAAMC,EAAQH,EAAOD,GAAO,EAC5B,KAAK,MAAM,UAAU,aAAc,CAC/B,QAAS,KAAK,cACd,IAAKA,EACL,IAAKC,CACT,CAAC,EACD,KAAK,gBAAgBC,GAAsBC,EAAiB,UAAU,EAAIC,EAC1E,KAAK,OAAO,QAAQC,GAEhB,KAAK,kBACDA,EACA,EACAF,EAAiB,UACrB,CAAC,EACL,KAAK,oBAAoB,CAC7B,CCvBO,SAASG,GAAgBC,EAChC,CACI,GAAIA,EAAO,SAAW,GAElB,MAAM,IAAI,MAAM,iCAAiC,EAErD,KAAK,oBAAsB,IAAI,UAAU,GAAG,EAC5C,QAASC,EAAI,EAAGA,EAAI,IAAKA,IAErB,KAAK,oBAAoBA,CAAC,EAAID,EAAOC,EAAI,EAAE,CAEnD,CCVO,SAASC,GAAcC,EAC9B,CACI,GAAI,KAAK,WAEL,OAGJ,IAAIC,EAAO,KAAK,cAAc,EAExBC,EAAO,KAAK,YACZC,EAAI,KAAK,MAAM,iBAAiB,UAAUF,EAAMD,EAAeE,CAAI,EACrEE,EAASD,EAAE,OACVC,IAEDC,EAAgB,mCAAmC,EACnDD,EAAS,IAAIE,GAAY,KAAK,MAAM,iBAAiB,cAAc,CAAC,EAAE,SAAS,EAC/EF,EAAO,WAAa,gCAExB,KAAK,UAAUA,CAAM,EACrB,KAAK,SAAW,KAAK,IAAI,IAAKA,EAAO,KAAOD,EAAE,UAAU,EACxD,KAAK,MAAM,UAAU,gBAAiB,CAClC,QAAS,KAAK,cACd,QAASC,EAAO,QAChB,KAAM,KAAK,QACf,CAAC,EACD,KAAK,oBAAoB,CAC7B,CC3BO,IAAMG,GAAN,KACP,CAKI,cAAgB,CAAC,EAEjB,iBACA,CACI,KAAK,cAAgB,CAAC,CAC1B,CAQA,gBAAgBC,EAAQC,EAAaC,EAAWC,EAChD,CACI,MAAO,GAAGH,CAAM,IAAIC,CAAW,IAAIC,CAAS,IAAIC,CAAU,EAC9D,CAMA,iBAAiBC,EACjB,CACI,KAAK,cAAgB,KAAK,cAAc,OAAOC,GAAKA,EAAE,KAAOD,CAAE,CACnE,CAUA,aAAaJ,EAAQC,EAAaK,EAAQJ,EAAY,GAAOC,EAAa,GAC1E,CACI,IAAMC,EAAK,KAAK,gBAAgBJ,EAAQC,EAAaC,EAAWC,CAAU,EACtEG,IAAW,GAEX,KAAK,iBAAiBF,CAAE,EAE5B,IAAMG,EAAM,KAAK,cAAc,KAAKF,GAAKA,EAAE,KAAOD,CAAE,EACpD,GAAIG,EAEAA,EAAI,IAAI,gBAAkBD,MAG9B,CACI,IAAIE,EAAQC,EACRT,GAAUU,IAEVF,EAASR,EAASU,GAClBD,EAAO,KAIPD,EAASR,EACTS,EAAO,IAEX,IAAME,EAAY,IAAIC,GAClBJ,EACAK,GAAoB,OACpBJ,EAAO,EAAI,EACXP,EAAY,EAAI,EAChB,EACAY,EAAiB,aACjBD,GAAoB,OACpB,EACA,EACA,EACAZ,EACAK,EACA,CACJ,EACA,KAAK,cAAc,KAAK,CACpB,IAAKK,EACL,GAAIP,CACR,CAAC,CACL,CACJ,CACJ,EClFA,IAAMW,GAAwC,IAAO,IAS9C,SAASC,GAAiBC,EAAiBC,EAAWC,EAC7D,CACI,GAAID,EAAU,kBAAoB,EAE9B,OAAAA,EAAU,aAAe,EAClB,EAGX,IAAIE,EACJ,GAAIF,EAAU,aAEVE,EAAiBH,EAAgBC,EAAU,WAAW,MAG1D,CACI,IAAMG,EAAQH,EAAU,YAAcI,GACtC,OAAQJ,EAAU,YAClB,CACI,KAAKK,EAAiB,aAClBH,EAAiB,MACjB,MAEJ,KAAKG,EAAiB,aAClBH,EAAiBD,EAAM,UAAY,EACnC,MAEJ,KAAKI,EAAiB,eAClBH,EAAiBD,EAAM,UAAY,EACnC,MAEJ,KAAKI,EAAiB,aAClBH,EAAiBD,EAAM,UAAY,EACnC,MAEJ,QACIC,EAAiBH,EAAgBI,CAAK,EACtC,KACR,CAEJ,CAEA,IAAMG,EAAcC,GAAWP,EAAU,eAAe,EAAEA,EAAU,cAAc,EAAEA,EAAU,eAAe,EAAEE,CAAc,EAGzHM,EACJ,GAAIR,EAAU,aAEVQ,EAAoBT,EAAgBC,EAAU,WAAW,MAG7D,CACI,IAAMG,EAAQH,EAAU,YAAcI,GACtC,OAAQJ,EAAU,YAClB,CACI,KAAKK,EAAiB,aAClBG,EAAoB,MACpB,MAEJ,KAAKH,EAAiB,aAClBG,EAAoBP,EAAM,UAAY,EACtC,MAEJ,KAAKI,EAAiB,eAClBG,EAAoBP,EAAM,UAAY,EACtC,MAEJ,KAAKI,EAAiB,aAClBG,EAAoBP,EAAM,UAAY,EACtC,MAEJ,QACIO,EAAoBT,EAAgBI,CAAK,CACjD,CAEJ,CACA,IAAMM,EAAiBF,GAAWP,EAAU,eAAe,EAAEA,EAAU,cAAc,EAAEA,EAAU,eAAe,EAAEQ,CAAiB,EAG/HE,EAAkBV,EAAU,gBAC5BA,EAAU,mBAAqBU,GAAmB,MAElDA,GAAmBb,GACnBa,EAAkB,KAAK,IAAIA,EAAiB,GAAI,GAIpD,IAAIC,EAAgBL,EAAcG,EAAiBC,EAEnD,OAAIV,EAAU,gBAAkB,IAG5BW,EAAgB,KAAK,IAAIA,CAAa,GAItCX,EAAU,6BAGVC,EAAM,gBAAkB,KAAK,IAAI,EAAGU,EAAgB,CAAC,GAGzDX,EAAU,aAAeW,EAClBA,CACX,CASO,SAASC,GAAkBX,EAAOY,EAAe,GAAIC,EAAc,EAC1E,CACI,IAAMC,EAAad,EAAM,WACrBe,EAAaf,EAAM,WAEvB,GAAI,KAAK,wBACT,CACIe,EAAa,IAAI,WAAWA,CAAU,EACtC,QAAS,EAAI,EAAG,EAAIA,EAAW,OAAQ,IAEnCA,EAAW,CAAC,GAAK,KAAK,iBAAiB,CAAC,CAEhD,CACA,IAAMC,EAAsBhB,EAAM,oBAElC,GAAIY,IAAiB,GACrB,CAEII,EAAoB,IAAID,CAAU,EAClCD,EAAW,QAAQG,GACnB,CACID,EAAoBC,EAAI,oBAAoB,GAAKpB,GAC7C,KAAK,gBACLoB,EACAjB,CACJ,CACJ,CAAC,EAED,QAASkB,EAAM,EAAGA,EAAMF,EAAoB,OAAQE,IACpD,CACI,IAAMC,EAAQC,EAAgBF,CAAG,EAC5BC,IAKLH,EAAoBE,CAAG,EAAI,KAAK,IAAIC,EAAM,IAAK,KAAK,IAAIA,EAAM,IAAKH,EAAoBE,CAAG,CAAC,CAAC,EAChG,CACAG,GAAe,YAAYrB,CAAK,EAChCsB,GAAmB,YAAYtB,CAAK,EACpC,MACJ,CAGA,IAAMuB,EAA2B,IAAI,IAAI,CACrCC,EAAe,mBACfA,EAAe,YACfA,EAAe,aACfA,EAAe,WACfA,EAAe,YACfA,EAAe,cACfA,EAAe,cACfA,EAAe,mBACfA,EAAe,mBACnB,CAAC,EAEKC,EAAuB,IAAI,IAEjCX,EAAW,QAAQG,GACnB,CACI,GACKA,EAAI,eAAiBL,GAAgBK,EAAI,cAAgBJ,GACzDI,EAAI,eAAiBL,GAAgBK,EAAI,cAAgBJ,EAE9D,CACI,IAAMa,EAAcT,EAAI,qBACxB,GAAI,CAACQ,EAAqB,IAAIC,CAAW,EACzC,CAEIV,EAAoBU,CAAW,EAAIX,EAAWW,CAAW,EAEzD7B,GAAiB,KAAK,gBAAiBoB,EAAKjB,CAAK,EAEjDc,EAAW,QAAQa,GACnB,CACQA,EAAE,uBAAyBD,IAE3BV,EAAoBU,CAAW,GAAKC,EAAE,aAE9C,CAAC,EAED,IAAMC,EAASR,EAAgBM,CAAW,EAC1CV,EAAoBU,CAAW,EAAI,KAAK,IACpCE,EAAO,IACP,KAAK,IAAIZ,EAAoBU,CAAW,EAAGE,EAAO,GAAG,CACzD,EACAH,EAAqB,IAAIC,CAAW,CACxC,CACJ,CACJ,CAAC,EAGG,CAAC,GAAGD,CAAoB,EAAE,KAAKI,GAAQN,EAAyB,IAAIM,CAAI,CAAC,GAEzER,GAAe,YAAYrB,CAAK,EAGpCsB,GAAmB,YAAYtB,CAAK,CACxC,CAOA,IAAMM,GAAa,CAAC,EAEpB,QAASwB,EAAQ,EAAGA,EAAQ,EAAGA,IAC/B,CACIxB,GAAWwB,CAAK,EACZ,CACI,CACI,IAAI,aAAaC,EAAsB,EACvC,IAAI,aAAaA,EAAsB,CAC3C,EACA,CACI,IAAI,aAAaA,EAAsB,EACvC,IAAI,aAAaA,EAAsB,CAC3C,CACJ,EACJ,QAASC,EAAI,EAAGA,EAAID,GAAwBC,IAIxC1B,GAAWwB,CAAK,EAAE,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAIC,GACzB,EACAH,EACAE,EAAID,GACJ,CACJ,EAGAzB,GAAWwB,CAAK,EAAE,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAIC,GACzB,EACAH,EACAE,EAAID,GACJ,CACJ,EAGAzB,GAAWwB,CAAK,EAAE,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAIC,GACzB,EACAH,EACAE,EAAID,GACJ,CACJ,EAGAzB,GAAWwB,CAAK,EAAE,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAIC,GACzB,EACAH,EACAE,EAAID,GACJ,CACJ,CAER,CCxPA,IAAMG,GAAN,KACA,CAOI,gBAAkB,IAAI,WAAWC,EAAqB,EAQtD,kBAAoB,MAAMA,EAAqB,EAAE,KAAK,EAAK,EAO3D,kBAAoB,IAAI,aAAaC,EAA4B,EAMjE,yBAA2B,EAQ3B,oBAAsB,IAAI,UAAU,GAAG,EAOvC,mBAAqB,EAMrB,gBAAkB,IAAIC,GAOtB,iBAAmB,IAAI,WAAWC,EAAiB,EAMnD,wBAA0B,GAO1B,mBAAqB,IAAI,WAAWA,EAAiB,EAMrD,0BAA4B,GAM5B,UAAY,GAMZ,YAAc,GAMd,iBAAmB,EAMnB,UAAY,GAMZ,eAAiBC,GAAgB,KAMjC,KAAO,EAMP,SAAW,EAMX,QAAU,EAMV,OAAS,OAMT,WAAa,GAMb,aAAe,KAMf,iBAAmB,GASnB,eAAiB,CAAE,MAAO,EAAG,MAAO,EAAG,KAAM,CAAE,EAM/C,QAAU,GAMV,OAAS,CAAC,EAMV,gBAAkB,CAAC,EAMnB,cAMA,MAQA,YAAYC,EAAOC,EAAQC,EAC3B,CACI,KAAK,MAAQF,EACb,KAAK,OAASC,EACd,KAAK,cAAgBC,EACrB,KAAK,wBAAwB,EAC7B,KAAK,sBAAsB,CAC/B,CAEA,IAAI,aACJ,CACI,OAAOC,GAAW,KAAK,MAAM,MAAM,GAAM,KAAK,YAAcA,GAAW,KAAK,YAAY,CAC5F,CAMA,oBAAoBC,EAAMC,EAC1B,CACI,KAAK,kBAAkBD,CAAI,EAAIC,EAC/B,KAAK,oBAAoB,CAC7B,CAEA,qBACA,CACI,KAAK,mBACD,KAAK,kBAAkBC,GAAkB,aAAa,EACpD,KAAK,kBAAkBA,GAAkB,oBAAoB,EAC7D,KAAK,kBAAkBA,GAAkB,YAAY,EACpD,KAAK,kBAAkBA,GAAkB,sBAAsB,EAAI,GAC9E,CAYA,YACIC,EAAYC,EACZC,EAAkBC,EAClBC,EAAkBC,EAClBC,EAAYC,EAEhB,CACI,KAAK,OAAS,KAAK,OAAO,OAAOC,GAAK,CAAC,KAAK,YACxCA,EAAG,KAAK,MAAM,iBACdR,EAAYC,EACZC,EAAkBC,EAClBC,EAAkBC,EAClBC,EAAYC,CAChB,CAAC,CACL,CAKA,cAAcE,EACd,CACI,KAAK,WAAaA,EACdA,IAEA,KAAK,aAAe,KAAK,MAAM,OAEvC,CAMA,cAAcC,EAAMC,EAAQ,GAC5B,CACI,GAAI,MAAK,WAIT,GAAIA,EAEA,KAAK,QAAUD,MAaf,QATA,KAAK,KAAOA,EACME,GACd,KAAK,cAAc,EACnBF,EACA,KAAK,MAAM,OACX,GACA,KAAK,YACL,KAAK,aACT,EACkB,YAClB,CACI,QACA,IAAK,GACD,MAEJ,IAAK,GACG,KAAK,cAAgB,KAAO,IAG5B,KAAK,KAAO,KAEhB,MAEJ,IAAK,GACD,KAAK,SAAS,EAAI,EAClB,KACR,CAER,CAKA,eACA,CACI,OAAOG,GAAW,KAAK,KAAM,KAAK,QAAS,KAAK,YAAa,KAAK,WAAW,CACjF,CAMA,UAAUnB,EACV,CACQ,KAAK,aAIT,KAAK,OAASA,EAClB,CAMA,SAASoB,EACT,CACQ,KAAK,YAIL,KAAK,cAAgBA,IAIrBA,GAGA,KAAK,yBAA2B,EAChC,KAAK,YAAc,IAInB,KAAK,YAAc,GAEvB,KAAK,MAAM,UAAU,aAAc,CAC/B,QAAS,KAAK,cACd,cAAe,KAAK,WACxB,CAAC,EACD,KAAK,cAAc,KAAK,OAAO,OAAO,EACtC,KAAK,oBAAoB,EAC7B,CASA,WAAWC,EAAOC,EAAMC,EACxB,CACQ,KAAK,mBAIT,KAAK,eAAe,KAAOD,EAC3B,KAAK,eAAe,MAAQC,EAC5B,KAAK,eAAe,MAAQF,EAChC,CAMA,sBACA,CACI,KAAK,iBAAmB,GACxB,KAAK,eAAe,KAAO,EAC3B,KAAK,eAAe,MAAQ,EAC5B,KAAK,eAAe,MAAQ,CAChC,CAmBA,qBACA,CACI,GAAI,CAAC,KAAK,MAAM,kBAEZ,OAKJ,IAAMG,EAAO,CACT,aAAc,KAAK,OAAO,OAC1B,UAAW,KAAK,gBAAgBC,GAAsBC,EAAiB,UAAU,EACjF,wBAAyB,KAAK,gBAAgBD,GAAsBC,EAAiB,eAAe,EAAI,IACxG,QAAS,KAAK,QACd,OAAQ,KAAK,YACb,cAAe,KAAK,yBAA2B,KAAK,kBAAkBrB,GAAkB,oBAAoB,EAAI,IAChH,KAAM,KAAK,SACX,QAAS,KAAK,QAAQ,OAC1B,EACA,KAAK,OAAO,0BAA0BmB,EAAM,KAAK,aAAa,CAClE,CAEA,yBACA,CACI,KAAK,mBAAmB,KAAKG,EAAkC,EAC/D,KAAK,0BAA4B,EACrC,CAOA,qBAAqBC,EAAKxB,EAAOyB,EAAW,GAC5C,CACI,KAAK,mBAAmBD,CAAG,EAAIxB,EAC/B,KAAK,0BAA4B,GAC7ByB,GAEA,KAAK,OAAO,QAAQf,GACpB,CACIA,EAAE,WAAWc,CAAG,EAAIxB,EACpB,KAAK,kBAAkBU,CAAC,CAC5B,CAAC,CAET,CAEA,uBACA,CACI,KAAK,iBAAiB,KAAK,CAAC,EAC5B,KAAK,wBAA0B,EACnC,CAMA,mBAAmBc,EAAKxB,EACxB,CACI,KAAK,iBAAiBwB,CAAG,EAAIxB,EAAQ0B,EAAgBF,CAAG,EAAE,KAC1D,KAAK,wBAA0B,GAC/B,KAAK,OAAO,QAAQd,GACpB,CACI,KAAK,kBAAkBA,CAAC,CAC5B,CAAC,CACL,CACJ,EAGArB,GAAiB,UAAU,YAAcsC,GACzCtC,GAAiB,UAAU,eAAiBuC,GAC5CvC,GAAiB,UAAU,SAAWwC,GACtCxC,GAAiB,UAAU,aAAeyC,GAC1CzC,GAAiB,UAAU,YAAc0C,GACzC1C,GAAiB,UAAU,kBAAoB2C,GAG/C3C,GAAiB,UAAU,OAAS4C,GACpC5C,GAAiB,UAAU,QAAU6C,GACrC7C,GAAiB,UAAU,aAAe8C,GAC1C9C,GAAiB,UAAU,gBAAkB+C,GAC7C/C,GAAiB,UAAU,WAAagD,GACxChD,GAAiB,UAAU,cAAgBiD,GAG3CjD,GAAiB,UAAU,UAAYkD,GACvClD,GAAiB,UAAU,gBAAkBmD,GAC7CnD,GAAiB,UAAU,mBAAqBoD,GAChDpD,GAAiB,UAAU,iBAAmBqD,GAG9CrD,GAAiB,UAAU,iBAAmBsD,GAC9CtD,GAAiB,UAAU,iBAAmBuD,GAC9CvD,GAAiB,UAAU,8BAAgCwD,GAC3DxD,GAAiB,UAAU,gBAAkByD,GAC7CzD,GAAiB,UAAU,cAAgB0D,GAC3C1D,GAAiB,UAAU,gBAAkB2D,GC9hBtC,SAASC,GAAkBC,EAAY,GAC9C,CAII,IAAMC,EAAU,IAAIC,GAAiB,KAAM,KAAK,cAAe,KAAK,kBAAkB,MAAM,EAC5F,KAAK,kBAAkB,KAAKD,CAAO,EAC/BD,IAEA,KAAK,UAAU,aAAc,MAAS,EACtCC,EAAQ,oBAAoB,EAC5B,KAAK,kBAAkB,KAAK,kBAAkB,OAAS,CAAC,EAAE,SAAS,EAAI,EAE/E,CCPO,IAAME,GAAwB,CACjC,kBAAmB,GACnB,YAAa,EACb,eAAgB,GAChB,aAAc,EAClB,EC4IA,IAAMC,GAA+B,CACjC,KAAM,CACV,EAIaC,GAAkB,IAElBC,GAAuB,IAEvBC,GAAmB,EAI1BC,GAAN,KACA,CAMI,iBAAmB,IAAIC,GAAiB,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAQxE,aAAe,CAAC,EAMhB,SAAW,GAMX,WAAa,CAAC,EAMd,kBAAoBC,GAAmB,YAMvC,cAAgB,EAMhB,QAAU,CAAC,EAMX,WAAaH,GAMb,WAAa,EAMb,WAAa,EAKb,WAAa,EAMb,WAAa,EAKb,WAAa,EAMb,SAAW,IAMX,IAAM,EAKN,QAAU,GAMV,SAAW,GAMX,oBAAsB,GAMtB,mBAAqB,IAAII,GAMzB,kBAAoB,CAAC,EAMrB,OAASC,GAKT,kBAAoB,EAMpB,cAMA,WAMA,qBAAuBC,GAAU,cAMjC,iBAAmB,EAMnB,WAMA,WAMA,eAQA,UAQA,YAQA,wBAQA,wBAQA,YAAYC,EACAC,EAAUC,GACtB,CACID,EAAUE,GAAiBF,EAASC,EAAqB,EAKzD,KAAK,iBAAmBD,EAAQ,aAChC,KAAK,eAAiBA,EAAQ,eAC9B,KAAK,kBAAoBA,EAAQ,kBACjC,KAAK,iBAAmBA,EAAQ,YAChC,KAAK,WAAa,EAAID,EACtB,KAAK,WAAaA,EAGlB,KAAK,8BAAgCI,IAAoC,MAAQJ,GACjF,KAAK,mBAAqBK,IAAwB,MAAQL,GAC1D,KAAK,sBAAwBM,IAA2B,MAAQN,GAGhE,QAASO,EAAI,EAAGA,EAAI,IAAKA,IAErB,KAAK,QAAQ,KAAK,CAAC,CAAC,EAGxB,QAASA,EAAI,EAAGA,EAAI,KAAK,iBAAkBA,IAEvC,KAAK,kBAAkB,EAAK,EAEhC,KAAK,qBAAqB,KAAK,IAC/B,CACIC,EAAgB,0BAA2BC,EAAc,UAAU,CACvE,CAAC,CACL,CAKA,IAAI,aACJ,CACI,OAAO,KAAK,WAAa,KAAK,UAClC,CAEA,mBACA,CAEI,IAAMC,EAAM,KAAK,OACjB,KAAK,OAAS,KACd,KAAK,cAAgB,KAAK,UAAU,EAAG,CAAC,EACxC,KAAK,OAASA,EACd,KAAK,WAAa,KAAK,UAAU,IAAK,CAAC,CAC3C,CAKA,UAAUC,EACV,CACI,KAAK,OAASA,EACd,MAAM,0BAA0BC,GAAoB,WAAY,KAAK,MAAM,CAC/E,CASA,eAAeC,EAAMC,EAASC,EAAUC,EACxC,CACI,OAAO,KAAK,eAAeH,CAAI,IAAIC,CAAO,IAAIC,CAAQ,IAAIC,CAAQ,CACtE,CASA,eAAeH,EAAMC,EAASC,EAAUC,EAAUC,EAClD,CAES,KAAK,aAAaJ,CAAI,IAEvB,KAAK,aAAaA,CAAI,EAAI,CAAC,GAE1B,KAAK,aAAaA,CAAI,EAAEC,CAAO,IAEhC,KAAK,aAAaD,CAAI,EAAEC,CAAO,EAAI,CAAC,GAEnC,KAAK,aAAaD,CAAI,EAAEC,CAAO,EAAEC,CAAQ,IAE1C,KAAK,aAAaF,CAAI,EAAEC,CAAO,EAAEC,CAAQ,EAAI,CAAC,GAIlD,KAAK,aAAaF,CAAI,EAAEC,CAAO,EAAEC,CAAQ,EAAEC,CAAQ,EAAIC,CAC3D,CAYA,YAAYC,EACAC,EACAC,EACAC,EAAa,EACbC,EAAc,EAE1B,CACI,KAAK,iBAAiBH,EAAQC,EAAQ,MAAM,EAAE,EAAE,KAAKF,CAAO,EAAGG,EAAYC,CAAW,CAC1F,CAWA,iBAAiBC,EACAC,EACAC,EACAJ,EAAa,EACbC,EAAc,EAE/B,CAEI,IAAMI,EAAO,KAAK,iBAClB,KAAO,KAAK,WAAW,CAAC,GAAG,MAAQA,GAE/B,KAAK,WAAW,MAAM,EAAE,SAAS,EAErC,IAAMC,EAAOJ,EAAe,CAAC,EACvBK,EAAOL,EAAe,CAAC,EACvBM,EAAOL,EAAe,CAAC,EACvBM,EAAON,EAAe,CAAC,EAG7BH,EAAa,KAAK,IAAIA,EAAY,CAAC,EACnC,IAAMU,EAAcT,GAAeG,EAAiB,CAAC,EAAE,CAAC,EAAE,OAASJ,EAGnE,KAAK,kBAAoB,EACzB,KAAK,kBAAkB,QAAQ,CAACW,EAASC,IACzC,CACI,GAAID,EAAQ,OAAO,OAAS,GAAKA,EAAQ,QAGrC,OAEJ,IAAIE,EAAaF,EAAQ,OAAO,OAC1BG,EAAKF,EAAQ,GAGnBD,EAAQ,YACJP,EAAiBU,CAAE,EAAE,CAAC,EAAGV,EAAiBU,CAAE,EAAE,CAAC,EAC/CR,EAAMC,EACNC,EAAMC,EACNT,EAAYU,CAChB,EAEA,KAAK,mBAAqBC,EAAQ,OAAO,OAErCA,EAAQ,OAAO,SAAWE,GAE1BF,EAAQ,oBAAoB,CAEpC,CAAC,EAGD,KAAK,kBAAoBD,EAAc,KAAK,UAChD,CAGA,uBACA,CACI,KAAK,kBAAkB,QAAQK,GAC/B,CACI,OAAOA,EAAE,gBACT,OAAOA,EAAE,OACT,OAAOA,EAAE,gBACT,OAAOA,EAAE,kBACT,OAAOA,EAAE,OACT,OAAOA,EAAE,iBACb,CAAC,EACD,OAAO,KAAK,aACZ,OAAO,KAAK,kBACZ,KAAK,iBAAiB,eAAe,EACrC,OAAO,KAAK,gBAChB,CAQA,iBAAiBJ,EAASK,EAAkBC,EAAiBC,EAAQ,GACrE,CACI,KAAK,kBAAkBP,CAAO,EAAE,iBAAiBK,EAAkBC,EAAiBC,CAAK,CAC7F,CAOA,OAAOP,EAASjB,EAAUC,EAC1B,CACI,KAAK,kBAAkBgB,CAAO,EAAE,OAAOjB,EAAUC,CAAQ,CAC7D,CAMA,QAAQgB,EAASjB,EACjB,CACI,KAAK,kBAAkBiB,CAAO,EAAE,QAAQjB,CAAQ,CACpD,CAOA,aAAaiB,EAASjB,EAAUyB,EAChC,CACI,KAAK,kBAAkBR,CAAO,EAAE,aAAajB,EAAUyB,CAAQ,CACnE,CAMA,gBAAgBR,EAASQ,EACzB,CACI,KAAK,kBAAkBR,CAAO,EAAE,gBAAgBQ,CAAQ,CAC5D,CAOA,WAAWR,EAASS,EAAKC,EACzB,CACI,KAAK,kBAAkBV,CAAO,EAAE,WAAWS,EAAKC,CAAG,CACvD,CAMA,cAAcV,EAASW,EACvB,CACI,KAAK,kBAAkBX,CAAO,EAAE,cAAcW,CAAa,CAC/D,CAUA,eAAeC,EAASC,EAAgB,EAAGN,EAAQ,GAAOtC,EAAUX,GACpE,CACI,IAAMwD,EAAO,IACb,CACI,IAAMC,EAAiBC,GAASJ,EAAQ,CAAC,CAAC,EAEpCZ,EAAUe,EAAe,QAAUF,EAEzC,OAAQE,EAAe,OACvB,CACI,KAAKE,EAAa,OACd,IAAMjC,EAAW4B,EAAQ,CAAC,EACtB5B,EAAW,EAEX,KAAK,OAAOgB,EAASY,EAAQ,CAAC,EAAG5B,CAAQ,EAIzC,KAAK,QAAQgB,EAASY,EAAQ,CAAC,CAAC,EAEpC,MAEJ,KAAKK,EAAa,QACVV,EAEA,KAAK,kBAAkBP,CAAO,EAAE,SAASY,EAAQ,CAAC,CAAC,EAInD,KAAK,QAAQZ,EAASY,EAAQ,CAAC,CAAC,EAEpC,MAEJ,KAAKK,EAAa,UACd,KAAK,WAAWjB,EAASY,EAAQ,CAAC,EAAGA,EAAQ,CAAC,CAAC,EAC/C,MAEJ,KAAKK,EAAa,iBACd,KAAK,iBAAiBjB,EAASY,EAAQ,CAAC,EAAGA,EAAQ,CAAC,EAAGL,CAAK,EAC5D,MAEJ,KAAKU,EAAa,cACd,KAAK,cAAcjB,EAASY,EAAQ,CAAC,CAAC,EACtC,MAEJ,KAAKK,EAAa,aACd,KAAK,aAAajB,EAASY,EAAQ,CAAC,EAAGA,EAAQ,CAAC,CAAC,EACjD,MAEJ,KAAKK,EAAa,gBACd,KAAK,gBAAgBjB,EAASY,EAAQ,CAAC,CAAC,EACxC,MAEJ,KAAKK,EAAa,gBACd,KAAK,gBAAgB,IAAIC,EAAiBN,EAAQ,MAAM,CAAC,CAAC,EAAGC,CAAa,EAC1E,MAEJ,KAAKI,EAAa,MACd,KAAK,gBAAgB,EAAI,EACzB,KAAK,oBAAoB,EACzB,MAEJ,QACI,KACR,CACJ,EAEMvB,EAAOzB,EAAQ,KACjByB,EAAO,KAAK,kBAEZ,KAAK,WAAW,KAAK,CACjB,SAAUoB,EAAK,KAAK,IAAI,EACxB,KAAMpB,CACV,CAAC,EACD,KAAK,WAAW,KAAK,CAACyB,EAAIC,IAAOD,EAAG,KAAOC,EAAG,IAAI,GAIlDN,EAAK,CAEb,CAKA,cAAcO,EACd,CAGI,KAAK,WAAa,KAAK,IAAIA,EAAQ,KAAK,CAAC,EACzC,KAAK,mBAAmBzC,GAAoB,UAAW,KAAK,GAAG,CACnE,CAQA,UAAU0C,EAAWC,EACrB,CACI,MAAM,cAAcD,EAAWC,CAAS,CAC5C,CAEA,YACA,CACI,KAAK,aAAe,CAAC,CACzB,CAOA,UAAU1C,EAAMC,EAChB,CACI,OAAO,KAAK,iBAAiB,UAAUD,EAAMC,EAAS0C,GAAW,KAAK,MAAM,CAAC,EAAE,MACnF,CACJ,EAIA9D,GAAqB,UAAU,aAAe+D,GAC9C/D,GAAqB,UAAU,mBAAqBgE,GACpDhE,GAAqB,UAAU,UAAYiE,GAG3CjE,GAAqB,UAAU,gBAAkBkE,GAGjDlE,GAAqB,UAAU,gBAAkBmE,GACjDnE,GAAqB,UAAU,kBAAoBoE,GACnDpE,GAAqB,UAAU,oBAAsBqE,GAGrDrE,GAAqB,UAAU,mBAAqBsE,GAGpDtE,GAAqB,UAAU,qBAAuBuE,GACtDvE,GAAqB,UAAU,gBAAkBwE,GAGjDxE,GAAqB,UAAU,kBAAoByE,GACnDzE,GAAqB,UAAU,qBAAuB0E,GACtD1E,GAAqB,UAAU,iBAAmB2E,GAGlD3E,GAAqB,UAAU,yBAA2B4E,GCpyBnD,SAASC,GAAyBC,EAAWC,EACpD,CACI,IAAIC,EAAM,EACV,QAASC,EAAI,GAAKF,EAAc,GAAIE,GAAK,EAAGA,GAAK,EAE7CD,GAAQF,EAAUA,EAAU,cAAc,GAAKG,EAEnD,OAAOD,IAAQ,CACnB,CAOO,SAASE,GAA0BC,EAAQJ,EAClD,CACI,IAAMK,EAAQ,IAAI,MAAML,CAAW,EAAE,KAAK,CAAC,EAC3C,QAASE,EAAIF,EAAc,EAAGE,GAAK,EAAGA,IAElCG,EAAMH,CAAC,EAAIE,EAAS,IACpBA,IAAW,EAGf,OAAOC,CACX,CCnBO,SAASC,GAAcC,EAAOC,EACrC,CACI,GAAI,KAAK,kBAEDD,EAAM,mBAAqB,IAC/B,CACI,KAAK,gBAAgB,CAACA,EAAM,kBAAmB,GAAGA,EAAM,WAAW,CAAC,EACpE,MACJ,CAEJ,IAAME,EAAiBC,GAASH,EAAM,iBAAiB,EACjDI,EAAS,KAAK,uBAAuB,KAAK,UAAUH,CAAU,CAAC,GAAK,EAG1E,OAFAC,EAAe,SAAWE,EAElBF,EAAe,OACvB,CACI,KAAKG,EAAa,OACd,IAAMC,EAAWN,EAAM,YAAY,CAAC,EACpC,GAAIM,EAAW,EAEX,KAAK,MAAM,OAAOJ,EAAe,QAASF,EAAM,YAAY,CAAC,EAAGM,CAAQ,EACxE,KAAK,aAAa,KAAK,CACnB,SAAUN,EAAM,YAAY,CAAC,EAC7B,QAASE,EAAe,QACxB,SAAUI,CACd,CAAC,MAGL,CACI,KAAK,MAAM,QAAQJ,EAAe,QAASF,EAAM,YAAY,CAAC,CAAC,EAC/D,IAAMO,EAAW,KAAK,aAAa,UAAUC,GACzCA,EAAE,WAAaR,EAAM,YAAY,CAAC,GAAKQ,EAAE,UAAYN,EAAe,OAAO,EAC3EK,IAAa,IAEb,KAAK,aAAa,OAAOA,EAAU,CAAC,CAE5C,CACA,MAEJ,KAAKF,EAAa,QACd,KAAK,MAAM,QAAQH,EAAe,QAASF,EAAM,YAAY,CAAC,CAAC,EAC/D,IAAMO,EAAW,KAAK,aAAa,UAAUC,GACzCA,EAAE,WAAaR,EAAM,YAAY,CAAC,GAAKQ,EAAE,UAAYN,EAAe,OAAO,EAC3EK,IAAa,IAEb,KAAK,aAAa,OAAOA,EAAU,CAAC,EAExC,MAEJ,KAAKF,EAAa,UACd,KAAK,MAAM,WAAWH,EAAe,QAASF,EAAM,YAAY,CAAC,EAAGA,EAAM,YAAY,CAAC,CAAC,EACxF,MAEJ,KAAKK,EAAa,iBAEd,GAAI,KAAK,SAAS,aAAe,KAAK,SAAS,oBAAoBJ,CAAU,EAAE,OAAS,EAEpF,OAEJ,KAAK,MAAM,iBAAiBC,EAAe,QAASF,EAAM,YAAY,CAAC,EAAGA,EAAM,YAAY,CAAC,CAAC,EAC9F,MAEJ,KAAKK,EAAa,cAEd,GAAI,KAAK,SAAS,aAAe,KAAK,SAAS,oBAAoBJ,CAAU,EAAE,OAAS,EAEpF,OAEJ,KAAK,MAAM,cAAcC,EAAe,QAASF,EAAM,YAAY,CAAC,CAAC,EACrE,MAEJ,KAAKK,EAAa,aACd,KAAK,MAAM,aAAaH,EAAe,QAASF,EAAM,YAAY,CAAC,EAAGA,EAAM,YAAY,CAAC,CAAC,EAC1F,MAEJ,KAAKK,EAAa,gBACd,KAAK,MAAM,gBAAgBH,EAAe,QAASF,EAAM,YAAY,CAAC,CAAC,EACvE,MAEJ,KAAKK,EAAa,gBACd,KAAK,MAAM,gBAAgBL,EAAM,YAAaI,CAAM,EACpD,MAEJ,KAAKC,EAAa,SACdL,EAAM,YAAY,aAAe,EACjC,IAAIS,EAAW,IAAWC,GAAyBV,EAAM,YAAa,CAAC,EACvE,KAAK,iBAAmB,IAAMS,EAAW,KAAK,SAAS,cACnD,KAAK,mBAAqB,IAE1B,KAAK,iBAAmB,IAAM,IAAM,KAAK,SAAS,cAClDE,EAAgB,wCAAwC,EACxDF,EAAW,KAEf,MAGJ,KAAKJ,EAAa,cAClB,KAAKA,EAAa,WAClB,KAAKA,EAAa,kBAClB,KAAKA,EAAa,aAClB,KAAKA,EAAa,cAClB,KAAKA,EAAa,aAClB,KAAKA,EAAa,eAClB,KAAKA,EAAa,iBAClB,KAAKA,EAAa,KAClB,KAAKA,EAAa,MAClB,KAAKA,EAAa,UAClB,KAAKA,EAAa,UAClB,KAAKA,EAAa,OAClB,KAAKA,EAAa,SAClB,KAAKA,EAAa,eAClB,KAAKA,EAAa,YACd,MAGJ,KAAKA,EAAa,SACd,KAAK,eAAeJ,EAAYD,EAAM,YAAY,CAAC,CAAC,EACpD,MAEJ,KAAKK,EAAa,MACd,KAAK,MAAM,gBAAgB,EAC3B,KAAK,MAAM,oBAAoB,EAC/B,MAEJ,QACIM,EACI,2BAA2BX,EAAM,iBAAiB,qBAAqB,OAAO,KAC1EK,CAAY,EAAE,KAAKO,GAAKP,EAAaO,CAAC,IAAMV,EAAe,MAAM,CAAC,GACtEW,EAAc,KACdA,EAAc,aACdA,EAAc,KACdA,EAAc,KAClB,EACA,KACR,CACIX,EAAe,QAAU,GAAKA,EAAe,OAAS,KAEtD,MAAM,cAAcF,EAAOC,CAAU,CAE7C,CAOO,SAASa,IAChB,CACI,QAASC,EAAI,EAAGA,EAAI,GAAIA,IAEpB,KAAK,MAAM,kBAAkB,EAAI,CAEzC,CChKO,SAASC,IAChB,CACI,GAAI,CAAC,KAAK,SAEN,OAEJ,IAAIC,EAAU,KAAK,YACnB,KAAO,KAAK,WAAaA,GACzB,CAEI,IAAIC,EAAa,KAAK,qBAAqB,EACvCC,EAAQ,KAAK,OAAOD,CAAU,EAAE,KAAK,WAAWA,CAAU,CAAC,EAO/D,GANA,KAAK,cAAcC,EAAOD,CAAU,EAEpC,KAAK,WAAWA,CAAU,IAG1BA,EAAa,KAAK,qBAAqB,EACnC,KAAK,OAAOA,CAAU,EAAE,QAAU,KAAK,WAAWA,CAAU,EAChE,CAEI,GAAI,KAAK,KACT,CACI,KAAK,aAAa,KAAK,SAAS,KAAK,KAAK,EAC1C,MACJ,CACA,KAAK,WAAWA,CAAU,IAC1B,KAAK,MAAM,EAAI,EACX,KAAK,MAAM,OAAS,GAEpB,KAAK,SAAS,EAElB,MACJ,CACA,IAAIE,EAAY,KAAK,OAAOF,CAAU,EAAE,KAAK,WAAWA,CAAU,CAAC,EACnE,KAAK,YAAc,KAAK,kBAAoBE,EAAU,MAAQD,EAAM,OAEpE,IAAME,EAAU,KAAK,OAAS,KAAK,UAAY,GAAK,KAAK,YAAc,IAGvE,GAAK,KAAK,SAAS,KAAK,KAAOF,EAAM,OAAUE,EAC/C,CAEQ,KAAK,YAAc,MAEnB,KAAK,YACL,MAAM,oBAAoB,KAAK,SAAS,GAE5C,KAAK,aAAa,KAAK,SAAS,KAAK,KAAK,EAC1C,MACJ,SAESJ,GAAW,KAAK,SACzB,CACI,GAAII,EACJ,CAEQ,KAAK,YAAc,MAEnB,KAAK,YACL,MAAM,oBAAoB,KAAK,SAAS,GAE5C,KAAK,aAAa,KAAK,SAAS,KAAK,KAAK,EAC1C,MACJ,CAEA,KAAK,WAAWH,CAAU,IAC1B,KAAK,MAAM,EAAI,EACX,KAAK,MAAM,OAAS,GAEpB,KAAK,SAAS,EAElB,MACJ,CACJ,CACJ,CAOO,SAASI,IAChB,CACI,IAAIC,EAAQ,EACRC,EAAQ,IACZ,YAAK,OAAO,QAAQ,CAACC,EAAOC,IAC5B,CACQ,KAAK,WAAWA,CAAC,GAAKD,EAAM,QAI5BA,EAAM,KAAK,WAAWC,CAAC,CAAC,EAAE,MAAQF,IAElCD,EAAQG,EACRF,EAAQC,EAAM,KAAK,WAAWC,CAAC,CAAC,EAAE,MAE1C,CAAC,EACMH,CACX,CC9FA,IAAMI,GAAN,KACA,CAKI,aAAe,EAMf,SAAW,EAOX,aAAe,CAAC,CAAE,MAAO,EAAG,MAAO,GAAI,CAAC,EAMxC,UAAY,GAMZ,aAAe,EAMf,WAAa,CAAC,EAMd,OAAS,CAAC,EAMV,YAAc,CAAC,EAMf,YAAc,EAMd,SAAW,CAAE,IAAK,EAAG,IAAK,GAAI,EAM9B,mBAAqB,EAMrB,UAAY,CAAC,CAAC,EAMd,uBAAyB,CAAC,CAAC,EAM3B,oBAAsB,CAAC,EAMvB,KAAO,CAAE,MAAO,EAAG,IAAK,CAAE,EAM1B,SAAW,GAMX,qBAAuB,GAMvB,SAAW,GAOX,YAMA,OAAS,EAQT,SAAW,CAAC,EAMZ,WAAa,EAOb,cAAgB,GAMhB,YAAc,GAOd,mBAAmBC,EACnB,CACI,IAAIC,EAAe,EAEnB,KAAOD,EAAQ,GACf,CAKI,IAAIE,EAAQ,KAAK,aAAa,KAAKC,GAAKA,EAAE,MAAQH,CAAK,EAGnDI,EAAqBJ,EAAQE,EAAM,MACvCD,GAAiBG,EAAqB,IAAOF,EAAM,MAAQ,KAAK,cAChEF,GAASI,CACb,CAEA,OAAOH,CACX,CAOA,kBAAkBI,EAClB,CAEI,KAAK,SAAWA,EAAS,SACzB,KAAK,qBAAuBA,EAAS,qBACrC,KAAK,SAAWA,EAAS,SACzB,KAAK,aAAeA,EAAS,aAC7B,KAAK,SAAWA,EAAS,SACzB,KAAK,UAAYA,EAAS,UAC1B,KAAK,aAAeA,EAAS,aAC7B,KAAK,YAAcA,EAAS,YAC5B,KAAK,mBAAqBA,EAAS,mBACnC,KAAK,OAASA,EAAS,OACvB,KAAK,WAAaA,EAAS,WAC3B,KAAK,cAAgBA,EAAS,cAC9B,KAAK,YAAcA,EAAS,YAG5B,KAAK,aAAe,CAAC,GAAGA,EAAS,YAAY,EAC7C,KAAK,OAASA,EAAS,OAAO,IAAIC,GAAO,IAAI,WAAWA,CAAG,CAAC,EAC5D,KAAK,YAAc,CAAC,GAAGD,EAAS,WAAW,EAC3C,KAAK,UAAY,CAAC,GAAGA,EAAS,SAAS,EACvC,KAAK,WAAa,CAAC,GAAGA,EAAS,UAAU,EACzC,KAAK,uBAAyB,CAAC,GAAGA,EAAS,sBAAsB,EACjE,KAAK,oBAAsBA,EAAS,oBAAoB,IAAIE,GAAO,IAAI,IAAIA,CAAG,CAAC,EAC/E,KAAK,YAAcF,EAAS,YAAc,IAAI,WAAWA,EAAS,WAAW,EAAI,OAGjF,KAAK,KAAO,CAAE,GAAGA,EAAS,IAAK,EAC/B,KAAK,SAAW,CAAE,GAAGA,EAAS,QAAS,EACvC,KAAK,SAAW,CAAC,EACjB,OAAW,CAACG,EAAKC,CAAK,IAAK,OAAO,QAAQJ,EAAS,QAAQ,EAEvD,KAAK,SAASG,CAAG,EAAI,IAAIE,EAAiBD,CAAK,CAEvD,CACJ,EC9NO,SAASE,GAA2BC,EAC3C,CACI,IAAIC,EAAM,EACV,KAAOD,GACP,CACI,IAAME,EAAOF,EAAcA,EAAc,cAAc,EAKvD,GAHAC,EAAOA,GAAO,EAAMC,EAAO,IAGtBA,GAAQ,IAAO,EAEhB,KAER,CACA,OAAOD,CACX,CAOO,SAASE,GAA4BC,EAC5C,CAEI,IAAIC,EAAQ,CAACD,EAAS,GAAG,EAIzB,IAHAA,IAAW,EAGJA,EAAS,GAEZC,EAAM,QAASD,EAAS,IAAO,GAAG,EAClCA,IAAW,EAEf,OAAOC,CACX,CCjCO,SAASC,IAChB,CACI,IAAMC,EAAO,KACb,GAAI,CAACA,EAAK,OAEN,MAAM,IAAI,MAAM,qBAAqB,EAKzC,IAAMC,EAAkB,CAAC,EACzB,QAAWC,KAASF,EAAK,OACzB,CACI,IAAMG,EAAc,CAAC,EACjBC,EAAc,EACdC,EACJ,QAAWC,KAASJ,EACpB,CAEI,IAAMK,EAAaD,EAAM,MAAQF,EAI7BI,EAEAF,EAAM,mBAAqBG,EAAa,kBAIxCD,EAAc,CAAC,IAAMF,EAAM,kBAAmB,GAAGI,GAA4BJ,EAAM,YAAY,MAAM,EAAG,GAAGA,EAAM,WAAW,EAG5HD,EAAc,QAETC,EAAM,oBAAsBG,EAAa,iBAI9CD,EAAc,CAAC,IAAM,GAAGE,GAA4BJ,EAAM,YAAY,MAAM,EAAG,GAAGA,EAAM,WAAW,EAGnGD,EAAc,SAKdG,EAAc,CAAC,EACXH,IAAgBC,EAAM,oBAGtBD,EAAcC,EAAM,kBAEpBE,EAAY,KAAKF,EAAM,iBAAiB,GAG5CE,EAAY,KAAK,GAAGF,EAAM,WAAW,GAGzCH,EAAY,KAAK,GAAGO,GAA4BH,CAAU,CAAC,EAE3DJ,EAAY,KAAK,GAAGK,CAAW,EAC/BJ,GAAeG,CACnB,CACAN,EAAgB,KAAK,IAAI,WAAWE,CAAW,CAAC,CACpD,CAMA,SAASQ,EAAUC,EAAMC,EACzB,CACI,QAASC,EAAI,EAAGA,EAAIF,EAAK,OAAQE,IAE7BD,EAAI,KAAKD,EAAK,WAAWE,CAAC,CAAC,CAEnC,CAGA,IAAMC,EAAa,CAAC,EAEpBJ,EAAU,OAAQI,CAAU,EAC5BA,EAAW,KAAK,GAAGC,GAA0B,EAAG,CAAC,CAAC,EAClDD,EAAW,KAAK,EAAGf,EAAK,MAAM,EAC9Be,EAAW,KAAK,GAAGC,GAA0BhB,EAAK,aAAc,CAAC,CAAC,EAClEe,EAAW,KAAK,GAAGC,GAA0BhB,EAAK,aAAc,CAAC,CAAC,EAGlE,QAAWE,KAASD,EAGhBU,EAAU,OAAQI,CAAU,EAC5BA,EAAW,KAAK,GAAGC,GAA0Bd,EAAM,OAAQ,CAAC,CAAC,EAC7Da,EAAW,KAAK,GAAGb,CAAK,EAE5B,OAAO,IAAI,WAAWa,CAAU,CACpC,CCpGO,SAASE,GAAO,EACvB,CACI,OAAO,EAAE,YAAY,CAAC,IAAM,IACxB,EAAE,YAAY,CAAC,IAAM,IACrB,EAAE,YAAY,CAAC,IAAM,KACrB,EAAE,YAAY,CAAC,IAAM,CAC7B,CAMO,SAASC,GAAY,EAC5B,CACI,OAAO,EAAE,YAAY,CAAC,IAAM,IACxB,EAAE,YAAY,CAAC,IAAM,IACrB,EAAE,YAAY,CAAC,IAAM,IACrB,EAAE,YAAY,CAAC,IAAM,KACpB,EAAE,YAAY,CAAC,EAAI,MAAU,GAC9B,EAAE,YAAY,CAAC,IAAM,EAC7B,CAMO,SAASC,GAAO,EACvB,CACI,OAAO,EAAE,YAAY,CAAC,IAAM,IACrB,EAAE,YAAY,CAAC,IAAM,IACrB,EAAE,YAAY,CAAC,IAAM,GAChC,CAMO,SAASC,GAAO,EACvB,CACI,OAAO,EAAE,YAAY,CAAC,IAAM,KACrB,EAAE,YAAY,CAAC,IAAM,GACrB,EAAE,YAAY,CAAC,IAAM,CAChC,CAMO,SAASC,GAAQ,EACxB,CACI,OAAO,EAAE,YAAY,CAAC,IAAM,KACrB,EAAE,YAAY,CAAC,IAAM,GACrB,EAAE,YAAY,CAAC,IAAM,CAChC,CC3CO,SAASC,GAAQC,EACxB,CACI,OAAO,IAAIC,GACPD,EACAE,EAAa,gBACb,IAAIC,EAAiB,CACjB,GACA,GACA,GACA,GACA,GACA,EACA,IACA,EACA,GACA,GACJ,CAAC,CACL,CACJ,CASA,SAASC,GAAoBC,EAASC,EAAIC,EAAOP,EACjD,CACI,OAAO,IAAIC,GACPD,EACAE,EAAa,iBAAoBG,EAAU,GAC3C,IAAIF,EAAiB,CAACG,EAAIC,CAAK,CAAC,CACpC,CACJ,CAOA,SAASC,GAAcH,EAASL,EAChC,CACI,IAAMS,EAAc,GAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAEJ,EAAU,EAAE,EAExFK,EAAY,CACd,GACA,GACA,GACA,GACA,GACAD,EACA,GACA,CACJ,EAIME,EAAW,KADL,GAAOF,EAAc,GAAO,GACV,IAE9B,OAAO,IAAIR,GACPD,EACAE,EAAa,gBACb,IAAIC,EAAiB,CACjB,GAAGO,EACHC,EACA,GACJ,CAAC,CACL,CACJ,CAqCO,SAASC,GACZC,EAAwB,CAAC,EACzBC,EAA2B,CAAC,EAC5BC,EAAyB,CAAC,EAC1BC,EAA6B,CAAC,EAElC,CACI,IAAMC,EAAO,KACbC,GAA0B,yCAA0CC,EAAc,IAAI,EAEtFC,EAAgB,2BAA4BP,CAAqB,EACjEO,EAAgB,sBAAuBN,CAAwB,EAC/DM,EAAgB,6BAA8BL,CAAsB,EACpEK,EAAgB,iCAAkCJ,CAA0B,EAK5E,IAAMK,EAA0B,IAAI,IACpCR,EAAsB,QAAQS,GAC9B,CACID,EAAwB,IAAIC,EAAE,OAAO,CACzC,CAAC,EAID,IAAIC,EAAS,KACTC,EAAU,GAKRC,EAAe,MAAMR,EAAK,OAAO,MAAM,EAAE,KAAK,CAAC,EACjDS,EAAkBT,EAAK,OAAO,OAElC,SAASU,GACT,CACI,IAAIC,EAAQ,EACR5B,EAAQ,IACZ,OAAAiB,EAAK,OAAO,QAAQ,CAACY,EAAOC,IAC5B,CACQL,EAAaK,CAAC,GAAKD,EAAM,QAIzBA,EAAMJ,EAAaK,CAAC,CAAC,EAAE,MAAQ9B,IAE/B4B,EAAQE,EACR9B,EAAQ6B,EAAMJ,EAAaK,CAAC,CAAC,EAAE,MAEvC,CAAC,EACMF,CACX,CAOA,IAAMG,EAAYd,EAAK,UAAU,MAAM,EAKjCe,EAAyB,CAAC,EAC5BC,EAAwB,EAE5B,SAASC,EAAeC,EAAUC,EAClC,CAEQnB,EAAK,oBAAoBkB,CAAQ,EAAE,OAAS,IAM5CF,IAA0B,IAE1BA,GAAyB,GACzBD,EAAuBI,CAAI,EAAI,GAG/BJ,EAAuBI,CAAI,IAAM,SAEjCJ,EAAuBI,CAAI,EAAIH,EAC/BA,GAAyB,IAG7BF,EAAUI,CAAQ,EAAIC,EAC1B,CAGAnB,EAAK,UAAU,QAAQ,CAACmB,EAAMC,IAC9B,CACIH,EAAeG,EAAYD,CAAI,CACnC,CAAC,EAED,IAAME,EAAiBL,EAKjBM,EAAgB,MAAMD,CAAc,EAAE,KAAK,EAAI,EAM/CE,EAAkB,MAAMF,CAAc,EAAE,KAAK,CAAC,EAK9CG,EAAgB,MAAMH,CAAc,EAAE,KAAK,CAAC,EASlD,IARAtB,EAA2B,QAAQ0B,GACnC,CACI,IAAMC,EAAS,KAAK,MAAMD,EAAU,QAAQ,EACtCE,EAAOF,EAAU,SAAWC,EAClCH,EAAgBE,EAAU,OAAO,EAAIC,EACrCF,EAAcC,EAAU,OAAO,EAAIE,CACvC,CAAC,EAEMlB,EAAkB,GACzB,CACI,IAAIS,EAAWR,EAAoB,EAC7BE,EAAQZ,EAAK,OAAOkB,CAAQ,EAClC,GAAIV,EAAaU,CAAQ,GAAKN,EAAM,OACpC,CACIH,IACA,QACJ,CACA,IAAME,EAAQH,EAAaU,CAAQ,IAC7BU,EAAIhB,EAAMD,CAAK,EAEfkB,EAAkB,IACxB,CACIjB,EAAM,OAAOD,EAAO,CAAC,EACrBH,EAAaU,CAAQ,GACzB,EAMMY,EAAiB,CAACF,GAAGG,GAAS,IACpC,CACInB,EAAM,OAAOD,EAAQoB,GAAQ,EAAGH,EAAC,EACjCpB,EAAaU,CAAQ,GACzB,EAGIc,EAAajB,EAAuBD,EAAUI,CAAQ,CAAC,GAAK,EAChE,GAAIU,EAAE,oBAAsB3C,EAAa,SACzC,CACIgC,EAAeC,EAAUU,EAAE,YAAY,CAAC,CAAC,EACzC,QACJ,CAEA,GAAIA,EAAE,mBAAqB3C,EAAa,kBAAoB2C,EAAE,mBAAqB3C,EAAa,eAE5F,SAEJ,IAAMgD,EAASL,EAAE,kBAAoB,IAC/BM,GAAcN,EAAE,kBAAoB,GACpCxC,GAAU8C,GAAcF,EAE9B,GAAIlC,EAAuB,QAAQV,EAAO,IAAM,GAChD,CACIyC,EAAgB,EAChB,QACJ,CACA,OAAQI,EACR,CACI,KAAKhD,EAAa,OAEd,GAAIqC,EAAclC,EAAO,EACzB,CACIkC,EAAclC,EAAO,EAAI,GAOzBS,EAAyB,OAAOQ,GAAKA,EAAE,UAAYjB,EAAO,EAAE,QAAQ+C,GACpE,CACI,IAAMC,EAAWjD,GACb+C,GACAC,EAAO,iBACPA,EAAO,gBACPP,EAAE,KACN,EACAE,EAAeM,CAAQ,CAC3B,CAAC,EACD,IAAMC,GAAWb,EAAcpC,EAAO,EAEtC,GAAIiD,KAAa,EACjB,CAGI,IAAMC,EAAeD,GAAW,GAAM,GAChCE,EAAYpD,GAAoB+C,GAAaM,EAAgB,OAAQ,EAAGZ,EAAE,KAAK,EAC/Ea,EAAUtD,GAAoB+C,GAAaM,EAAgB,OAAQ,EAAGZ,EAAE,KAAK,EAC7Ec,EAAkBvD,GACpBC,GACAoD,EAAgB,aAChBF,EACAV,EAAE,KACN,EACMe,EAAgBxD,GAClB+C,GACAM,EAAgB,wBAChB,EACAZ,EAAE,KACN,EACAE,EAAea,CAAa,EAC5Bb,EAAeY,CAAe,EAC9BZ,EAAeW,CAAO,EACtBX,EAAeS,CAAS,CAE5B,CAEA,GAAInC,EAAwB,IAAIhB,EAAO,EACvC,CACI,IAAM+C,EAASvC,EAAsB,KAAKS,IAAKA,GAAE,UAAYjB,EAAO,EAChEwD,EAAc,KAAK,IAAI,EAAG,KAAK,IAAIT,EAAO,KAAM,GAAG,CAAC,EAClDU,EAAiBV,EAAO,QAC9BhC,EACI,eAAegC,EAAO,OAAO,WAAWS,CAAW,IAAIC,CAAc,oBAAoB3B,CAAQ,GACjGhB,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,UAClB,EAMA,IAAM4C,EAAgB,IAAI9D,GACtB4C,EAAE,MACF3C,EAAa,cAAgBiD,GAC7B,IAAIhD,EAAiB,CACjB2D,CACJ,CAAC,CACL,EACAf,EAAegB,CAAa,EAE5B,IAAMC,EAAU,CAACC,GAAOC,KACxB,CACI,IAAMC,GAAa/D,GACf+C,GACAc,GAAQR,EAAgB,yBAA2BA,EAAgB,WACnES,GACArB,EAAE,KACN,EACAE,EAAeoB,EAAU,CAC7B,EAGIC,GAAW7C,CAAM,EAGb6B,EAAO,QAEPhC,EACI,sCAAsCe,CAAQ,GAC9ChB,EAAc,WACdA,EAAc,KAClB,EACA6C,EAAQ,GAAOK,GAAUR,CAAW,EAAIA,EAAc,GAAG,EACzDG,EAAQ,GAAM,CAAC,GAKXH,IAAgBS,IAEhBN,EAAQ,GAAOM,EAAY,EAC3BN,EAAQ,GAAM,CAAC,IAKfA,EAAQ,GAAO,CAAC,EAChBA,EAAQ,GAAMH,CAAW,IAOjCG,EAAQ,GAAOH,CAAW,EAEtBT,EAAO,QAAUD,KAAgB,IAGjC/B,EACI,sCAAsCe,CAAQ,GAC9ChB,EAAc,WACdA,EAAc,KAClB,EACA4B,EAAevC,GAAc2C,GAAaN,EAAE,KAAK,CAAC,GAG9D,CACJ,CAEAA,EAAE,YAAY,CAAC,GAAKL,EAAgBnC,EAAO,EAC3C,MAEJ,KAAKH,EAAa,QACd2C,EAAE,YAAY,CAAC,GAAKL,EAAgBnC,EAAO,EAC3C,MAEJ,KAAKH,EAAa,cAEd,GAAImB,EAAwB,IAAIhB,EAAO,EACvC,CAEIyC,EAAgB,EAChB,QACJ,CACA,MAEJ,KAAK5C,EAAa,iBACd,IAAMqE,GAAQ1B,EAAE,YAAY,CAAC,EAE7B,GADgB/B,EAAyB,KAAKQ,IAAKA,GAAE,UAAYjB,IAAWkE,KAAUjD,GAAE,gBAAgB,IACxF,OAChB,CAEIwB,EAAgB,EAChB,QACJ,CAEA,IAAIyB,KAAUd,EAAgB,YAAcc,KAAUd,EAAgB,2BAE9DpC,EAAwB,IAAIhB,EAAO,EACvC,CAEIyC,EAAgB,EAChB,QACJ,CAEJ,MAEJ,KAAK5C,EAAa,gBAEd,GAAIsE,GAAO3B,CAAC,EAERzB,EAAgB,0BAA2BD,EAAc,IAAI,EAC7DI,EAAS,KACTC,EAAU,WAKVqB,EAAE,YAAY,CAAC,IAAM,IAClBA,EAAE,YAAY,CAAC,IAAM,IACrBA,EAAE,YAAY,CAAC,IAAM,GACrBA,EAAE,YAAY,CAAC,IAAM,EAIpBxB,EAAwB,IAAIwB,EAAE,YAAY,CAAC,EAAII,CAAU,GAGzDH,EAAgB,UAKpB2B,GAAO5B,CAAC,EACZ,CAEIrB,EAAU,GACVJ,EACI,oBACAD,EAAc,UAClB,EACA,KACJ,MAGIuD,GAAO7B,CAAC,GAAK8B,GAAQ9B,CAAC,KAGtBzB,EACI,gCACAD,EAAc,IAClB,EACA2B,EAAgB,EAChBtB,EAAU,GAEtB,CACJ,CAEA,GAAI,CAACA,GAAWX,EAAsB,OAAS,EAC/C,CAEI,IAAIe,EAAQ,EACRX,EAAK,OAAO,CAAC,EAAE,CAAC,EAAE,oBAAsBf,EAAa,WAErD0B,IAEJX,EAAK,OAAO,CAAC,EAAE,OAAOW,EAAO,EAAG7B,GAAQ,CAAC,CAAC,EAC1CqB,EAAgB,mCAAoCD,EAAc,IAAI,CAC1E,CACA,KAAK,MAAM,EACXyD,EAAoB,CACxB,CAOO,SAASC,GAAoBC,EACpC,CAOI,IAAMC,EAAsB,CAAC,EAIvBC,EAAkB,CAAC,EASnBC,EAAiB,CAAC,EASlBC,EAAoB,CAAC,EAC3BJ,EAAS,iBAAiB,QAAQ,CAACzE,EAAS8E,IAC5C,CACI,GAAI9E,EAAQ,QACZ,CACI2E,EAAgB,KAAKG,CAAa,EAClC,MACJ,CACA,IAAMC,EAAiB/E,EAAQ,yBAA2BA,EAAQ,kBAAkBgF,GAAkB,oBAAoB,EAAI,IAC1HD,IAAmB,GAEnBL,EAAoB,KAAK,CACrB,QAASI,EACT,SAAUC,CACd,CAAC,EAED/E,EAAQ,YAER4E,EAAe,KAAK,CAChB,QAASE,EACT,QAAS9E,EAAQ,QACjB,KAAMA,EAAQ,KACd,OAAQA,EAAQ,WACpB,CAAC,EAGLA,EAAQ,kBAAkB,QAAQ,CAACiF,EAAGC,IACtC,CACI,GAAI,CAACD,GAAKC,EAAW,KAAOA,IAAa9B,EAAgB,WAErD,OAEJ,IAAM+B,EAAcnF,EAAQ,gBAAgBkF,CAAQ,GAAK,EACzDL,EAAkB,KAAK,CACnB,QAASC,EACT,iBAAkBI,EAClB,gBAAiBC,CACrB,CAAC,CACL,CAAC,CACL,CAAC,EACD,KAAK,WAAWP,EAAgBC,EAAmBF,EAAiBD,CAAmB,CAC3F,CCnlBO,IAAMU,GAAiB,CAC1B,KAAM,OACN,MAAO,OACP,OAAQ,OACR,OAAQ,OACR,MAAO,OACP,QAAS,OACT,UAAW,OACX,aAAc,OACd,QAAS,OACT,SAAU,OACV,SAAU,OACV,SAAU,OACV,aAAc,OACd,WAAY,MAChB,EAEMC,GAAkB,QAClBC,GAAoB,4BA2BnB,SAASC,GACZC,EACAC,EACAC,EAAa,EACbC,EAAW,YACXC,EAAW,CAAC,EACZC,EAAoB,GAExB,CACI,IAAMC,EAAM,KAWZ,GAVAC,GAAiB,8BAA+BC,EAAc,IAAI,EAClEC,EACI,mCAAmCP,CAAU,mBAAmBC,CAAQ,GACxEK,EAAc,KACdA,EAAc,MACdA,EAAc,KACdA,EAAc,KAClB,EACAC,EAAgB,WAAYL,CAAQ,EACpCK,EAAgB,sBAAuBH,EAAI,UAAU,EACjDD,EACJ,CAkBI,IAASK,EAAT,UACA,CACI,IAAIC,EAAQ,EACRC,EAAQ,IACZ,OAAAN,EAAI,OAAO,QAAQ,CAACO,EAAOC,IAC3B,CACQC,EAAaD,CAAC,GAAKD,EAAM,QAIzBA,EAAME,EAAaD,CAAC,CAAC,EAAE,MAAQF,IAE/BD,EAAQG,EACRF,EAAQC,EAAME,EAAaD,CAAC,CAAC,EAAE,MAEvC,CAAC,EACMH,CACX,EA9BIK,EAAS,KAKTC,EAAkB,CAAC,EAKjBF,EAAe,MAAMT,EAAI,OAAO,MAAM,EAAE,KAAK,CAAC,EAChDY,EAAkBZ,EAAI,OAAO,OAsB3Ba,EAAQ,MAAMb,EAAI,OAAO,MAAM,EAAE,KAAK,CAAC,EACvCc,EAAiB,GAAKd,EAAI,uBAAuB,OAAO,CAACe,EAAKC,IAAQA,EAAMD,EAAMC,EAAMD,CAAG,EAU3FE,EAAe,CAAC,EACtB,QAAST,EAAI,EAAGA,EAAIM,EAAgBN,IAEhCS,EAAa,KAAK,CACd,QAAS,EACT,MAAOT,EAAI,KAAO,EAClB,SAAU,OACV,YAAa,OACb,cAAe,EACnB,CAAC,EAEL,KAAOI,EAAkB,GACzB,CACI,IAAIM,EAAWd,EAAoB,EAC7BG,EAAQP,EAAI,OAAOkB,CAAQ,EACjC,GAAIT,EAAaS,CAAQ,GAAKX,EAAM,OACpC,CACIK,IACA,QACJ,CACA,IAAMO,EAAIZ,EAAME,EAAaS,CAAQ,CAAC,EACtCT,EAAaS,CAAQ,IAErB,IAAIE,EAAapB,EAAI,uBAAuBa,EAAMK,CAAQ,CAAC,EAC3D,GAAIC,EAAE,oBAAsBE,EAAa,SACzC,CACIR,EAAMK,CAAQ,EAAIC,EAAE,YAAY,CAAC,EACjC,QACJ,CACA,IAAMG,EAASH,EAAE,kBAAoB,IACrC,GACIG,IAAWD,EAAa,kBACxBC,IAAWD,EAAa,eACxBC,IAAWD,EAAa,gBAGxB,SAGJ,GAAIC,IAAWD,EAAa,gBAC5B,CAEI,GAAI,CAACE,GAAYJ,CAAC,EAClB,CAEQK,GAAOL,CAAC,EAERT,EAAS,KAEJe,GAAON,CAAC,EAEbT,EAAS,KAEJgB,GAAOP,CAAC,GAGbT,EAAS,KACTC,EAAgB,KAAK,CACjB,KAAMO,EACN,EAAGC,CACP,CAAC,GAEIQ,GAAQR,CAAC,IAEdT,EAAS,OAEb,QACJ,CACA,IAAMkB,GAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAET,EAAE,YAAY,CAAC,EAAI,EAAI,EAAIC,EACvGH,EAAaW,EAAY,EAAE,MAAQ,CAAC,EAAET,EAAE,YAAY,CAAC,EAAI,GAAKA,EAAE,YAAY,CAAC,GAAK,GAClF,QACJ,CAGA,IAAMU,GAASV,EAAE,kBAAoB,IAAOC,EAItCU,EAAUb,EAAaY,CAAK,EAClC,GAAIP,IAAWD,EAAa,cAC5B,CACI,IAAMU,GAAOC,GAAWtB,CAAM,EAExBuB,GAAiBd,EAAE,YAAY,CAAC,EAClCW,EAAQ,MAEJnC,EAAU,QAAQ,UAAUuC,GAAKA,EAAE,UAAYD,IAAkBC,EAAE,aACnEH,GACA,EACJ,CAAC,IAAM,KAGHZ,EAAE,YAAY,CAAC,EAAIxB,EAAU,QAAQ,KAAKuC,GAAKA,EAAE,aAAaH,EAAI,CAAC,GAAG,SAAW,EACjF5B,EACI,sBAAsB8B,EAAc,iBAAiBJ,CAAK,2BAA2BV,EAAE,YAAY,CAAC,CAAC,IACrGjB,EAAc,KACdA,EAAc,aACdA,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,GAKAP,EAAU,QAAQ,UAAUuC,GAAKA,EAAE,UAAYD,IAAkB,CAACC,EAAE,aAAaH,EAAI,CAAC,IAAM,KAG5FZ,EAAE,YAAY,CAAC,EAAIxB,EAAU,QAAQ,KAAKuC,GAAK,CAACA,EAAE,aAAaH,EAAI,CAAC,GAAG,SAAW,EAClF5B,EACI,iBAAiB8B,EAAc,iBAAiBJ,CAAK,2BAA2BV,EAAE,YAAY,CAAC,CAAC,IAChGjB,EAAc,KACdA,EAAc,aACdA,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,GAGR4B,EAAQ,QAAUX,EAAE,YAAY,CAAC,EAEjC,IAAMgB,GAAW,KAAK,IAAI,EAAGL,EAAQ,UAAU,YAAY,CAAC,EAAI9B,EAAI,UAAU,EACxEoC,EAAWN,GAAS,aAAa,YAAY,CAAC,EAAI9B,EAAI,YAAe,EAC3E,GAAI8B,EAAQ,WAAa,OAErB,SAGJ,IAAIO,EAAOC,GAAWH,GAAUC,EAASN,EAAQ,MAAOC,EAAI,EAC5D,GAAIpC,EAAU,QAAQ,UAAUuC,GAAKA,EAAE,OAASG,GAAQH,EAAE,UAAYf,EAAE,YAAY,CAAC,CAAC,IAAM,GAC5F,CAEI,IAAMoB,EAAc5C,EAAU,QAAQ,KAAKuC,GAAKA,EAAE,UAAYf,EAAE,YAAY,CAAC,CAAC,GAAG,KAAOvB,GAAeA,EACvGkC,EAAQ,SAAS,YAAY,CAAC,EAAIS,EAC9BT,GAAS,aAAa,cAEtBA,EAAQ,YAAY,YAAY,CAAC,EAAIS,GAEzCpC,EACI,iBAAiBkC,CAAI,IAAIlB,EAAE,YAAY,CAAC,CAAC,iBAAiBU,CAAK,wBAAwBU,CAAU,IACjGrC,EAAc,KACdA,EAAc,aACdA,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,CACJ,KAEA,CAEI,IAAIsC,EAAWH,EACXL,GAAWtB,CAAM,GAAK2B,IAAS,MAE/BA,EAAO,KAEX,IAAMI,GAAWJ,IAAS,IAAM,IAAMG,GAAY5C,EAClDkC,EAAQ,SAAS,YAAY,CAAC,EAAIW,EAC9BX,GAAS,aAAa,aAAe,CAACA,EAAQ,QAE9CA,EAAQ,YAAY,YAAY,CAAC,EAAIA,EAAQ,YAAY,YAAY,CAAC,EAAI9B,EAAI,WAAaJ,GAE/FO,EACI,cAAckC,CAAI,IAAIlB,EAAE,YAAY,CAAC,CAAC,wBAAwBU,CAAK,yBAAyBY,CAAO,IACnGvC,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,CACJ,CACA,QACJ,CAIA,IAAMwC,EAAQvB,EAAE,YAAY,CAAC,IAAMwB,EAAgB,yBACnD,GAAIxB,EAAE,YAAY,CAAC,IAAMwB,EAAgB,YAAc,CAACD,EAEpD,SAGJZ,EAAQ,cAAgB,GACxB,IAAMc,GAAazB,EAAE,YAAY,CAAC,EAE5B0B,GAAgBC,GAClBhB,GAAS,UAAU,YAAY,CAAC,GAAK,EACrCc,GACAlC,EACAgC,EACAZ,EAAQ,MACRD,CACJ,EACIgB,GAAc,cAAgB,EAE9Bf,EAAQ,MAAQ,GAEXe,GAAc,cAAgB,IAEnCf,EAAQ,MAAQ,IAEhBY,EAEAZ,EAAQ,YAAcX,EAItBW,EAAQ,SAAWX,CAE3B,CA+DA,GA3DAF,EAAa,QAAQ,CAAC8B,EAAKC,IAC3B,CACI,GAAID,EAAI,gBAAkB,GAEtB,OAGJ,IAAME,EAAcD,EAAK,GACnB1B,EAASD,EAAa,cAAgB4B,EAEtC7B,EAAa,KAAK,MAAM4B,EAAK,EAAE,EAAI,GACnCE,EAAOlD,EAAI,uBAAuB,QAAQoB,CAAU,EACpDb,EAAQP,EAAI,OAAO,KAAK,CAACmD,GAAGC,KAASpD,EAAI,UAAUoD,EAAI,IAAMF,GAAQlD,EAAI,oBAAoBoD,EAAI,EAAE,IACrGH,CAAW,CAAC,EAChB,GAAI1C,IAAU,OAGV,OAEJ,IAAI8C,EAAa9C,EAAM,UAAUY,IAAKA,GAAE,oBAAsBG,CAAM,EACpE,GAAI+B,IAAe,GACnB,CAII,IAAMC,GAAe/C,EAAM,UAAUY,GAAMA,EAAE,kBAAoB,KAAQA,EAAE,kBAAoB,MAAUA,EAAE,kBAAoB,MAAS8B,CAAW,EACnJ,GAAIK,KAAiB,GAGjB,OAEJ,IAAMC,GAAehD,EAAM+C,EAAY,EAAE,MACnCE,GAAgB7D,EAAU,UAAU,EAAG,CAAC,EAAE,QAChDY,EAAM,OAAO+C,GAAc,EAAG,IAAIG,GAC9BF,GACAlC,EAAa,cAAgB4B,EAC7B,IAAIS,EAAiB,CAACF,EAAa,CAAC,CACxC,CAAC,EACDH,EAAaC,EACjB,CACAnD,EACI,8BAA8B6C,CAAE,GAChC9C,EAAc,KACdA,EAAc,UAClB,EACA,IAAMI,GAAQC,EAAM8C,CAAU,EAAE,MAC1Bd,GAAc5C,EAAU,UAC1B,EACAoD,EAAI,QACJf,GAAWtB,CAAM,CACrB,GAAG,KAAOd,GAAeA,EACzBW,EAAM,OAAO8C,EAAY,EAAG,IAAII,GAC5BnD,GACAe,EAAa,iBAAmB4B,EAChC,IAAIS,EAAiB,CAACf,EAAgB,WAAYJ,EAAU,CAAC,CACjE,CAAC,CACL,CAAC,EAGG7B,IAAW,MAAQ,CAACsB,GAAWtB,CAAM,EACzC,CACI,QAAWiD,KAAKhD,EAEZX,EAAI,OAAO2D,EAAE,IAAI,EAAE,OAAO3D,EAAI,OAAO2D,EAAE,IAAI,EAAE,QAAQA,EAAE,CAAC,EAAG,CAAC,EAEhE,IAAItD,EAAQ,EACRL,EAAI,OAAO,CAAC,EAAE,CAAC,EAAE,oBAAsBqB,EAAa,WAEpDhB,IAEJL,EAAI,OAAO,CAAC,EAAE,OAAOK,EAAO,EAAGuD,GAAQ,CAAC,CAAC,CAC7C,CACJ,CACA,IAAMC,EAAS,IAAIH,EAAiB1D,EAAI,UAAU,EAAE,MAAM,EAMpD8D,EAAc,CAAC,EACfC,EAAU,IAAI,YAqBpB,GAnBAD,EAAY,KACRE,EAAkB1E,GAAe,SAAUyE,EAAQ,OAAO,aAAa,EAAG,EAAI,CAClF,EAEIjE,EAAS,OAAS,QAGlBgE,EAAY,KACRE,EAAkB1E,GAAe,KAAMyE,EAAQ,OAAOjE,EAAS,IAAI,EAAG,EAAI,CAC9E,EACAD,EAAWN,IAIXuE,EAAY,KACRE,EAAkB1E,GAAe,KAAMU,EAAI,YAAa,EAAI,CAChE,EAGAF,EAAS,eAAiB,OAE1BD,EAAWN,GACXuE,EAAY,KACRE,EAAkB1E,GAAe,aAAcyE,EAAQ,OAAOjE,EAAS,YAAY,EAAG,EAAI,CAC9F,MAGJ,CACI,IAAMmE,EAAQ,IAAI,KAAK,EAAE,eAAe,OAAW,CAC/C,QAAS,OACT,KAAM,UACN,MAAO,OACP,IAAK,UACL,KAAM,UACN,OAAQ,SACZ,CAAC,EACDH,EAAY,KACRE,EAAkB1E,GAAe,aAAc4E,GAAeD,EAAO,EAAI,EAAG,EAAI,CACpF,CACJ,CAoDA,GAlDInE,EAAS,UAAY,SAErBD,EAAWN,GACXuE,EAAY,KACRE,EAAkB1E,GAAe,QAASyE,EAAQ,OAAOjE,EAAS,OAAO,CAAC,CAC9E,GAGAA,EAAS,WAAa,QAEtBgE,EAAY,KACRE,EAAkB1E,GAAe,SAAUyE,EAAQ,OAAOjE,EAAS,QAAQ,EAAG,EAAI,CACtF,EAGAA,EAAS,QAAU,SAGnBD,EAAWN,GACXuE,EAAY,KACRE,EAAkB1E,GAAe,MAAOyE,EAAQ,OAAOjE,EAAS,KAAK,EAAG,EAAI,CAChF,EACAgE,EAAY,KACRE,EAAkB1E,GAAe,OAAQyE,EAAQ,OAAOjE,EAAS,KAAK,EAAG,EAAI,CACjF,GAGAA,EAAS,SAAW,SAEpBD,EAAWN,GACXuE,EAAY,KACRE,EAAkB1E,GAAe,OAAQyE,EAAQ,OAAOjE,EAAS,MAAM,EAAG,EAAI,CAClF,GAGAA,EAAS,QAAU,SAEnBD,EAAWN,GACXuE,EAAY,KACRE,EAAkB1E,GAAe,MAAOyE,EAAQ,OAAOjE,EAAS,KAAK,EAAG,EAAI,CAChF,GAGAA,EAAS,UAAY,QAErBgE,EAAY,KACRE,EAAkB1E,GAAe,QAAS,IAAI,WAAWQ,EAAS,OAAO,CAAC,CAC9E,EAGAA,EAAS,YAAc,OAEvBD,EAAWN,GACXuE,EAAY,KACRE,EAAkB1E,GAAe,UAAWyE,EAAQ,OAAOjE,EAAS,SAAS,EAAG,EAAI,CACxF,MAGJ,CAEI,IAAMqE,EAAYnE,EAAI,UAAU,OAAS,EAAIA,EAAI,UAAYR,GAC7DsE,EAAY,KACRE,EAAkB1E,GAAe,UAAW4E,GAAeC,EAAW,EAAI,CAAC,CAC/E,CACJ,CAGA,IAAMC,EAAO,IAAIV,EAAiB,CAAC,EACnC,OAAAW,GAAkBD,EAAMxE,EAAY,CAAC,EACrCkE,EAAY,KAAKE,EAAkB1E,GAAe,WAAY8E,CAAI,CAAC,EAE/DtE,EAAS,eAAiB,SAE1BgE,EAAY,KACRE,EAAkB1E,GAAe,aAAcyE,EAAQ,OAAOjE,EAAS,YAAY,CAAC,CACxF,EACAD,EAAWN,IAGfuE,EAAY,KAAKE,EAAkB1E,GAAe,SAAU4E,GAAerE,EAAU,EAAI,CAAC,CAAC,EAG3FM,EAAgB,cAAeD,EAAc,IAAI,EACjDoE,EAAoB,EACbC,GACH,OACA,CACIL,GAAe,MAAM,EACrBF,EACI,OACAH,CACJ,EACAU,GACI,OACAT,EACA,EACJ,EACApE,CACJ,CACJ,CACJ,CCviBO,SAAS8E,GAAuBC,EACvC,CACI,IAAMC,EAAM,KACZC,GACI,gDACAC,EAAc,IAClB,EAEA,IAAMC,EAAiB,GAAKH,EAAI,uBAAuB,OAAO,CAACI,EAAKC,IAAQA,EAAMD,EAAMC,EAAMD,CAAG,EAI3FE,EAAiB,CAAC,EACxB,QAASC,EAAI,EAAGA,EAAIJ,EAAgBI,IACpC,CACI,IAAMC,EAAOD,EAAI,KAAO,EAAqB,IAAM,EACnDD,EAAe,KAAK,CAChB,QAAS,EACT,KAAME,EACN,QAAS,EACT,WAAYA,EACZ,MAAOD,EAAI,KAAO,EAClB,OAAQ,GAAGC,CAAI,IACnB,CAAC,CACL,CAGA,IAAIC,EAAS,KAEb,SAASC,EAAaC,EACtB,CACI,IAAMH,EAAOI,GAAWD,EAAG,KAAMA,EAAG,QAASA,EAAG,MAAOE,GAAWJ,CAAM,CAAC,EAErEK,EAAYC,EAChB,GAAIhB,aAAqBiB,GACzB,CAII,IAAIC,EAASlB,EAAU,UAAUS,EAAMG,EAAG,QAASE,GAAWJ,CAAM,CAAC,EACrEK,EAAaG,EAAO,OAAO,KAAOA,EAAO,WACzCF,EAAgBE,EAAO,OAAO,OAClC,KAEA,CAII,IAAIA,EAASlB,EAAU,UAAUS,EAAMG,EAAG,QAASE,GAAWJ,CAAM,CAAC,EACrEK,EAAaG,EAAO,KACpBF,EAAgBE,EAAO,OAC3B,CACAN,EAAG,WAAaG,EAChBH,EAAG,QAAUI,EACbJ,EAAG,OAASA,EAAG,WAAa,IAAMA,EAAG,QAChCO,EAAoBP,EAAG,MAAM,IAE9BQ,EACI,8BAA8BR,EAAG,MAAM,GACvCT,EAAc,KACdA,EAAc,UAClB,EACAgB,EAAoBP,EAAG,MAAM,EAAI,IAAI,IAE7C,CAOA,IAAMO,EAAsB,CAAC,EAMvBE,EAAe,MAAMpB,EAAI,OAAO,MAAM,EAAE,KAAK,CAAC,EAChDqB,EAAkBrB,EAAI,OAAO,OAEjC,SAASsB,GACT,CACI,IAAIC,EAAQ,EACRC,EAAQ,IACZ,OAAAxB,EAAI,OAAO,QAAQ,CAACyB,EAAOlB,IAC3B,CACQa,EAAab,CAAC,GAAKkB,EAAM,QAIzBA,EAAML,EAAab,CAAC,CAAC,EAAE,MAAQiB,IAE/BD,EAAQhB,EACRiB,EAAQC,EAAML,EAAab,CAAC,CAAC,EAAE,MAEvC,CAAC,EACMgB,CACX,CAEA,IAAMG,EAAQ1B,EAAI,UAAU,MAAM,EAMlC,IAJAM,EAAe,QAAQqB,GACvB,CACIjB,EAAaiB,CAAC,CAClB,CAAC,EACMN,EAAkB,GACzB,CACI,IAAIO,EAAWN,EAAoB,EAC7BG,EAAQzB,EAAI,OAAO4B,CAAQ,EACjC,GAAIR,EAAaQ,CAAQ,GAAKH,EAAM,OACpC,CACIJ,IACA,QACJ,CACA,IAAMQ,EAAQJ,EAAML,EAAaQ,CAAQ,CAAC,EAG1C,GAFAR,EAAaQ,CAAQ,IAEjBC,EAAM,oBAAsBC,EAAa,SAC7C,CACIJ,EAAME,CAAQ,EAAIC,EAAM,YAAY,CAAC,EACrC,QACJ,CACA,IAAME,EAASF,EAAM,kBAAoB,IACzC,GACIE,IAAWD,EAAa,QACxBC,IAAWD,EAAa,kBACxBC,IAAWD,EAAa,eACxBC,IAAWD,EAAa,gBAGxB,SAEJ,IAAME,GAAWH,EAAM,kBAAoB,IAAO7B,EAAI,uBAAuB0B,EAAME,CAAQ,CAAC,GAAK,EAC7FjB,EAAKL,EAAe0B,CAAO,EAC/B,OAAQD,EACR,CACI,KAAKD,EAAa,cACdnB,EAAG,QAAUkB,EAAM,YAAY,CAAC,EAChCnB,EAAaC,CAAE,EACf,MAEJ,KAAKmB,EAAa,iBACd,IAAMG,EAAQJ,EAAM,YAAY,CAAC,IAAMK,EAAgB,yBAMvD,GALIL,EAAM,YAAY,CAAC,IAAMK,EAAgB,YAAc,CAACD,GAKxDxB,IAAW,MAAQE,EAAG,MAGtB,SAEJ,IAAMH,EAAOqB,EAAM,YAAY,CAAC,EAkBhC,OAjBII,EAEAtB,EAAG,QAAUH,EAIbG,EAAG,KAAOH,EAGQ2B,GAClBxB,EAAG,KACHH,EACAC,EACAwB,EACAtB,EAAG,MACHqB,CACJ,EACsB,YACtB,CACI,IAAK,GAED,MAEJ,IAAK,GAGDrB,EAAG,MAAQ,GACXD,EAAaC,CAAE,EACf,MAEJ,IAAK,GAGDA,EAAG,MAAQ,GACXD,EAAaC,CAAE,EACf,KACR,CAEA,MAEJ,KAAKmB,EAAa,OACd,GAAID,EAAM,YAAY,CAAC,IAAM,EAGzB,SAEJX,EAAoBP,EAAG,MAAM,EAAE,IAAI,GAAGkB,EAAM,YAAY,CAAC,CAAC,IAAIA,EAAM,YAAY,CAAC,CAAC,EAAE,EACpF,MAEJ,KAAKC,EAAa,gBAEd,GAAI,CAACM,GAAYP,CAAK,EACtB,CAEQQ,GAAOR,CAAK,IAEZpB,EAAS,KACTU,EACI,oBACAjB,EAAc,UAClB,GAEJ,QACJ,CACA,IAAMoC,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAAET,EAAM,YAAY,CAAC,EAAI,EAAI,EAAI7B,EAAI,uBAAuB0B,EAAME,CAAQ,CAAC,EAC/IW,EAAS,CAAC,EAAEV,EAAM,YAAY,CAAC,EAAI,GAAKA,EAAM,YAAY,CAAC,GAAK,GACtElB,EAAKL,EAAegC,CAAY,EAChC3B,EAAG,MAAQ4B,EACX7B,EAAaC,CAAE,EACf,KAER,CACJ,CACA,QAAW6B,KAAO,OAAO,KAAKtB,CAAmB,EAEzCA,EAAoBsB,CAAG,EAAE,OAAS,IAElCrB,EACI,uCAAuCqB,CAAG,GAC1CtC,EAAc,KACdA,EAAc,KAClB,EACA,OAAOgB,EAAoBsB,CAAG,GAGtC,OAAAC,EAAoB,EACbvB,CACX,CC/OO,SAASwB,GAAaC,EAAgB,EAC7C,CAOI,SAASC,EAASC,EAClB,CAEI,OAAAA,EAAM,YAAc,IAAIC,EAAiBD,EAAM,YAAY,MAAM,EACjEA,EAAM,YAAY,aAAe,EAC1B,IAAWE,GAAyBF,EAAM,YAAa,CAAC,CACnE,CAWA,IAAMG,EAAY,CAAC,EAGfC,EADc,KAAK,OACA,KAAK,EAC5BA,EAAO,KAAK,CAACC,EAAIC,IAAOD,EAAG,MAAQC,EAAG,KAAK,EAE3C,QAASC,EAAI,EAAGA,EAAI,GAAIA,IAEpBJ,EAAU,KAAK,CAAC,CAAC,EAErB,IAAIK,EAAc,EACdC,EAAmB,IAAM,IAAM,KAAK,cACpCC,EAAa,EACbC,EAAa,EASXC,EAAkB,CAAC,EACzB,QAASL,EAAI,EAAGA,EAAI,GAAIA,IAEpBK,EAAgB,KAAK,CAAC,CAAC,EAE3B,IAAMC,EAAU,CAACC,EAAUC,IAC3B,CACI,IAAMC,EAAYJ,EAAgBG,CAAO,EAAE,UAAUE,GAAKA,EAAE,WAAaH,CAAQ,EAC3EI,EAAON,EAAgBG,CAAO,EAAEC,CAAS,EAC/C,GAAIE,EACJ,CACI,IAAMC,EAAOX,EAAcU,EAAK,MAChCA,EAAK,OAASC,EACVJ,IAAY,IAEZG,EAAK,OAASC,EAAOrB,EAAgBA,EAAgBqB,GAGzDP,EAAgBG,CAAO,EAAE,OAAOC,EAAW,CAAC,CAChD,CACAL,GACJ,EACA,KAAOD,EAAaN,EAAO,QAC3B,CACI,IAAMJ,EAAQI,EAAOM,CAAU,EAEzBU,EAASpB,EAAM,mBAAqB,EACpCe,EAAUf,EAAM,kBAAoB,GAG1C,GAAIoB,IAAW,EAEXP,EAAQb,EAAM,YAAY,CAAC,EAAGe,CAAO,UAGhCK,IAAW,EAEhB,GAAIpB,EAAM,YAAY,CAAC,IAAM,EAGzBa,EAAQb,EAAM,YAAY,CAAC,EAAGe,CAAO,MAGzC,CAEIF,EAAQb,EAAM,YAAY,CAAC,EAAGe,CAAO,EACrC,IAAMM,EAAW,CACb,SAAUrB,EAAM,YAAY,CAAC,EAC7B,MAAOQ,EACP,OAAQ,GACR,SAAUR,EAAM,YAAY,CAAC,EAAI,GACrC,EACAG,EAAUY,CAAO,EAAE,KAAKM,CAAQ,EAChCT,EAAgBG,CAAO,EAAE,KAAKM,CAAQ,EACtCV,GAEJ,MAGKX,EAAM,oBAAsB,KAEjCS,EAAmB,IAAMV,EAASC,CAAK,EAAI,KAAK,eAGpD,GAAI,EAAEU,GAAcN,EAAO,OAEvB,MAGJI,GAAeC,GAAoBL,EAAOM,CAAU,EAAE,MAAQV,EAAM,MACxE,CAGA,OAAIW,EAAa,GAGbC,EAAgB,QAAQ,CAACU,EAAcP,IACvC,CACIO,EAAa,QAAQJ,GACrB,CACI,IAAMC,EAAOX,EAAcU,EAAK,MAChCA,EAAK,OAASC,EACVJ,IAAY,IAEZG,EAAK,OAASC,EAAOrB,EAAgBA,EAAgBqB,EAE7D,CAAC,CACL,CAAC,EAEEhB,CACX,CCrIA,IAAMoB,GAAN,MAAMC,UAAkBC,EACxB,CAMI,kBAAoB,OAOpB,OAAS,CAAC,EAMV,WAAa,GAOb,OAAO,SAASC,EAChB,CACI,IAAMC,EAAI,IAAIH,EACd,OAAAG,EAAE,kBAAkBD,CAAG,EAEvBC,EAAE,WAAaD,EAAI,WACnBC,EAAE,kBAAoBD,GAAK,kBAAoBA,EAAI,kBAAoB,OACvEC,EAAE,OAASD,EAAI,OAAO,IAAIE,GAAS,CAAC,GAAGA,CAAK,CAAC,EACtCD,CACX,CAOA,OAAO,aAAaD,EACpB,CACI,IAAMC,EAAI,IAAIH,EACd,OAAAG,EAAE,kBAAkBD,CAAG,EACvBC,EAAE,WAAaD,EAAI,WACnBC,EAAE,kBAAoBD,EAAI,kBAAoBA,EAAI,kBAAkB,MAAM,CAAC,EAAI,OAC/EC,EAAE,OAASD,EAAI,OAAO,IAAIE,GAASA,EAAM,IAAIC,GAAS,IAAIC,GACtDD,EAAM,MACNA,EAAM,kBACNA,EAAM,WACV,CAAC,CAAC,EACKF,CACX,CAMA,gBACA,CACII,GACI,gCACAC,EAAc,IAClB,EAMA,IAAIC,EAAkB,GAEtB,KAAK,SAAW,CAAE,IAAK,EAAG,IAAK,GAAI,EAMnC,IAAIC,EAAsB,CAAC,EACvBC,EAAoB,GACpB,OAAO,KAAK,SAAS,KAAY,MAGjCA,EAAoB,IAIxB,IAAIC,EAAe,GACf,OAAO,KAAK,SAAS,KAAY,MAGjCA,EAAe,IAInB,IAAIC,EAAY,KACZC,EAAU,KAEd,QAASC,EAAI,EAAGA,EAAI,KAAK,OAAO,OAAQA,IACxC,CAII,IAAMX,EAAQ,KAAK,OAAOW,CAAC,EACrBC,EAAe,IAAI,IACrBC,EAAwB,GAE5B,QAAWC,KAAKd,EAChB,CAEI,GAAIc,EAAE,mBAAqB,KAAQA,EAAE,kBAAoB,IACzD,CACID,EAAwB,GAExB,QAASE,EAAI,EAAGA,EAAID,EAAE,YAAY,OAAQC,IAEtCD,EAAE,YAAYC,CAAC,EAAI,KAAK,IAAI,IAAKD,EAAE,YAAYC,CAAC,CAAC,EASrD,OANID,EAAE,MAAQ,KAAK,qBAEf,KAAK,mBAAqBA,EAAE,OAIxBA,EAAE,kBAAoB,IAC9B,CAEI,KAAKE,EAAa,iBACd,OAAQF,EAAE,YAAY,CAAC,EACvB,CACI,IAAK,GACL,IAAK,KACDL,EAAYK,EAAE,MACd,MAEJ,IAAK,GACL,IAAK,KACGJ,IAAY,KAEZA,EAAUI,EAAE,MAOZJ,EAAU,EAEd,MAEJ,IAAK,GAEG,KAAK,YAAcI,EAAE,YAAY,CAAC,IAAM,GAAKA,EAAE,YAAY,CAAC,IAAM,MAElEG,EACI,sCACAb,EAAc,UAClB,EACA,KAAK,WAAa,EAE9B,CACA,MAGJ,KAAKY,EAAa,OACdJ,EAAa,IAAIE,EAAE,kBAAoB,EAAI,EAC3C,IAAMI,EAAOJ,EAAE,YAAY,CAAC,EAC5B,KAAK,SAAS,IAAM,KAAK,IAAI,KAAK,SAAS,IAAKI,CAAI,EACpD,KAAK,SAAS,IAAM,KAAK,IAAI,KAAK,SAAS,IAAKA,CAAI,EACpD,KACR,CACJ,CACAJ,EAAE,YAAY,aAAe,EAC7B,IAAMK,EAAYC,GAAkBN,EAAE,YAAaA,EAAE,YAAY,MAAM,EAGvE,OAFAA,EAAE,YAAY,aAAe,EAErBA,EAAE,kBACV,CACI,KAAKE,EAAa,SAEdF,EAAE,YAAY,aAAe,EAC7B,KAAK,aAAa,KAAK,CACnB,MAAOA,EAAE,MACT,MAAO,IAAWO,GAAyBP,EAAE,YAAa,CAAC,CAC/D,CAAC,EACDA,EAAE,YAAY,aAAe,EAC7B,MAEJ,KAAKE,EAAa,OAGd,OADaG,EAAU,KAAK,EAAE,YAAY,EAE1C,CACI,QACI,MAEJ,IAAK,QACL,IAAK,YACDV,EAAYK,EAAE,MACd,MAEJ,IAAK,UACDJ,EAAUI,EAAE,KACpB,CACAA,EAAE,YAAY,aAAe,EAC7B,MAEJ,KAAKE,EAAa,UACTT,IAEDO,EAAE,YAAY,aAAe,EAC7BR,EAAoB,KAAKc,GACrBN,EAAE,YACFA,EAAE,YAAY,OACd,EACJ,CAAC,EACDA,EAAE,YAAY,aAAe,GAEjC,MAEJ,KAAKE,EAAa,MAUd,GANIG,EAAU,KAAK,EAAE,WAAW,qBAAqB,IAEjD,KAAK,cAAgB,GACrBF,EAAgB,2BAA4Bb,EAAc,UAAU,GAGpE,KAAK,cAGLU,EAAE,kBAAoBE,EAAa,SAGvC,CAEI,KAAK,OAAO,KAAKF,EAAE,WAAW,EAC9B,KAAK,YAAY,KAAKA,EAAE,KAAK,EAC7B,KACJ,CAIJ,KAAKE,EAAa,KAId,IAAMM,EAAcH,EAAU,KAAK,EAC/BG,EAAY,WAAW,qBAAqB,GAE5C,KAAK,cAAgB,GAErBL,EAAgB,2BAA4Bb,EAAc,UAAU,GAE/D,KAAK,gBAKNkB,EAAY,WAAW,IAAI,GAAKA,EAAY,WAAW,IAAI,EAEtDjB,EAWDC,EAAoB,KAAKgB,EAAY,UAAU,CAAC,EAAE,KAAK,CAAC,GATxD,KAAK,SAAWA,EAAY,UAAU,CAAC,EAAE,KAAK,EAC9CjB,EAAkB,GAClBG,EAAe,GAEf,KAAK,YAAce,GAAe,KAAK,QAAQ,GAQ9CD,EAAY,CAAC,IAAM,MAGxB,KAAK,OAAO,KAAKE,GAAkBV,EAAE,WAAW,CAAC,EACjD,KAAK,YAAY,KAAKA,EAAE,KAAK,IAGrC,MAEJ,KAAKE,EAAa,UACd,KACR,CACJ,CAEA,KAAK,oBAAoB,KAAKJ,CAAY,EAG1C,KAAK,WAAWD,CAAC,EAAI,GACrB,IAAMc,EAAYzB,EAAM,KAAKc,GAAKA,EAAE,oBAAsBE,EAAa,SAAS,EAChF,GAAIS,EACJ,CACIA,EAAU,YAAY,aAAe,EACrC,IAAMC,EAAON,GAAkBK,EAAU,YAAaA,EAAU,YAAY,MAAM,EAClF,KAAK,WAAWd,CAAC,EAAIe,EAIhBb,GAEDP,EAAoB,KAAKoB,CAAI,CAErC,CACJ,CAGA,KAAK,aAAa,QAAQ,EAE1BT,EACI,mDACAb,EAAc,IAClB,EAEA,IAAMuB,EAAe,CAAC,EACtB,QAAWC,KAAK,KAAK,OACrB,CACI,IAAMC,EAAcD,EAAE,KAAKd,IAAMA,EAAE,kBAAoB,OAAUE,EAAa,MAAM,EAChFa,GAEAF,EAAa,KAAKE,EAAY,KAAK,CAE3C,CACA,KAAK,YAAc,KAAK,IAAI,GAAGF,CAAY,EAE3CV,EACI,kCAAkC,KAAK,WAAW,YAClDb,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EAGIK,IAAc,MAAQC,IAAY,MAGlCD,EAAY,KAAK,YACjBC,EAAU,KAAK,qBAIXD,IAAc,OAEdA,EAAY,KAAK,cAGjBC,IAAY,MAAQA,IAAY,KAEhCA,EAAU,KAAK,qBAQvB,KAAK,KAAO,CAAE,MAAOD,EAAW,IAAKC,CAAQ,EAE7CO,EACI,2BAA2B,KAAK,KAAK,KAAK,aAAa,KAAK,KAAK,GAAG,GACpEb,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,UAClB,EAGA,IAAI0B,EAAa,EACjB,KAAK,UAAY,CAAC,EAClB,KAAK,uBAAyB,CAAC,EAC/B,QAASC,EAAW,EAAGA,EAAW,KAAK,OAAO,OAAQA,IAGlD,GADA,KAAK,UAAU,KAAK,EAAE,EAClB,KAAK,oBAAoBA,CAAQ,EAAE,OAAS,EAIhD,QAAWjB,KAAK,KAAK,OAAOiB,CAAQ,EACpC,CACI,GAAIjB,EAAE,oBAAsBE,EAAa,SAErC,SAEJ,IAAMgB,EAAOlB,EAAE,YAAY,CAAC,EAC5B,KAAK,UAAUiB,CAAQ,EAAIC,EACvB,KAAK,uBAAuBA,CAAI,IAAM,SAEtC,KAAK,uBAAuBA,CAAI,EAAIF,EACpCA,GAAc,GAEtB,CAIJ,KAAK,uBAAyB,CAAC,GAAG,KAAK,sBAAsB,EAAE,IAAIG,GAAKA,GAAK,CAAC,EAW9E,IAAIC,EAAc,IAClB,QAASF,KAAQ,KAAK,UAEdA,IAAS,IAELE,EAAcF,IAEdE,EAAcF,GAyB1B,GArBIE,IAAgB,MAEhBA,EAAc,GAElB,KAAK,UAAY,KAAK,UAAU,IAAIF,GAAQA,IAAS,IAAMA,IAAS,OAAYE,EAAcF,CAAI,EAE9F,KAAK,uBAAuB,SAAW,IAEvC,KAAK,uBAAyB,CAAC,CAAC,GAEhC,KAAK,uBAAuB,OAAS,EAErCf,EAAgB,uCAAwCb,EAAc,IAAI,GAI1E,KAAK,YAAc,GACnBa,EAAgB,yBAA0Bb,EAAc,UAAU,GAIlE,CAACI,EAED,GAAI,KAAK,OAAO,OAAS,GAIrB,GACI,KAAK,OAAO,CAAC,EAAE,KACX2B,GAAWA,EAAQ,mBAAqBnB,EAAa,QAEjDmB,EAAQ,kBAAoBnB,EAAa,YACjD,IAAM,OAEV,CAEI,IAAIU,EAAO,KAAK,OAAO,CAAC,EAAE,KAAKS,GAAWA,EAAQ,oBAAsBnB,EAAa,SAAS,EAC1FU,IAEA,KAAK,YAAcA,EAAK,YACxBA,EAAK,YAAY,aAAe,EAChC,KAAK,SAAWN,GAAkBM,EAAK,YAAaA,EAAK,YAAY,OAAQ,EAAK,EAE1F,MAGJ,CAEI,IAAIA,EAAO,KAAK,OAAO,CAAC,EAAE,KAAKS,GAAWA,EAAQ,oBAAsBnB,EAAa,SAAS,EAC1FU,IAEA,KAAK,YAAcA,EAAK,YACxBA,EAAK,YAAY,aAAe,EAChC,KAAK,SAAWN,GAAkBM,EAAK,YAAaA,EAAK,YAAY,OAAQ,EAAK,EAE1F,CAiBJ,GAdKnB,IAED,KAAK,UAAYD,EAEZ,IAAI8B,GAAKA,EAAE,KAAK,EAAE,QAAQ,YAAa;AAAA,CAAI,CAAC,EAE5C,OAAOA,GAAKA,EAAE,OAAS,CAAC,EAExB,KAAK;AAAA,CAAI,GAAK,IAGvB,KAAK,SAAW,KAAK,SAAS,KAAK,EACnC,KAAK,qBAAuB,GAExB,KAAK,SAAS,SAAW,EAC7B,CACInB,EACI,0CACAb,EAAc,IAClB,EACA,KAAK,SAAWiC,GAAY,KAAK,QAAQ,EACzC,KAAK,qBAAuB,GAE5B,KAAK,YAAc,IAAI,WAAW,KAAK,SAAS,MAAM,EACtD,QAAS1B,EAAI,EAAGA,EAAI,KAAK,SAAS,OAAQA,IAEtC,KAAK,YAAYA,CAAC,EAAI,KAAK,SAAS,WAAWA,CAAC,CAExD,MAGIM,EACI,4BAA4B,KAAK,QAAQ,IACzCb,EAAc,KACdA,EAAc,UAClB,EAKC,KAAK,OAAO,KAAKwB,GAAKA,EAAE,CAAC,EAAE,QAAU,CAAC,GAEzB,KAAK,OAAO,CAAC,EAErB,QAAQ,IAAI1B,GACd,EACAc,EAAa,UACb,IAAIsB,EAAiB,KAAK,YAAY,MAAM,CAChD,CAAC,EAQL,KAAK,SAAW,KAAK,mBAAmB,KAAK,kBAAkB,EAE/DrB,EAAgB,aAAcb,EAAc,UAAU,EACtDmC,EAAoB,CACxB,CAKA,OACA,CAEI,QAAWX,KAAK,KAAK,OAGjBA,EAAE,KAAK,CAACY,EAAIC,IAAOD,EAAG,MAAQC,EAAG,KAAK,EAE1C,KAAK,eAAe,CACxB,CACJ,EAEA9C,GAAU,UAAU,UAAY+C,GAChC/C,GAAU,UAAU,WAAagD,GACjChD,GAAU,UAAU,oBAAsBiD,GAC1CjD,GAAU,UAAU,WAAakD,GACjClD,GAAU,UAAU,uBAAyBmD,GAC7CnD,GAAU,UAAU,aAAeoD,GC/jB5B,SAASC,GAAeC,EAAUC,EACzC,CAEQ,KAAK,SAAS,oBAAoBD,CAAQ,EAAE,OAAS,IAMrD,KAAK,wBAA0B,IAE/B,KAAK,uBAAyB,GAC9B,KAAK,uBAAuBC,CAAI,EAAI,GAGpC,KAAK,uBAAuBA,CAAI,IAAM,SAElC,KAAK,MAAM,kBAAkB,OAAS,KAAK,sBAAwB,IAEnE,KAAK,gBAAgB,EAEzB,KAAK,uBAAuBA,CAAI,EAAI,KAAK,sBACzC,KAAK,uBAAyB,IAGlC,KAAK,UAAUD,CAAQ,EAAIC,EAC/B,CASO,SAASC,GAAgBC,EAAYC,EAAW,GACvD,CAEI,GADA,KAAK,KAAK,EACN,CAACD,EAAW,OAEZ,MAAM,IAAI,MAAM,0BAA0B,EAG9C,KAAK,iBAAmB,IAAM,IAAMA,EAAW,cAK/C,KAAK,SAAWA,EAGhB,KAAK,MAAM,kBAAkB,EAGzB,KAAK,SAAS,oBAAsB,SAEpCE,EAAgB,2CAA4CC,EAAc,UAAU,EACpF,KAAK,MAAM,qBAAqB,KAAK,SAAS,kBAAmB,KAAK,SAAS,UAAU,GAG7FC,GAA0B,0BAA2BD,EAAc,IAAI,EAEvE,IAAME,EAAO,KAAK,SAAS,uBAAuB,KAAK,MAAM,gBAAgB,EAC7E,OAAW,CAACC,EAAaC,CAAM,IAAK,OAAO,QAAQF,CAAI,EACvD,CACI,GAAM,CAACG,EAAMC,CAAO,EAAIH,EAAY,MAAM,GAAG,EAAE,IAAI,MAAM,EACnDI,EAAS,KAAK,MAAM,UAAUF,EAAMC,CAAO,EACjDP,EACI,kCAAkCQ,EAAO,UAAU,QACnDP,EAAc,KACdA,EAAc,WACdA,EAAc,IAClB,EACA,QAAWQ,KAASJ,EACpB,CACI,GAAM,CAACK,EAAUC,CAAQ,EAAIF,EAAM,MAAM,GAAG,EAAE,IAAI,MAAM,EACxD,KAAK,MAAM,mBAAmBD,EAAQF,EAAMC,EAASG,EAAUC,EAAUD,CAAQ,CACrF,CACJ,CAsCA,GArCAE,EAAoB,EAMpB,KAAK,OAAS,KAAK,SAAS,OAG5B,KAAK,UAAY,KAAK,SAAS,UAAU,MAAM,EAG/C,KAAK,sBAAwB,EAC7B,KAAK,uBAAyB,CAAC,EAE/B,KAAK,SAAS,UAAU,QAAQ,CAAChB,EAAMiB,IACvC,CACI,KAAK,eAAeA,EAAYjB,CAAI,CACxC,CAAC,EAMD,KAAK,SAAW,KAAK,SAAS,SAC9B,KAAK,cAAgB,KAAK,SAAS,mBAAmB,KAAK,SAAS,WAAW,EAC/EI,EAAgB,sBAAsBc,GAAW,KAAK,KAAK,KAAK,QAAQ,CAAC,EAAE,IAAI,GAAIb,EAAc,UAAU,EAC3G,MAAM,eAAe,KAAK,UAAWF,CAAQ,EAEzC,KAAK,UAAY,IAEjBgB,EACI,uBAAuBD,GAAW,KAAK,MAAM,KAAK,QAAQ,CAAC,EAAE,IAAI,qBACjEb,EAAc,IAClB,EACA,KAAK,KAAO,IAEZF,EAEA,KAAK,KAAK,EAAI,MAGlB,CAEI,IAAMiB,EAAa,KAAK,kBAAoB,KAAK,SAAS,YAAc,EAAI,EAC5E,KAAK,aAAaA,CAAU,EAC5B,KAAK,MAAM,CACf,CACJ,CAOO,SAASC,GAAgBC,EAAanB,EAAW,GACxD,CAKI,KAAK,MAAQmB,EACT,OAAK,MAAM,OAAS,KAIxB,KAAK,UAAY,EACb,KAAK,MAAM,OAAS,IAEpB,KAAK,KAAO,IAEhB,KAAK,mBAAmB,EACxB,MAAM,mBAAmB,KAAK,KAAK,EACnC,KAAK,gBAAgBnB,CAAQ,EACjC,CAKO,SAASoB,IAChB,CACI,GAAI,KAAK,MAAM,SAAW,EAC1B,CACI,KAAK,YAAc,EACnB,MACJ,CACA,KAAK,YACL,KAAK,WAAa,KAAK,MAAM,OAC7B,KAAK,gBAAgB,CACzB,CAKO,SAASC,IAChB,CACI,GAAI,KAAK,MAAM,SAAW,EAC1B,CACI,KAAK,YAAc,EACnB,MACJ,CACA,KAAK,YACD,KAAK,UAAY,IAEjB,KAAK,UAAY,KAAK,MAAM,OAAS,GAEzC,KAAK,gBAAgB,CACzB,CC7LA,IAAMC,GAAyBC,GAAW,MAAM,EAAG,GAAG,EAU/C,SAASC,GAAQC,EAAMC,EAAQ,OACtC,CACI,KAAK,iBAAmB,IAAM,IAAM,KAAK,SAAS,cAElD,KAAK,MAAM,oBAAoB,EAC/B,KAAK,cAAc,EACnB,KAAK,aAAa,EAElB,IAAMC,EAAiB,KAAK,MAAM,kBAAkB,OAK9CC,EAAa,MAAMD,CAAc,EAAE,KAAK,IAAI,EAM5CE,EAAW,CAAC,EAClB,QAAS,EAAI,EAAG,EAAIF,EAAgB,IAEhCE,EAAS,KAAK,CACV,QAAS,GACT,KAAM,EACN,WAAY,CAChB,CAAC,EAGL,IAAMC,EAAmBC,GACrBA,IAAqBC,EAAgB,eACrCD,IAAqBC,EAAgB,eACrCD,IAAqBC,EAAgB,cACrCD,IAAqBC,EAAgB,eACrCD,IAAqBC,EAAgB,yBACrCD,IAAqBC,EAAgB,QACrCD,IAAqBC,EAAgB,QACrCD,IAAqBC,EAAgB,SACrCD,IAAqBC,EAAgB,SACrCD,IAAqBC,EAAgB,YACrCD,IAAqBC,EAAgB,0BACrCD,IAAqBC,EAAgB,oBAOnCC,EAAmB,CAAC,EAC1B,QAAS,EAAI,EAAG,EAAIN,EAAgB,IAEhCM,EAAiB,KAAK,MAAM,KAAKX,EAAsB,CAAC,EAQ5D,SAASY,EAAqBC,EAC9B,CAGI,GADAP,EAAWO,CAAI,EAAI,KACfF,IAAmBE,CAAI,IAAM,OAIjC,QAASC,EAAI,EAAGA,EAAId,GAAuB,OAAQc,IAE1CC,GAAgB,IAAID,CAAC,IAEtBH,EAAiBE,CAAI,EAAEC,CAAC,EAAId,GAAuBc,CAAC,EAGhE,CAEA,OACA,CAEI,IAAIE,EAAa,KAAK,qBAAqB,EACvCC,EAAQ,KAAK,OAAOD,CAAU,EAAE,KAAK,WAAWA,CAAU,CAAC,EAC/D,GAAIZ,IAAU,QAEV,GAAIa,EAAM,OAASb,EAEf,cAKA,KAAK,YAAcD,EAEnB,MAKR,IAAMe,EAAOC,GAASF,EAAM,iBAAiB,EAEvCG,EAAUF,EAAK,SAAW,KAAK,uBAAuB,KAAK,UAAUF,CAAU,CAAC,GAAK,GAC3F,OAAQE,EAAK,OACb,CAEI,KAAKG,EAAa,OAEVV,EAAiBS,CAAO,IAAM,SAE9BT,EAAiBS,CAAO,EAAI,MAAM,KAAKpB,EAAsB,GAEjEW,EAAiBS,CAAO,EAAEV,EAAgB,iBAAiB,EAAIO,EAAM,YAAY,CAAC,EAClF,MAEJ,KAAKI,EAAa,QACd,MAGJ,KAAKA,EAAa,UACdf,EAAWc,CAAO,EAAIH,EAAM,YAAY,CAAC,GAAK,EAAIA,EAAM,YAAY,CAAC,EACrE,MAEJ,KAAKI,EAAa,cAEd,GAAI,KAAK,SAAS,aAAe,KAAK,SAAS,oBAAoBL,CAAU,EAAE,OAAS,EAEpF,MAEJ,IAAMM,EAAIf,EAASa,CAAO,EAC1BE,EAAE,QAAUL,EAAM,YAAY,CAAC,EAC/BK,EAAE,WAAaA,EAAE,KACjB,MAEJ,KAAKD,EAAa,iBAEd,GAAI,KAAK,SAAS,aAAe,KAAK,SAAS,oBAAoBL,CAAU,EAAE,OAAS,EAEpF,MAGJ,IAAMP,EAAmBQ,EAAM,YAAY,CAAC,EAC5C,GAAIT,EAAiBC,CAAgB,EACrC,CACI,IAAIc,EAAMN,EAAM,YAAY,CAAC,EAC7B,GAAIR,IAAqBC,EAAgB,WACzC,CAEIH,EAASa,CAAO,EAAE,KAAOG,EACzB,KACJ,MACSd,IAAqBC,EAAgB,qBAE1CE,EAAqBQ,CAAO,EAE5B,KAAK,iBAEL,KAAK,WAAWA,EAASX,EAAkBc,CAAG,EAI9C,KAAK,MAAM,iBAAiBH,EAASX,EAAkBc,CAAG,CAElE,MAGQZ,EAAiBS,CAAO,IAAM,SAE9BT,EAAiBS,CAAO,EAAI,MAAM,KAAKpB,EAAsB,GAEjEW,EAAiBS,CAAO,EAAEX,CAAgB,EAAIQ,EAAM,YAAY,CAAC,EAErE,MAEJ,QACI,KAAK,cAAcA,EAAOD,CAAU,EACpC,KACR,CAEA,KAAK,WAAWA,CAAU,IAE1BA,EAAa,KAAK,qBAAqB,EACvC,IAAIQ,EAAY,KAAK,OAAOR,CAAU,EAAE,KAAK,WAAWA,CAAU,CAAC,EACnE,GAAIQ,IAAc,OAEd,YAAK,KAAK,EACH,GAEX,KAAK,YAAc,KAAK,kBAAoBA,EAAU,MAAQP,EAAM,MACxE,CAGA,GAAI,KAAK,kBAEL,QAASQ,EAAgB,EAAGA,EAAgBpB,EAAgBoB,IAwBxD,GArBInB,EAAWmB,CAAa,IAAM,QAE9B,KAAK,mBACDA,EACAnB,EAAWmB,CAAa,GAAK,EAC7BnB,EAAWmB,CAAa,EAAI,GAChC,EAEAd,EAAiBc,CAAa,IAAM,QAGpCd,EAAiBc,CAAa,EAAE,QAAQ,CAACC,EAAOC,IAChD,CACQD,IAAU1B,GAAuB2B,CAAK,GAAK,CAACnB,EAC5CmB,CAAK,GAEL,KAAK,WAAWF,EAAeE,EAAOD,CAAK,CAEnD,CAAC,EAGDnB,EAASkB,CAAa,EAAE,SAAW,GAAKlB,EAASkB,CAAa,EAAE,YAAc,EAClF,CACI,IAAMG,EAAOrB,EAASkB,CAAa,EAAE,WACrC,KAAK,WAAWA,EAAef,EAAgB,WAAYkB,CAAI,EAC/D,KAAK,sBAAsBH,EAAelB,EAASkB,CAAa,EAAE,OAAO,CAC7E,MAMJ,SAASA,EAAgB,EAAGA,EAAgBpB,EAAgBoB,IAwBxD,GArBInB,EAAWmB,CAAa,IAAM,QAE9B,KAAK,MAAM,WAAWA,EAAenB,EAAWmB,CAAa,GAAK,EAAGnB,EAAWmB,CAAa,EAAI,GAAI,EAErGd,EAAiBc,CAAa,IAAM,QAGpCd,EAAiBc,CAAa,EAAE,QAAQ,CAACC,EAAOC,IAChD,CACQD,IAAU1B,GAAuB2B,CAAK,GAAK,CAACnB,EAC5CmB,CAAK,GAEL,KAAK,MAAM,iBACPF,EACAE,EACAD,CACJ,CAER,CAAC,EAGDnB,EAASkB,CAAa,EAAE,YAAc,EAC1C,CACI,IAAMH,EAAIf,EAASkB,CAAa,EAC5BH,EAAE,UAAY,IAGd,KAAK,MAAM,iBAAiBG,EAAef,EAAgB,WAAYY,EAAE,UAAU,EACnF,KAAK,MAAM,cAAcG,EAAeH,EAAE,OAAO,GAKjD,KAAK,MAAM,iBAAiBG,EAAef,EAAgB,WAAYY,EAAE,IAAI,CAErF,CAGR,MAAO,EACX,CAOO,SAASO,GAAKC,EAAY,GACjC,CACI,GAAI,KAAK,WAAa,OAMtB,IAAIA,EACJ,CACI,KAAK,WAAa,OAClB,KAAK,YAAc,EACnB,MACJ,CAEA,GAAI,KAAK,aAAe,KAAK,SAC7B,CACI,KAAK,WAAa,OAClB,KAAK,YAAc,EACnB,MACJ,CAGI,KAAK,SAGL,KAAK,sBAAsB,KAAK,UAAU,EAC1C,KAAK,WAAa,QAEjB,KAAK,kBAEN,KAAK,aAAa,QAAQC,GAC1B,CACI,KAAK,MAAM,OAAOA,EAAE,QAASA,EAAE,SAAUA,EAAE,QAAQ,CACvD,CAAC,EAEL,KAAK,kBAAkB,EAC3B,CAMO,SAASC,GAAa5B,EAC7B,CACI,GAAI,CAAC,KAAK,SAEN,OAEJ,KAAK,KAAK,EACV,KAAK,aAAe,CAAC,EACrB,KAAK,WAAa,OAClB,MAAM,eAAe,KAAK,SAAS,mBAAmBA,CAAK,CAAC,EAC5D,IAAM6B,EAAgB,KAAK,QAAQ,EAAG7B,CAAK,EAC3C,KAAK,sBAAsB,KAAK,UAAU,EACrC6B,GAIL,KAAK,KAAK,CACd,CAOO,SAASC,GAAsB/B,EACtC,CACI,KAAK,kBAAoB,KAAK,MAAM,iBAAmBA,EAAO,KAAK,aACvE,CCjWO,SAASgC,GAAgBC,EAChC,CACS,KAAK,kBAIV,MAAM,gBAAgBA,CAAO,CACjC,CAQO,SAASC,GAAWC,EAASC,EAAMC,EAC1C,CACIF,GAAW,GACN,KAAK,kBAIV,KAAK,gBAAgB,CAACG,EAAa,iBAAmBH,EAASC,EAAMC,CAAK,CAAC,CAC/E,CAOO,SAASE,GAAsBJ,EAASK,EAC/C,CACIL,GAAW,GACN,KAAK,kBAIV,KAAK,gBAAgB,CAACG,EAAa,cAAgBH,EAASK,CAAO,CAAC,CACxE,CASO,SAASC,GAAmBN,EAASO,EAAKC,EACjD,CACIR,GAAW,GACN,KAAK,kBAIV,KAAK,gBAAgB,CAACG,EAAa,UAAYH,EAASQ,EAAKD,CAAG,CAAC,CACrE,CAKO,SAASE,IAChB,CACI,GAAK,KAAK,iBAIV,MAAK,gBAAgB,CAACN,EAAa,KAAK,CAAC,EACzC,QAASO,EAAK,EAAGA,EAAK,GAAoBA,IAEtC,KAAK,gBAAgB,CAACP,EAAa,iBAAmBO,EAAIC,EAAgB,YAAa,CAAC,CAAC,EACzF,KAAK,gBAAgB,CAACR,EAAa,iBAAmBO,EAAIC,EAAgB,oBAAqB,CAAC,CAAC,EAEzG,CCtEA,IAAMC,GAAN,KACA,CAKI,MAAQ,CAAC,EAMT,UAAY,EAMZ,oBAAsB,CAAC,EAMvB,MAMA,SAAW,GAMX,iBAAmB,GAMnB,UAAY,IAMZ,WAAa,CAAC,EAMd,WAAa,EAMb,WAAa,OAMb,kBAAoB,EASpB,aAAe,CAAC,EAMhB,KAAO,GAMP,YAAc,GAMd,SAAW,OAMX,UAAY,CAAC,EACb,sBAAwB,EAMxB,uBAAyB,CAAC,EAK1B,kBAAoB,GAMpB,sBAAwB,GAMxB,cAMA,aAMA,eAMA,iBAMA,aAMA,YAMA,kBAKA,YAAYC,EACZ,CACI,KAAK,MAAQA,EACb,KAAK,kBAAoB,KAAK,MAAM,gBACxC,CAOA,cAAgB,EAMhB,IAAI,aAAaC,EACjB,CACI,IAAMC,EAAO,KAAK,YAClB,KAAK,cAAgBD,EACrB,KAAK,YAAcC,CACvB,CAEA,IAAI,aACJ,CAEI,OAAI,KAAK,aAAe,OAEb,KAAK,YAGR,KAAK,MAAM,iBAAmB,KAAK,mBAAqB,KAAK,aACzE,CAEA,IAAI,YAAYA,EAChB,CACI,GAAI,CAAC,KAAK,SAEN,OAEJ,GAAIA,EAAO,KAAK,UAAYA,EAAO,EACnC,CAEQ,KAAK,kBAEL,KAAK,aAAa,KAAK,SAAS,YAAc,CAAC,EAI/C,KAAK,aAAa,CAAC,EAEvB,MACJ,CACA,GAAI,KAAK,mBAEDA,EAAO,KAAK,cAChB,CACI,KAAK,aAAa,KAAK,SAAS,YAAc,CAAC,EAC/C,MACJ,CAEJ,KAAK,KAAK,EACV,KAAK,aAAe,CAAC,EACrB,IAAMC,EAAY,KAAK,QAAU,KAAK,sBAGtC,GAFA,KAAK,WAAa,OAClB,MAAM,eAAeD,CAAI,EACrB,KAAK,SAAS,WAAa,EAC/B,CACIE,EAAgB,cAAc,EAC9B,MAAM,iBAAiB,EAAI,EAC3B,MACJ,CACA,KAAK,QAAQF,CAAI,EACjB,KAAK,sBAAsBA,CAAI,EAC3BC,EAEA,KAAK,MAAM,EAIX,KAAK,KAAK,CAElB,CAMA,IAAI,QACJ,CACI,OAAO,KAAK,aAAe,MAC/B,CAMA,MAAME,EAAa,GACnB,CACI,GAAI,KAAK,OACT,CACID,EAAgB,gBAAgB,EAChC,MACJ,CACA,KAAK,WAAa,KAAK,YACvB,KAAK,KAAK,EACV,MAAM,iBAAiBC,CAAU,CACrC,CAKA,MACA,CACI,KAAK,oBAAoB,EAEzB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IAEpB,KAAK,MAAM,iBAAiBA,EAAGC,EAAgB,aAAc,CAAC,EAGlE,GADA,KAAK,MAAM,gBAAgB,EACvB,KAAK,iBACT,CACI,QAASC,KAAQ,KAAK,aAElB,KAAK,gBAAgB,CAACC,EAAa,QAAWD,EAAK,QAAU,GAAKA,EAAK,QAAQ,CAAC,EAEpF,QAASE,EAAI,EAAGA,EAAI,GAAoBA,IAEpC,KAAK,WAAWA,EAAGH,EAAgB,YAAa,CAAC,CAEzD,CACJ,CAEA,gBAAgBI,EAAW,GAC3B,CACI,IAAIC,EAAQ,KAAK,UACb,KAAK,cAELA,EAAQ,KAAK,oBAAoB,KAAK,SAAS,GAEnD,KAAK,gBAAgB,KAAK,MAAMA,CAAK,EAAGD,CAAQ,CACpD,CAEA,cACA,CACI,KAAK,WAAa,EAClB,KAAK,WAAa,MAAM,KAAK,OAAO,MAAM,EAAE,KAAK,CAAC,CACtD,CAEA,mBACA,CACI,KAAK,SAAW,EACpB,CAEA,qBACA,CACI,KAAK,SAAW,EACpB,CAEA,oBACA,CACI,IAAME,EAAU,KAAK,MAAM,IAAI,CAACC,EAAGR,IAAMA,CAAC,EAE1C,IADA,KAAK,oBAAsB,CAAC,EACrBO,EAAQ,OAAS,GACxB,CACI,IAAMD,EAAQC,EAAQ,KAAK,MAAM,KAAK,OAAO,EAAIA,EAAQ,MAAM,CAAC,EAChE,KAAK,oBAAoB,KAAKD,CAAK,EACnCC,EAAQ,OAAOA,EAAQ,QAAQD,CAAK,EAAG,CAAC,CAC5C,CACJ,CACJ,EAGAb,GAAqB,UAAU,gBAAkBgB,GACjDhB,GAAqB,UAAU,cAAgBiB,GAC/CjB,GAAqB,UAAU,WAAakB,GAC5ClB,GAAqB,UAAU,sBAAwBmB,GACvDnB,GAAqB,UAAU,mBAAqBoB,GACpDpB,GAAqB,UAAU,eAAiBqB,GAEhDrB,GAAqB,UAAU,cAAgBsB,GAC/CtB,GAAqB,UAAU,gBAAkBuB,GACjDvB,GAAqB,UAAU,YAAcwB,GAC7CxB,GAAqB,UAAU,qBAAuByB,GAEtDzB,GAAqB,UAAU,gBAAkB0B,GACjD1B,GAAqB,UAAU,gBAAkB2B,GACjD3B,GAAqB,UAAU,SAAW4B,GAC1C5B,GAAqB,UAAU,aAAe6B,GAE9C7B,GAAqB,UAAU,KAAO8B,GACtC9B,GAAqB,UAAU,QAAU+B,GACzC/B,GAAqB,UAAU,aAAegC,GAC9ChC,GAAqB,UAAU,sBAAwBiC,GCjXvD,IAAIC,IAAI,IAAI,CAAC,IAAIC,EAAE,WAAWC,EAAE,YAAYC,EAAG,WAAWC,EAAE,IAAIH,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAEI,EAAE,IAAIJ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,EAAEK,EAAG,IAAIL,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAEM,EAAE,SAASC,EAAEC,EAAE,CAAC,QAAQC,EAAE,IAAIR,EAAE,EAAE,EAAES,EAAE,EAAEA,EAAE,GAAG,EAAEA,EAAED,EAAEC,CAAC,EAAEF,GAAG,GAAGD,EAAEG,EAAE,CAAC,EAAE,QAAQC,GAAE,IAAIT,EAAGO,EAAE,EAAE,CAAC,EAAEC,EAAE,EAAEA,EAAE,GAAG,EAAEA,EAAE,QAAQE,GAAEH,EAAEC,CAAC,EAAEE,GAAEH,EAAEC,EAAE,CAAC,EAAE,EAAEE,GAAED,GAAEC,EAAC,EAAEA,GAAEH,EAAEC,CAAC,GAAG,EAAEA,EAAE,MAAM,CAACD,EAAI,EAAEE,EAAC,CAAC,EAAEE,EAAEP,EAAEH,EAAE,CAAC,EAAEW,EAAED,EAAE,EAAEE,EAAGF,EAAE,EAAEC,EAAE,EAAE,EAAE,IAAIC,EAAG,GAAG,EAAE,GAAG,IAAIC,EAAEV,EAAEF,EAAE,CAAC,EAAEa,EAAGD,EAAE,EAAEE,EAAGF,EAAE,EAAEG,EAAE,IAAIlB,EAAE,KAAK,EAAE,IAAImB,EAAE,EAAEA,EAAE,MAAM,EAAEA,EAAEC,GAAGD,EAAE,QAAQ,GAAGA,EAAE,QAAQ,EAAEC,GAAGA,EAAE,QAAQ,GAAGA,EAAE,QAAQ,EAAEA,GAAGA,EAAE,QAAQ,GAAGA,EAAE,OAAO,EAAEF,EAAEC,CAAC,IAAIC,EAAE,QAAQ,GAAGA,EAAE,MAAM,IAAI,EAAE,IAAIA,EAAED,EAAEE,EAAE,SAASf,EAAEC,EAAEC,EAAE,CAAC,QAAQC,EAAEH,EAAE,OAAOI,GAAE,EAAEC,GAAE,IAAIX,EAAEO,CAAC,EAAEG,GAAED,EAAE,EAAEC,GAAEJ,EAAEI,EAAC,GAAG,EAAEC,GAAEL,EAAEI,EAAC,EAAE,CAAC,EAAE,IAAIY,GAAE,IAAItB,EAAEO,CAAC,EAAE,IAAIG,GAAE,EAAEA,GAAEH,EAAE,EAAEG,GAAEY,GAAEZ,EAAC,EAAEY,GAAEZ,GAAE,CAAC,EAAEC,GAAED,GAAE,CAAC,GAAG,EAAE,IAAIa,GAAE,GAAGf,EAAE,CAACe,GAAE,IAAIvB,EAAE,GAAGO,CAAC,EAAE,IAAIiB,GAAE,GAAGjB,EAAE,IAAIG,GAAE,EAAEA,GAAED,EAAE,EAAEC,GAAE,GAAGJ,EAAEI,EAAC,EAAE,QAAQe,GAAEf,IAAG,EAAEJ,EAAEI,EAAC,EAAEgB,GAAEnB,EAAED,EAAEI,EAAC,EAAEiB,GAAEL,GAAEhB,EAAEI,EAAC,EAAE,CAAC,KAAKgB,GAAEE,GAAED,IAAG,GAAGD,IAAG,EAAEC,IAAGC,GAAE,EAAED,GAAEJ,GAAEL,EAAES,EAAC,GAAGH,EAAC,EAAEC,EAAC,KAAM,KAAIF,GAAE,IAAIvB,EAAES,CAAC,EAAEC,GAAE,EAAEA,GAAED,EAAE,EAAEC,GAAEJ,EAAEI,EAAC,IAAIa,GAAEb,EAAC,EAAEQ,EAAEI,GAAEhB,EAAEI,EAAC,EAAE,CAAC,GAAG,GAAG,GAAGJ,EAAEI,EAAC,GAAG,OAAOa,EAAC,EAAEM,EAAE,IAAI9B,EAAE,GAAG,EAAE,IAAIoB,EAAE,EAAEA,EAAE,IAAI,EAAEA,EAAEU,EAAEV,CAAC,EAAE,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAEA,EAAEU,EAAEV,CAAC,EAAE,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAEA,EAAEU,EAAEV,CAAC,EAAE,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAEA,EAAEU,EAAEV,CAAC,EAAE,EAAE,IAAIA,EAAEW,EAAE,IAAI/B,EAAE,EAAE,EAAE,IAAIoB,EAAE,EAAEA,EAAE,GAAG,EAAEA,EAAEW,EAAEX,CAAC,EAAE,EAAE,IAAIA,EAAEY,EAAGV,EAAEQ,EAAE,EAAE,CAAC,EAAEG,EAAGX,EAAES,EAAE,EAAE,CAAC,EAAEG,EAAE,SAAS3B,EAAE,CAAC,QAAQC,EAAED,EAAE,CAAC,EAAEE,EAAE,EAAEA,EAAEF,EAAE,OAAO,EAAEE,EAAEF,EAAEE,CAAC,EAAED,IAAIA,EAAED,EAAEE,CAAC,GAAG,OAAOD,CAAC,EAAE2B,EAAE,SAAS5B,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAEF,EAAE,EAAE,EAAE,OAAOD,EAAEG,CAAC,EAAEH,EAAEG,EAAE,CAAC,GAAG,KAAKF,EAAE,GAAGC,CAAC,EAAE2B,EAAE,SAAS7B,EAAEC,EAAE,CAAC,IAAIC,EAAED,EAAE,EAAE,EAAE,OAAOD,EAAEE,CAAC,EAAEF,EAAEE,EAAE,CAAC,GAAG,EAAEF,EAAEE,EAAE,CAAC,GAAG,MAAMD,EAAE,EAAE,EAAE6B,EAAG,SAAS9B,EAAE,CAAC,OAAOA,EAAE,GAAG,EAAE,CAAC,EAAE+B,EAAG,SAAS/B,EAAEC,EAAEC,EAAE,CAAC,OAAOD,GAAG,MAAMA,EAAE,KAAKA,EAAE,IAAIC,GAAG,MAAMA,EAAEF,EAAE,UAAUE,EAAEF,EAAE,QAAQ,IAAIP,EAAEO,EAAE,SAASC,EAAEC,CAAC,CAAC,CAAC,EAAE8B,EAAG,CAAC,iBAAiB,qBAAqB,yBAAyB,mBAAmB,kBAAkB,oBAAoB,CAAC,cAAc,qBAAqB,uBAAuB,8BAA8B,oBAAoB,mBAAmB,kBAAkB,EAAEC,GAAE,SAASjC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAE,IAAI,MAAMF,GAAG+B,EAAGhC,CAAC,CAAC,EAAE,GAAGG,EAAE,KAAKH,EAAE,MAAM,mBAAmB,MAAM,kBAAkBG,EAAE8B,EAAC,EAAE,CAAC/B,EAAE,MAAMC,EAAE,OAAOA,CAAC,EAAE+B,GAAG,SAASlC,EAAEC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,GAAEJ,EAAE,OAAOK,GAAEF,EAAEA,EAAE,OAAO,EAAE,GAAG,CAACC,IAAGH,EAAE,GAAG,CAACA,EAAE,EAAE,OAAOC,GAAG,IAAIT,EAAE,CAAC,EAAE,IAAIuB,GAAE,CAACd,EAAEe,GAAED,IAAGf,EAAE,GAAG,EAAEiB,GAAEjB,EAAE,EAAEe,KAAId,EAAE,IAAIT,EAAEW,GAAE,CAAC,GAAG,IAAIe,GAAE,SAASgB,GAAG,CAAC,IAAIC,GAAGlC,EAAE,OAAO,GAAGiC,GAAGC,GAAG,CAAC,IAAIC,GAAG,IAAI5C,EAAE,KAAK,IAAI2C,GAAG,EAAED,EAAE,CAAC,EAAEE,GAAG,IAAInC,CAAC,EAAEA,EAAEmC,EAAE,CAAC,EAAEjB,GAAEnB,EAAE,GAAG,EAAEoB,GAAEpB,EAAE,GAAG,EAAEqB,GAAErB,EAAE,GAAG,EAAEqC,GAAErC,EAAE,EAAEsC,GAAEtC,EAAE,EAAEuC,GAAEvC,EAAE,EAAEwC,GAAExC,EAAE,EAAEyC,GAAEtC,GAAE,EAAE,EAAE,CAAC,GAAG,CAACkC,GAAE,CAAClB,GAAEQ,EAAE5B,EAAEqB,GAAE,CAAC,EAAE,IAAIsB,GAAEf,EAAE5B,EAAEqB,GAAE,EAAE,CAAC,EAAE,GAAGA,IAAG,EAAEsB,GAAE,GAAGA,IAAG,EAAEL,GAAEb,EAAGc,GAAEb,EAAGc,GAAE,EAAEC,GAAE,UAAUE,IAAG,EAAE,CAAC,IAAIC,GAAEhB,EAAE5B,EAAEqB,GAAE,EAAE,EAAE,IAAIwB,GAAEjB,EAAE5B,EAAEqB,GAAE,GAAG,EAAE,EAAE,EAAEyB,GAAEF,GAAEhB,EAAE5B,EAAEqB,GAAE,EAAE,EAAE,EAAE,EAAEA,IAAG,GAAG,QAAQ0B,GAAE,IAAItD,EAAEqD,EAAC,EAAEE,GAAE,IAAIvD,EAAE,EAAE,EAAEwD,GAAE,EAAEA,GAAEJ,GAAE,EAAEI,GAAED,GAAElD,EAAGmD,EAAC,CAAC,EAAErB,EAAE5B,EAAEqB,GAAE4B,GAAE,EAAE,CAAC,EAAE5B,IAAGwB,GAAE,EAAE,QAAQK,GAAGvB,EAAEqB,EAAC,EAAEG,IAAI,GAAGD,IAAI,EAAEE,GAAGrC,EAAEiC,GAAEE,GAAG,CAAC,EAAED,GAAE,EAAEA,GAAEH,IAAG,CAAC,IAAIO,GAAGD,GAAGxB,EAAE5B,EAAEqB,GAAE8B,EAAE,CAAC,EAAE9B,IAAGgC,GAAG,GAAG,IAAIC,GAAED,IAAI,EAAE,GAAGC,GAAE,GAAGP,GAAEE,IAAG,EAAEK,OAAM,CAAC,IAAIC,GAAE,EAAEC,GAAE,EAAE,IAAIF,IAAG,IAAIE,GAAE,EAAE5B,EAAE5B,EAAEqB,GAAE,CAAC,EAAEA,IAAG,EAAEkC,GAAER,GAAEE,GAAE,CAAC,GAAGK,IAAG,IAAIE,GAAE,EAAE5B,EAAE5B,EAAEqB,GAAE,CAAC,EAAEA,IAAG,GAAGiC,IAAG,KAAKE,GAAE,GAAG5B,EAAE5B,EAAEqB,GAAE,GAAG,EAAEA,IAAG,GAAGmC,MAAKT,GAAEE,IAAG,EAAEM,EAAC,CAAC,CAAC,IAAIE,GAAGV,GAAE,SAAS,EAAEH,EAAC,EAAEc,GAAEX,GAAE,SAASH,EAAC,EAAEJ,GAAEb,EAAE8B,EAAE,EAAEhB,GAAEd,EAAE+B,EAAC,EAAEpB,GAAEvB,EAAE0C,GAAGjB,GAAE,CAAC,EAAED,GAAExB,EAAE2C,GAAEjB,GAAE,CAAC,CAAC,MAAMR,GAAE,CAAC,MAAM,CAAC,IAAIqB,GAAExB,EAAGT,EAAC,EAAE,EAAEsC,GAAE3D,EAAEsD,GAAE,CAAC,EAAEtD,EAAEsD,GAAE,CAAC,GAAG,EAAEM,GAAEN,GAAEK,GAAE,GAAGC,GAAExD,GAAE,CAACc,IAAGe,GAAE,CAAC,EAAE,KAAK,CAAChB,IAAGE,GAAEG,GAAEqC,EAAC,EAAEzD,EAAE,IAAIF,EAAE,SAASsD,GAAEM,EAAC,EAAEtC,EAAC,EAAErB,EAAE,EAAEqB,IAAGqC,GAAE1D,EAAE,EAAEoB,GAAEuC,GAAE,EAAE3D,EAAE,EAAEmB,GAAE,QAAQ,CAAC,GAAGC,GAAEqB,GAAE,CAACxB,IAAGe,GAAE,CAAC,EAAE,KAAK,CAAC,CAAChB,IAAGE,GAAEG,GAAE,MAAM,EAAE,QAAQuC,IAAI,GAAGrB,IAAG,EAAEsB,IAAI,GAAGrB,IAAG,EAAEsB,GAAE1C,IAAG0C,GAAE1C,GAAE,CAAC,IAAIkC,GAAEjB,GAAET,EAAE7B,EAAEqB,EAAC,EAAEwC,EAAE,EAAEG,GAAET,IAAG,EAAE,GAAGlC,IAAGkC,GAAE,GAAGlC,GAAEqB,GAAE,CAACxB,IAAGe,GAAE,CAAC,EAAE,KAAK,CAAC,GAAGsB,IAAGtB,GAAE,CAAC,EAAE+B,GAAE,IAAI9D,EAAEoB,IAAG,EAAE0C,WAAUA,IAAG,IAAI,CAACD,GAAE1C,GAAEiB,GAAE,KAAK,KAAK,KAAK,CAAC,IAAI2B,GAAGD,GAAE,IAAI,GAAGA,GAAE,IAAI,CAAC,IAAIf,GAAEe,GAAE,IAAIE,GAAEtE,EAAEqD,EAAC,EAAEgB,GAAGrC,EAAE5B,EAAEqB,IAAG,GAAG6C,IAAG,CAAC,EAAE3D,EAAE0C,EAAC,EAAE5B,IAAG6C,EAAC,CAAC,IAAIC,GAAE5B,GAAEV,EAAE7B,EAAEqB,EAAC,EAAEyC,EAAE,EAAEM,GAAED,IAAG,EAAEA,IAAGlC,GAAE,CAAC,EAAEZ,IAAG8C,GAAE,GAAG,IAAIT,GAAEhD,EAAG0D,EAAC,EAAE,GAAGA,GAAE,EAAE,CAAC,IAAIF,GAAErE,EAAEuE,EAAC,EAAEV,IAAG7B,EAAE7B,EAAEqB,EAAC,GAAG,GAAG6C,IAAG,EAAE7C,IAAG6C,EAAC,CAAC,GAAG7C,GAAEqB,GAAE,CAACxB,IAAGe,GAAE,CAAC,EAAE,KAAK,CAAChB,IAAGE,GAAEG,GAAE,MAAM,EAAE,IAAI+C,GAAG/C,GAAE2C,GAAG,GAAG3C,GAAEoC,GAAE,CAAC,IAAIY,GAAGjE,GAAEqD,GAAEa,GAAG,KAAK,IAAIb,GAAEW,EAAE,EAAE,IAAIC,GAAGhD,GAAE,GAAGW,GAAE,CAAC,EAAEX,GAAEiD,GAAG,EAAEjD,GAAEpB,EAAEoB,EAAC,EAAEnB,EAAEmE,GAAGhD,EAAC,CAAC,CAAC,KAAKA,GAAE+C,GAAG,EAAE/C,GAAEpB,EAAEoB,EAAC,EAAEpB,EAAEoB,GAAEoC,EAAC,CAAC,CAAC,CAACzD,EAAE,EAAEqC,GAAErC,EAAE,EAAE8D,GAAE9D,EAAE,EAAEqB,GAAErB,EAAE,EAAEmB,GAAEkB,KAAIlB,GAAE,EAAEnB,EAAE,EAAEuC,GAAEvC,EAAE,EAAEsC,GAAEtC,EAAE,EAAEwC,GAAE,OAAO,CAACrB,IAAG,OAAOE,IAAGpB,EAAE,QAAQc,GAAEe,EAAG7B,EAAE,EAAEoB,EAAC,EAAEpB,EAAE,SAAS,EAAEoB,EAAC,CAAC,EAAEkD,GAAG,IAAI/E,EAAE,CAAC,EAAE,SAASgF,GAAGzE,EAAEC,EAAE,CAAC,OAAOiC,GAAGlC,EAAE,CAAC,EAAE,CAAC,EAAEC,GAAGA,EAAE,IAAIA,GAAGA,EAAE,UAAU,CAAC,CAAC,IAAIyE,GAAG,OAAO,YAAY,KAAK,IAAI,YAAYC,EAAG,EAAE,GAAG,CAACD,GAAG,OAAOF,GAAG,CAAC,OAAO,EAAE,CAAC,EAAEG,EAAG,CAAC,MAAM,CAAC,CAACnF,GAAGiF,EAAE,GAAG,ECYvqH,IAAMG,GAAgB,CAClB,YAAa,EACb,SAAU,EACV,aAAc,EACd,eAAgB,EAChB,eAAgB,EAChB,wBAAyB,EACzB,wBAAyB,EACzB,SAAU,EACV,MAAO,EACP,gBAAiB,EACjB,QAAS,GACT,UAAW,GACX,QAAS,GACT,mBAAoB,GACpB,YAAa,EACjB,EAKMC,GAAmB,CACrB,eAAgB,EAChB,eAAgB,EAChB,WAAY,EACZ,aAAc,EACd,YAAa,EACb,oBAAqB,CACzB,EAKMC,GAAoB,CACtB,iBAAkB,EAClB,sBAAuB,EACvB,KAAM,EACN,KAAM,EACN,MAAO,EACP,UAAW,CACf,EAKMC,GAAgB,CAClB,SAAU,EACV,IAAK,EACL,WAAY,EACZ,cAAe,CACnB,EAMMC,GAAc,CAChB,KAAM,EACN,YAAa,EACb,WAAY,EACZ,cAAe,CACnB,EAEMC,GAAN,MAAMC,CACN,CAII,OAKA,UAIA,eAKA,SAAW,CAAC,EAKZ,SAKA,WAAa,CAAC,EAEd,cAAgB,GAEhB,cAAgB,CAAC,EAYjB,eAAiB,UAKjB,YAAYC,EACZ,CACI,IAAIC,EAAiBD,EAAW,aAChC,KAAK,OAASE,GAA2BF,CAAU,EACnD,KAAK,UAAYE,GAA2BF,CAAU,EAEtD,IAAMG,EAAeD,GAA2BF,CAAU,EACpDI,EAAYJ,EAAW,aAAeC,EAEtCI,EAAkBF,EAAeC,EACjCE,EAAaN,EAAW,MAC1BA,EAAW,aACXA,EAAW,aAAeK,CAC9B,EACAL,EAAW,cAAgBK,EAE3B,KAAK,eAAiBH,GAA2BI,CAAU,EAE3D,IAAMC,EAAgBD,EAAW,MAC7BA,EAAW,aACXA,EAAW,aAAe,KAAK,cACnC,EACAA,EAAW,cAAgB,KAAK,eAKhC,IAAIE,EACAC,EACJ,KAAOF,EAAc,aAAeA,EAAc,QAClD,CAEI,GAD2BA,EAAcA,EAAc,YAAY,IACxC,EAEvBA,EAAc,eACdC,EAAiBN,GAA2BK,CAAa,EACrD,OAAO,OAAOd,EAAa,EAAE,QAAQe,CAAc,IAAM,IAEzDE,EAAgB,4BAA4BF,CAAc,EAAE,EAC5DC,EAAM,WAAWD,CAAc,IAI/BC,EAAM,OAAO,KAAKhB,EAAa,EAAE,KAAKkB,GAAKlB,GAAckB,CAAC,IAAMH,CAAc,MAItF,CAEI,IAAMI,EAAeV,GAA2BK,CAAa,EAC7DC,EAAiBK,GAAkBN,EAAeK,CAAY,EAC9DH,EAAMD,CACV,CAEA,IAAMM,EAAmBZ,GAA2BK,CAAa,EACjE,GAAIO,IAAqB,EACzB,CACI,IAAMC,EAAab,GAA2BK,CAAa,EACrDS,EAAgBT,EAAc,MAChCA,EAAc,aACdA,EAAc,aAAeQ,CACjC,EACAR,EAAc,cAAgBQ,EACbb,GAA2Bc,CAAa,EAE1C,EAEX,KAAK,SAASP,CAAG,EAAII,GAAkBG,EAAeD,EAAa,CAAC,EAIpE,KAAK,SAASN,CAAG,EAAIO,EAAc,MAAMA,EAAc,YAAY,CAE3E,MAKIN,EAAgB,0BAA0BI,CAAgB,EAAE,EAG5DP,EAAc,cAAgBL,GAA2BK,CAAa,CAE9E,CAEA,IAAMU,EAAiBX,EAAW,aAC5BY,EAAkBhB,GAA2BI,CAAU,EACvDa,EAAgBb,EAAW,MAAMA,EAAW,aAAcW,EAAiBC,CAAe,EAEhG,GADAZ,EAAW,aAAeW,EAAiBC,EACvCA,EAAkB,EAGlB,IADA,KAAK,cAAgB,GACdC,EAAc,aAAeD,GACpC,CACI,IAAME,EAAW,CAAC,EAElB,OADAA,EAAS,GAAKlB,GAA2BiB,CAAa,EAC9CC,EAAS,GACjB,CACI,KAAKvB,GAAY,cACjB,KAAKA,GAAY,WACb,MAAAwB,EAAoB,EACd,IAAI,MAAM,4BAA4BD,EAAS,EAAE,EAAE,EAE7D,QACI,MAAAC,EAAoB,EACd,IAAI,MAAM,wBAAwBD,EAAS,EAAE,EAAE,EAEzD,KAAKvB,GAAY,KACbuB,EAAS,WAAalB,GAA2BiB,CAAa,EAC9D,MAEJ,KAAKtB,GAAY,YACb,IAAIyB,EAAiBH,EAAcA,EAAc,cAAc,EAE3DG,IAAmB,IAEnBA,IAAmB,EACnBA,GAAkBH,EAAcA,EAAc,cAAc,EAC5DG,IAAmB,EACnBA,GAAkBH,EAAcA,EAAc,cAAc,GAEhE,IAAMI,EAAyBrB,GAA2BiB,CAAa,EACvEC,EAAS,eAAiBE,EAC1BF,EAAS,uBAAyBG,EAClC,KACR,CACAH,EAAS,YAAclB,GAA2BiB,CAAa,EAC/D,KAAK,cAAc,KAAKC,CAAQ,CACpC,CASJ,OAPApB,EAAW,aAAeC,EAAiBE,EAI3C,KAAK,gBAAkBD,GAA2BF,CAAU,EAC5D,KAAK,SAAWA,EAAW,MAAMA,EAAW,aAAcC,EAAiB,KAAK,MAAM,EACtFD,EAAW,aAAeC,EAAiB,KAAK,OACxC,KAAK,gBACb,CACI,KAAKP,GAAiB,eAClB,MAEJ,KAAKA,GAAiB,YACtB,KAAKA,GAAiB,WACtB,KAAKA,GAAiB,oBACtB,KAAKA,GAAiB,aACtB,KAAKA,GAAiB,eAClB,MAAA2B,EAAoB,EACd,IAAI,MAAM,+BAA+B,KAAK,eAAe,EAAE,EAEzE,QACI,MAAAA,EAAoB,EACd,IAAI,MAAM,2BAA2B,KAAK,eAAe,EAAE,CACzE,CAGA,GAAI,KAAK,OACT,CACI,GAAI,KAAK,cACT,CACI,IAAMG,EAAa,KAAK,SAAS,MAAM,EAAG,KAAK,SAAS,MAAM,EAC9DC,EACI,0DAA0D,KAAK,cAAc,CAAC,EAAE,WAAW,GAC3FC,EAAc,KACdA,EAAc,KAClB,EACA,GACA,CACI,KAAK,SAAW,IAAIC,EAAiBC,GAAYJ,CAAU,EAAE,MAAM,CACvE,OACOK,EACP,CACI,MAAAR,EAAoB,EACd,IAAI,MAAM,sCAAsCQ,EAAE,OAAO,GAAG,CACtE,CACJ,CAKA,IAAMC,EAAiB,KAAK,SAAS,eACrC,GAAIA,IAAmB,OAEnBpB,EAAgB,wCAAwC,MAG5D,CACyBoB,EAAe,CAAC,IAChBlC,GAAc,WAE/Bc,EAAgB,8BAA8BoB,CAAc,EAAE,EAC9D,KAAK,eAAiBA,EAAe,SAAS,GAElD,IAAMC,EAAmBD,EAAe,CAAC,EACrC,OAAO,OAAOnC,EAAiB,EAAE,QAAQoC,CAAgB,IAAM,GAE/DrB,EAAgB,iCAAiCqB,CAAgB,EAAE,EAInE,KAAK,eAAiB,OAAO,KAAKpC,EAAiB,EAC9C,KAAKgB,GAAKhB,GAAkBgB,CAAC,IAAMoB,CAAgB,CAEhE,CACJ,KAKI,KADA,KAAK,eAAiB,SACf,KAAK,SAAS,aAAe,KAAK,SAAS,QAClD,CACI,IAAM9B,EAAiB,KAAK,SAAS,aAC/B+B,EAAa9B,GAA2B,KAAK,QAAQ,EACrD+B,EAAW,KAAK,SAAS,MAAMhC,EAAgBA,EAAiB+B,CAAU,EAChF,KAAK,SAAS,aAAe/B,EAAiB+B,EAC9C,KAAK,WAAW,KAAK,IAAIjC,EAAQkC,CAAQ,CAAC,CAC9C,CAER,CAEA,IAAI,QACJ,CACI,OAAO,KAAK,YAAc,CAC9B,CACJ,EAOO,SAASC,GAAQC,EAAMnC,EAC9B,CACImC,EAAK,WAAa,EAGlB,IAAMC,EAAcvB,GAAkBb,EAAY,CAAC,EACnD,GAAIoC,IAAgB,OAEhB,MAAAf,EAAoB,EACd,IAAI,YAAY,6CAA6Ce,CAAW,GAAG,EAGrFC,GAAiB,wBAAyBX,EAAc,IAAI,EAC5D,IAAMY,EAAUzB,GAAkBb,EAAY,CAAC,EAO/C,GANAyB,EACI,oBAAoBa,CAAO,GAC3BZ,EAAc,KAAMA,EAAc,UACtC,EAGIY,IAAY,OAChB,CACI,IAAMC,EAAaC,GAAyBxC,EAAY,CAAC,EACnDyC,EAAqBD,GAAyBxC,EAAY,CAAC,EACjEyB,EACI,qBAAqBc,CAAU,gCAAgCE,CAAkB,GACjFf,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,UAClB,CACJ,CAGAxB,GAA2BF,CAAU,EAErC,IAAM0C,EAAsBxC,GAA2BF,CAAU,EAEjEA,EAAW,cAAgB0C,EAG3B1C,EAAW,aAAeE,GAA2BF,CAAU,EAC/D,IAAM2C,EAAW,IAAI7C,GAAQE,CAAU,EAInC4C,EAKEC,EAAaC,GACnB,CACI,IAAMC,EAAY,CAACC,EAAKC,IACxB,CACQH,EAAK,SAASE,CAAG,IAAM,QAAa,OAAOF,EAAK,SAASE,CAAG,GAAM,WAElEb,EAAK,SAASc,CAAI,EAAIH,EAAK,SAASE,CAAG,EAE/C,EAMA,GAJAD,EAAU,WAAYG,GAAe,IAAI,EACzCH,EAAU,QAASG,GAAe,IAAI,EACtCH,EAAU,kBAAmBG,GAAe,SAAS,EACrDH,EAAU,UAAWG,GAAe,OAAO,EACvCJ,EAAK,OAEL,OAAQA,EAAK,eACb,CACI,QACI,OACJ,IAAK,OACL,IAAK,OACL,IAAK,QACL,IAAK,YACDrB,EAAgB,wBAAyBC,EAAc,UAAU,EACjES,EAAK,kBAAoBW,EAAK,SAAS,OACvC,MAEJ,IAAK,mBACL,IAAK,wBACDrB,EAAgB,yBAA0BC,EAAc,UAAU,EAClEkB,EAAYE,EAAK,SACjB,KACR,KAIA,SAAWK,KAAKL,EAAK,WAEjBD,EAAWM,CAAC,CAGxB,EACA,OAAAN,EAAWF,CAAQ,EACnBtB,EAAoB,EACbuB,CACX,CC7aA,IAAMQ,GAAN,cAAmBC,EACnB,CAMI,YAAYC,EAAaC,EAAW,GACpC,CACI,MAAM,EACNC,GAA0B,yBAA0BC,EAAc,IAAI,EACtE,KAAK,SAAWF,EAChB,IAAMG,EAAa,IAAIC,EAAiBL,CAAW,EAC/CM,EAGEC,EAAgBC,GAAkBJ,EAAY,CAAC,EAErD,GADAA,EAAW,cAAgB,EACvBG,IAAkB,OACtB,CAGIH,EAAW,cAAgB,EAC3B,IAAMK,EAAOD,GAAkBJ,EAAY,EAAG,EAAK,EACnD,GAAIK,IAAS,OAET,MAAAC,EAAoB,EACd,IAAI,YAAY,+CAA+CD,CAAI,GAAG,EAEhF,IAAME,EAAOC,GAAcR,CAAU,EACrC,GAAIO,EAAK,SAAW,OAEhB,MAAAD,EAAoB,EACd,IAAI,YAAY,qDAAqDD,CAAI,GAAG,EAMtF,IAHAH,EAAgBK,EAAK,UAGdP,EAAW,cAAgBA,EAAW,QAC7C,CACI,IAAMS,EAAaT,EAAW,aACxBU,EAAeF,GAAcR,EAAY,EAAI,EACnD,GAAIU,EAAa,SAAW,OAC5B,CACI,IAAMC,EAAOP,GAAkBM,EAAa,UAAW,CAAC,EAAE,YAAY,EAClEC,IAAS,QAAUA,IAAS,QAAUA,IAAS,QAE/CC,EAAgB,8BAA+Bb,EAAc,UAAU,EACvE,KAAK,kBAAoBC,EAAW,MAAMS,EAAYA,EAAaC,EAAa,IAAI,EAAE,QAItFG,EAAgB,wBAAwBF,CAAI,GAAG,EAE/CA,IAAS,SAGT,KAAK,WAAa,GAE1B,SACSD,EAAa,SAAW,QAEhBN,GAAkBM,EAAa,UAAW,CAAC,IAC3C,OACb,CAGI,IAFAE,EAAgB,4BAA6Bb,EAAc,UAAU,EACrE,KAAK,SAAW,CAAC,EACVW,EAAa,UAAU,cAAgBA,EAAa,MAC3D,CACI,IAAMI,EAAYN,GAAcE,EAAa,UAAW,EAAI,EAC5D,KAAK,SAASI,EAAU,MAAM,EAAIA,EAAU,SAChD,CACI,KAAK,SAAS,OAGd,KAAK,UAAYV,GACb,KAAK,SAAS,KACd,KAAK,SAAS,KAAQ,OACtB,EACJ,EAAE,WAAW;AAAA,EAAM,GAAG,GAEtB,KAAK,SAAS,OAEd,KAAK,YAAc,KAAK,SAASW,GAAe,IAAI,EACpD,KAAK,SAAWX,GACkB,KAAK,YACnC,KAAK,YAAY,OACjB,EACJ,EAAE,WAAW;AAAA,EAAM,GAAG,GAGtB,KAAK,SAAS,MAAW,CAAC,KAAK,SAAS,OAExC,KAAK,SAAS,KAAU,KAAK,SAAS,MAEtC,KAAK,SAAS,MAAW,CAAC,KAAK,SAAS,OAExC,KAAK,SAAS,KAAU,KAAK,SAAS,MAE1C,KAAK,WAAa,EACd,KAAK,SAASW,GAAe,UAAU,IAEvC,KAAK,WAAaC,EAAiB,KAAK,SAASD,GAAe,UAAU,EAAG,CAAC,EAEtF,CAER,CAEI,KAAK,aAGL,KAAK,WAAa,GAIlB,KAAK,oBAAsB,SAE3B,KAAK,WAAa,EAE1B,MACSZ,IAAkB,OAGvBD,EAAgBe,GAAQ,KAAMjB,CAAU,EAIxCE,EAAgBF,EAEpB,IAAMkB,EAAc,KAAK,eAAehB,CAAa,EACrD,GAAIgB,EAAY,OAAS,OAErB,MAAAZ,EAAoB,EACd,IAAI,YAAY,8CAA8CY,EAAY,IAAI,GAAG,EAG3F,GAAIA,EAAY,OAAS,EAErB,MAAAZ,EAAoB,EACd,IAAI,WAAW,mDAAmDY,EAAY,IAAI,EAAE,EAI9F,KAAK,OAASC,GAAyBD,EAAY,KAAM,CAAC,EAE1D,KAAK,aAAeC,GAAyBD,EAAY,KAAM,CAAC,EAEhE,KAAK,aAAeC,GAAyBD,EAAY,KAAM,CAAC,EAEhE,QAASE,EAAI,EAAGA,EAAI,KAAK,aAAcA,IACvC,CAII,IAAMC,EAAQ,CAAC,EACTC,EAAa,KAAK,eAAepB,CAAa,EAEpD,GAAIoB,EAAW,OAAS,OAEpB,MAAAhB,EAAoB,EACd,IAAI,YAAY,8CAA8CgB,EAAW,IAAI,GAAG,EAQ1F,IAAIC,EAEAC,EAAa,EAOjB,IALI,KAAK,SAAW,GAAKJ,EAAI,IAEzBI,GAAc,KAAK,OAAOJ,EAAI,CAAC,EAAE,KAAK,OAAOA,EAAI,CAAC,EAAE,OAAS,CAAC,EAAE,OAG7DE,EAAW,KAAK,aAAeA,EAAW,MACjD,CACIE,GAAcC,GAA2BH,EAAW,IAAI,EAGxD,IAAMI,EAAkBJ,EAAW,KAAKA,EAAW,KAAK,YAAY,EAEhEK,EAEJ,GAAIJ,IAAgB,QAAaG,EAAkB,IAE/CC,EAAaJ,MAGjB,CACI,GAAIA,IAAgB,QAAaG,EAAkB,IAG/C,MAAApB,EAAoB,EACd,IAAI,YAAY,0CAA0CoB,CAAe,GAAG,EAKlFC,EAAaL,EAAW,KAAKA,EAAW,KAAK,cAAc,CAEnE,CACA,IAAMM,EAAoBC,GAAWF,CAAU,EAE3CG,EAGJ,OAAQF,EACR,CACI,IAAK,GAEDE,EAAkB,EAClB,MAEJ,IAAK,GAEDH,EAAaL,EAAW,KAAKA,EAAW,KAAK,cAAc,EAC3DQ,EAAkBL,GAA2BH,EAAW,IAAI,EAC5D,MAEJ,IAAK,GAEDQ,EAAkBL,GAA2BH,EAAW,IAAI,EAC5D,MAEJ,QAGIQ,EAAkBC,GAAgBJ,GAAc,CAAC,EAEjDJ,EAAcI,EACd,KACR,CAGA,IAAMK,EAAY,IAAI/B,EAAiB6B,CAAe,EACtDE,EAAU,IAAIV,EAAW,KAAK,MAC1BA,EAAW,KAAK,aAChBA,EAAW,KAAK,aAAeQ,CACnC,EAAG,CAAC,EACJ,IAAMG,EAAQ,IAAIC,GAAYV,EAAYG,EAAYK,CAAS,EAC/DX,EAAM,KAAKY,CAAK,EAEhBX,EAAW,KAAK,cAAgBQ,CACpC,CACA,KAAK,OAAO,KAAKT,CAAK,EAEtBT,EACI,cAAc,KAAK,OAAO,MAAM,UAAU,KAAK,YAAY,GAC3Db,EAAc,KACdA,EAAc,MACdA,EAAc,KACdA,EAAc,KAClB,CACJ,CAEAa,EACI,iCACAb,EAAc,UAClB,EAEA,KAAK,eAAe,EACpBO,EAAoB,EACpBM,EACI,0CAA0C,KAAK,kBAAkB,6BAA6B,KAAK,QAAQ,GAC3Gb,EAAc,KACdA,EAAc,WACdA,EAAc,KACdA,EAAc,UAClB,CACJ,CAOA,eAAeG,EACf,CACI,IAAMiC,EAAQ,CAAC,EAEfA,EAAM,KAAO/B,GAAkBF,EAAe,CAAC,EAE/CiC,EAAM,KAAOhB,GAAyBjB,EAAe,CAAC,EAEtDiC,EAAM,KAAO,IAAIlC,EAAiBkC,EAAM,IAAI,EAC5C,IAAMC,EAAYlC,EAAc,MAAMA,EAAc,aAAcA,EAAc,aAAeiC,EAAM,IAAI,EACzG,OAAAA,EAAM,KAAK,IAAIC,EAAW,CAAC,EAC3BlC,EAAc,cAAgBiC,EAAM,KAC7BA,CACX,CACJ,EClQA,IAAME,GAAuB,CACzB,cAAAC,EACA,gBAAAC,EACA,gBAAAC,EACA,0BAAAC,GACA,oBAAAC,EACA,yBAAAC,GACA,iBAAAC,EACA,kBAAAC,GACA,2BAAAC,GACA,YAAAC,EACJ,ECrCO,IAAMC,GAAoB,CAC7B,YAAa,EACb,WAAY,EACZ,iBAAkB,EAClB,YAAa,EACb,gBAAiB,EACjB,WAAY,EACZ,UAAW,EACX,QAAS,EACT,kBAAmB,EACnB,iBAAkB,EAClB,QAAS,GACT,UAAW,GACX,YAAa,GACb,cAAe,GACf,eAAgB,GAChB,aAAc,GACd,mBAAoB,GACpB,SAAU,GACV,UAAW,GACX,oBAAqB,GACrB,eAAgB,GAChB,kBAAmB,GACnB,2BAA4B,GAC5B,YAAa,GACb,mBAAoB,GACpB,eAAgB,EACpB,EAyDaC,GAAoB,CAC7B,sBAAuB,EACvB,UAAW,EACX,sBAAuB,EACvB,kBAAmB,EACnB,oBAAqB,EACrB,mBAAoB,EACpB,eAAgB,EAChB,kBAAmB,EACnB,aAAc,CAClB,EAGaC,GAAiB,CAC1B,UAAW,EACX,SAAU,EACV,UAAW,EACX,WAAY,EACZ,MAAO,CACX,EAiBaC,GAAiB,CAC1B,gBAAiB,EACjB,MAAO,EACP,KAAM,EACN,KAAM,EACN,QAAS,EACT,yBAA0B,EAC1B,gBAAiB,EACjB,QAAS,EACT,WAAY,EACZ,QAAS,EACT,mBAAoB,GACpB,yBAA0B,EAC9B,EAMaC,GAAwC,CACjD,UAAW,EACX,WAAY,EACZ,WAAY,EACZ,MAAO,EACP,QAAS,EACT,UAAW,EACX,UAAW,EACX,gBAAiB,EACjB,eAAgB,CACpB,EAKaC,GAAoC,CAC7C,gBAAiB,EACjB,gBAAiB,EACjB,gBAAiB,EACjB,oBAAqB,CACzB,EAMaC,GAA+B,CACxC,WAAY,EACZ,cAAe,EACf,cAAe,CACnB,ECzMO,IAAMC,GAAN,cAAuBC,EAC9B,CAOI,WAAa,GAMb,YAAYC,EACZ,CAKI,GAJA,MAAM,EACN,KAAK,kBAAkBA,CAAI,EAGvBA,EAAK,WAEL,YAAK,WAAaA,EAAK,WAChB,KAIX,KAAK,WAAaA,EAAK,oBAAsB,MACjD,CACJ,EC/BO,IAAMC,GAAgB,yBCG7B,IAAMC,GAA6B,GAC7BC,GAAa,IAanB,eAAsBC,GAClBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,CACI,IAAMC,EAAc,KAAK,YACnBC,EAAY,KAAK,UACjBC,EAAY,KAAK,UACjBC,EAAU,CAAC,KAAK,UAAU,OAChC,KAAK,cAAc,EAEnB,IAAMC,EAAYH,EAAU,SACtBI,EAAeJ,EAAU,cAEzBK,EAAoBF,EAAU,mBAAmBA,EAAU,KAAK,KAAK,EAAIC,EAE3EE,EADoBH,EAAU,mBAAmBA,EAAU,KAAK,GAAG,EAAIC,EACtCC,EAC/BE,EAAWJ,EAAU,SAAWC,EAAeP,EAAiBS,EAAeV,EACjFY,EAAiBd,EAAaa,EAE5BE,EAAQ,IAAIC,GAAqBhB,EAAY,CAC/C,kBAAmB,EACvB,CAAC,EAGDe,EAAM,iBAAiB,cAAcR,CAAS,EAC1CT,IAEAiB,EAAM,iBAAiB,gBAAgBjB,EAAWmB,GAAelB,CAAe,EAChFgB,EAAM,iBAAiB,oBAAoB,CAACE,GAAe,MAAM,CAAC,GAGtE,IAAMC,EAAWC,GAAoB,0BAA0Bd,CAAW,EAC1Ec,GAAoB,cAAcJ,EAAOG,CAAQ,EAEjD,IAAME,EAAM,IAAIC,GAAqBN,CAAK,EAC1CK,EAAI,UAAYlB,EAChBkB,EAAI,aAAeV,EACdR,IAEDkB,EAAI,KAAO,IAEfA,EAAI,gBAAgB,CAACX,CAAS,CAAC,EAE/B,IAAMa,EAAS,CAAC,IAAI,aAAaR,CAAc,EAAG,IAAI,aAAaA,CAAc,CAAC,EAC5ES,EAAS,CAAC,IAAI,aAAaT,CAAc,EAAG,IAAI,aAAaA,CAAc,CAAC,EAC5EU,EAAM,CAACF,EAAQC,CAAM,EACrBE,EAA8BX,EAAiBlB,GACrD,GAAIK,EACJ,CAII,IAAMyB,EAAM,CAAC,EACb,QAASC,GAAI,EAAGA,GAAI,GAAIA,KACxB,CACI,IAAMC,GAAI,CAAC,IAAI,aAAad,CAAc,EAAG,IAAI,aAAaA,CAAc,CAAC,EAC7EY,EAAI,KAAKE,EAAC,EACVJ,EAAI,KAAKI,EAAC,CACd,CACA,IAAIC,EAAQ,EACZ,OACA,CACI,QAASF,GAAI,EAAGA,GAAIhC,GAA4BgC,KAChD,CACI,GAAIE,GAASJ,EAET,OAAAL,EAAI,YAAY,EAChBL,EAAM,iBAAiBO,EAAQC,EAAQG,EAAKG,EAAOf,EAAiBe,CAAK,EACzE,KAAK,eAAe,EACbL,EAEXJ,EAAI,YAAY,EAChBL,EAAM,iBAAiBO,EAAQC,EAAQG,EAAKG,EAAOjC,EAAU,EAC7DiC,GAASjC,EACb,CACAQ,EAAiByB,EAAQf,CAAc,CAC3C,CACJ,KAEA,CACI,IAAMY,EAAM,CAAC,IAAI,aAAaZ,CAAc,EAAG,IAAI,aAAaA,CAAc,CAAC,EAC/EU,EAAI,KAAKE,CAAG,EACZ,IAAIG,EAAQ,EACZ,OACA,CACI,QAASF,GAAI,EAAGA,GAAIhC,GAA4BgC,KAChD,CACI,GAAIE,GAASJ,EAET,OAAAL,EAAI,YAAY,EAChBL,EAAM,YAAYW,EAAKJ,EAAQC,EAAQM,EAAOf,EAAiBe,CAAK,EACpE,KAAK,eAAe,EAChBrB,GAEA,KAAK,UAAU,EAEZgB,EAEXJ,EAAI,YAAY,EAChBL,EAAM,YAAYW,EAAKJ,EAAQC,EAAQM,EAAOjC,EAAU,EACxDiC,GAASjC,EACb,CACAQ,EAAiByB,EAAQf,CAAc,CAC3C,CACJ,CACJ,CCrHA,eAAsBgB,GAAgBC,EAAOC,EAAMC,EAAUC,EAC7D,CACI,IAAMC,EAAU,CAAC,KAAK,UAAU,OAChC,KAAK,cAAc,EACnB,IAAMC,EAAK,IAAIC,GAAe,CAC1B,QAAS,KAAK,UAAU,QACxB,KAAM,KAAK,UAAU,aACzB,CAAC,EACD,GAAIL,EACJ,CACI,IAAMM,EAAWC,GAAoB,0BAA0B,KAAK,WAAW,EACzEC,EAAMC,GAAU,aAAa,KAAK,UAAU,QAAQ,EAC1DD,EAAI,oBAAoBF,CAAQ,EAChCF,EAAG,cAAcI,CAAG,CACxB,CACA,IAAIE,EAAKC,EACT,GAAIZ,EACJ,CACI,IAAMa,GAAuB,KAAM,QAAO,6BAA2C,GAAG,aAMlFC,EAAe,MAAOC,EAAMC,IAASH,EAAoB,CAACE,CAAI,EAAGC,EAAMb,CAAO,EAC9Ec,EAAM,MAAMZ,EAAG,MAAM,CACvB,SAAUH,EACV,oBAAqBY,EACrB,iBAAkB,CAACI,EAAGC,EAAGC,IAAU,KAAK,QAAQC,GAAkB,kBAAmBF,EAAIC,CAAK,CAClG,CAAC,EACGE,EAAYjB,EAAG,cAAc,KAAQ,MAAM,GAAG,EAAE,CAAC,IAAM,IAAM,MAAQ,MACzEO,EAAW,GAAGP,EAAG,cAAc,MAAW,SAAS,IAAIiB,CAAS,GAEhE,IAAMC,EAAO,IAAI,KAAK,CAACN,EAAI,MAAM,EAAG,CAAE,KAAM,iBAAkB,CAAC,EAC/DN,EAAM,IAAI,gBAAgBY,CAAI,CAClC,KAEA,CACI,IAAMN,EAAM,MAAMZ,EAAG,SAAS,CAC1B,iBAAkB,CAACa,EAAGC,EAAGC,IAAU,KAAK,QAAQC,GAAkB,kBAAmBF,EAAIC,CAAK,CAClG,CAAC,EACDR,EAAW,GAAGP,EAAG,cAAc,MAAW,SAAS,OACnD,IAAMkB,EAAO,IAAI,KAAK,CAACN,EAAI,MAAM,EAAG,CAAE,KAAM,WAAY,CAAC,EACzDN,EAAM,IAAI,gBAAgBY,CAAI,CAElC,CAEA,OAAInB,GAEA,KAAK,UAAU,EAEnB,KAAK,eAAe,EAEb,CACH,SAAAQ,EACA,IAAAD,CACJ,CACJ,CC9DO,SAASa,IAChB,CACI,IAAMC,EAAMC,GAAU,aAAa,KAAK,UAAU,QAAQ,EAC1D,GACA,CACID,EAAI,oBAAoBE,GAAoB,0BAA0B,KAAK,WAAW,CAAC,CAC3F,OACOC,EACP,CACI,QAAQ,KAAK,yBAA0BA,CAAC,CAC5C,CAEA,IAAMC,EAAOJ,EAAI,UAAU,EACrBK,EAAO,IAAI,KAAK,CAACD,CAAI,EAAG,CAAE,KAAM,WAAY,CAAC,EAEnD,MAAO,CACH,IAFQ,IAAI,gBAAgBC,CAAI,EAIhC,SAAU,aACd,CACJ,CCHA,eAAsBC,GAAYC,EAAUC,EAASC,EAAUC,EAC/D,CACI,IAAMC,EAAU,CAAC,KAAK,UAAU,OAChC,KAAK,cAAc,EACnB,IAAMC,EAAMC,GAAU,aAAa,KAAK,UAAU,QAAQ,EAKpDC,EAAaF,EAAI,mBAAqB,KAAK,gBAAkB,KAAK,UACxE,GACA,CACIA,EAAI,oBAAoBG,GAAoB,0BAA0B,KAAK,WAAW,CAAC,CAC3F,OACOC,EACP,CACI,QAAQ,KAAK,yBAA0BA,CAAC,CAC5C,CAKA,IAAMC,EAAOH,aAAsB,YAAcI,GAAcJ,CAAU,EAAIA,EAEzEJ,GAEAO,EAAK,cAAcL,CAAG,EAI1B,IAAMO,GAAuB,KAAM,QAAO,6BAA2C,GAAG,aAMlFC,EAAe,MAAOC,EAAMC,IAASH,EAAoB,CAACE,CAAI,EAAGC,EAAMd,CAAO,EAC9Ee,EAAkB,MAAMN,EAAK,MAAM,CACrC,SAAUV,EACV,oBAAqBa,EACrB,iBAAkB,CAACI,EAAGC,EAAGC,IAAU,KAAK,QAAQC,GAAkB,kBAAmBF,EAAIC,CAAK,CAClG,CAAC,EAEGE,EAAgBnB,GAAU,QAC1B,CAACmB,GAAiBhB,EAAI,UAAW,OAAY,SAE7CgB,EAAgBhB,EAAI,UAAW,KAAQ,QAG3C,IAAMiB,EAAgB,IAAI,KAAK,EAAG,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,EAGtDC,EAAOlB,EAAI,WACbW,EACAN,EACAR,GAAU,YAAc,EACxBA,GAAU,UAAY,QACtB,CACI,KAAMA,GAAU,UAChB,QAASA,GAAU,QACnB,SAAUQ,GAAM,cAAc,KAC9B,QAASW,EACT,MAAOnB,GAAU,MACjB,OAAQA,GAAU,OAClB,MAAOA,GAAU,MACjB,aAAcA,GAAU,SACxB,aAAcoB,CAClB,EACAnB,CACJ,EACMqB,EAAO,IAAI,KAAK,CAACD,CAAI,EAAG,CAAE,KAAM,WAAY,CAAC,EAC7CE,EAAM,IAAI,gBAAgBD,CAAI,EACpC,OAAIpB,GAEA,KAAK,UAAU,EAEnB,KAAK,eAAe,EACb,CACH,IAAAqB,EACA,SAAU,GAAGvB,GAAU,WAAa,cAAc,MACtD,CACJ,CC1EA,IAAMwB,GAAa,IACbC,GAAoB,GAOpBC,GAAN,KACA,CAII,YAAc,OAKd,UAAY,OAKZ,UAAY,OAMZ,YAAc,OAGd,SAAW,EAEX,OAAS,GAKT,eAAiB,KAIjB,qBAAuB,EAEvB,qBACA,CACI,KAAK,eAAiB,KACtB,KAAK,qBAAuB,EAC5B,KAAK,YAAY,iBAAiB,cAAc,QAAQC,GACxD,CACQA,EAAE,KAAOC,KAET,KAAK,eAAiBD,EAAE,UACxB,KAAK,qBAAuBA,EAAE,WAEtC,CAAC,CACL,CAOA,QAAQE,EAAGC,EAAGC,EAAe,CAAC,EAC9B,CAEI,YAAY,CACR,YAAaF,EACb,YAAaC,CACjB,EAAGC,CAAY,CACnB,CAEA,qBAAqBC,EACrB,CACI,KAAK,SAAW,KAAK,IAAI,EAAGP,GAAoBO,EAAE,IAAI,CAG1D,CAGA,YACA,CACI,GAAI,KAAK,SAAW,EACpB,CAEI,KAAK,YAAY,YAAY,MAAS,EACtC,WAAW,KAAK,WAAW,KAAK,IAAI,CAAC,EACrC,MACJ,CACA,KAAO,KAAK,SAAW,EAAG,KAAK,WAC/B,CASI,IAAMC,EAAWT,GAAa,aAAa,kBACrCU,EAAO,IAAI,aAAaV,GAAa,EAAE,EACzCW,EAAa,EACXC,EAAO,IAAI,aAAaF,EAAK,OAAQC,EAAYX,EAAU,EACjEW,GAAcF,EAEd,IAAMI,EAAM,CADC,IAAI,aAAaH,EAAK,OAAQC,EAAYX,EAAU,EAC9CY,CAAI,EACvBD,GAAcF,EACd,IAAMK,EAAO,IAAI,aAAaJ,EAAK,OAAQC,EAAYX,EAAU,EACjEW,GAAcF,EACd,IAAMM,EAAO,IAAI,aAAaL,EAAK,OAAQC,EAAYX,EAAU,EAC3DgB,EAAM,CAACF,EAAMC,CAAI,EAIjBE,EAAM,CAAC,EACb,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACxB,CACIP,GAAcF,EACd,IAAMU,EAAO,IAAI,aAAaT,EAAK,OAAQC,EAAYX,EAAU,EACjEW,GAAcF,EACd,IAAMW,EAAO,IAAI,aAAaV,EAAK,OAAQC,EAAYX,EAAU,EACjEiB,EAAI,KAAK,CAACE,EAAMC,CAAI,CAAC,CACzB,CAEA,KAAK,UAAU,YAAY,EAC3B,KAAK,YAAY,iBAAiBP,EAAKG,EAAKC,CAAG,EAC/C,KAAK,YAAY,YAAYP,EAAM,CAACA,EAAK,MAAM,CAAC,CACpD,CACA,KAAK,SAAW,EACZ,KAAK,QAEL,WAAW,KAAK,WAAW,KAAK,IAAI,CAAC,CAE7C,CAEA,gBACA,CACI,KAAK,OAAS,GACd,KAAK,WAAW,CACpB,CAEA,eACA,CACI,KAAK,YAAY,gBAAgB,EAAI,EACrC,KAAK,UAAU,MAAM,EACrB,KAAK,OAAS,EAClB,CAEA,UACA,CACI,KAAK,YAAY,kBAAkB,CAAC,EAAE,oBAAoB,CAC9D,CAEA,WACA,CACI,KAAK,SAAS,EACd,KAAK,UAAU,aAAe,IAClC,CAEA,MAAM,gBAAgBW,EAAYC,EAClC,CACI,KAAK,YAAc,IAAIC,GAAqBF,EAAY,CACpD,YAAAC,CACJ,CAAC,EACD,KAAK,UAAY,IAAIE,GAAqB,KAAK,WAAW,EAC1D,KAAK,YAAY,YAAc,CAACnB,EAAGC,IACnC,CACI,KAAK,QAAQmB,GAAkB,UAAW,CACtC,UAAWpB,EACX,UAAWC,CACf,CAAC,CACL,EACA,KAAK,YAAY,wBAA0B,CAACoB,EAAGC,IAAM,KAAK,QACtDF,GAAkB,sBAClB,CAACE,EAAGD,EAAG,KAAK,YAAY,gBAAgB,CAC5C,EACA,KAAK,YAAY,wBAA0B,CAACrB,EAAGuB,IAAM,KAAK,QACtDH,GAAkB,sBAClB,CAACpB,EAAGuB,CAAC,CACT,EACA,MAAM,KAAK,YAAY,qBAGvB,IAAMC,EAAU,CAACC,EAAMpB,IACvB,CACI,YAAY,CACR,YAAae,GAAkB,kBAC/B,YAAa,CACT,YAAaK,EACb,YAAapB,CACjB,CACJ,CAAC,CACL,EAEA,KAAK,UAAU,cAAgBqB,GAC/B,CACIF,EAAQG,GAAsC,UAAWD,CAAC,CAC9D,EACA,KAAK,UAAU,aAAe1B,GAC9B,CACIwB,EAAQG,GAAsC,WAAY3B,CAAC,CAC/D,EACA,KAAK,UAAU,eAAiBqB,GAChC,CACIG,EAAQG,GAAsC,MAAON,CAAC,CAC1D,EACA,KAAK,UAAU,aAAe,CAACR,EAAGe,IAClC,CACIJ,EAAQG,GAAsC,WAAY,CAACd,EAAGe,EAAG,KAAK,UAAU,WAAW,CAAC,CAChG,EACA,KAAK,UAAU,YAAc,CAACzB,EAAGU,IACjC,CACIW,EAAQG,GAAsC,UAAW,CAACxB,EAAGU,CAAC,CAAC,CACnE,EACA,KAAK,UAAU,kBAAoBgB,GACnC,CACIL,EAAQG,GAAsC,gBAAiBE,CAAC,CACpE,EACA,KAAK,UAAU,iBAAmB/B,GAClC,CACI,IAAMgC,EAAehC,EAAE,IAAIiC,GAAK,IAAIC,GAASD,CAAC,CAAC,EAC/C,YAAY,CACR,YAAaX,GAAkB,kBAC/B,YAAa,CACT,YAAaO,GAAsC,eACnD,YAAaG,CACjB,CACJ,CAAC,CACL,EAGA,KAAK,eAAe,CACxB,CAMA,MAAM,wBAAwB3B,EAC9B,CACI,GAAIA,EAAE,MAAM,CAAC,EACb,CACI,IAAM8B,EAAO9B,EAAE,MAAM,CAAC,EACtB,KAAK,YAAc8B,EACnBA,EAAK,UAAY,KAAK,qBAAqB,KAAK,IAAI,CACxD,CAIA,IAAMC,EAAM/B,EAAE,KACRE,EAAO6B,EAAI,YACXC,EAAUD,EAAI,cAEhBE,EACJ,GAAID,GAAW,IAEXC,EAAgB,KAAK,YAAY,kBAAkBD,CAAO,EACtDC,IAAkB,QACtB,CACIC,GAAK,gBAAgB,4BAA4BF,CAAO,oCAAoC,EAC5F,MACJ,CAGJ,IAAMG,EAAM,KAAK,UACjB,OAAQJ,EAAI,YACZ,CACI,KAAKK,GAAkB,WACnB,MAAM,KAAK,gBAAgB,GAAGlC,CAAI,EAClC,MAEJ,KAAKkC,GAAkB,iBACnB,KAAK,UAAYC,GAAcnC,CAAI,EACnC,KAAK,YAAY,iBAAiB,gBAAgB,KAAK,UAAW,OAAQ,CAAC,EAC3E,MAEJ,KAAKkC,GAAkB,YACnB,KAAK,YAAY,eAAe,GAAGlC,CAAI,EACvC,MAEJ,KAAKkC,GAAkB,eAEnBH,EAAc,oBAAoB/B,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EAClD,MAEJ,KAAKkC,GAAkB,QACfJ,IAAY,GAEZ,KAAK,YAAY,oBAAoB,EAIrCC,EAAc,iBAAiB,EAEnC,MAEJ,KAAKG,GAAkB,kBACnB,GAAIJ,IAAY,GAEZ,QAAStB,EAAI,EAAGA,EAAI,KAAK,YAAY,kBAAkB,OAAQA,IAC/D,CACI,IAAM4B,EAAO,KAAK,YAAY,kBAAkB5B,CAAC,EAC7CR,EAAK,OAAS,GAEdoC,EAAK,qBAAqB,EAI1BA,EAAK,WAAWpC,EAAK,MAAOA,EAAK,KAAMA,EAAK,KAAK,CAEzD,MAEKA,EAAK,OAAS,GAEnB+B,EAAc,qBAAqB,EAInCA,EAAc,WAAW/B,EAAK,MAAOA,EAAK,KAAMA,EAAK,KAAK,EAE9D,MAEJ,KAAKkC,GAAkB,QACfJ,IAAY,GAEZ,KAAK,YAAY,gBAAgB9B,IAAS,CAAC,EAI3C+B,EAAc,aAAa/B,IAAS,CAAC,EAEzC,MAEJ,KAAKkC,GAAkB,UACnB,KAAK,YAAY,aAAalC,CAAI,EAClC,MAEJ,KAAKkC,GAAkB,YACnBH,EAAc,YAAY/B,CAAI,EAC9B,MAEJ,KAAKkC,GAAkB,cACnB,KAAK,YAAY,kBAAkB,EAAI,EACvC,MAEJ,KAAKA,GAAkB,aACnB,QAAQ,MAAM,KAAK,WAAW,EAC9B,MAEJ,KAAKA,GAAkB,mBAInB,IAAMd,EAAOpB,EAAK,CAAC,EACbqC,EAAQrC,EAAK,CAAC,EACpB,KAAK,YAAY,mBAAmBoB,EAAMiB,CAAK,EAC/C,MAEJ,KAAKH,GAAkB,SACnBH,EAAc,SAAS/B,CAAI,EAC3B,MAEJ,KAAKkC,GAAkB,UACfJ,IAAY,GAEZ,KAAK,YAAY,qBAAqB9B,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EAItD+B,EAAc,iBAAiB/B,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EAEnD,MAEJ,KAAKkC,GAAkB,oBACnB,KAAK,YAAY,oBAAsBlC,EACvC,MAEJ,KAAKkC,GAAkB,eACflC,EAAK,CAAC,IAAM,GAEZ+B,EAAc,cAAc/B,EAAK,CAAC,CAAC,EAInC+B,EAAc,kBAAkB/B,EAAK,CAAC,CAAC,EAAIA,EAAK,CAAC,EAErD,MAEJ,KAAKkC,GAAkB,kBACnB,IAAMI,EAActC,EAAK,YAEzB,OADoBA,EAAK,YAEzB,CACI,QACI,MAEJ,KAAKuC,GAAe,gBAChB,GACA,CAKI,IAAMC,EADQF,EAAY,CAAC,EACL,IAAIZ,GAElBA,EAAE,SAEKA,EAEJ,IAAIe,GAAKf,EAAE,OAAQA,EAAE,OAAO,CACtC,EACDO,EAAI,gBAAgBO,EAASF,EAAY,CAAC,CAAC,CAC/C,OACOxC,EACP,CACI,QAAQ,MAAMA,CAAC,EACf,YAAY,CACR,YAAaiB,GAAkB,kBAC/B,YAAa,CACT,YAAaO,GAAsC,UACnD,YAAaxB,CACjB,CACJ,CAAC,CACL,CACA,MAEJ,KAAKyC,GAAe,MAChBN,EAAI,MAAM,EACV,MAEJ,KAAKM,GAAe,KAChBN,EAAI,KAAKK,CAAW,EACpB,KAAK,SAAS,EACd,MAEJ,KAAKC,GAAe,KAChBN,EAAI,KAAK,EACT,MAEJ,KAAKM,GAAe,QAChBN,EAAI,YAAcK,EAClB,MAEJ,KAAKC,GAAe,yBAChBN,EAAI,iBAAmBK,EACvB,MAEJ,KAAKC,GAAe,gBAChBN,EAAI,aAAeK,EACnB,MAEJ,KAAKC,GAAe,QAChB,GAAM,CAACG,EAAMC,CAAK,EAAIL,EACtBL,EAAI,KAAOS,EACPC,IAAU,GAEVV,EAAI,UAAY,IAIhBA,EAAI,UAAYU,EAEpB,MAEJ,KAAKJ,GAAe,WAChB,OAAQD,EAAY,CAAC,EACrB,CACI,KAAKM,GAAe,SAChBX,EAAI,SAAS,EACb,MAEJ,KAAKW,GAAe,UAChBX,EAAI,aAAa,EACjB,MAEJ,KAAKW,GAAe,WAChBX,EAAI,YAAc,GAClBA,EAAI,UAAYA,EAAI,oBAAoBA,EAAI,SAAS,EACrD,MAEJ,KAAKW,GAAe,UAChBX,EAAI,YAAc,GAClBA,EAAI,mBAAmB,EACvBA,EAAI,UAAY,EAChBA,EAAI,gBAAgB,EACpB,MAEJ,KAAKW,GAAe,MAChBX,EAAI,UAAYK,EAAY,CAAC,EAC7BL,EAAI,gBAAgB,EACpB,KACR,CACA,MAEJ,KAAKM,GAAe,QAChB,YAAY,CACR,YAAaxB,GAAkB,kBAC/B,YAAa,CACT,YAAaO,GAAsC,QACnD,YAAaW,EAAI,QACrB,CACJ,CAAC,EACD,MAEJ,KAAKM,GAAe,mBAChBN,EAAI,kBAAoBK,EACxB,MAEJ,KAAKC,GAAe,yBAChBN,EAAI,sBAAwBK,CACpC,CACA,KAAK,SAAS,EACd,MAEJ,KAAKJ,GAAkB,iBACnB,GACA,CACI,IAAMW,EAAY,KAAK,YAAY,iBAC7BzB,EAAOpB,EAAK,CAAC,EACbsC,EAActC,EAAK,CAAC,EAC1B,OAAQoB,EACR,CACI,KAAK0B,GAAkC,gBACnC,KAAK,UAAYX,GAAcG,EAAY,CAAC,CAAC,EAC7CO,EAAU,gBAAgB,KAAK,UAAWP,EAAY,CAAC,EAAGA,EAAY,CAAC,CAAC,EACxE,YAAY,CACR,YAAavB,GAAkB,mBAC/B,YAAa,MACjB,CAAC,EACD,MAEJ,KAAK+B,GAAkC,gBACnCD,EAAU,gBAAgBP,CAAW,EACrC,MAEJ,KAAKQ,GAAkC,oBACnCD,EAAU,oBAAoBP,CAAW,CAEjD,CACA,KAAK,oBAAoB,CAC7B,OACOxC,EACP,CACI,YAAY,CACR,YAAaiB,GAAkB,eAC/B,YAAajB,CACjB,CAAC,CACL,CACA,KAAK,SAAS,EACd,MAEJ,KAAKoC,GAAkB,mBAInB,IAAMa,EAAiB/C,EAAK,CAAC,EACvBgD,EAAM,KAAK,YAAY,mBACvBC,EAAiBjD,EAAK,CAAC,EAC7B,OAAQ+C,EACR,CACI,QACI,OAEJ,KAAKG,GAA6B,WAC9BF,EAAI,WAAW,GAAGC,CAAc,EAChC,MAEJ,KAAKC,GAA6B,cAC9BF,EAAI,cAAc,EAClB,MAEJ,KAAKE,GAA6B,cAC9BF,EAAI,cAAc,GAAGC,CAAc,CAC3C,CACA,MAEJ,KAAKf,GAAkB,2BACnB,IAAMiB,EAAWC,GAAoB,0BAA0B,KAAK,WAAW,EAC/E,YAAY,CACR,YAAarC,GAAkB,oBAC/B,YAAaoC,CACjB,CAAC,EACD,MAEJ,KAAKjB,GAAkB,YACnBmB,GAAmBrD,EAAK,CAAC,EAAGA,EAAK,CAAC,EAAGA,EAAK,CAAC,EAAGA,EAAK,CAAC,CAAC,EACrD,MAEJ,KAAKkC,GAAkB,eACnB,KAAK,YAAY,WAAalC,EAAK,CAAC,EACpC,KAAK,YAAY,WAAaA,EAAK,CAAC,EACpC,MAEJ,KAAKkC,GAAkB,YACnB,IAAMoB,EAAW,MAAM,KAAK,YACxB,KAAK,eACL,KAAK,qBACLtD,EAAK,WACLA,EAAK,iBACLA,EAAK,UACLA,EAAK,eACJgB,GAAM,KAAK,QAAQD,GAAkB,kBAAmBC,CAAC,CAC9D,EACMuC,EAAW,CAAC,EAClBD,EAAS,QAAQE,GAAKA,EAAE,QAAQC,GAAOF,EAAS,KAAKE,EAAI,MAAM,CAAC,CAAC,EACjE,YAAY,CACR,YAAa1C,GAAkB,aAC/B,YAAauC,CACjB,EAAGC,CAAQ,EACX,MAEJ,KAAKrB,GAAkB,gBACvB,CACI,IAAMwB,EAAW,MAAM,KAAK,gBACxB1D,EAAK,MACLA,EAAK,KACLA,EAAK,SACLA,EAAK,OACT,EACA,KAAK,QAAQe,GAAkB,aAAc2C,CAAQ,CACzD,CACI,MAEJ,KAAKxB,GAAkB,WACvB,CACI,IAAMwB,EAAW,KAAK,WAAW,EACjC,KAAK,QAAQ3C,GAAkB,aAAc2C,CAAQ,CACzD,CACI,MAEJ,KAAKxB,GAAkB,UAEnB,GAAIlC,IAAS,OAGT,KAAK,QAAQe,GAAkB,aAAc,KAAK,4BAA4B,CAAC,MAGnF,CACI,IAAM2C,EAAW,MAAM,KAAK,YACxB1D,EAAK,SACLA,EAAK,QACLA,EAAK,SACLA,EAAK,MACT,EACA,KAAK,QAAQe,GAAkB,aAAc2C,CAAQ,CACzD,CAEA,MAEJ,QACI1B,GAAK,gBAAgB,sBAAuBhC,CAAI,EAChD,KACR,CACJ,CAMA,6BACA,CAQI,MAAO,CACH,SAAU,GACV,QATQ,KAAK,UAAU,SAKJ,mBAAqB,KAAK,gBAAkB,KAAK,aAI7C,KAAK,SAChC,CACJ,CACJ,EAEAR,GAAkB,UAAU,YAAcmE,GAC1CnE,GAAkB,UAAU,gBAAkBoE,GAC9CpE,GAAkB,UAAU,WAAaqE,GACzCrE,GAAkB,UAAU,YAAcsE,GAE1C,IAAMC,GAAS,IAAIvE,GACnB,UAAYuE,GAAO,wBAAwB,KAAKA,EAAM",
  "names": ["ENABLE_INFO", "ENABLE_WARN", "ENABLE_GROUP", "ENABLE_TABLE", "SpessaSynthLogging", "enableInfo", "enableWarn", "enableGroup", "enableTable", "SpessaSynthInfo", "message", "SpessaSynthWarn", "SpessaSynthGroup", "SpessaSynthGroupCollapsed", "SpessaSynthGroupEnd", "formatTime", "totalSeconds", "minutes", "seconds", "formatTitle", "fileName", "arrayToHexString", "arr", "hexString", "i", "hex", "sanitizeKarLyrics", "eventData", "sanitized", "byte", "consoleColors", "getPriority", "channel", "voice", "priority", "voiceKilling", "amount", "allVoices", "a", "b", "voicesToRemove", "index", "DEFAULT_SYNTH_MODE", "EMBEDDED_SOUND_BANK_ID", "GENERATOR_OVERRIDE_NO_CHANGE_VALUE", "stbvorbis", "isReady", "readySolver", "A", "atob", "I", "g", "B", "E", "Q", "C", "i", "h", "o", "G", "D", "a", "S", "F", "R", "s", "w", "y", "c", "n", "U", "$", "e", "t", "k", "N", "r", "__require", "Y", "J", "_", "II", "f", "H", "L", "M", "AN", "Ae", "d", "q", "K", "l", "u", "b", "X", "m", "Z", "V", "x", "p", "W", "IE", "T", "v", "IA", "A9", "A5", "Ai", "O", "j", "Ag", "P", "Ax", "Ap", "A6", "AV", "z", "AA", "A8", "AI", "A0", "AQ", "AB", "AE", "AC", "Ah", "Ao", "AG", "AD", "Aa", "AS", "AF", "AR", "As", "Aw", "Ay", "Ac", "An", "AU", "A$", "Az", "Ak", "Ar", "AY", "AJ", "Af", "AH", "AL", "AM", "Ad", "Aq", "AK", "Al", "Au", "Ab", "AX", "Am", "AZ", "A7", "A1", "AW", "A_", "AT", "A2", "Av", "AO", "Aj", "AP", "A4", "A3", "Ig", "IB", "timecentLookupTable", "i", "timecents", "timecentsToSeconds", "MIN_ABS_CENT", "MAX_ABS_CENT", "absoluteCentLookupTable", "absoluteCents", "absCentsToHz", "cents", "MIN_DECIBELS", "MAX_DECIBELS", "decibelLookUpTable", "decibels", "decibelAttenuationToGain", "generatorTypes", "GENERATORS_AMOUNT", "MAX_GENERATOR", "generatorLimits", "VOLUME_ENVELOPE_SMOOTHING_FACTOR", "DB_SILENCE", "PERCEIVED_DB_SILENCE", "PERCEIVED_GAIN_SILENCE", "VolumeEnvelope", "_VolumeEnvelope", "sampleRate", "initialDecay", "voice", "decibelAttenuationToGain", "env", "timecentsToSamples", "tc", "timecentsToSeconds", "generatorTypes", "sustainDb", "fullChange", "keyNumAddition", "fraction", "holdExcursion", "elapsed", "releaseFraction", "audioBuffer", "centibelOffset", "smoothingFactor", "decibelOffset", "attenuationSmoothing", "elapsedRelease", "i", "dbDifference", "db", "filledBuffer", "linearAttenuation", "IndexedByteArray", "args", "start", "end", "a", "MIDIMessage", "ticks", "byte", "data", "getChannel", "statusByte", "eventType", "channel", "resultChannel", "messageTypes", "getEvent", "status", "eventChannel", "eventStatus", "midiControllers", "dataBytesAmount", "XG_SFX_VOICE", "GM2_DEFAULT_BANK", "getDefaultBank", "sys", "isXGDrums", "bankNr", "isValidXGMSB", "bank", "parseBankSelect", "bankBefore", "system", "isLSB", "isDrums", "channelNumber", "out", "drumsStatus", "isSystemXG", "canSetBankSelect", "SpessaSynthInfo", "consoleColors", "chooseBank", "msb", "lsb", "isXG", "masterParameterType", "setMasterParameter", "type", "value", "pan", "SYNTHESIZER_GAIN", "readBytesAsString", "dataArray", "bytes", "trimEnd", "finished", "string", "i", "byte", "getStringBytes", "addZero", "ensureEven", "len", "arr", "IndexedByteArray", "writeStringAsBytes", "outArray", "padLength", "interpolationTypes", "synthDisplayTypes", "MOD_BYTE_SIZE", "modulatorSources", "modulatorCurveTypes", "getModSourceEnum", "curveType", "polarity", "direction", "isCC", "index", "defaultResonantModSource", "midiControllers", "Modulator", "_Modulator", "sourceIndex", "sourceCurveType", "sourceUsesCC", "sourcePolarity", "sourceDirection", "secSrcIndex", "secSrcCurveType", "secSrcUsesCC", "secSrcPolarity", "secSrcDirection", "destination", "amount", "transformType", "isEffectModulator", "isDefaultResonantModulator", "MAX_GENERATOR", "generatorTypes", "modulator", "mod1", "mod2", "checkAmount", "mod", "getKeyByValue", "object", "value", "key", "sourceString", "secSrcString", "DecodedModulator", "sourceEnum", "secondarySourceEnum", "DEFAULT_ATTENUATION_MOD_AMOUNT", "DEFAULT_ATTENUATION_MOD_CURVE_TYPE", "soundFontModulators", "customModulators", "defaultModulators", "NON_CC_INDEX_OFFSET", "CONTROLLER_TABLE_SIZE", "resetArray", "setResetValue", "i", "v", "midiControllers", "PORTAMENTO_CONTROL_UNSET", "modulatorSources", "customControllers", "CUSTOM_CONTROLLER_TABLE_SIZE", "customResetArray", "dataEntryStates", "channelConfiguration", "getTuning", "byte1", "byte2", "byte3", "midiNote", "fraction", "systemExclusive", "syx", "channelOffset", "type", "niceLogging", "channel", "value", "what", "units", "SpessaSynthInfo", "arrayToHexString", "consoleColors", "notRecognized", "SpessaSynthWarn", "cents", "vol", "pan", "masterParameterType", "tuningValue", "currentMessageIndex", "program", "tuningName", "readBytesAsString", "i", "tuningProgram", "numberOfChanges", "newOctaveTuning", "tuning", "messageValue", "channelObject", "isDrums", "keyShift", "customControllers", "panpot", "midiControllers", "tuningBytes", "newTuning", "centeredValue", "normalizedValue", "normalizedNotCentered", "setupReceivers", "source", "sourceName", "bipolar", "NON_CC_INDEX_OFFSET", "modulatorSources", "generatorTypes", "transpose", "patchName", "text", "synthDisplayTypes", "dotMatrixData", "isSystemXG", "semitones", "textData", "resetAllControllers", "log", "SpessaSynthInfo", "consoleColors", "DEFAULT_SYNTH_MODE", "channelNumber", "ch", "getDefaultBank", "presetBank", "ccNum", "NON_CC_INDEX_OFFSET", "modulatorSources", "val", "msb", "lsb", "i", "resetControllers", "resetArray", "resetValue", "midiControllers", "PORTAMENTO_CONTROL_UNSET", "transpose", "customControllers", "customResetArray", "nonResetableCCs", "resetControllersRP15Compliant", "resetParameters", "dataEntryStates", "SoundFontManager", "presetListChangeCallback", "presetList", "i", "font", "presets", "p", "presetString", "string", "name", "pb", "soundFont", "sf", "EMBEDDED_SOUND_BANK_ID", "id", "SpessaSynthWarn", "index", "s", "SpessaSynthInfo", "bankOffset", "soundfont", "newList", "a", "b", "bankNumber", "programNumber", "allowXGDrums", "isDrum", "isXGDrums", "preset", "KeyModifierManager", "channel", "midiNote", "mapping", "mappings", "bank", "modifier", "FILTER_SMOOTHING_FACTOR", "LowpassFilter", "_LowpassFilter", "sampleRate", "voice", "outputBuffer", "fcExcursion", "smoothingFactor", "initialFc", "generatorTypes", "filter", "targetCutoff", "modulatedResonance", "i", "input", "filtered", "cutoffCents", "qCb", "cached", "cutoffHz", "absCentsToHz", "qDb", "resonanceGain", "decibelAttenuationToGain", "qGain", "w", "cosw", "alpha", "b1", "b0", "b2", "a0", "a1", "a2", "toCache", "dummy", "MOD_PRECOMPUTED_LENGTH", "concave", "convex", "i", "x", "getModulatorCurveValue", "direction", "curveType", "value", "polarity", "modulatorCurveTypes", "MODENV_PEAK", "CONVEX_ATTACK", "i", "getModulatorCurveValue", "modulatorCurveTypes", "ModulationEnvelope", "_ModulationEnvelope", "voice", "env", "generatorTypes", "timecentsToSeconds", "decayKeyExcursionCents", "decayTime", "holdKeyExcursionCents", "releaseTime", "currentTime", "ignoreRelease", "GEN_BYTE_SIZE", "Generator", "generatorTypes", "type", "value", "validate", "lim", "generatorLimits", "addAndClampGenerator", "generatorType", "presetGens", "instrumentGens", "limits", "presetGen", "g", "presetValue", "instruGen", "instruValue", "EXCLUSIVE_CUTOFF_TIME", "EXCLUSIVE_MOD_CUTOFF_TIME", "AudioSample", "data", "playbackStep", "cursorStart", "rootKey", "loopStart", "loopEnd", "endIndex", "loopingMode", "Voice", "_Voice", "ModulationEnvelope", "sampleRate", "audioSample", "midiNote", "velocity", "currentTime", "targetKey", "realKey", "generators", "modulators", "generatorTypes", "LowpassFilter", "VolumeEnvelope", "voice", "sampleToCopy", "sample", "m", "Modulator", "MIN_EXCLUSIVE_LENGTH", "minNoteLength", "MIN_NOTE_LENGTH", "getVoicesForPreset", "preset", "bank", "program", "voices", "sampleAndGenerators", "SpessaSynthWarn", "GENERATORS_AMOUNT", "i", "addAndClampGenerator", "v", "getVoices", "channel", "channelObject", "overridePatch", "override", "cached", "PAN_SMOOTHING_FACTOR", "REVERB_DIVIDER", "CHORUS_DIVIDER", "HALF_PI", "MIN_PAN", "MAX_PAN", "PAN_RESOLUTION", "panTableLeft", "panTableRight", "pan", "realPan", "tableIndex", "panAndMixVoice", "voice", "inputBuffer", "outputLeft", "outputRight", "reverbLeft", "reverbRight", "chorusLeft", "chorusRight", "startIndex", "generatorTypes", "gain", "index", "gainLeft", "gainRight", "reverbSend", "reverbGain", "i", "idx", "chorusSend", "chorusGain", "chorusLeftGain", "chorusRightGain", "stopAllChannels", "force", "SpessaSynthInfo", "consoleColors", "i", "readLittleEndian", "dataArray", "bytesAmount", "out", "i", "writeLittleEndian", "number", "byteTarget", "writeWord", "word", "writeDword", "dword", "signedInt16", "byte1", "byte2", "val", "signedInt8", "byte", "RiffChunk", "header", "size", "data", "readRIFFChunk", "dataArray", "readData", "forceShift", "readBytesAsString", "readLittleEndian", "chunkData", "writeRIFFChunkRaw", "addZeroByte", "isList", "dataStartOffset", "headerWritten", "dataLength", "writtenSize", "finalSize", "outArray", "IndexedByteArray", "writeStringAsBytes", "writeDword", "writeRIFFChunkParts", "chunks", "dataOffset", "len", "c", "findRIFFListType", "collection", "type", "getIGEN", "igenSize", "GEN_BYTE_SIZE", "inst", "sum", "z", "g", "generatorTypes", "Generator", "igenData", "IndexedByteArray", "writeZone", "gen", "writeWord", "instrument", "instrumentZone", "writeDword", "xigenData", "igen", "writeRIFFChunkRaw", "xigen", "SDTA_TO_DATA_OFFSET", "getSDTA", "smplStartOffsets", "smplEndOffsets", "compress", "decompress", "vorbisFunc", "progressFunc", "writtenCount", "smplChunkSize", "sampleDatas", "s", "r", "SpessaSynthInfo", "consoleColors", "sdta", "IndexedByteArray", "writeStringAsBytes", "writeLittleEndian", "offset", "sample", "i", "data", "startOffset", "endOffset", "RESAMPLE_RATE", "sampleTypes", "BasicSample", "sampleName", "sampleRate", "samplePitch", "samplePitchCorrection", "sampleType", "loopStart", "loopEnd", "allowVorbis", "newSampleRate", "audioData", "ratio", "resampled", "i", "encodeVorbis", "compressed", "e", "SpessaSynthWarn", "type", "sample", "instrument", "index", "decoded", "stbvorbis", "data", "data16", "len", "IndexedByteArray", "SF3_BIT_FLIT", "SoundFontSample", "BasicSample", "sampleName", "sampleStartIndex", "sampleEndIndex", "sampleLoopStartIndex", "sampleLoopEndIndex", "sampleRate", "samplePitch", "samplePitchCorrection", "linkedSampleIndex", "sampleType", "sampleDataArray", "sampleIndex", "compressed", "smplStart", "samplesArray", "linked", "SpessaSynthInfo", "consoleColors", "audioData", "byteLength", "SpessaSynthWarn", "convertedSigned16", "i", "allowVorbis", "readSamples", "sampleHeadersChunk", "smplChunkData", "linkSamples", "samples", "index", "sample", "readSample", "s", "sampleHeaderData", "smplArrayData", "readBytesAsString", "readLittleEndian", "signedInt8", "sampleLink", "getSHDR", "smplStartOffsets", "smplEndOffsets", "shdrSize", "shdrData", "IndexedByteArray", "xshdrData", "maxSampleLink", "sample", "index", "writeStringAsBytes", "dwStart", "writeDword", "dwEnd", "loopStart", "loopEnd", "sampleLinkIndex", "writeWord", "type", "SF3_BIT_FLIT", "shdr", "writeRIFFChunkRaw", "xshdr", "getIMOD", "imodSize", "MOD_BYTE_SIZE", "inst", "sum", "z", "imodData", "IndexedByteArray", "writeZone", "mod", "writeWord", "instrumentZone", "writeLittleEndian", "ximodData", "imod", "writeRIFFChunkRaw", "ximod", "BAG_SIZE", "getIBAG", "ibagSize", "sum", "i", "ibagData", "IndexedByteArray", "xibagData", "generatorIndex", "modulatorIndex", "writeZone", "z", "writeWord", "inst", "ibag", "writeRIFFChunkRaw", "xibag", "INST_SIZE", "getINST", "instSize", "instData", "IndexedByteArray", "xinstData", "instrumentStart", "inst", "writeStringAsBytes", "writeWord", "writeRIFFChunkRaw", "xinst", "getPGEN", "pgenSize", "GEN_BYTE_SIZE", "preset", "size", "z", "g", "generatorTypes", "Generator", "pgenData", "IndexedByteArray", "writeZone", "gen", "writeWord", "zone", "writeDword", "xpgenData", "pgen", "writeRIFFChunkRaw", "xpgen", "getPMOD", "pmodSize", "MOD_BYTE_SIZE", "preset", "sum", "z", "pmodData", "IndexedByteArray", "writeZone", "mod", "writeWord", "zone", "writeLittleEndian", "xpmodData", "pmod", "writeRIFFChunkRaw", "xpmod", "BAG_SIZE", "getPBAG", "pbagSize", "sum", "i", "pbagData", "IndexedByteArray", "xpbagData", "generatorIndex", "modulatorIndex", "writeZone", "z", "writeWord", "preset", "pbag", "writeRIFFChunkRaw", "xbag", "PHDR_SIZE", "getPHDR", "phdrSize", "phdrData", "IndexedByteArray", "xphdrData", "presetStart", "preset", "writeStringAsBytes", "writeWord", "writeDword", "phdr", "writeRIFFChunkRaw", "xphdr", "fillWithDefaults", "obj", "defObj", "key", "DEFAULT_WRITE_OPTIONS", "write", "options", "fillWithDefaults", "SpessaSynthGroupCollapsed", "consoleColors", "SpessaSynthInfo", "infoArrays", "s", "type", "data", "major", "minor", "ckdata", "IndexedByteArray", "writeWord", "writeRIFFChunkRaw", "mods", "dmodsize", "MOD_BYTE_SIZE", "dmoddata", "mod", "writeLittleEndian", "getStringBytes", "smplStartOffsets", "smplEndOffsets", "sdtaChunk", "getSDTA", "shdrChunk", "getSHDR", "igenChunk", "getIGEN", "imodChunk", "getIMOD", "ibagChunk", "getIBAG", "instChunk", "getINST", "pgenChunk", "getPGEN", "pmodChunk", "getPMOD", "pbagChunk", "getPBAG", "chunks", "getPHDR", "pdtaChunk", "writeRIFFChunkParts", "c", "maxIndex", "p", "i", "xpdtaChunk", "infoChunk", "main", "SpessaSynthGroupEnd", "BasicZone", "generator", "type", "value", "generatorTypes", "g", "Generator", "generators", "modulators", "generatorType", "notFoundValue", "zone", "m", "Modulator", "BasicGlobalZone", "BasicZone", "BasicInstrumentZone", "BasicZone", "instrument", "sample", "BasicInstrument", "BasicGlobalZone", "zone", "BasicInstrumentZone", "preset", "z", "index", "SpessaSynthWarn", "stays", "p", "force", "notGlobalizedTypes", "generatorTypes", "combineZones", "preset", "globalize", "addUnique", "main", "adder", "g", "mg", "subtractRanges", "r1", "r2", "addUniqueMods", "m", "mm", "Modulator", "outputInstrument", "BasicInstrument", "globalPresetGenerators", "globalPresetModulators", "globalPresetZone", "globalPresetKeyRange", "globalPresetVelRange", "presetZone", "presetZoneKeyRange", "presetZoneVelRange", "presetGenerators", "Generator", "presetModulators", "instrument", "iZones", "globalInstGenerators", "globalInstModulators", "globalInstZone", "globalInstKeyRange", "globalInstVelRange", "instZone", "instZoneKeyRange", "instZoneVelRange", "instGenerators", "instModulators", "finalModList", "mod", "identicalInstMod", "finalGenList", "gen", "identicalInstGen", "newAmount", "generatorLimits", "zone", "globalZone", "checkedType", "occurencesForValues", "defaultForChecked", "z", "value", "relativeCounterpart", "valueToGlobalize", "max", "curr", "targetValue", "modulators", "checkedModulator", "existsForAllZones", "modulator", "WSMP_SIZE", "writeWavesample", "sample", "rootKey", "tuning", "attenuationCentibels", "loopStart", "loopEnd", "loopingMode", "loopCount", "wsmpData", "IndexedByteArray", "writeDword", "writeWord", "attenuationCb", "lGain", "loopSize", "ulLoopType", "writeRIFFChunkRaw", "DLSSources", "DEFAULT_DLS_REVERB", "DecodedModulator", "generatorTypes", "DEFAULT_DLS_CHORUS", "DLS_1_NO_VIBRATO_MOD", "DLS_1_NO_VIBRATO_PRESSURE", "DLSDestinations", "Articulator", "source", "control", "destination", "scale", "transform", "out", "IndexedByteArray", "writeWord", "writeDword", "getDLSSourceFromSf2Source", "cc", "index", "midiControllers", "DLSSources", "modulatorSources", "getDLSDestinationFromSf2", "dest", "amount", "generatorTypes", "DLSDestinations", "checkSF2SpecialCombos", "amt", "getDLSArticulatorFromSf2Generator", "gen", "destination", "source", "combo", "SpessaSynthWarn", "Articulator", "getDLSArticulatorFromSf2Modulator", "mod", "sourceTransformType", "sourceBipolar", "sourceDirection", "control", "controlTransformType", "controlBipolar", "controlDirection", "dlsDestinationFromSf2", "specialCombo", "modulatorCurveTypes", "transform", "invalidGeneratorTypes", "generatorTypes", "writeArticulator", "zone", "i", "g", "Generator", "relativeGenerator", "absoluteCounterpart", "absoluteGenerator", "dlsRelative", "subtraction", "newAbsolute", "iR", "iA", "generators", "arrs", "art", "getDLSArticulatorFromSf2Generator", "SpessaSynthInfo", "consoleColors", "SpessaSynthWarn", "modulators", "m", "Modulator", "DEFAULT_DLS_CHORUS", "DEFAULT_DLS_REVERB", "DLS_1_NO_VIBRATO_MOD", "DLS_1_NO_VIBRATO_PRESSURE", "getDLSArticulatorFromSf2Modulator", "art2Data", "IndexedByteArray", "writeDword", "out", "a", "writeRIFFChunkParts", "writeDLSRegion", "zone", "globalZone", "rgnhData", "IndexedByteArray", "writeWord", "exclusive", "generatorTypes", "rgnh", "writeRIFFChunkRaw", "rootKey", "wsmp", "writeWavesample", "wlnkData", "writeDword", "wlnk", "lar2", "art2", "writeArticulator", "writeRIFFChunkParts", "writeIns", "preset", "SpessaSynthGroupCollapsed", "consoleColors", "inst", "combineZones", "global", "zones", "inshData", "IndexedByteArray", "writeDword", "ulBank", "insh", "writeRIFFChunkRaw", "art2", "writeArticulator", "lar2", "lrgn", "writeRIFFChunkParts", "arrs", "z", "writeDLSRegion", "inam", "getStringBytes", "info", "SpessaSynthGroupEnd", "writeLins", "writeRIFFChunkParts", "p", "writeIns", "writeDLSSample", "sample", "fmtData", "IndexedByteArray", "writeWord", "writeDword", "fmt", "writeRIFFChunkRaw", "loop", "wsmp", "writeWavesample", "data", "inam", "getStringBytes", "info", "SpessaSynthInfo", "consoleColors", "writeRIFFChunkParts", "writeWavePool", "progressFunction", "currentIndex", "offsets", "samples", "written", "s", "out", "writeDLSSample", "writeRIFFChunkParts", "DEFAULT_DLS_OPTIONS", "writeDLS", "options", "fillWithDefaults", "SpessaSynthGroupCollapsed", "consoleColors", "colhNum", "IndexedByteArray", "writeDword", "colh", "writeRIFFChunkRaw", "lins", "writeLins", "SpessaSynthInfo", "SpessaSynthGroupEnd", "wavepool", "writeWavePool", "wvpl", "ptblOffsets", "ptblData", "offset", "ptbl", "infos", "info", "data", "getStringBytes", "writeRIFFChunkParts", "BasicPresetZone", "BasicZone", "preset", "instrument", "BasicPreset", "BasicGlobalZone", "parentSoundBank", "allowXG", "allowSFX", "xg", "isXGDrums", "z", "index", "BasicPresetZone", "keyMin", "keyMax", "key", "velocity", "samandgen", "midiNote", "isInRange", "range", "number", "addUnique", "main", "adder", "g", "mg", "addUniqueMods", "m", "mm", "Modulator", "parsedGeneratorsAndSamples", "globalPresetGenerators", "globalPresetModulators", "globalKeyRange", "globalVelRange", "currentZone", "presetZone", "instrument", "presetGenerators", "presetModulators", "globalInstrumentGenerators", "globalInstrumentModulators", "instrumentZone", "instrumentGenerators", "instrumentModulators", "finalModulatorList", "i", "mod", "identicalInstrumentModulator", "BasicSoundBank", "_BasicSoundBank", "stbvorbis", "defaultModulators", "m", "Modulator", "data", "instrumentList", "preset", "zone", "sampleList", "instrument", "soundfonts", "mainSf", "presets", "newPreset", "existingPreset", "font", "sample", "BasicSample", "sampleTypes", "sampleData", "i", "gZone", "BasicGlobalZone", "Generator", "generatorTypes", "inst", "BasicInstrument", "zone2", "BasicPreset", "instruments", "samples", "duplicate", "newSample", "clonedLinked", "newInstrument", "copiedZone", "p", "a", "b", "allowedPrograms", "isXGDrums", "SpessaSynthInfo", "consoleColors", "mid", "soundfont", "trimInstrumentZones", "combos", "trimmedIZones", "iZoneIndex", "iZone", "iKeyRange", "iVelRange", "isIZoneUsed", "iCombo", "SpessaSynthGroup", "usedProgramsAndKeys", "SpessaSynthGroupCollapsed", "presetIndex", "string", "used", "s", "split", "trimmedZones", "zoneIndex", "keyRange", "velRange", "isZoneUsed", "combo", "SpessaSynthGroupEnd", "deletable", "bankNr", "programNr", "allowXGDrums", "isDrum", "isDrums", "SpessaSynthWarn", "presetName", "error", "write", "writeDLS", "readDLSInstrumentList", "instrumentListChunk", "SpessaSynthGroupCollapsed", "consoleColors", "i", "readRIFFChunk", "SpessaSynthGroupEnd", "DLSZone", "BasicInstrumentZone", "inst", "attenuationCb", "loopingMode", "loop", "sampleKey", "sample", "sampleID", "samplePitchCorrection", "Generator", "generatorTypes", "coarseTune", "fineTune", "diffStart", "diffEnd", "fine", "coarse", "DLSInstrument", "BasicInstrument", "z", "DLSZone", "DLSPreset", "BasicPreset", "DLSInstrument", "dls", "ulBank", "ulInstrument", "bankMSB", "bankLSB", "readRegion", "chunk", "instrument", "regionChunks", "readRIFFChunk", "regionHeader", "c", "SpessaSynthWarn", "keyMin", "readLittleEndian", "keyMax", "velMin", "velMax", "zone", "exclusive", "Generator", "generatorTypes", "lart", "findRIFFListType", "lar2", "waveSampleChunk", "originalKey", "pitchCorrection", "signedInt16", "dbCorrection", "loopsAmount", "loopingMode", "loop", "loopLength", "waveLinkChunk", "sampleID", "sample", "attenuation", "readDLSInstrument", "chunk", "readBytesAsString", "chunks", "readRIFFChunk", "instrumentHeader", "c", "SpessaSynthGroupEnd", "regions", "readLittleEndian", "ulBank", "ulInstrument", "preset", "DLSPreset", "presetName", "infoChunk", "findRIFFListType", "info", "SpessaSynthGroupCollapsed", "consoleColors", "regionListChunk", "globalZone", "globalLart", "globalLar2", "g", "generatorLimits", "m", "generatorTypes", "Modulator", "DEFAULT_DLS_REVERB", "DEFAULT_DLS_CHORUS", "i", "type", "readRegion", "getSF2SourceFromDLS", "source", "sourceEnum", "isCC", "DLSSources", "modulatorSources", "midiControllers", "getSF2GeneratorFromDLS", "destination", "amount", "DLSDestinations", "generatorTypes", "checkForSpecialDLSCombo", "getSF2ModulatorFromArticulator", "source", "control", "destination", "transform", "value", "specialDestination", "checkForSpecialDLSCombo", "destinationGenerator", "sf2Source", "swapSources", "isSourceNoController", "newValue", "sf2GenDestination", "getSF2GeneratorFromDLS", "SpessaSynthWarn", "getSF2SourceFromDLS", "modulatorSources", "sf2SecondSource", "sourceEnumFinal", "outputTransform", "sourceTransform", "modulatorCurveTypes", "sourceIsBipolar", "sourceIsNegative", "generatorTypes", "getModSourceEnum", "secSourceTransform", "secSourceIsBipolar", "secSourceIsNegative", "secSourceEnumFinal", "temp", "DecodedModulator", "readArticulation", "chunk", "disableVibrato", "artData", "generators", "modulators", "readLittleEndian", "connectionsAmount", "i", "source", "control", "destination", "transform", "value", "generator", "DLSDestinations", "Generator", "generatorTypes", "sustainCb", "percentageSustain", "semi", "cents", "isGenerator", "applyKeyToCorrection", "keyToGen", "realGen", "keyToGenValue", "correction", "g", "DLSSources", "mod", "getSF2ModulatorFromArticulator", "SpessaSynthInfo", "consoleColors", "SpessaSynthWarn", "Modulator", "DLS_1_NO_VIBRATO_MOD", "DLS_1_NO_VIBRATO_PRESSURE", "readLart", "lartChunk", "lar2Chunk", "zone", "art1", "readRIFFChunk", "modsAndGens", "readArticulation", "art2", "W_FORMAT_TAG", "readPCM", "data", "bytesPerSample", "maxSampleValue", "maxUnsigned", "normalizationFactor", "isUnsigned", "sampleLength", "sampleData", "s16", "i", "sample", "readLittleEndian", "readALAW", "input", "exponent", "mantissa", "s16sample", "DLSSample", "BasicSample", "name", "rate", "pitch", "pitchCorrection", "loopStart", "loopEnd", "sampleDbAttenuation", "dataChunk", "wFormatTag", "sampleTypes", "SpessaSynthWarn", "audioData", "allowVorbis", "readDLSSamples", "waveListChunk", "SpessaSynthGroupCollapsed", "consoleColors", "sampleID", "waveChunk", "readRIFFChunk", "readBytesAsString", "waveChunks", "fmtChunk", "c", "wFormatTag", "readLittleEndian", "channelsAmount", "sampleRate", "bytesPerSample", "dataChunk", "waveInfo", "findRIFFListType", "sampleName", "infoChunk", "sampleKey", "samplePitch", "sampleLoopStart", "sampleLoopEnd", "sampleDbAttenuation", "wsmpChunk", "signedInt16", "samplePitchSemitones", "loopSize", "SpessaSynthWarn", "DLSSample", "SpessaSynthInfo", "SpessaSynthGroupEnd", "DLSSoundFont", "BasicSoundBank", "buffer", "IndexedByteArray", "SpessaSynthGroup", "consoleColors", "SpessaSynthGroupEnd", "firstChunk", "readRIFFChunk", "readBytesAsString", "chunks", "infoChunk", "findRIFFListType", "infoPart", "info", "value", "SpessaSynthInfo", "colhChunk", "c", "readLittleEndian", "waveListChunk", "instrumentListChunk", "chunk", "expected", "expect", "text", "error", "readDLSInstrumentList", "readDLSInstrument", "readLart", "readDLSSamples", "ReadGenerator", "Generator", "dataArray", "i", "signedInt16", "readGenerators", "generatorChunk", "gens", "PresetZone", "BasicPresetZone", "preset", "instruments", "instrumentID", "g", "generatorTypes", "applyPresetZones", "indexes", "presetGens", "presetMods", "presets", "genStartIndexes", "modStartIndexes", "modIndex", "genIndex", "i", "gensStart", "gensEnd", "gens", "modsStart", "modsEnd", "mods", "zone", "Preset", "BasicPreset", "presetChunk", "sf2", "readBytesAsString", "readLittleEndian", "z", "PresetZone", "readPresets", "parent", "presets", "preset", "previous", "InstrumentZone", "BasicInstrumentZone", "inst", "samples", "sampleID", "g", "generatorTypes", "applyInstrumentZones", "indexes", "instrumentGenerators", "instrumentModulators", "instruments", "genStartIndexes", "modStartIndexes", "modIndex", "genIndex", "instrument", "i", "gensStart", "gensEnd", "gens", "modsStart", "modsEnd", "mods", "zone", "Instrument", "BasicInstrument", "instrumentChunk", "readBytesAsString", "readLittleEndian", "z", "InstrumentZone", "readInstruments", "instruments", "instrument", "previous", "readModulators", "modulatorChunk", "mods", "dataArray", "sourceEnum", "readLittleEndian", "destination", "amount", "signedInt16", "secondarySourceEnum", "transformType", "DecodedModulator", "readZoneIndexes", "zonesChunk", "modStartIndexes", "genStartIndexes", "readLittleEndian", "SoundFont2", "BasicSoundBank", "arrayBuffer", "warnDeprecated", "mainFileArray", "IndexedByteArray", "SpessaSynthGroup", "consoleColors", "SpessaSynthGroupEnd", "firstChunk", "readRIFFChunk", "type", "readBytesAsString", "isSF2Pack", "infoChunk", "infoString", "xdtaChunk", "chunk", "text", "readLittleEndian", "newModulators", "readModulators", "SpessaSynthInfo", "isExtended", "xChunks", "sdtaChunk", "sampleDataChunk", "sampleData", "stbvorbis", "e", "presetChunk", "phdrChunk", "pbagChunk", "pmodChunk", "pgenChunk", "instChunk", "ibagChunk", "imodChunk", "igenChunk", "shdrChunk", "samples", "readSamples", "xSamples", "s", "i", "instrumentGenerators", "readGenerators", "instrumentModulators", "instruments", "readInstruments", "xInst", "inst", "ibagIndexes", "readZoneIndexes", "extraIndexes", "applyInstrumentZones", "presetGenerators", "presetModulators", "presets", "readPresets", "xPreset", "pres", "preset", "p", "pbagIndexes", "applyPresetZones", "expected", "loadSoundFont", "buffer", "check", "a", "IndexedByteArray", "readBytesAsString", "DLSSoundFont", "SoundFont2", "clearEmbeddedBank", "s", "EMBEDDED_SOUND_BANK_ID", "setEmbeddedSoundFont", "font", "offset", "loadedFont", "loadSoundFont", "order", "SpessaSynthInfo", "consoleColors", "updatePresetList", "mainFont", "c", "transposeAllChannels", "semitones", "force", "i", "setMasterTuning", "cents", "i", "customControllers", "ChannelSnapshot", "_ChannelSnapshot", "spessaSynthProcessor", "channelNumber", "channelObject", "channelSnapshot", "SynthesizerSnapshot", "_SynthesizerSnapshot", "spessaSynthProcessor", "snapshot", "_", "i", "ChannelSnapshot", "masterParameterType", "channelSnapshot", "index", "SpessaSynthInfo", "consoleColors", "applySynthesizerSnapshot", "snapshot", "SynthesizerSnapshot", "SpessaSynthInfo", "consoleColors", "getLFOValue", "startTime", "frequency", "currentTime", "xVal", "WavetableOscillator", "_WavetableOscillator", "voice", "outputBuffer", "interpolation", "step", "interpolationTypes", "sample", "cur", "sampleData", "loopLength", "floor", "ceil", "fraction", "upper", "lower", "i", "y0", "y1", "y2", "y3", "t", "xm1", "x0", "x1", "x2", "c", "v", "w", "a", "b", "renderVoice", "voice", "timeNow", "outputLeft", "outputRight", "reverbOutputLeft", "reverbOutputRight", "chorusOutputLeft", "chorusOutputRight", "startIndex", "sampleCount", "VolumeEnvelope", "ModulationEnvelope", "generatorTypes", "targetKey", "cents", "semitones", "tuning", "elapsed", "diff", "lowpassExcursion", "volumeExcursionCentibels", "vibPitchDepth", "vibVolDepth", "vibFilterDepth", "vibStart", "timecentsToSeconds", "vibFreqHz", "absCentsToHz", "vibLfoValue", "getLFOValue", "customControllers", "modPitchDepth", "modVolDepth", "modFilterDepth", "modStart", "modFreqHz", "modLfoValue", "channelVibrato", "modEnvPitchDepth", "modEnvFilterDepth", "modEnv", "centsTotal", "bufferOut", "WavetableOscillator", "LowpassFilter", "killNote", "midiNote", "releaseTime", "customControllers", "v", "generatorTypes", "setTuning", "cents", "log", "customControllers", "SpessaSynthInfo", "consoleColors", "setModulationDepth", "cents", "SpessaSynthInfo", "consoleColors", "customControllers", "registeredParameterTypes", "nonRegisteredMSB", "nonRegisteredGSLSB", "dataEntryCoarse", "dataValue", "midiControllers", "addDefaultVibrato", "coolInfo", "what", "value", "type", "SpessaSynthInfo", "consoleColors", "dataEntryStates", "NRPNCoarse", "NRPNFine", "dataEntryFine", "SpessaSynthWarn", "gen", "customControllers", "offset", "rpnValue", "NON_CC_INDEX_OFFSET", "modulatorSources", "semitones", "AWE_NRPN_GENERATOR_MAPPINGS", "generatorTypes", "handleAWE32NRPN", "aweGen", "dataLSB", "dataMSB", "clip", "v", "min", "max", "msecToTimecents", "ms", "hzToCents", "hz", "dataValue", "generator", "SpessaSynthWarn", "consoleColors", "milliseconds", "hertz", "centibels", "cents", "fcCents", "dataEntryFine", "dataValue", "midiControllers", "dataEntryStates", "registeredParameterTypes", "NON_CC_INDEX_OFFSET", "modulatorSources", "actualTune", "SpessaSynthInfo", "consoleColors", "finalTuning", "customControllers", "cents", "NRPNCoarse", "NRPNFine", "nonRegisteredMSB", "SpessaSynthWarn", "handleAWE32NRPN", "controllerChange", "controllerNumber", "controllerValue", "force", "channelConfiguration", "midiControllers", "actualCCNum", "v", "dataEntryStates", "customControllers", "nonRegisteredMSB", "stopAllNotes", "force", "v", "muteChannel", "isMuted", "transposeChannel", "semitones", "force", "keyShift", "currentTranspose", "customControllers", "midiControllers", "portamentoLookup", "getLookup", "value", "lower", "upper", "key", "lowerTime", "upperTime", "portamentoTimeToSeconds", "time", "distance", "noteOn", "midiNote", "velocity", "SpessaSynthWarn", "realKey", "customControllers", "internalMidiNote", "program", "tune", "keyVel", "voiceGain", "portamentoFromKey", "portamentoDuration", "portamentoTime", "midiControllers", "control", "currentFromKey", "diff", "portamentoTimeToSeconds", "voices", "panOverride", "channelVoices", "voice", "m", "mod", "existingModIndex", "voiceMod", "Modulator", "overrideValue", "generatorType", "GENERATOR_OVERRIDE_NO_CHANGE_VALUE", "exclusive", "v", "cursorStartOffset", "generatorTypes", "endOffset", "loopStartOffset", "loopEndOffset", "sm", "clamp", "num", "temp", "noteOff", "midiNote", "SpessaSynthWarn", "realKey", "customControllers", "v", "polyPressure", "midiNote", "pressure", "v", "modulatorSources", "channelPressure", "pressure", "NON_CC_INDEX_OFFSET", "modulatorSources", "v", "pitchWheel", "MSB", "LSB", "NON_CC_INDEX_OFFSET", "modulatorSources", "bend", "v", "setOctaveTuning", "tuning", "i", "programChange", "programNumber", "bank", "isXG", "p", "preset", "SpessaSynthWarn", "BasicPreset", "DynamicModulatorSystem", "source", "destination", "isBipolar", "isNegative", "id", "m", "amount", "mod", "srcNum", "isCC", "NON_CC_INDEX_OFFSET", "modulator", "Modulator", "modulatorCurveTypes", "modulatorSources", "EFFECT_MODULATOR_TRANSFORM_MULTIPLIER", "computeModulator", "controllerTable", "modulator", "voice", "rawSourceValue", "index", "NON_CC_INDEX_OFFSET", "modulatorSources", "sourceValue", "transforms", "rawSecondSrcValue", "secondSrcValue", "transformAmount", "computedValue", "computeModulators", "sourceUsesCC", "sourceIndex", "modulators", "generators", "modulatedGenerators", "mod", "gen", "limit", "generatorLimits", "VolumeEnvelope", "ModulationEnvelope", "volenvNeedsRecalculation", "generatorTypes", "computedDestinations", "destination", "m", "limits", "dest", "curve", "MOD_PRECOMPUTED_LENGTH", "i", "getModulatorCurveValue", "MidiAudioChannel", "CONTROLLER_TABLE_SIZE", "CUSTOM_CONTROLLER_TABLE_SIZE", "DynamicModulatorSystem", "GENERATORS_AMOUNT", "dataEntryStates", "synth", "preset", "channelNumber", "isSystemXG", "type", "value", "customControllers", "outputLeft", "outputRight", "reverbOutputLeft", "reverbOutputRight", "chorusOutputLeft", "chorusOutputRight", "startIndex", "sampleCount", "v", "locked", "bank", "isLSB", "parseBankSelect", "chooseBank", "isDrum", "depth", "rate", "delay", "data", "NON_CC_INDEX_OFFSET", "modulatorSources", "GENERATOR_OVERRIDE_NO_CHANGE_VALUE", "gen", "realtime", "generatorLimits", "renderVoice", "panAndMixVoice", "killNote", "stopAllNotes", "muteChannel", "computeModulators", "noteOn", "noteOff", "polyPressure", "channelPressure", "pitchWheel", "programChange", "setTuning", "setOctaveTuning", "setModulationDepth", "transposeChannel", "controllerChange", "resetControllers", "resetControllersRP15Compliant", "resetParameters", "dataEntryFine", "dataEntryCoarse", "createMidiChannel", "sendEvent", "channel", "MidiAudioChannel", "DEFAULT_SYNTH_OPTIONS", "DEFAULT_SYNTH_METHOD_OPTIONS", "MIN_NOTE_LENGTH", "MIN_EXCLUSIVE_LENGTH", "SYNTHESIZER_GAIN", "SpessaSynthProcessor", "SoundFontManager", "interpolationTypes", "KeyModifierManager", "DEFAULT_SYNTH_MODE", "stbvorbis", "sampleRate", "options", "DEFAULT_SYNTH_OPTIONS", "fillWithDefaults", "VOLUME_ENVELOPE_SMOOTHING_FACTOR", "PAN_SMOOTHING_FACTOR", "FILTER_SMOOTHING_FACTOR", "i", "SpessaSynthInfo", "consoleColors", "sys", "value", "masterParameterType", "bank", "program", "midiNote", "velocity", "voices", "outputs", "reverb", "chorus", "startIndex", "sampleCount", "reverbChannels", "chorusChannels", "separateChannels", "time", "revL", "revR", "chrL", "chrR", "quantumSize", "channel", "index", "voiceCount", "ch", "c", "controllerNumber", "controllerValue", "force", "pressure", "MSB", "LSB", "programNumber", "message", "channelOffset", "call", "statusByteData", "getEvent", "messageTypes", "IndexedByteArray", "e1", "e2", "volume", "eventName", "eventData", "isSystemXG", "voiceKilling", "getVoicesForPreset", "getVoices", "systemExclusive", "stopAllChannels", "createMidiChannel", "resetAllControllers", "setMasterParameter", "transposeAllChannels", "setMasterTuning", "clearEmbeddedBank", "setEmbeddedSoundFont", "updatePresetList", "applySynthesizerSnapshot", "readBytesAsUintBigEndian", "dataArray", "bytesAmount", "out", "i", "writeBytesAsUintBigEndian", "number", "bytes", "_processEvent", "event", "trackIndex", "statusByteData", "getEvent", "offset", "messageTypes", "velocity", "toDelete", "n", "tempoBPM", "readBytesAsUintBigEndian", "SpessaSynthWarn", "k", "consoleColors", "_addNewMidiPort", "i", "processTick", "current", "trackIndex", "event", "eventNext", "canLoop", "_findFirstEventIndex", "index", "ticks", "track", "i", "MIDISequenceData", "ticks", "totalSeconds", "tempo", "v", "timeSinceLastTempo", "sequence", "arr", "set", "key", "value", "IndexedByteArray", "readVariableLengthQuantity", "MIDIbyteArray", "out", "byte", "writeVariableLengthQuantity", "number", "bytes", "writeMIDI", "midi", "binaryTrackData", "track", "binaryTrack", "currentTick", "runningByte", "event", "deltaTicks", "messageData", "messageTypes", "writeVariableLengthQuantity", "writeText", "text", "arr", "i", "binaryData", "writeBytesAsUintBigEndian", "isXGOn", "isGSDrumsOn", "isGSOn", "isGMOn", "isGM2On", "getGsOn", "ticks", "MIDIMessage", "messageTypes", "IndexedByteArray", "getControllerChange", "channel", "cc", "value", "getDrumChange", "chanAddress", "sysexData", "checksum", "modifyMIDI", "desiredProgramChanges", "desiredControllerChanges", "desiredChannelsToClear", "desiredChannelsToTranspose", "midi", "SpessaSynthGroupCollapsed", "consoleColors", "SpessaSynthInfo", "channelsToChangeProgram", "c", "system", "addedGs", "eventIndexes", "remainingTracks", "findFirstEventIndex", "index", "track", "i", "midiPorts", "midiPortChannelOffsets", "midiPortChannelOffset", "assignMIDIPort", "trackNum", "port", "trackIndex", "channelsAmount", "isFirstNoteOn", "coarseTranspose", "fineTranspose", "transpose", "coarse", "fine", "e", "deleteThisEvent", "addEventBefore", "offset", "portOffset", "status", "midiChannel", "change", "ccChange", "fineTune", "centsCoarse", "rpnCoarse", "midiControllers", "rpnFine", "dataEntryCoarse", "dataEntryFine", "desiredBank", "desiredProgram", "programChange", "addBank", "isLSB", "v", "bankChange", "isSystemXG", "isXGDrums", "XG_SFX_VOICE", "ccNum", "isXGOn", "isGSOn", "isGMOn", "isGM2On", "SpessaSynthGroupEnd", "applySnapshotToMIDI", "snapshot", "channelsToTranspose", "channelsToClear", "programChanges", "controllerChanges", "channelNumber", "transposeFloat", "customControllers", "l", "ccNumber", "targetValue", "RMIDINFOChunks", "FORCED_ENCODING", "DEFAULT_COPYRIGHT", "writeRMIDI", "soundfontBinary", "soundfont", "bankOffset", "encoding", "metadata", "correctBankOffset", "mid", "SpessaSynthGroup", "consoleColors", "SpessaSynthInfo", "findFirstEventIndex", "index", "ticks", "track", "i", "eventIndexes", "system", "unwantedSystems", "remainingTracks", "ports", "channelsAmount", "max", "cur", "channelsInfo", "trackNum", "e", "portOffset", "messageTypes", "status", "isGSDrumsOn", "isXGOn", "isGSOn", "isGMOn", "isGM2On", "sysexChannel", "chNum", "channel", "isXG", "isSystemXG", "initialProgram", "p", "realBank", "bankLSB", "bank", "chooseBank", "targetBank", "drumBank", "newBank", "isLSB", "midiControllers", "bankNumber", "intepretation", "parseBankSelect", "has", "ch", "midiChannel", "port", "t", "tNum", "indexToAdd", "programIndex", "programTicks", "targetProgram", "MIDIMessage", "IndexedByteArray", "m", "getGsOn", "newMid", "infoContent", "encoder", "writeRIFFChunkRaw", "today", "getStringBytes", "copyright", "DBNK", "writeLittleEndian", "SpessaSynthGroupEnd", "writeRIFFChunkParts", "getUsedProgramsAndKeys", "soundfont", "mid", "SpessaSynthGroupCollapsed", "consoleColors", "channelsAmount", "max", "cur", "channelPresets", "i", "bank", "system", "updateString", "ch", "chooseBank", "isSystemXG", "existsBank", "existsProgram", "SoundFontManager", "exists", "usedProgramsAndKeys", "SpessaSynthInfo", "eventIndexes", "remainingTracks", "findFirstEventIndex", "index", "ticks", "track", "ports", "c", "trackNum", "event", "messageTypes", "status", "channel", "isLSB", "midiControllers", "parseBankSelect", "isGSDrumsOn", "isXGOn", "sysexChannel", "isDrum", "key", "SpessaSynthGroupEnd", "getNoteTimes", "minDrumLength", "getTempo", "event", "IndexedByteArray", "readBytesAsUintBigEndian", "noteTimes", "events", "e1", "e2", "i", "elapsedTime", "oneTickToSeconds", "eventIndex", "unfinished", "unfinishedNotes", "noteOff", "midiNote", "channel", "noteIndex", "n", "note", "time", "status", "noteTime", "channelNotes", "BasicMIDI", "_BasicMIDI", "MIDISequenceData", "mid", "m", "track", "event", "MIDIMessage", "SpessaSynthGroup", "consoleColors", "karaokeHasTitle", "copyrightComponents", "copyrightDetected", "nameDetected", "loopStart", "loopEnd", "i", "usedChannels", "trackHasVoiceMessages", "e", "j", "messageTypes", "SpessaSynthInfo", "note", "eventText", "readBytesAsString", "readBytesAsUintBigEndian", "checkedText", "getStringBytes", "sanitizeKarLyrics", "trackName", "name", "firstNoteOns", "t", "firstNoteOn", "portOffset", "trackNum", "port", "o", "defaultPort", "message", "c", "formatTitle", "IndexedByteArray", "SpessaSynthGroupEnd", "e1", "e2", "writeMIDI", "modifyMIDI", "applySnapshotToMIDI", "writeRMIDI", "getUsedProgramsAndKeys", "getNoteTimes", "assignMIDIPort", "trackNum", "port", "loadNewSequence", "parsedMidi", "autoPlay", "SpessaSynthInfo", "consoleColors", "SpessaSynthGroupCollapsed", "used", "programBank", "combos", "bank", "program", "preset", "combo", "midiNote", "velocity", "SpessaSynthGroupEnd", "trackIndex", "formatTime", "SpessaSynthWarn", "targetTime", "loadNewSongList", "midiBuffers", "nextSong", "previousSong", "defaultControllerArray", "resetArray", "_playTo", "time", "ticks", "channelsToSave", "pitchBends", "programs", "isCCNonSkippable", "controllerNumber", "midiControllers", "savedControllers", "resetAllControlllers", "chan", "i", "nonResetableCCs", "trackIndex", "event", "info", "getEvent", "channel", "messageTypes", "p", "ccV", "nextEvent", "channelNumber", "value", "index", "bank", "play", "resetTime", "n", "setTimeTicks", "isNotFinished", "_recalculateStartTime", "sendMIDIMessage", "message", "sendMIDICC", "channel", "type", "value", "messageTypes", "sendMIDIProgramChange", "program", "sendMIDIPitchWheel", "MSB", "LSB", "sendMIDIReset", "ch", "midiControllers", "SpessaSynthSequencer", "spessasynthProcessor", "value", "time", "wasPaused", "SpessaSynthWarn", "isFinished", "i", "midiControllers", "note", "messageTypes", "c", "autoPlay", "index", "indexes", "_", "sendMIDIMessage", "sendMIDIReset", "sendMIDICC", "sendMIDIProgramChange", "sendMIDIPitchWheel", "assignMIDIPort", "_processEvent", "_addNewMidiPort", "processTick", "_findFirstEventIndex", "loadNewSequence", "loadNewSongList", "nextSong", "previousSong", "play", "_playTo", "setTimeTicks", "_recalculateStartTime", "tr", "l", "T", "ur", "W", "X", "wr", "Y", "r", "a", "e", "f", "v", "g", "Z", "$", "cr", "j", "hr", "Fr", "_", "i", "c", "A", "k", "b", "m", "U", "x", "n", "o", "M", "L", "gr", "br", "q", "u", "C", "kr", "xr", "yr", "h", "Sr", "fr", "or", "lr", "S", "I", "z", "D", "G", "H", "N", "s", "d", "F", "P", "t", "rr", "Ar", "Mr", "ar", "w", "E", "O", "er", "y", "J", "K", "Ur", "zr", "Q", "p", "nr", "B", "R", "V", "vr", "ir", "Dr", "Tr", "mr", "Er", "pr", "metadataTypes", "referenceTypeIds", "resourceFormatIDs", "formatTypeIDs", "unpackerIDs", "XMFNode", "_XMFNode", "binaryData", "nodeStartIndex", "readVariableLengthQuantity", "headerLength", "readBytes", "remainingHeader", "headerData", "metadataChunk", "fieldSpecifier", "key", "SpessaSynthWarn", "k", "stringLength", "readBytesAsString", "numberOfVersions", "dataLength", "contentsChunk", "unpackersStart", "unpackersLength", "unpackersData", "unpacker", "SpessaSynthGroupEnd", "manufacturerID", "manufacturerInternalID", "compressed", "SpessaSynthInfo", "consoleColors", "IndexedByteArray", "tr", "e", "resourceFormat", "resourceFormatID", "nodeLength", "nodeData", "loadXMF", "midi", "sanityCheck", "SpessaSynthGroup", "version", "fileTypeId", "readBytesAsUintBigEndian", "fileTypeRevisionId", "metadataTableLength", "rootNode", "midiArray", "searchNode", "node", "checkMeta", "xmf", "rmid", "RMIDINFOChunks", "n", "MIDI", "BasicMIDI", "arrayBuffer", "fileName", "SpessaSynthGroupCollapsed", "consoleColors", "binaryData", "IndexedByteArray", "fileByteArray", "initialString", "readBytesAsString", "rmid", "SpessaSynthGroupEnd", "riff", "readRIFFChunk", "startIndex", "currentChunk", "type", "SpessaSynthInfo", "SpessaSynthWarn", "infoChunk", "RMIDINFOChunks", "readLittleEndian", "loadXMF", "headerChunk", "readBytesAsUintBigEndian", "i", "track", "trackChunk", "runningByte", "totalTicks", "readVariableLengthQuantity", "statusByteCheck", "statusByte", "statusByteChannel", "getChannel", "eventDataLength", "dataBytesAmount", "eventData", "event", "MIDIMessage", "chunk", "dataSlice", "SpessaSynthCoreUtils", "consoleColors", "SpessaSynthInfo", "SpessaSynthWarn", "SpessaSynthGroupCollapsed", "SpessaSynthGroupEnd", "readBytesAsUintBigEndian", "readLittleEndian", "readBytesAsString", "readVariableLengthQuantity", "tr", "workerMessageType", "returnMessageType", "SongChangeType", "seqMessageType", "SpessaSynthSequencerReturnMessageType", "WorkerSoundfontManagerMessageType", "workerKeyModifierMessageType", "MIDIData", "MIDISequenceData", "midi", "EXTRA_BANK_ID", "RENDER_BLOCKS_PER_PROGRESS", "BLOCK_SIZE", "renderAudio", "extraBank", "extraBankOffset", "sampleRate", "separateChannels", "loopCount", "additionalTime", "progressCallback", "synthEngine", "seqEngine", "soundBank", "playing", "parsedMid", "playbackRate", "loopStartAbsolute", "loopDuration", "duration", "sampleDuration", "synth", "SpessaSynthProcessor", "EXTRA_BANK_ID", "snapshot", "SynthesizerSnapshot", "seq", "SpessaSynthSequencer", "reverb", "chorus", "out", "sampleDurationNoLastQuantum", "dry", "i", "d", "index", "exportSoundBank", "isSf2", "trim", "compress", "quality", "playing", "sf", "BasicSoundBank", "snapshot", "SynthesizerSnapshot", "mid", "BasicMIDI", "url", "fileName", "compressionFunction", "compressReal", "data", "rate", "bin", "_", "i", "total", "returnMessageType", "extension", "blob", "exportMIDI", "mid", "BasicMIDI", "SynthesizerSnapshot", "e", "file", "blob", "exportRMIDI", "compress", "quality", "metadata", "adjust", "playing", "mid", "BasicMIDI", "fontBuffer", "SynthesizerSnapshot", "e", "font", "loadSoundFont", "compressionFunction", "compressReal", "data", "rate", "soundFontBinary", "_", "i", "total", "returnMessageType", "pictureBuffer", "todayISO8601", "file", "blob", "url", "BLOCK_SIZE", "MAX_CHUNKS_QUEUED", "WorkerSynthEngine", "l", "EXTRA_BANK_ID", "t", "d", "transferable", "e", "byteStep", "data", "byteOffset", "revR", "rev", "chrL", "chrR", "chr", "dry", "i", "dryL", "dryR", "sampleRate", "initialTime", "SpessaSynthProcessor", "SpessaSynthSequencer", "returnMessageType", "p", "n", "v", "postSeq", "type", "m", "SpessaSynthSequencerReturnMessageType", "a", "c", "midiDataList", "s", "MIDIData", "port", "msg", "channel", "channelObject", "SpessaSynthCoreUtils", "seq", "workerMessageType", "loadSoundFont", "chan", "value", "messageData", "seqMessageType", "songMap", "MIDI", "loop", "count", "SongChangeType", "sfManager", "WorkerSoundfontManagerMessageType", "keyMessageType", "man", "keyMessageData", "workerKeyModifierMessageType", "snapshot", "SynthesizerSnapshot", "SpessaSynthLogging", "rendered", "transfer", "r", "arr", "exported", "renderAudio", "exportSoundBank", "exportMIDI", "exportRMIDI", "worker"]
}
