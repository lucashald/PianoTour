{
  "version": 3,
  "sources": ["../src/website/js/manager/custom_synth/worklet_thread/playback_worklet.js"],
  "sourcesContent": ["/**\n * @typedef {[Float32Array, Float32Array]} AudioChunk\n * @typedef {AudioChunk[]} AudioChunks\n */\n\nconst BLOCK_SIZE = 128;\n\n/**\n * An AudioWorkletProcessor that plays back 18 separate streams of stereo audio: reverb, and chorus and 16 dry channels.\n */\n// noinspection JSUnresolvedReference\nclass PlaybackProcessor extends AudioWorkletProcessor\n{\n    \n    \n    /** @type {Float32Array[]} */\n    data = [];\n    \n    requestUpdate = false;\n    \n    /**\n     *\n     * @type {MessagePort}\n     */\n    sentPort;\n    \n    constructor()\n    {\n        super();\n        \n        /**\n         * @param e {MessageEvent}\n         */\n        this.port.onmessage = (e) =>\n        {\n            if (e.ports.length)\n            {\n                const sentPort = e.ports[0];\n                this.sentPort = sentPort;\n                sentPort.onmessage = (e) =>\n                {\n                    this.requestUpdate = true;\n                    if (!e.data)\n                    {\n                        // worker has nothing to do, but requested the postMessage update\n                        return;\n                    }\n                    this.data.push(e.data);\n                };\n                \n            }\n        };\n    }\n    \n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * @param _inputs {[Float32Array, Float32Array][]}\n     * @param outputs {[Float32Array, Float32Array][]}\n     * @returns {boolean}\n     */\n    process(_inputs, outputs)\n    {\n        const data = this.data.shift();\n        if (this.requestUpdate)\n        {\n            this.sentPort.postMessage(this.data.length);\n            this.requestUpdate = false;\n        }\n        if (!data)\n        {\n            return true;\n        }\n        let offset = 0;\n        // decode the data nicely\n        for (let i = 0; i < 18; i++)\n        {\n            outputs[i][0].set(data.subarray(offset, offset + BLOCK_SIZE));\n            offset += BLOCK_SIZE;\n            outputs[i][1].set(data.subarray(offset, offset + BLOCK_SIZE));\n            offset += BLOCK_SIZE;\n        }\n        // keep it online\n        return true;\n    }\n}\n\nconsole.info(\"Registered JS processor\");\n// noinspection JSUnresolvedReference\nregisterProcessor(\"playback-processor\", PlaybackProcessor);\n"],
  "mappings": "AAWA,IAAMA,EAAN,cAAgC,qBAChC,CAII,KAAO,CAAC,EAER,cAAgB,GAMhB,SAEA,aACA,CACI,MAAM,EAKN,KAAK,KAAK,UAAaC,GACvB,CACI,GAAIA,EAAE,MAAM,OACZ,CACI,IAAMC,EAAWD,EAAE,MAAM,CAAC,EAC1B,KAAK,SAAWC,EAChBA,EAAS,UAAaD,GACtB,CACI,KAAK,cAAgB,GAChBA,EAAE,MAKP,KAAK,KAAK,KAAKA,EAAE,IAAI,CACzB,CAEJ,CACJ,CACJ,CAQA,QAAQE,EAASC,EACjB,CACI,IAAMC,EAAO,KAAK,KAAK,MAAM,EAM7B,GALI,KAAK,gBAEL,KAAK,SAAS,YAAY,KAAK,KAAK,MAAM,EAC1C,KAAK,cAAgB,IAErB,CAACA,EAED,MAAO,GAEX,IAAIC,EAAS,EAEb,QAASC,EAAI,EAAGA,EAAI,GAAIA,IAEpBH,EAAQG,CAAC,EAAE,CAAC,EAAE,IAAIF,EAAK,SAASC,EAAQA,EAAS,GAAU,CAAC,EAC5DA,GAAU,IACVF,EAAQG,CAAC,EAAE,CAAC,EAAE,IAAIF,EAAK,SAASC,EAAQA,EAAS,GAAU,CAAC,EAC5DA,GAAU,IAGd,MAAO,EACX,CACJ,EAEA,QAAQ,KAAK,yBAAyB,EAEtC,kBAAkB,qBAAsBN,CAAiB",
  "names": ["PlaybackProcessor", "e", "sentPort", "_inputs", "outputs", "data", "offset", "i"]
}
